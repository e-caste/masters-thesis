WEBVTT

00:00:00.000 --> 00:00:02.520
The following content is
provided under a Creative

00:00:02.520 --> 00:00:03.970
Commons license.

00:00:03.970 --> 00:00:06.360
Your support will help
MIT OpenCourseWare

00:00:06.360 --> 00:00:10.660
continue to offer high-quality
educational resources for free.

00:00:10.660 --> 00:00:13.350
To make a donation or
view additional materials

00:00:13.350 --> 00:00:17.190
from hundreds of MIT courses,
visit MIT OpenCourseWare

00:00:17.190 --> 00:00:18.400
at ocw.mit.edu.

00:00:28.220 --> 00:00:30.680
GEORGE VERGHESE: I
want to actually spend

00:00:30.680 --> 00:00:33.500
a little time, not
too much, talking

00:00:33.500 --> 00:00:35.690
about discrete-time
Fourier transforms

00:00:35.690 --> 00:00:39.290
versus discrete-time
Fourier series.

00:00:39.290 --> 00:00:41.210
You don't have any
basis for comparison,

00:00:41.210 --> 00:00:43.850
but I think the way we've
told the spectral content

00:00:43.850 --> 00:00:47.690
story this term is quite a bit
simpler than in previous terms,

00:00:47.690 --> 00:00:50.390
but that leaves you puzzling
over chunks of the notes

00:00:50.390 --> 00:00:54.050
and practice problems that refer
to the discrete-time Fourier

00:00:54.050 --> 00:00:57.150
series and to periodic
signals and so on.

00:00:57.150 --> 00:00:59.510
So I just wanted to give you
a little insight into that,

00:00:59.510 --> 00:01:03.230
and then we'll go on to
talk about modulation

00:01:03.230 --> 00:01:05.480
and demodulation some more.

00:01:05.480 --> 00:01:11.360
OK, so we've seen that
our interest is generally

00:01:11.360 --> 00:01:18.710
in signals of finite duration
because practical computation

00:01:18.710 --> 00:01:19.850
has to deal with that.

00:01:23.280 --> 00:01:26.810
And so we've got
signals of this form--

00:01:26.810 --> 00:01:30.200
0 outside of some window,
and really without loss

00:01:30.200 --> 00:01:34.250
of generality, I can take
it to be some window from 0

00:01:34.250 --> 00:01:35.150
to L minus 1.

00:01:35.150 --> 00:01:36.860
If the signal shifts
in time, we know

00:01:36.860 --> 00:01:39.260
what to do with the
Fourier transform.

00:01:39.260 --> 00:01:41.600
Can you hear me all right,
by the way, at the back?

00:01:41.600 --> 00:01:44.210
Yeah, OK.

00:01:44.210 --> 00:01:47.330
All right so if we've
got non-zero values only

00:01:47.330 --> 00:01:49.310
over a finite range,
then the computation

00:01:49.310 --> 00:01:52.430
of the discrete-time
Fourier transform boils

00:01:52.430 --> 00:01:55.640
down to a simple
finite computation.

00:01:55.640 --> 00:01:58.850
Now, what we'll typically
do is give ourselves

00:01:58.850 --> 00:02:01.070
a little more flexibility.

00:02:01.070 --> 00:02:03.770
Since the signal is 0 outside
of this interval anyway,

00:02:03.770 --> 00:02:06.050
we might sometimes
allow ourselves

00:02:06.050 --> 00:02:09.680
to think of the signal as
being longer, but still

00:02:09.680 --> 00:02:11.660
with zeros out here.

00:02:11.660 --> 00:02:16.520
So you might come all the
way up to some P minus 1.

00:02:16.520 --> 00:02:20.360
And what we're saying is, this
is the window of interest.

00:02:20.360 --> 00:02:23.150
Everywhere outside of this
window, the signal is 0.

00:02:23.150 --> 00:02:25.730
Now, the signal can be 0 at
various points inside here,

00:02:25.730 --> 00:02:28.670
as well, but what we're saying
is, outside of this interval,

00:02:28.670 --> 00:02:30.380
the signal is 0.

00:02:30.380 --> 00:02:32.630
Therefore, I only need
to compute this from 0

00:02:32.630 --> 00:02:36.230
to P minus 1, all right?

00:02:36.230 --> 00:02:39.320
And the nice thing
is, it turns out

00:02:39.320 --> 00:02:43.040
that you can actually recover
the time-domain signals

00:02:43.040 --> 00:02:47.450
from the samples of the
DTFT through the formula

00:02:47.450 --> 00:02:48.900
on the right side.

00:02:48.900 --> 00:02:50.690
So what we're doing
is we're actually

00:02:50.690 --> 00:02:54.380
computing the DTFT
just at isolated

00:02:54.380 --> 00:02:57.710
points on the axis
between minus pi and pi,

00:02:57.710 --> 00:03:01.430
just P, capital P, points.

00:03:01.430 --> 00:03:03.935
Or you can think of them as
points on the unit circle that

00:03:03.935 --> 00:03:05.810
correspond to each of
those exponentials that

00:03:05.810 --> 00:03:10.820
appear in the Fourier
transform definition.

00:03:10.820 --> 00:03:14.420
And we then recover the
time-domain signals just

00:03:14.420 --> 00:03:16.280
from those samples, OK?

00:03:16.280 --> 00:03:19.640
And really what's driving this
is the fact that the signal is

00:03:19.640 --> 00:03:22.180
0 outside of a finite window.

00:03:25.100 --> 00:03:25.850
OK.

00:03:25.850 --> 00:03:28.017
We'll also typically-- and
if you look in the books,

00:03:28.017 --> 00:03:29.450
you'll see this, as well--

00:03:29.450 --> 00:03:33.560
this notation often gets
simplified, so x of omega sub k

00:03:33.560 --> 00:03:35.540
gets simplified to just x sub k.

00:03:35.540 --> 00:03:41.240
It's the k-th
spectral coefficient.

00:03:41.240 --> 00:03:44.200
All right, so all that is good.

00:03:48.850 --> 00:03:51.630
And we have this nice algorithm
for computing things, which

00:03:51.630 --> 00:03:53.920
is the fast Fourier transform.

00:03:53.920 --> 00:03:55.980
So we talked about
how that significantly

00:03:55.980 --> 00:03:58.410
reduces computation.

00:03:58.410 --> 00:04:00.240
Now, there are properties
of these formulas

00:04:00.240 --> 00:04:02.585
that you can explore, and
I have some listed here.

00:04:02.585 --> 00:04:03.960
I'm not going to
go through them.

00:04:03.960 --> 00:04:05.585
They're essentially
the same properties

00:04:05.585 --> 00:04:08.280
we've seen for the DTFT.

00:04:08.280 --> 00:04:12.870
I want to focus more on this
formula for reconstruction

00:04:12.870 --> 00:04:18.399
of the time signal from
the spectral coefficients.

00:04:18.399 --> 00:04:21.269
By the way, in a previous
writing of this formula,

00:04:21.269 --> 00:04:25.020
I had written the upper
limit as P over 2.

00:04:25.020 --> 00:04:26.700
It's actually P over
2 minus 1, so I'll

00:04:26.700 --> 00:04:29.080
fix that in the earlier slides.

00:04:29.080 --> 00:04:33.840
OK, so what you're guaranteed is
that if you apply that formula,

00:04:33.840 --> 00:04:38.790
you will recover every signal
value in this window of length

00:04:38.790 --> 00:04:44.070
capital P. But what happens
outside of that window?

00:04:44.070 --> 00:04:46.470
Well, if you look
at this expression,

00:04:46.470 --> 00:04:50.730
is the right-hand
side here periodic?

00:04:50.730 --> 00:04:53.970
You should suspect that it
is because of the e to the j

00:04:53.970 --> 00:04:56.460
something n is there, right?

00:04:56.460 --> 00:04:59.310
If you look at the
definition of omega sub k

00:04:59.310 --> 00:05:03.840
and look at each of these terms,
it turns out that each of these

00:05:03.840 --> 00:05:09.240
will repeat periodically
with period 2 pi.

00:05:09.240 --> 00:05:12.300
Sorry, with period-- let's see.

00:05:12.300 --> 00:05:14.520
I've said it badly.

00:05:14.520 --> 00:05:18.130
This whole term will repeat
when n increases by capital P,

00:05:18.130 --> 00:05:18.630
all right?

00:05:18.630 --> 00:05:20.420
So let me write it down.

00:05:28.660 --> 00:05:30.040
And why is that?

00:05:30.040 --> 00:05:37.630
Well, omega sub
k is 2 pi over P.

00:05:37.630 --> 00:05:39.940
So if you increase
time by capital P,

00:05:39.940 --> 00:05:41.890
you're going to increase
the exponent by 2 pi,

00:05:41.890 --> 00:05:44.470
and you've got the same
exponential back again.

00:05:44.470 --> 00:05:48.610
And you can do this for any
integer multiple of capital P.

00:05:48.610 --> 00:05:51.753
So what that tells you
is that the expression

00:05:51.753 --> 00:05:53.170
on the right-hand
side is actually

00:05:53.170 --> 00:05:56.180
going to repeat periodically
outside of this interval.

00:05:56.180 --> 00:06:00.190
So it's fine to use
this formula to recover

00:06:00.190 --> 00:06:03.310
the values in this
window, but if you start

00:06:03.310 --> 00:06:05.900
to evaluate this formula
outside of that window,

00:06:05.900 --> 00:06:09.040
you're going to start getting
this whole thing repeated

00:06:09.040 --> 00:06:11.467
periodically, so
you're going to get--

00:06:11.467 --> 00:06:12.550
at this point you'll get--

00:06:21.900 --> 00:06:25.980
and so on, OK?

00:06:25.980 --> 00:06:28.080
So the formula doesn't
know what to do except

00:06:28.080 --> 00:06:29.550
to replicate periodically.

00:06:29.550 --> 00:06:32.400
It's up to you to know
that this formula is

00:06:32.400 --> 00:06:34.560
no good outside of this window.

00:06:34.560 --> 00:06:35.268
All right?

00:06:35.268 --> 00:06:37.060
There's another way to
think of it, though,

00:06:37.060 --> 00:06:38.560
which is that this
formula gives you

00:06:38.560 --> 00:06:42.230
a nice, compact representation
for a periodic signal.

00:06:42.230 --> 00:06:44.850
So if you started off
with a periodic signal,

00:06:44.850 --> 00:06:49.230
here's a way to represent it
as just a sum of capital P

00:06:49.230 --> 00:06:51.870
exponentials, and that's
what a Fourier series is.

00:06:51.870 --> 00:06:55.140
So you've seen in
1803 or other places,

00:06:55.140 --> 00:06:57.507
in continuous time I
imagine, that if you

00:06:57.507 --> 00:06:59.340
had a periodic signal
you could represent it

00:06:59.340 --> 00:07:01.320
with a Fourier series.

00:07:01.320 --> 00:07:03.990
This is actually
a Fourier series

00:07:03.990 --> 00:07:07.527
for this periodic signal.

00:07:07.527 --> 00:07:09.360
But if you know that
your action of interest

00:07:09.360 --> 00:07:11.728
is all in this finite
interval within one period,

00:07:11.728 --> 00:07:13.770
then you can actually use
the Fourier series just

00:07:13.770 --> 00:07:15.960
to study what goes on
in that one interval

00:07:15.960 --> 00:07:17.997
without worrying
about what's outside.

00:07:17.997 --> 00:07:19.830
And that's really what
we've done this term,

00:07:19.830 --> 00:07:22.230
is we've kind of ignored
periodic signals.

00:07:22.230 --> 00:07:26.160
We've said all the attention
is in a finite interval.

00:07:26.160 --> 00:07:29.820
Within that interval, we have
this Fourier representation.

00:07:29.820 --> 00:07:35.370
It's easily computed by the FFT,
and everything works nicely.

00:07:35.370 --> 00:07:39.720
So just to give a concrete
illustration of how we end up

00:07:39.720 --> 00:07:42.150
applying this in a
particular situation that

00:07:42.150 --> 00:07:47.580
should be familiar, if I had an
input going into an LTI system

00:07:47.580 --> 00:07:52.200
producing an output, and if the
input was non-zero only from 0

00:07:52.200 --> 00:07:57.000
to, let's say some n sub
x, and if the unit sample

00:07:57.000 --> 00:08:02.340
response of the system was
zero only from 0 to n sub h,

00:08:02.340 --> 00:08:04.110
is there a particular
interval of time

00:08:04.110 --> 00:08:06.300
that you can
guarantee for me will

00:08:06.300 --> 00:08:09.990
contain all the non-zero
values of the output?

00:08:09.990 --> 00:08:13.320
I want you to find for
me an interval outside

00:08:13.320 --> 00:08:15.690
of which the output
is guaranteed to be 0.

00:08:30.440 --> 00:08:33.460
Anybody?

00:08:33.460 --> 00:08:34.749
Yeah?

00:08:34.749 --> 00:08:36.083
AUDIENCE: [INAUDIBLE]

00:08:36.083 --> 00:08:37.250
GEORGE VERGHESE: Yeah, good.

00:08:43.418 --> 00:08:44.960
There are many ways
to think of this.

00:08:47.570 --> 00:08:55.240
One is to say, well, the
input value at time 0

00:08:55.240 --> 00:08:59.680
fires off a unit
sample of duration,

00:08:59.680 --> 00:09:03.790
goes from 0 to n sub h, and
then the input value at time 1

00:09:03.790 --> 00:09:08.200
fires off a unit sample response
that starts one time later,

00:09:08.200 --> 00:09:09.020
and so on.

00:09:09.020 --> 00:09:12.370
So each of these fires off
a unit sample response.

00:09:12.370 --> 00:09:15.280
Well, you've got
inputs extending from 0

00:09:15.280 --> 00:09:17.800
to n x, and so
you're going to have

00:09:17.800 --> 00:09:22.083
an output that extends from
0 to n x plus n h, all right?

00:09:22.083 --> 00:09:24.250
So you're guaranteed that
all the action of interest

00:09:24.250 --> 00:09:26.380
happens in this finite interval.

00:09:26.380 --> 00:09:31.750
And given that that's the
case, you can actually--

00:09:31.750 --> 00:09:34.090
whoops, what happened?

00:09:36.720 --> 00:09:40.230
You can actually do this kind
of spectral representation,

00:09:40.230 --> 00:09:42.760
use the FFT, and all of that.

00:09:42.760 --> 00:09:45.810
You're going to just work
on a finite interval, 0

00:09:45.810 --> 00:09:51.450
to P minus 1, defined by that
or greater than that, OK?

00:09:51.450 --> 00:09:54.090
So this is actually one of the
most frequent uses of the FFT.

00:09:54.090 --> 00:09:57.360
It's to study systems where
all the action happens

00:09:57.360 --> 00:10:00.003
in a finite window and
you know a priori what

00:10:00.003 --> 00:10:01.920
the length of that window
is, and you can then

00:10:01.920 --> 00:10:03.517
do all your computations there.

00:10:03.517 --> 00:10:05.100
And you never look
outside that window

00:10:05.100 --> 00:10:07.290
because you've already
guaranteed that everything

00:10:07.290 --> 00:10:08.892
of interest happens there.

00:10:08.892 --> 00:10:10.350
But when you read
the notes, you'll

00:10:10.350 --> 00:10:14.110
find it's essentially
the same story,

00:10:14.110 --> 00:10:17.852
but when you talk
about Fourier series

00:10:17.852 --> 00:10:19.810
you're actually talking
about the whole signal,

00:10:19.810 --> 00:10:21.360
the periodic signal, all right?

00:10:25.128 --> 00:10:27.420
One bit of notation, also,
as you're reading the notes,

00:10:27.420 --> 00:10:29.010
just to go back a second here.

00:10:31.840 --> 00:10:33.670
We've been working
entirely in terms

00:10:33.670 --> 00:10:37.090
of these samples of the DTFT.

00:10:37.090 --> 00:10:39.610
When you're thinking of
Fourier series, when you're

00:10:39.610 --> 00:10:42.310
thinking of this as
a Fourier series,

00:10:42.310 --> 00:10:45.760
it's typical to write
X omega k over P

00:10:45.760 --> 00:10:48.170
as just the Fourier
coefficient, A sub k.

00:10:48.170 --> 00:10:50.620
So you'll see in the
notes an A sub k.

00:10:50.620 --> 00:10:54.100
That's just a normalized
version of the Fourier transform

00:10:54.100 --> 00:10:56.860
sample, OK?

00:10:56.860 --> 00:10:57.700
All right.

00:10:57.700 --> 00:10:59.500
That's as much as I
wanted to say on this,

00:10:59.500 --> 00:11:05.560
so let's get back to
talking about modulation

00:11:05.560 --> 00:11:08.530
and demodulation.

00:11:08.530 --> 00:11:10.480
If you have questions
on what I talked about,

00:11:10.480 --> 00:11:14.210
you can bring them
up in recitation.

00:11:14.210 --> 00:11:16.420
All right, so just to
review where we are.

00:11:16.420 --> 00:11:19.435
We've got some signal,
x of n at baseband.

00:11:22.480 --> 00:11:24.880
Baseband just means that
its frequency content

00:11:24.880 --> 00:11:26.290
is centered around zero.

00:11:26.290 --> 00:11:30.220
You've not done any
modulation or shifting yet.

00:11:30.220 --> 00:11:35.290
You've been allotted some
part of the frequency axis

00:11:35.290 --> 00:11:37.720
to do your transmission in
because someone's told you,

00:11:37.720 --> 00:11:40.120
perhaps, that the medium
that you're going to use

00:11:40.120 --> 00:11:42.580
can only transmit in
that range, or the FCC

00:11:42.580 --> 00:11:46.370
has decreed that you're only
going to use that region.

00:11:46.370 --> 00:11:49.450
So you want to send
that signal somehow

00:11:49.450 --> 00:11:51.730
in another frequency band.

00:11:51.730 --> 00:11:53.530
So modulation was
a process by which

00:11:53.530 --> 00:11:57.070
we converted up to
some carrier frequency,

00:11:57.070 --> 00:11:59.500
and then demodulation was
what you did with the receiver

00:11:59.500 --> 00:12:01.230
to get back down.

00:12:01.230 --> 00:12:05.090
So just to look at that
in a little more detail.

00:12:05.090 --> 00:12:08.740
This is the modulation process
we talked about last time.

00:12:08.740 --> 00:12:13.420
You've got a time-domain
signal, your information signal.

00:12:13.420 --> 00:12:15.760
You multiply it by
the cosine to get

00:12:15.760 --> 00:12:18.990
an amplitude-modulated
transmitted signal.

00:12:18.990 --> 00:12:22.870
So t of n is the signal
that you transmit, OK?

00:12:22.870 --> 00:12:24.530
There are other names for this.

00:12:24.530 --> 00:12:26.590
This process of
multiplying a signal

00:12:26.590 --> 00:12:28.840
by a cosine at a
particular frequency

00:12:28.840 --> 00:12:30.700
is referred to as heterodyning.

00:12:30.700 --> 00:12:34.840
That's a term from the earliest
days of Amplitude Modulation,

00:12:34.840 --> 00:12:40.000
I think invented by Fessenden,
who also invented AM,

00:12:40.000 --> 00:12:45.380
and of course it's specifically
amplitude modulation for us.

00:12:45.380 --> 00:12:48.960
All right, so just
to think spectrally,

00:12:48.960 --> 00:12:51.370
we had a simplified version
of this picture last time,

00:12:51.370 --> 00:12:56.530
but let's first assume that this
signal has some spectrum, which

00:12:56.530 --> 00:12:58.660
is shown by a cartoon here.

00:12:58.660 --> 00:13:01.040
I'm assuming a real signal.

00:13:01.040 --> 00:13:05.200
So we know that the spectrum
has a real part that's even

00:13:05.200 --> 00:13:07.180
and an imaginary
part that's odd,

00:13:07.180 --> 00:13:10.180
and that's what's shown for
you here on this figure, OK?

00:13:10.180 --> 00:13:12.430
So we're going to track
the spectrum of the signal

00:13:12.430 --> 00:13:16.030
by tracking the real and
imaginary parts separately

00:13:16.030 --> 00:13:18.490
because the spectrum is in
general a complex function

00:13:18.490 --> 00:13:20.627
of frequency.

00:13:20.627 --> 00:13:22.210
We've seen last time
what happens when

00:13:22.210 --> 00:13:23.470
you multiply by the cosine.

00:13:23.470 --> 00:13:25.540
You take the spectrum,
and you replicate it

00:13:25.540 --> 00:13:27.800
at the locations of the carrier.

00:13:27.800 --> 00:13:31.240
So if your carrier
frequency is omega c,

00:13:31.240 --> 00:13:33.910
here's your frequency
band, going from minus pi

00:13:33.910 --> 00:13:36.610
somewhere there to
plus pi somewhere here.

00:13:36.610 --> 00:13:41.660
You've got a plus and minus
omega c, the carrier frequency.

00:13:41.660 --> 00:13:43.540
So what happens
when you modulate

00:13:43.540 --> 00:13:46.780
is you take the spectrum
and you plunk it down

00:13:46.780 --> 00:13:50.050
on plus omega c
and minus omega c,

00:13:50.050 --> 00:13:52.340
and you scale by 1/2, all right?

00:13:52.340 --> 00:13:54.880
So if the real part
had amplitude a before,

00:13:54.880 --> 00:13:58.000
it now has amplitude a over
2, and the imaginary part,

00:13:58.000 --> 00:13:59.260
similarly.

00:13:59.260 --> 00:14:01.690
I haven't drawn these to
scale, but hopefully the labels

00:14:01.690 --> 00:14:03.790
are clear enough.

00:14:03.790 --> 00:14:05.530
OK, so the modulation
is not simple

00:14:05.530 --> 00:14:08.650
when you're thinking of what it
does in the frequency domain.

00:14:12.150 --> 00:14:18.500
Now, it is not simple, but this
picture is a little deceptive,

00:14:18.500 --> 00:14:20.670
perhaps, because I made an
implicit assumption here.

00:14:20.670 --> 00:14:23.060
Otherwise, the picture
would be a bit messier.

00:14:23.060 --> 00:14:27.200
What am I relying on here
to get this simple picture?

00:14:27.200 --> 00:14:28.020
Yeah?

00:14:28.020 --> 00:14:28.520
Sorry?

00:14:28.520 --> 00:14:29.467
AUDIENCE: [INAUDIBLE]

00:14:29.467 --> 00:14:30.550
GEORGE VERGHESE: Centered?

00:14:30.550 --> 00:14:31.550
What's centered at zero?

00:14:31.550 --> 00:14:33.280
Oh, the spectrum here?

00:14:33.280 --> 00:14:35.320
OK, yeah, the spectrum
centered at here

00:14:35.320 --> 00:14:37.880
gives me a simple picture, yeah.

00:14:37.880 --> 00:14:40.230
AUDIENCE: [INAUDIBLE]

00:14:40.230 --> 00:14:41.670
GEORGE VERGHESE: OK, exactly.

00:14:41.670 --> 00:14:43.830
You see, when I
drew this here, you

00:14:43.830 --> 00:14:45.780
can still recognize
the triangles that

00:14:45.780 --> 00:14:47.580
came from over there.

00:14:47.580 --> 00:14:50.790
But if the baseband signal
had a frequency content that

00:14:50.790 --> 00:14:55.020
extended way over, then
the replication that I have

00:14:55.020 --> 00:14:57.720
here would actually leak
into the replication

00:14:57.720 --> 00:15:00.280
that I have there, and I get
a more complicated picture,

00:15:00.280 --> 00:15:00.780
all right?

00:15:00.780 --> 00:15:02.640
So if you want the
simple picture,

00:15:02.640 --> 00:15:05.220
you actually have to limit
the frequency content

00:15:05.220 --> 00:15:09.990
of your baseband signal, OK?

00:15:09.990 --> 00:15:12.900
You can see here,
if the signal only

00:15:12.900 --> 00:15:16.410
extends omega c on
either side, then I'm OK.

00:15:16.410 --> 00:15:19.630
The two replications will
not smear into each other,

00:15:19.630 --> 00:15:20.130
all right?

00:15:20.130 --> 00:15:23.640
So we need a limit on
the frequency content.

00:15:23.640 --> 00:15:25.470
Now, the specific
limit that you have

00:15:25.470 --> 00:15:27.580
depends on the application.

00:15:27.580 --> 00:15:29.580
We'll see later when you
do frequency-division

00:15:29.580 --> 00:15:30.955
multiplexing,
where you're trying

00:15:30.955 --> 00:15:34.860
to put many different signals
in the same general frequency

00:15:34.860 --> 00:15:37.090
band, that the restrictions
might be different.

00:15:37.090 --> 00:15:38.970
But the basic idea
is this, that you

00:15:38.970 --> 00:15:42.090
want any replication
of your signal,

00:15:42.090 --> 00:15:44.640
if you're going to extract it
later on downstream somewhere,

00:15:44.640 --> 00:15:49.830
you want the replication to not
be corrupted by images of it

00:15:49.830 --> 00:15:54.930
somewhere else, or images
of some other signal.

00:15:54.930 --> 00:15:57.830
So actually, the example
that I showed you last time

00:15:57.830 --> 00:15:59.780
wasn't perfect in
that regard, right?

00:15:59.780 --> 00:16:03.410
Remember, this was the spectrum
of our typical baseband.

00:16:06.940 --> 00:16:13.180
We had 256 samples,
like this, and then 0's.

00:16:13.180 --> 00:16:14.920
And we looked at the
spectral content.

00:16:14.920 --> 00:16:17.560
It was given by a
sinc-like function,

00:16:17.560 --> 00:16:22.330
and this is the spectral content
magnitude after modulation,

00:16:22.330 --> 00:16:24.530
and therefore it's
the two replicas.

00:16:24.530 --> 00:16:27.920
I'd modulated this onto
a 1,000 Hertz carrier.

00:16:27.920 --> 00:16:29.450
So this is what we saw.

00:16:29.450 --> 00:16:32.200
And you can see here that
there's funny stuff going on

00:16:32.200 --> 00:16:35.560
in here because the tails
of the two replications

00:16:35.560 --> 00:16:37.750
are merging with each other, OK?

00:16:37.750 --> 00:16:40.150
So it's not perfectly
symmetrical around here.

00:16:40.150 --> 00:16:44.210
And actually, these sinc-like
functions decay very slowly,

00:16:44.210 --> 00:16:46.840
so even though it won't
be visible to your eye,

00:16:46.840 --> 00:16:49.150
there's a considerable
amount of this

00:16:49.150 --> 00:16:53.260
that's actually due to
the replica out here, OK?

00:16:53.260 --> 00:16:55.030
So this case doesn't
quite satisfy

00:16:55.030 --> 00:16:57.820
that band-limited condition.

00:16:57.820 --> 00:16:59.620
If you shape your
pulse a little bit more

00:16:59.620 --> 00:17:02.530
carefully, for instance, if
you had more rounded edges,

00:17:02.530 --> 00:17:05.140
then you can pull in
the frequency content,

00:17:05.140 --> 00:17:07.359
and you might do a
better approximation

00:17:07.359 --> 00:17:10.210
to keeping the replica separate.

00:17:10.210 --> 00:17:12.640
Or you might use a
higher carrier frequency.

00:17:12.640 --> 00:17:15.430
That pull them apart and
have less interference,

00:17:15.430 --> 00:17:19.650
but it's certainly an issue
that you need to think about.

00:17:19.650 --> 00:17:21.560
OK.

00:17:21.560 --> 00:17:23.670
So what happens at the receiver?

00:17:23.670 --> 00:17:27.770
We already saw this briefly
at the end of lecture.

00:17:27.770 --> 00:17:30.870
If what you receive is what
you transmit-- in other words,

00:17:30.870 --> 00:17:36.020
if it's the signal, then
extracting the x of n is easy.

00:17:36.020 --> 00:17:37.520
We said what you
do is you basically

00:17:37.520 --> 00:17:40.400
do the same heterodyning
again, right?

00:17:40.400 --> 00:17:42.260
You take the signal
that comes in,

00:17:42.260 --> 00:17:45.890
multiply it by cosine of
the carrier frequency.

00:17:45.890 --> 00:17:49.460
That's your signal
after demodulation,

00:17:49.460 --> 00:17:53.240
and a little bit of algebra
shows that you actually

00:17:53.240 --> 00:17:56.040
have your original
signal of interest,

00:17:56.040 --> 00:17:59.300
and then something that's
your original signal

00:17:59.300 --> 00:18:03.473
modulated by a cosine at
twice the carrier frequency.

00:18:03.473 --> 00:18:05.390
So now there's some hope
that you can actually

00:18:05.390 --> 00:18:06.500
pull these things apart.

00:18:09.350 --> 00:18:11.400
All right.

00:18:11.400 --> 00:18:13.440
So one question,
of course, is what

00:18:13.440 --> 00:18:16.180
does the spectrum of this look
like, and we'll look at that.

00:18:16.180 --> 00:18:19.020
And then the other
question is, again,

00:18:19.020 --> 00:18:21.990
what constraint on the
bandwidth of the signal

00:18:21.990 --> 00:18:25.980
that you originally sent
from the transmitter--

00:18:25.980 --> 00:18:29.260
what constraint is
needed to recover?

00:18:29.260 --> 00:18:36.040
So let's look at the spectrum
of the received signal first.

00:18:36.040 --> 00:18:38.560
We're assuming the
channel is not distorting

00:18:38.560 --> 00:18:41.110
and that we don't have
noise, so what's transmitted

00:18:41.110 --> 00:18:42.950
is also what's received.

00:18:42.950 --> 00:18:44.830
So here is the spectrum
of what's received.

00:18:44.830 --> 00:18:47.290
It's exactly the spectrum I
showed you earlier, right?

00:18:47.290 --> 00:18:51.340
It was the baseband spectrum,
but replicated at plus omega c

00:18:51.340 --> 00:18:52.510
and minus omega c.

00:18:52.510 --> 00:18:55.030
So this is what comes
in off the channel,

00:18:55.030 --> 00:18:57.520
assuming no distortion.

00:18:57.520 --> 00:18:59.020
And I'm going to
multiply it again

00:18:59.020 --> 00:19:01.220
by a cosine at the
carrier frequency.

00:19:01.220 --> 00:19:02.890
So what is it that I have to do?

00:19:02.890 --> 00:19:05.710
I take this entire
spectrum, plunk down

00:19:05.710 --> 00:19:11.740
a copy centered at plus
omega c, and another copy

00:19:11.740 --> 00:19:12.880
at minus omega c.

00:19:12.880 --> 00:19:16.600
Because my demodulation,
just to remind you,

00:19:16.600 --> 00:19:19.570
my demodulation
is multiplication

00:19:19.570 --> 00:19:21.850
by cosine omega c again.

00:19:21.850 --> 00:19:24.860
It's a multiplication
by cosine omega c.

00:19:24.860 --> 00:19:28.990
Well, we know what that does
in the transform domain, so

00:19:28.990 --> 00:19:31.840
here is the picture.

00:19:31.840 --> 00:19:34.750
And the piece that we
want is the center piece.

00:19:34.750 --> 00:19:37.150
So what we need to
do is filter it out

00:19:37.150 --> 00:19:40.990
of what's resulted
from the heterodyning.

00:19:40.990 --> 00:19:43.750
So what kind of cutoff frequency
would you-- what kind of filter

00:19:43.750 --> 00:19:47.510
and what kind of cutoff
frequency would you want?

00:19:47.510 --> 00:19:51.025
Any suggestions?

00:19:51.025 --> 00:19:52.862
AUDIENCE: [INAUDIBLE]

00:19:52.862 --> 00:19:55.320
GEORGE VERGHESE: Sorry, I didn't
hear where that came from.

00:19:55.320 --> 00:19:55.938
Yeah?

00:19:55.938 --> 00:19:56.980
AUDIENCE: Lowpass filter?

00:19:56.980 --> 00:19:57.980
GEORGE VERGHESE: Lowpass filter.

00:19:57.980 --> 00:19:59.830
So, for instance, an
ideal lowpass filter

00:19:59.830 --> 00:20:00.760
would be great, right?

00:20:00.760 --> 00:20:08.870
If you had a filter with a
frequency-domain characteristic

00:20:08.870 --> 00:20:14.550
that was perfectly flat in
some region and then cut off,

00:20:14.550 --> 00:20:17.147
let me say, at some
frequency omega 0,

00:20:17.147 --> 00:20:19.730
so something like that-- well,
actually, we want a factor of 2

00:20:19.730 --> 00:20:25.920
to compensate for the
demodulation process,

00:20:25.920 --> 00:20:29.332
if we want to get exactly
the same thing back.

00:20:29.332 --> 00:20:31.040
So this would be in
the frequency domain.

00:20:34.890 --> 00:20:36.300
Ideal lowpass filter.

00:20:42.270 --> 00:20:44.580
And we know how to get
approximations to this, right?

00:20:44.580 --> 00:20:47.490
Because this is not
really implementable.

00:20:47.490 --> 00:20:49.950
If you wanted to implement
this, what kind of unit sample

00:20:49.950 --> 00:20:52.680
response would you need?

00:20:52.680 --> 00:20:54.840
A sinc function, right,
but extending infinitely

00:20:54.840 --> 00:20:56.170
in both directions.

00:20:56.170 --> 00:20:59.070
But we could truncate that
sinc, and we could shift it

00:20:59.070 --> 00:21:03.330
forwards in time to get a causal
approximation to this filter.

00:21:03.330 --> 00:21:05.160
And the resulting
frequency response

00:21:05.160 --> 00:21:08.670
will, if you plot it out, if
you compute it and plot it,

00:21:08.670 --> 00:21:10.860
won't look too
different from this.

00:21:10.860 --> 00:21:13.800
If I plotted the
magnitude, you'll

00:21:13.800 --> 00:21:19.550
get-- it's something that's
a plausible approximation

00:21:19.550 --> 00:21:24.580
to this lowpass filter.

00:21:24.580 --> 00:21:26.400
But what cutoff
frequency would you want?

00:21:26.400 --> 00:21:28.150
What omega 0 should you pick?

00:21:34.620 --> 00:21:36.096
Any suggestions?

00:21:39.290 --> 00:21:40.280
Anybody?

00:21:40.280 --> 00:21:41.780
We're trying to
extract this piece.

00:21:44.350 --> 00:21:47.960
So omega c would be a
pretty safe choice, right?

00:21:47.960 --> 00:21:51.760
Omega c would be one that passed
everything here, and would

00:21:51.760 --> 00:21:53.920
basically extract
any signal that

00:21:53.920 --> 00:21:56.320
satisfied that initial
constraint that we mentioned.

00:21:56.320 --> 00:21:58.420
So if your baseband
signal originally

00:21:58.420 --> 00:22:02.110
extended from minus
omega c to plus omega c,

00:22:02.110 --> 00:22:04.430
then a lowpass
filter that extracted

00:22:04.430 --> 00:22:07.810
that would do fine
without pulling

00:22:07.810 --> 00:22:10.570
in any of the replication here.

00:22:10.570 --> 00:22:13.720
So omega c is certainly fine.

00:22:13.720 --> 00:22:16.390
But if the signal that you
transmitted at baseband

00:22:16.390 --> 00:22:19.780
actually had a narrower
bandwidth than that,

00:22:19.780 --> 00:22:23.140
then you might just
want to get away

00:22:23.140 --> 00:22:26.902
with a lowpass filter
with a lower cutoff.

00:22:26.902 --> 00:22:28.860
Can you think of why you
might want to do that?

00:22:32.840 --> 00:22:34.340
Is there anything
that motivates you

00:22:34.340 --> 00:22:36.530
to use as small a
bandwidth as possible?

00:22:36.530 --> 00:22:37.315
Yeah?

00:22:37.315 --> 00:22:38.962
AUDIENCE: [INAUDIBLE]

00:22:38.962 --> 00:22:41.170
GEORGE VERGHESE: To limit
the amount of noise, right?

00:22:41.170 --> 00:22:43.560
We suppress noise
in this whole story.

00:22:43.560 --> 00:22:48.910
So if you're going to
build a filter like this

00:22:48.910 --> 00:22:52.400
but all the interesting
action is over here,

00:22:52.400 --> 00:22:55.090
well, all of the
rest of the filter

00:22:55.090 --> 00:22:57.670
is doing is letting other
signals get in, especially

00:22:57.670 --> 00:22:59.830
noise, and then that's
going to add to the output

00:22:59.830 --> 00:23:02.110
and make things more
difficult. So you'd really

00:23:02.110 --> 00:23:04.810
like to get the
smallest bandwidth that

00:23:04.810 --> 00:23:08.740
suffices to pass the signal part
of what you're interested in

00:23:08.740 --> 00:23:10.750
but keep out the
noise, all right?

00:23:10.750 --> 00:23:13.030
But if you didn't know
anything about the signal

00:23:13.030 --> 00:23:16.300
and its spread, or you believe
that the spectrum extended

00:23:16.300 --> 00:23:19.030
really from minus omega
c to plus omega c,

00:23:19.030 --> 00:23:22.270
then you would want to
make omega not equal

00:23:22.270 --> 00:23:25.900
to the carrier frequency, right?

00:23:25.900 --> 00:23:28.050
But you've got to look at
your particular situation

00:23:28.050 --> 00:23:32.250
and see what it is
you're going to do.

00:23:32.250 --> 00:23:37.140
OK, so this is the picture
that we have at demodulation.

00:23:37.140 --> 00:23:40.080
You're going to take the
received-- well, no, sorry.

00:23:40.080 --> 00:23:42.000
This is the modulation part.

00:23:42.000 --> 00:23:45.230
Ah, no, it's not.

00:23:45.230 --> 00:23:46.580
Sorry, this is not well-drawn.

00:23:46.580 --> 00:23:47.720
That shouldn't be x sub n.

00:23:47.720 --> 00:23:49.370
That should be the
received signal, OK?

00:23:49.370 --> 00:23:52.610
So the received signal comes
in, gets multiplied locally

00:23:52.610 --> 00:23:55.448
by cosine, gives you
the demodulated signal,

00:23:55.448 --> 00:23:56.990
and then you have
the lowpass filter,

00:23:56.990 --> 00:23:59.015
so I'll change that
before I post it.

00:24:02.900 --> 00:24:03.650
Simple enough?

00:24:06.160 --> 00:24:08.220
OK.

00:24:08.220 --> 00:24:12.480
Now, there are some problems
that you can run into,

00:24:12.480 --> 00:24:15.210
and doing all of this in the
lab you actually see that

00:24:15.210 --> 00:24:15.970
very quickly.

00:24:15.970 --> 00:24:22.140
So let me actually put
this on the board here.

00:24:26.340 --> 00:24:31.160
What we said is that our
demodulated signal is

00:24:31.160 --> 00:24:39.380
going to be our received signal
times cosine omega c n, right?

00:24:39.380 --> 00:24:42.560
And if we assume no distortion
in the channel this,

00:24:42.560 --> 00:24:46.730
is x n cosine omega c n.

00:24:49.280 --> 00:24:50.970
But there's a bit
of a problem here,

00:24:50.970 --> 00:24:53.750
which is that,
even if you've been

00:24:53.750 --> 00:24:57.260
told what carrier frequency
your center is going to use,

00:24:57.260 --> 00:24:58.843
you might not know
exactly what phase.

00:24:58.843 --> 00:25:00.843
It's typically the case
that you don't know what

00:25:00.843 --> 00:25:02.150
the phase is on this cosine.

00:25:02.150 --> 00:25:05.190
So you know omega c, but you
don't know exactly the phase,

00:25:05.190 --> 00:25:11.120
which means that your local
carrier, your local oscillator

00:25:11.120 --> 00:25:14.930
or your local carrier
multiplication here,

00:25:14.930 --> 00:25:19.640
will end up having some offset
relative to the carrier used

00:25:19.640 --> 00:25:23.500
at the transmitting end, OK?

00:25:23.500 --> 00:25:26.650
And so the question is,
if we track this through,

00:25:26.650 --> 00:25:30.380
what happens through the
demodulation process,

00:25:30.380 --> 00:25:34.090
so that's really what
this is trying to do.

00:25:34.090 --> 00:25:37.780
So we're saying d of n
is your received signal,

00:25:37.780 --> 00:25:42.240
but the local oscillator or
the local cosine that you're

00:25:42.240 --> 00:25:44.370
heterodyning with
at the receiver

00:25:44.370 --> 00:25:46.870
doesn't know exactly what phase
was used as the transmitter,

00:25:46.870 --> 00:25:48.610
so you've got to
assume that there

00:25:48.610 --> 00:25:52.130
is going to be some offset.

00:25:52.130 --> 00:25:55.000
So this is actually what
the multiplication is.

00:25:55.000 --> 00:25:57.640
And now you use a
simple trig identity.

00:25:57.640 --> 00:26:01.540
It's the cosine of something
times the cosine of something.

00:26:01.540 --> 00:26:03.710
That splits into this.

00:26:03.710 --> 00:26:08.440
And so what we're actually going
to get from the heterodyning

00:26:08.440 --> 00:26:13.780
at the receiver is x of
n times all of this, OK?

00:26:20.600 --> 00:26:21.923
So what we're going to get is--

00:26:21.923 --> 00:26:23.090
I should write it down here.

00:26:27.070 --> 00:26:31.750
We're going to get 0.5 x of n.

00:26:31.750 --> 00:26:33.430
And then there's
two pieces here.

00:26:33.430 --> 00:26:37.090
There is the cosine
phi, and then there

00:26:37.090 --> 00:26:42.550
is the cosine 2
omega c n minus phi.

00:26:47.230 --> 00:26:47.730
OK?

00:26:47.730 --> 00:26:49.230
When you don't have
any phase error,

00:26:49.230 --> 00:26:55.010
the cosine phi term is 1, but
now it's reduced from that.

00:26:55.010 --> 00:26:56.700
The rest of the
process is the same.

00:26:56.700 --> 00:26:59.210
You're going to do some
filtering to get rid

00:26:59.210 --> 00:27:02.660
of this piece, the
double frequency piece,

00:27:02.660 --> 00:27:05.270
and you're going to pull out
just what you're interested in.

00:27:05.270 --> 00:27:08.840
Except now it's no
longer x of n itself.

00:27:08.840 --> 00:27:13.500
It's x of n multiplied
by this cosine.

00:27:13.500 --> 00:27:17.200
So can you see that this
could lead you into trouble?

00:27:17.200 --> 00:27:18.410
What's the worst case here?

00:27:22.270 --> 00:27:24.020
Sorry, worst case-- yeah?

00:27:24.020 --> 00:27:24.920
AUDIENCE: [INAUDIBLE]

00:27:24.920 --> 00:27:27.260
GEORGE VERGHESE: Yeah,
if phi is pi over 2,

00:27:27.260 --> 00:27:30.680
then cosine phi is 0, and
you get nothing, all right?

00:27:30.680 --> 00:27:32.810
So if you're unlucky
in the offset

00:27:32.810 --> 00:27:35.960
between your local sinusoid
and the sinusoid that

00:27:35.960 --> 00:27:41.840
was used at the transmitter, you
could end up with nothing, OK?

00:27:41.840 --> 00:27:43.490
You can also get
the negative of what

00:27:43.490 --> 00:27:45.470
was sent, and so
on, so you can go

00:27:45.470 --> 00:27:47.930
through the whole set
of possibilities there.

00:27:53.870 --> 00:27:59.420
So the case of a phase
error of pi over 2

00:27:59.420 --> 00:28:02.060
corresponds to looking
at a signal that

00:28:02.060 --> 00:28:07.670
was transmitted on a cosine and
multiplying it by a sine, OK?

00:28:07.670 --> 00:28:10.920
And you can think through
that in the spectral setting,

00:28:10.920 --> 00:28:11.420
as well.

00:28:11.420 --> 00:28:13.212
Maybe you'll do some
of this in recitation,

00:28:13.212 --> 00:28:15.080
or maybe you already have.

00:28:15.080 --> 00:28:20.680
But when you multiply by a
sine in the spectral domain--

00:28:25.920 --> 00:28:26.780
So if you've got--

00:28:32.240 --> 00:28:34.460
you've got your
received signal, r of n,

00:28:34.460 --> 00:28:37.880
and now you're multiplying
it by sine omega c n, right?

00:28:40.820 --> 00:28:48.330
Sine omega c n, well, that's
1 over 2j e to the j omega

00:28:48.330 --> 00:28:56.370
c n minus e to the minus
j omega c n, right?

00:28:56.370 --> 00:28:59.730
So in the spectral
domain, what happens?

00:28:59.730 --> 00:29:04.650
Well, you've got r of n
multiplied by 1 over 2j times

00:29:04.650 --> 00:29:06.090
this first exponential.

00:29:06.090 --> 00:29:08.520
In the spectral domain,
that does a shifting

00:29:08.520 --> 00:29:12.270
and a multiplying by 1
over 2j, and then you've

00:29:12.270 --> 00:29:14.320
got this term doing
the same kind of thing.

00:29:14.320 --> 00:29:17.460
So you're going to have a
shift of the spectrum of r of n

00:29:17.460 --> 00:29:20.250
in the frequency domain
and a scaling by 1 over 2j.

00:29:20.250 --> 00:29:24.120
So if you think through what
the shifting and scaling does,

00:29:24.120 --> 00:29:25.590
you see that it's
a little bit more

00:29:25.590 --> 00:29:29.040
of a complicated picture
of what you had over here.

00:29:29.040 --> 00:29:34.050
Well, the real part gets
replicated around the 2 omega c

00:29:34.050 --> 00:29:35.970
region, but flipped over.

00:29:35.970 --> 00:29:38.760
The imaginary part gets
carried over intact.

00:29:38.760 --> 00:29:41.550
And then the replications
around minus 2-- sorry,

00:29:41.550 --> 00:29:45.270
around minus omega c, that is--

00:29:45.270 --> 00:29:48.390
the imaginary part
gets flipped over,

00:29:48.390 --> 00:29:51.060
and the real part gets
carried over directly.

00:29:51.060 --> 00:29:53.580
Except what was real before
becomes imaginary now.

00:29:53.580 --> 00:29:55.978
What was imaginary
before becomes real now.

00:29:55.978 --> 00:29:57.520
So you can track
through all of that.

00:29:57.520 --> 00:30:01.440
And it just comes from applying
the standard DTFT results

00:30:01.440 --> 00:30:05.910
to what the spectrum of the
product of an r of n and this

00:30:05.910 --> 00:30:07.560
is, OK?

00:30:07.560 --> 00:30:08.940
But the interesting
thing is now,

00:30:08.940 --> 00:30:12.180
the two replications,
when you sum them up,

00:30:12.180 --> 00:30:16.740
will leave you with nothing
at 0 because this piece here

00:30:16.740 --> 00:30:19.692
will cancel out exactly
with that piece there.

00:30:19.692 --> 00:30:21.900
So if you think through in
the spectral domain what's

00:30:21.900 --> 00:30:23.460
going on, you'll
understand exactly

00:30:23.460 --> 00:30:26.580
that if you've put your
signal on the cosine

00:30:26.580 --> 00:30:28.350
and you demodulate
with a sign, you're

00:30:28.350 --> 00:30:31.350
going to get nothing in
that lowpass region, OK?

00:30:31.350 --> 00:30:34.980
So that's just the same
result but seen spectrally.

00:30:38.130 --> 00:30:41.640
All right, so that's
uncertainty between the phase

00:30:41.640 --> 00:30:44.490
of the transmitter and
the phase of the receiver.

00:30:44.490 --> 00:30:47.460
Here's another thing that
has a similar effect, which

00:30:47.460 --> 00:30:51.530
is an unknown delay
on the channel, OK?

00:30:51.530 --> 00:30:56.120
So at the transmitting end,
you've got your baseband signal

00:30:56.120 --> 00:30:57.470
multiplying the carrier.

00:30:57.470 --> 00:30:58.942
This is what's transmitted.

00:30:58.942 --> 00:31:00.650
But then you have a
time delay, let's say

00:31:00.650 --> 00:31:04.070
D samples, capital D samples.

00:31:04.070 --> 00:31:08.840
So then what's received is
actually t of n minus D,

00:31:08.840 --> 00:31:10.940
and that's what's
going to get multiplied

00:31:10.940 --> 00:31:12.022
by the local carrier.

00:31:12.022 --> 00:31:14.480
And I'm assuming for now that
you have the phase, so we can

00:31:14.480 --> 00:31:16.220
bring them both together later.

00:31:16.220 --> 00:31:18.650
But I'm assuming now there's
no phase out locally,

00:31:18.650 --> 00:31:21.297
but there's an unknown
delay on the channel.

00:31:21.297 --> 00:31:23.630
And you can see it's going
to be the same kind of thing.

00:31:23.630 --> 00:31:25.670
You've got a cosine
times a cosine,

00:31:25.670 --> 00:31:28.190
and the arguments are slightly
different from each other.

00:31:28.190 --> 00:31:30.680
And you use the
same trig identity,

00:31:30.680 --> 00:31:34.160
and what you find is the
output of this process

00:31:34.160 --> 00:31:36.260
is not the input
delayed, which is what

00:31:36.260 --> 00:31:37.670
you would like to get ideally.

00:31:37.670 --> 00:31:40.160
You aren't going to
compensate for the delay

00:31:40.160 --> 00:31:44.210
with a causal filter, but
it's also going to be scaled.

00:31:44.210 --> 00:31:46.910
And it's going to be scaled by
an unknown amount that depends

00:31:46.910 --> 00:31:49.967
on that delay, all right?

00:31:49.967 --> 00:31:51.800
So it's the same kind
of thing that happens.

00:31:54.820 --> 00:31:57.400
So the question is, how
do we get around this?

00:31:57.400 --> 00:31:59.010
And here's one idea
that works well,

00:31:59.010 --> 00:32:02.160
and which you're actually
exploring in the lab.

00:32:02.160 --> 00:32:08.890
Which is to use both the
sine and the cosine, OK?

00:32:08.890 --> 00:32:12.060
So use both the sign on
the cosine to demodulate.

00:32:12.060 --> 00:32:14.685
If you go completely
bad on one channel

00:32:14.685 --> 00:32:16.560
because you've got the
phase completely wrong

00:32:16.560 --> 00:32:19.980
with the cosine,
you're going to do

00:32:19.980 --> 00:32:22.107
all right on the sine channel.

00:32:22.107 --> 00:32:23.940
If you do completely
bad on the sine channel

00:32:23.940 --> 00:32:25.270
because you've got
the phase wrong,

00:32:25.270 --> 00:32:27.603
then you're going to do all
right on the cosine channel.

00:32:27.603 --> 00:32:29.130
So at least one
of them will work,

00:32:29.130 --> 00:32:32.340
and more typically both of
them will work a little bit,

00:32:32.340 --> 00:32:35.360
and what you'll then do is
combine the two outputs.

00:32:35.360 --> 00:32:35.860
OK?

00:32:35.860 --> 00:32:39.000
So you're going to have
the signal coming in.

00:32:39.000 --> 00:32:43.860
There's a cosine multiplication
and the sine multiplication,

00:32:43.860 --> 00:32:45.510
and then the lowpass filtering.

00:32:45.510 --> 00:32:49.530
We refer to this as
the in-phase component,

00:32:49.530 --> 00:32:52.240
assuming that you were
modulating on a cosine,

00:32:52.240 --> 00:32:55.630
and this is referred to as
the quadrature component.

00:32:55.630 --> 00:32:57.390
So there's in-phase
and quadrature.

00:33:07.403 --> 00:33:09.070
"Quadrature" just
means at right angles.

00:33:12.800 --> 00:33:16.100
So this is the I and
the Q components.

00:33:16.100 --> 00:33:19.030
And if you work out what
these are, assuming now

00:33:19.030 --> 00:33:22.450
that there's both a time
delay and a phase offset,

00:33:22.450 --> 00:33:24.470
you can see that the
in-phase component

00:33:24.470 --> 00:33:26.470
will be the signal that
you want, but multiplied

00:33:26.470 --> 00:33:27.978
by cosine phi.

00:33:27.978 --> 00:33:29.770
The quadrature component
will be the signal

00:33:29.770 --> 00:33:32.020
that you want, but
multiplied by sine phi.

00:33:34.760 --> 00:33:37.460
And from there, it's
not so hard to imagine

00:33:37.460 --> 00:33:41.200
that you could actually get
back to the signal of interest.

00:33:41.200 --> 00:33:44.240
And here's one way to
do it that works fine

00:33:44.240 --> 00:33:46.730
if you've got on-off signaling.

00:33:46.730 --> 00:33:51.560
So what you would do is,
here's the I. Here's the Q.

00:33:51.560 --> 00:33:53.670
And I've just represented
it graphically here.

00:33:53.670 --> 00:33:56.900
This is typical to do.

00:33:56.900 --> 00:33:58.250
So here is the I component.

00:33:58.250 --> 00:34:01.520
Here is the Q component.

00:34:01.520 --> 00:34:04.850
And you could take the
root sum of squares

00:34:04.850 --> 00:34:07.730
to basically get rid of that
sine theta and cosine theta

00:34:07.730 --> 00:34:08.810
term, right?

00:34:08.810 --> 00:34:11.900
So what that's going to give
you is the absolute value of x

00:34:11.900 --> 00:34:15.020
of n minus D. So you
can certainly get back

00:34:15.020 --> 00:34:20.210
the absolute value of what was
used to modulate the carrier,

00:34:20.210 --> 00:34:21.440
and that may be all you need.

00:34:21.440 --> 00:34:23.523
If you have on-off signaling,
that's all you need.

00:34:23.523 --> 00:34:27.170
If your modulating signal
never goes negative,

00:34:27.170 --> 00:34:31.110
its absolute value is the same
as the signal, so this is fine.

00:34:31.110 --> 00:34:36.830
So what you will discover is
that you get some signal out

00:34:36.830 --> 00:34:38.810
there, and you're
looking for its length.

00:34:38.810 --> 00:34:42.710
When the length is non-zero,
you say you have a 1 cent.

00:34:42.710 --> 00:34:45.800
When the length of 0, you
say you have a 0 cent.

00:34:45.800 --> 00:34:48.590
In the presence of
noise, of course,

00:34:48.590 --> 00:34:50.540
it won't be exactly
at the origin.

00:34:50.540 --> 00:34:53.429
There might be some
cloud of points there.

00:34:53.429 --> 00:34:57.760
And similarly for the 1 level.

00:35:01.180 --> 00:35:06.370
What if you were interested
in the polarity, though?

00:35:06.370 --> 00:35:08.800
So suppose it mattered to
you whether the signal was

00:35:08.800 --> 00:35:10.780
positive or negative.

00:35:10.780 --> 00:35:12.700
Well, you could then
just plot the point

00:35:12.700 --> 00:35:15.017
and don't take the magnitude.

00:35:15.017 --> 00:35:17.350
So you'll get something that
looks a bit more like this.

00:35:20.070 --> 00:35:21.120
OK?

00:35:21.120 --> 00:35:24.270
So what you'll have
is, when a 1 is sent,

00:35:24.270 --> 00:35:28.050
perhaps you'll get that value
in the absence of noise.

00:35:28.050 --> 00:35:29.790
When a minus 1 is
sent-- sorry, when

00:35:29.790 --> 00:35:34.022
a 0 is sent,
corresponding to minus 1,

00:35:34.022 --> 00:35:34.980
this is what you'd get.

00:35:34.980 --> 00:35:36.688
This is-- sorry, I
should have said that.

00:35:36.688 --> 00:35:38.550
This is assuming bipolar
signaling, right?

00:35:38.550 --> 00:35:40.290
Bipolar signaling
is the case where

00:35:40.290 --> 00:35:43.530
you're interested in
the sign of the signal.

00:35:43.530 --> 00:35:45.600
You use plus 1 to send a 1.

00:35:45.600 --> 00:35:49.780
You use minus 1 to send a 0, OK?

00:35:49.780 --> 00:35:52.290
So you get some
diagram like this.

00:35:52.290 --> 00:35:54.810
The only problem here is, if
you've got uncertain phase

00:35:54.810 --> 00:35:58.290
and delay, you actually don't
know which of these two points

00:35:58.290 --> 00:36:00.150
corresponds to the
plus 1 and which

00:36:00.150 --> 00:36:02.250
corresponds to the minus 1.

00:36:02.250 --> 00:36:03.930
So there's that
additional ambiguity

00:36:03.930 --> 00:36:06.160
that needs to
somehow be resolved,

00:36:06.160 --> 00:36:09.450
and there are different
procedures you might use.

00:36:09.450 --> 00:36:11.520
You could, for instance,
have some preamble

00:36:11.520 --> 00:36:15.210
with a sign that's agreed
on and use that as a basis

00:36:15.210 --> 00:36:18.120
for figuring out which is a
plus and which is a minus.

00:36:18.120 --> 00:36:21.690
And there are other ways of
doing it, as well, where what's

00:36:21.690 --> 00:36:25.200
called differential coding,
where basically it's

00:36:25.200 --> 00:36:27.960
not where that is, but
whether it flips over

00:36:27.960 --> 00:36:30.640
to the other side or
not that signals a bit.

00:36:30.640 --> 00:36:34.230
And so what you could
do is, to transmit a 1,

00:36:34.230 --> 00:36:37.440
you'll step the phase by pi,
and that can be detected,

00:36:37.440 --> 00:36:39.210
and to transmit a
0, you don't change

00:36:39.210 --> 00:36:41.100
the phase in the next bit slot.

00:36:41.100 --> 00:36:45.030
So if from one bit slot to
the next the dot stays there,

00:36:45.030 --> 00:36:47.460
you know you've
just received a 0.

00:36:47.460 --> 00:36:49.410
If from one bit
slot to the next it

00:36:49.410 --> 00:36:50.935
flips over to the
other side, you

00:36:50.935 --> 00:36:53.220
know you've just
received a 1, OK?

00:36:53.220 --> 00:36:55.770
So even with the ambiguity,
if you change the way you

00:36:55.770 --> 00:36:59.790
code at the sending end, you can
actually compensate for this.

00:37:02.750 --> 00:37:07.330
OK, now playing this game
with sines and cosines

00:37:07.330 --> 00:37:09.850
can actually also be done
at the transmitting end,

00:37:09.850 --> 00:37:13.090
and we haven't
explored that in class,

00:37:13.090 --> 00:37:15.550
but it's something that
you could think about.

00:37:15.550 --> 00:37:18.430
So we've been talking
about taking the samples

00:37:18.430 --> 00:37:21.910
and multiplying them
onto a cosine carrier.

00:37:21.910 --> 00:37:25.030
You could have another
bitstream whose samples you

00:37:25.030 --> 00:37:27.410
multiply onto a sine carrier.

00:37:27.410 --> 00:37:29.410
And you can just add them
together and send them

00:37:29.410 --> 00:37:30.820
over the channel.

00:37:30.820 --> 00:37:34.870
At the receiving end,
you multiply by cosine.

00:37:34.870 --> 00:37:37.390
Well, that'll only pull out--
you multiply that cosine

00:37:37.390 --> 00:37:39.550
and then filter,
lowpass filter--

00:37:39.550 --> 00:37:43.450
that'll only pull out the
first stream in the ideal case.

00:37:43.450 --> 00:37:45.640
Multiply by a sine
and filter, you'll

00:37:45.640 --> 00:37:46.990
get exactly the second stream.

00:37:46.990 --> 00:37:49.930
So you can simultaneously
send two streams

00:37:49.930 --> 00:37:55.990
on a given carrier using
this scheme, this method, OK?

00:37:55.990 --> 00:38:00.850
So depending on how you make out
in the lab in problem set 6--

00:38:00.850 --> 00:38:03.190
I don't know how many
simultaneous carriers

00:38:03.190 --> 00:38:06.250
you're getting, but
whatever you end up with you

00:38:06.250 --> 00:38:10.150
can actually try now to transmit
twice as much on each carrier

00:38:10.150 --> 00:38:12.760
by using this kind of a scheme.

00:38:12.760 --> 00:38:15.710
Could be fun.

00:38:15.710 --> 00:38:19.700
All right, so this kind
of bipolar signaling,

00:38:19.700 --> 00:38:21.200
what's called
phase-shift keying--

00:38:21.200 --> 00:38:22.913
I didn't explain
that really, did I?

00:38:25.631 --> 00:38:29.270
I said-- we've said
it before, but--

00:38:29.270 --> 00:38:31.940
we've talked about bipolar
or phase-shift keying.

00:38:35.830 --> 00:38:48.550
All that we mean is, if you get
a signal with voltage plus 1

00:38:48.550 --> 00:38:52.990
and minus 1 for
your bit 0 on bit 1,

00:38:52.990 --> 00:38:55.540
by the time you modulate what
you're going to end up doing

00:38:55.540 --> 00:39:01.795
is sending a burst of
carrier here with the plus 1.

00:39:01.795 --> 00:39:03.670
And then when you come
to the minus 1 region,

00:39:03.670 --> 00:39:05.712
you're going to multiply
that carrier by minus 1,

00:39:05.712 --> 00:39:09.790
so you're going to suddenly
step the phase, right?

00:39:09.790 --> 00:39:13.660
So amplitude modulation
with an amplifier

00:39:13.660 --> 00:39:16.840
that switches
between these levels

00:39:16.840 --> 00:39:20.410
can be also thought of
as a phase shifting.

00:39:20.410 --> 00:39:22.930
So you're keying between
a phase of 0 degrees

00:39:22.930 --> 00:39:24.620
and a phase of 180.

00:39:24.620 --> 00:39:27.470
So this kind of scheme is
used all over the place.

00:39:27.470 --> 00:39:38.030
And I actually have a slide that
lists a whole bunch of schemes

00:39:38.030 --> 00:39:40.280
that you're familiar
with, you see every day

00:39:40.280 --> 00:39:42.560
in all sorts of literature.

00:39:42.560 --> 00:39:46.363
You know, 802, and Bluetooth,
and Zigbee and so on.

00:39:46.363 --> 00:39:47.780
In all of these
standards, there's

00:39:47.780 --> 00:39:50.690
some piece of it or some
domain or some regime

00:39:50.690 --> 00:39:53.390
in which what's going on
is some variant of what

00:39:53.390 --> 00:39:54.520
we've learned here.

00:39:54.520 --> 00:39:56.870
And they get fancier
and more sophisticated,

00:39:56.870 --> 00:40:00.200
but you really have
the key ideas here.

00:40:00.200 --> 00:40:07.820
OK, let's now talk about putting
multiple signals on a given

00:40:07.820 --> 00:40:10.760
piece of the spectrum, OK?

00:40:10.760 --> 00:40:14.090
This is exactly the situation
you have in your lab now.

00:40:14.090 --> 00:40:17.210
You've got the speaker that
can transmit in a certain band,

00:40:17.210 --> 00:40:20.990
and you're trying to put
multiple simultaneous signals

00:40:20.990 --> 00:40:22.800
on it by using
different carriers.

00:40:22.800 --> 00:40:25.160
So this is what's called
Frequency-Division

00:40:25.160 --> 00:40:27.140
Multiplexing, or FDM.

00:40:27.140 --> 00:40:29.830
And the idea is very simple.

00:40:29.830 --> 00:40:32.690
You've got three signals
here and this illustration,

00:40:32.690 --> 00:40:35.210
the blue signal, red, and green.

00:40:35.210 --> 00:40:39.620
Pick a carrier frequency
for each of them.

00:40:39.620 --> 00:40:43.430
Do the modulation, and then
just add them on the channel.

00:40:43.430 --> 00:40:46.910
If you've got a linear
medium, then the signals

00:40:46.910 --> 00:40:49.640
will superpose,
so what's received

00:40:49.640 --> 00:40:52.580
is just the sum
of these, and now

00:40:52.580 --> 00:40:54.720
you can do the
same kind of thing.

00:40:54.720 --> 00:41:00.610
And what we're relying
on here is, again,

00:41:00.610 --> 00:41:02.830
the heterodyning principle.

00:41:02.830 --> 00:41:03.715
Whoops, sorry.

00:41:15.010 --> 00:41:20.740
OK, so if you've got frequencies
omega red, omega blue,

00:41:20.740 --> 00:41:25.910
omega green in the signal
that you're receiving,

00:41:25.910 --> 00:41:31.830
and you multiply this with some
local sinusoidal frequency,

00:41:31.830 --> 00:41:37.010
omega 0, where will
your various spectra

00:41:37.010 --> 00:41:39.870
be centered in the result?

00:41:39.870 --> 00:41:42.810
So the way to think
of it is, all the sums

00:41:42.810 --> 00:41:44.960
at different frequencies
here will now appear.

00:41:44.960 --> 00:41:49.850
So you get omega 0 plus omega r.

00:41:49.850 --> 00:41:57.410
You get omega 0 minus omega r,
and similarly for all of these.

00:42:00.430 --> 00:42:03.560
OK, it's the same thing that you
saw with a single transmitted

00:42:03.560 --> 00:42:06.740
the signal, except now it's a
more elaborate constellation.

00:42:06.740 --> 00:42:12.540
It's actually this
that's being transmitted.

00:42:12.540 --> 00:42:18.110
So the receiving end, you'll
pick a particular frequency

00:42:18.110 --> 00:42:20.180
to multiply the
incoming signal by.

00:42:20.180 --> 00:42:23.060
The result will have pieces
of the spectrum centered

00:42:23.060 --> 00:42:25.380
at each of these.

00:42:25.380 --> 00:42:28.850
So if you want to center one of
these in your lowpass filter,

00:42:28.850 --> 00:42:30.800
how should you pick
the local oscillator?

00:42:30.800 --> 00:42:32.760
If you want to
tune in a channel,

00:42:32.760 --> 00:42:34.640
what is it that you want to do?

00:42:34.640 --> 00:42:37.250
You want to get one of
these center frequencies

00:42:37.250 --> 00:42:41.090
to sit right in the window
of your lowpass filter.

00:42:41.090 --> 00:42:43.840
So what you'll end up doing
is pick your local oscillator

00:42:43.840 --> 00:42:46.630
frequency to be the carrier
frequency of the station you're

00:42:46.630 --> 00:42:49.930
interested in, or the signal
you're interested in, OK?

00:42:49.930 --> 00:42:51.770
So it's the same idea.

00:42:51.770 --> 00:42:53.380
You have a lowpass
filter, and you're

00:42:53.380 --> 00:42:55.840
using heterodyning
to shift the piece

00:42:55.840 --> 00:42:59.020
of the spectrum of
interest into the passband

00:42:59.020 --> 00:43:01.130
of the lowpass filter.

00:43:01.130 --> 00:43:01.630
All right?

00:43:04.170 --> 00:43:07.740
Now, what about the bandwidth
of the lowpass filter?

00:43:07.740 --> 00:43:08.520
What should it be?

00:43:20.060 --> 00:43:23.720
So now it depends on how closely
spaced your carriers are,

00:43:23.720 --> 00:43:24.220
right?

00:43:24.220 --> 00:43:29.240
So for instance, if I
ended up heterodyning

00:43:29.240 --> 00:43:33.650
such that my blue
signal, my blue signal

00:43:33.650 --> 00:43:39.660
came into the
window of interest--

00:43:39.660 --> 00:43:43.340
and I've got the red spectrum
sitting somewhere here

00:43:43.340 --> 00:43:46.580
and the other piece
sitting somewhere here.

00:43:49.170 --> 00:43:50.100
OK?

00:43:50.100 --> 00:43:53.370
I've shifted things
so that this is at 0.

00:43:53.370 --> 00:43:54.720
What's this frequency now?

00:44:01.570 --> 00:44:03.370
Omega r minus omega--

00:44:03.370 --> 00:44:04.480
what was it?

00:44:04.480 --> 00:44:06.280
Blue, right?

00:44:06.280 --> 00:44:08.230
So I've basically shifted
these frequencies.

00:44:08.230 --> 00:44:12.560
So this is at 0, sitting
in my lowpass filter.

00:44:12.560 --> 00:44:13.570
Use a different color.

00:44:19.230 --> 00:44:22.530
And I want to reject
everything else.

00:44:22.530 --> 00:44:26.340
So how should I pick
that lowpass filter?

00:44:26.340 --> 00:44:28.140
Well, presumably,
you want the cutoff

00:44:28.140 --> 00:44:31.350
to lie between these
two frequencies.

00:44:31.350 --> 00:44:36.480
So you want half the distance
to the nearest carrier, right?

00:44:36.480 --> 00:44:38.842
Half the distance to the
nearest carrier frequency.

00:44:41.492 --> 00:44:42.950
OK, so you can
think through these.

00:44:42.950 --> 00:44:44.593
And notice how all
our thinking has

00:44:44.593 --> 00:44:45.760
been in the spectral domain.

00:44:45.760 --> 00:44:48.670
Thinking in the frequency domain
clarifies this whole thing.

00:44:48.670 --> 00:44:51.040
You really would not
have been able to do

00:44:51.040 --> 00:44:55.570
what you're doing thinking
entirely in the time domain.

00:44:55.570 --> 00:44:57.520
Now, all of this comes
to us, really, from--

00:45:01.100 --> 00:45:01.600
let's see.

00:45:01.600 --> 00:45:02.820
I had that already?

00:45:02.820 --> 00:45:05.220
Yeah.

00:45:05.220 --> 00:45:09.540
All of this comes to us from
a rich legacy in AM radio.

00:45:09.540 --> 00:45:14.040
We're not using this for
transmission of analog signals

00:45:14.040 --> 00:45:16.490
by amplitude modulation,
but it's the same principle.

00:45:16.490 --> 00:45:19.920
So these principles
actually were studied

00:45:19.920 --> 00:45:23.250
from the early 1900s, actually.

00:45:23.250 --> 00:45:25.770
And the AM radio
that we see around us

00:45:25.770 --> 00:45:28.357
now is actually set up exactly
to do the kind of thing

00:45:28.357 --> 00:45:29.190
we're talking about.

00:45:29.190 --> 00:45:31.440
So you've got some
frequency spectrum

00:45:31.440 --> 00:45:34.380
that the FCC is
allowing you to use.

00:45:34.380 --> 00:45:37.320
Different stations are given
different carrier frequencies

00:45:37.320 --> 00:45:38.760
that they can operate on.

00:45:38.760 --> 00:45:42.840
They're also instructed on
what bandwidth they can occupy.

00:45:42.840 --> 00:45:46.860
So basically, the carriers
are 10 kilohertz apart,

00:45:46.860 --> 00:45:49.185
the way that the
stations are assigned.

00:45:55.260 --> 00:45:57.270
So if you're transmitting
from your station,

00:45:57.270 --> 00:45:59.310
you'd better lowpass
filter what you're

00:45:59.310 --> 00:46:02.213
sending out to 5 kilohertz
before you transmit it.

00:46:02.213 --> 00:46:03.630
Because if you
don't, you're going

00:46:03.630 --> 00:46:05.310
to interfere with
a nearby station.

00:46:05.310 --> 00:46:10.200
Assuming there is a station in
the same geographic area that's

00:46:10.200 --> 00:46:13.660
been assigned to a neighboring
carrier frequency, all right?

00:46:13.660 --> 00:46:15.390
So all of these issues come in.

00:46:15.390 --> 00:46:16.860
Another thing that actually is--

00:46:19.590 --> 00:46:20.820
what did I do here?

00:46:20.820 --> 00:46:21.390
I think I--

00:46:25.830 --> 00:46:27.690
I mashed together two slides.

00:46:27.690 --> 00:46:31.620
But the other thing that--

00:46:31.620 --> 00:46:34.470
it turns out, for
instance, AM radio,

00:46:34.470 --> 00:46:37.860
at nighttime, because of
the way radio transmits,

00:46:37.860 --> 00:46:40.030
the signal can
propagate much further.

00:46:40.030 --> 00:46:42.570
So these stations
are asked to reduce

00:46:42.570 --> 00:46:46.047
their signal strength, the
carrier strength, at nighttime

00:46:46.047 --> 00:46:48.255
so that they're not interfering
with nearby stations.

00:46:48.255 --> 00:46:50.005
The stations that they
would not interfere

00:46:50.005 --> 00:46:52.650
with during the day they
could interfere with at night

00:46:52.650 --> 00:46:55.260
because propagation
characteristics

00:46:55.260 --> 00:46:56.440
turn out to change.

00:46:56.440 --> 00:46:59.250
So all of this
business of your signal

00:46:59.250 --> 00:47:01.740
not interfering with
your neighbor's carrier

00:47:01.740 --> 00:47:04.500
or your neighbor's portion
of the spectrum, all of that

00:47:04.500 --> 00:47:06.880
ends up being important.

00:47:06.880 --> 00:47:09.060
OK, I think we've
probably said as

00:47:09.060 --> 00:47:12.500
much as we want to say about
the signals part of this class.

00:47:15.040 --> 00:47:17.640
One of the things about
602 is that those of you

00:47:17.640 --> 00:47:20.622
who master it come out knowing
the subject better than any

00:47:20.622 --> 00:47:22.830
of us that teach it because
there's none of us that's

00:47:22.830 --> 00:47:25.948
able to teach the course
right through start to finish.

00:47:25.948 --> 00:47:27.240
Well, that's not entirely true.

00:47:27.240 --> 00:47:30.870
Harry knows how to do it Chris
Terman knows how to do it.

00:47:30.870 --> 00:47:33.705
The recitation instructors hang
in there for the whole term,

00:47:33.705 --> 00:47:35.580
but it's very hard for
one person to do that.

00:47:35.580 --> 00:47:36.180
So I'm done.

00:47:36.180 --> 00:47:38.710
I'm going to be sitting
there from lecture onwards,

00:47:38.710 --> 00:47:43.070
so thank you all for your
attention, and thank you.