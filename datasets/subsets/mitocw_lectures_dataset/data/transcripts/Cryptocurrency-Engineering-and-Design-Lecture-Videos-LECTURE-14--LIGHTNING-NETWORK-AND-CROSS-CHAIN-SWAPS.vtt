WEBVTT

00:00:01.090 --> 00:00:03.460
The following content is
provided under a Creative

00:00:03.460 --> 00:00:04.850
Commons license.

00:00:04.850 --> 00:00:07.060
Your support will help
MIT OpenCourseWare

00:00:07.060 --> 00:00:11.150
continue to offer high-quality
educational resources for free.

00:00:11.150 --> 00:00:13.690
To make a donation or to
view additional materials

00:00:13.690 --> 00:00:17.650
from hundreds of MIT courses,
visit MIT OpenCourseWare

00:00:17.650 --> 00:00:18.550
at ocw.mit.edu.

00:00:22.437 --> 00:00:24.770
TADGE DRYJA: Last class, I
talked about payment channels

00:00:24.770 --> 00:00:26.130
and lightning network.

00:00:26.130 --> 00:00:30.302
So today we'll talk a bit
more about payment channels.

00:00:30.302 --> 00:00:31.760
We'll recap a little
bit, and we'll

00:00:31.760 --> 00:00:36.210
talk about some optimizations,
one of which is key addition,

00:00:36.210 --> 00:00:37.910
the other is hash trees.

00:00:37.910 --> 00:00:40.430
And then we'll talk
about cross-chain swaps

00:00:40.430 --> 00:00:43.940
or cross-chain atomic swaps.

00:00:43.940 --> 00:00:49.060
OK, so last time, the sort
of main idea of these payment

00:00:49.060 --> 00:00:51.610
channels is you've got
this commitment transaction

00:00:51.610 --> 00:00:55.330
and each party holds a sort
of different transaction

00:00:55.330 --> 00:01:01.920
that has the same amounts but
slightly different scripts.

00:01:01.920 --> 00:01:07.050
So it's spending from a
shared funding transaction.

00:01:07.050 --> 00:01:09.270
And it's sending out to--

00:01:09.270 --> 00:01:12.430
the one that's held by
Alice on her hard drive

00:01:12.430 --> 00:01:14.730
sends to Bob in the clear.

00:01:14.730 --> 00:01:18.510
Bob just gets his eight coins
with no ifs, ands, or buts.

00:01:18.510 --> 00:01:20.670
However, when Alice
broadcasts this,

00:01:20.670 --> 00:01:23.580
she needs to wait 100 blocks.

00:01:23.580 --> 00:01:26.490
She needs to wait a day.

00:01:26.490 --> 00:01:29.550
And if she reveals
this key to Bob,

00:01:29.550 --> 00:01:33.030
now Bob can use Bob's key
in this revocable key,

00:01:33.030 --> 00:01:36.390
and Bob can get these
coins immediately.

00:01:36.390 --> 00:01:40.050
And the opposite is for Bob.

00:01:40.050 --> 00:01:43.575
So when Bob has his transaction,
it's got Alice's signature.

00:01:43.575 --> 00:01:45.450
He doesn't store his
own, because he can just

00:01:45.450 --> 00:01:47.960
compute it quickly.

00:01:47.960 --> 00:01:51.240
The two coins that go to
Alice go to her in the clear.

00:01:51.240 --> 00:01:54.720
However, the eight coins
that Bob gets for himself,

00:01:54.720 --> 00:01:56.310
he has to wait 100 blocks.

00:01:56.310 --> 00:02:01.820
And during the 100
blocks, Alice can

00:02:01.820 --> 00:02:06.540
sign if she has
Bob's revocation key.

00:02:06.540 --> 00:02:10.340
OK, so that's the basic
idea of these outputs.

00:02:10.340 --> 00:02:12.770
And then you construct these.

00:02:12.770 --> 00:02:16.220
So when I say, Alice, one
bitcoin, Bob, nine bitcoin,

00:02:16.220 --> 00:02:19.310
it's of the format in these.

00:02:19.310 --> 00:02:21.980
The person who holds
that transaction

00:02:21.980 --> 00:02:24.260
has a transaction where the
other party gets the coins

00:02:24.260 --> 00:02:28.910
immediately, and their own
coins have this lockup period,

00:02:28.910 --> 00:02:33.020
and can be grabbed by the other
party if they revoke them.

00:02:33.020 --> 00:02:37.912
So initially, the state is Alice
has one bitcoin, Bob has nine.

00:02:37.912 --> 00:02:39.870
There's two different
state 1 transactions, one

00:02:39.870 --> 00:02:42.150
held by Alice, one held by Bob.

00:02:42.150 --> 00:02:45.800
They build a new
transaction together

00:02:45.800 --> 00:02:49.020
where Alice has five coins
and Bob has five coins,

00:02:49.020 --> 00:02:54.750
and then they revoke the old
one by sharing these secrets.

00:02:54.750 --> 00:02:57.930
So now, since they both
have handed each other these

00:02:57.930 --> 00:03:03.610
revocation private keys, both of
these parties cannot broadcast

00:03:03.610 --> 00:03:04.110
this.

00:03:04.110 --> 00:03:08.170
If they do, the other
party takes all the money.

00:03:08.170 --> 00:03:11.420
And then you can build
these indefinitely.

00:03:11.420 --> 00:03:14.020
OK, so any questions about that?

00:03:14.020 --> 00:03:19.400
That was covered last time, but
it kind of can be complicated.

00:03:19.400 --> 00:03:19.900
Questions?

00:03:19.900 --> 00:03:20.400
Good?

00:03:22.750 --> 00:03:28.780
OK, so some optimizations
we'd want to make--

00:03:28.780 --> 00:03:31.880
yes, so basically, either party
broadcasts and has to wait.

00:03:31.880 --> 00:03:33.720
Alice gives Bob the
AliceR private key,

00:03:33.720 --> 00:03:35.540
Bob gives Alice the
BobR private key.

00:03:35.540 --> 00:03:37.110
If they broadcast,
the counterpart

00:03:37.110 --> 00:03:38.660
takes all the funds.

00:03:38.660 --> 00:03:40.310
So what are some
optimizations here?

00:03:40.310 --> 00:03:43.790
The basic idea of the
script is, OK, you

00:03:43.790 --> 00:03:45.830
can have a signature
from KeyA, and you

00:03:45.830 --> 00:03:49.010
have to wait a day, or
two, or five, or whatever.

00:03:49.010 --> 00:03:52.820
Or you can have a signature from
KeyB and a signature from KeyC.

00:03:55.690 --> 00:03:57.610
So what are some
optimizations here?

00:03:57.610 --> 00:04:01.120
The revealing part-- any
way to make that smaller,

00:04:01.120 --> 00:04:03.520
more efficient?

00:04:03.520 --> 00:04:09.300
So one idea is a pre-image
instead of a signature.

00:04:09.300 --> 00:04:11.670
You're just revealing
something, you're not actually

00:04:11.670 --> 00:04:13.450
committing to any data.

00:04:13.450 --> 00:04:16.470
So when Bob reveals his
secret, he could just be,

00:04:16.470 --> 00:04:18.089
here's a pre-image.

00:04:18.089 --> 00:04:20.820
And instead of like 70
bytes for a signature,

00:04:20.820 --> 00:04:23.895
you get down to like 20 bytes
for a hash and a pre-image.

00:04:27.620 --> 00:04:28.850
So how would it work?

00:04:28.850 --> 00:04:32.570
You'd just say, OK,
Alice signs if Alice

00:04:32.570 --> 00:04:36.860
knows BobR's pre-image.

00:04:36.860 --> 00:04:41.200
BobR doesn't have to actually
sign, she can just know it.

00:04:41.200 --> 00:04:43.860
That would work.

00:04:43.860 --> 00:04:46.350
So actually that was
the initial idea.

00:04:46.350 --> 00:04:49.770
I think that's what's
written in the paper.

00:04:49.770 --> 00:04:51.180
But you can do even smaller.

00:04:51.180 --> 00:04:55.660
So an even smaller way
to do it is combine keys.

00:04:55.660 --> 00:04:58.770
So in the elliptic
curve that we're

00:04:58.770 --> 00:05:01.770
using in all these groups,
all these signature schemes,

00:05:01.770 --> 00:05:04.670
if you add two keys together,
you can get a third key.

00:05:04.670 --> 00:05:07.260
And it's using the
addition operation

00:05:07.260 --> 00:05:09.840
that's defined on this group.

00:05:09.840 --> 00:05:13.560
So in the case where
you have KeyB and KeyC,

00:05:13.560 --> 00:05:15.660
and you add them together
to get, say, KeyR,

00:05:15.660 --> 00:05:18.250
what's the private key for KeyR?

00:05:18.250 --> 00:05:18.750
Anyone?

00:05:22.550 --> 00:05:26.160
You've got KeyB-- private key--

00:05:26.160 --> 00:05:29.390
KeyC, which has a private key,
you add the two public keys

00:05:29.390 --> 00:05:30.382
up together--

00:05:33.546 --> 00:05:36.500
yeah, it's the sum
of the private keys.

00:05:36.500 --> 00:05:40.230
So public KeyB is just private
KeyB times the generator

00:05:40.230 --> 00:05:46.520
point, G. But-- and then C
times G equals R times G.

00:05:46.520 --> 00:05:50.810
And then you can just move
the parentheses around.

00:05:50.810 --> 00:05:54.440
So B plus C, the private
keys added together

00:05:54.440 --> 00:05:57.840
times the generator
point is still the same.

00:05:57.840 --> 00:05:59.533
So this is a really
nice property.

00:05:59.533 --> 00:06:01.200
Actually, it's sort
of the main property

00:06:01.200 --> 00:06:05.250
that we use for all
signatures and all this stuff.

00:06:05.250 --> 00:06:11.790
What that means is you can say,
here, I take your public key,

00:06:11.790 --> 00:06:13.980
I'm going to come up
with my own private key,

00:06:13.980 --> 00:06:16.900
compute the public key for that,
add them together, and say,

00:06:16.900 --> 00:06:21.390
hey, we've got this
new shared public key.

00:06:21.390 --> 00:06:23.640
And neither of us
can sign with it

00:06:23.640 --> 00:06:26.187
yet because we don't know
each other's private keys.

00:06:26.187 --> 00:06:28.020
But if either of us
reveals the private key,

00:06:28.020 --> 00:06:30.240
then the other party
can sign with it.

00:06:30.240 --> 00:06:34.080
So if this is Bob's and
this is Alice's, they

00:06:34.080 --> 00:06:38.600
can both compute little r times
G by doing this operation.

00:06:38.600 --> 00:06:42.840
They both share public keys and
compute the shared public key.

00:06:42.840 --> 00:06:45.460
But they cannot sign, because
neither of them knows little r.

00:06:48.710 --> 00:06:53.293
And then let's say Alice says,
OK, Bob, here's this little c,

00:06:53.293 --> 00:06:53.960
gives it to Bob.

00:06:53.960 --> 00:06:56.360
Bob says, OK, now
I know a little r.

00:06:56.360 --> 00:06:59.240
But Alice doesn't.

00:06:59.240 --> 00:07:03.780
So this is a really
nice way to do it,

00:07:03.780 --> 00:07:05.250
because it saves a lot of space.

00:07:05.250 --> 00:07:09.240
So instead, the script
is now just KeyD--

00:07:09.240 --> 00:07:10.930
oh, I should have put R, oops.

00:07:10.930 --> 00:07:14.010
KeyD or KeyA and time.

00:07:14.010 --> 00:07:18.200
So instead of having
this key and time passes,

00:07:18.200 --> 00:07:20.420
or these other two
keys both sign,

00:07:20.420 --> 00:07:23.420
you just have a single key
that can sign immediately,

00:07:23.420 --> 00:07:28.260
or another key that can
sign after a period of time.

00:07:28.260 --> 00:07:32.360
So the actual
script used is this.

00:07:32.360 --> 00:07:37.850
You say OP_IF, the
KeyR, OP_ELSE, delay,

00:07:37.850 --> 00:07:41.495
OP_CHECKSEQUENCEVERIFY, OP_DROP,
then the KeyA, then the ENDIF,

00:07:41.495 --> 00:07:42.370
then the OP_CHECKSIG.

00:07:42.370 --> 00:07:44.030
So I'll walk through
this because it's

00:07:44.030 --> 00:07:45.710
a little confusing.

00:07:45.710 --> 00:07:48.990
The OP_IF takes an
item off the stack,

00:07:48.990 --> 00:07:50.395
and it's either true or false.

00:07:50.395 --> 00:07:51.770
So the first thing
you have to do

00:07:51.770 --> 00:07:54.600
is you have to indicate
which of these two paths

00:07:54.600 --> 00:07:56.210
you're going to use.

00:07:56.210 --> 00:07:59.270
Either you're going to
put KeyR on the stack,

00:07:59.270 --> 00:08:02.660
or you're going to put
this delay number, which

00:08:02.660 --> 00:08:05.810
is, say, 100 blocks, put
an OP_CHECKSEQUENCEVERIFY

00:08:05.810 --> 00:08:09.030
to verify that it has been
100 blocks since you created

00:08:09.030 --> 00:08:11.330
the transaction you're spending.

00:08:11.330 --> 00:08:13.370
And then you have
to drop the delay.

00:08:13.370 --> 00:08:14.870
This was to ensure
compatibility,

00:08:14.870 --> 00:08:16.580
since it's a soft fork.

00:08:16.580 --> 00:08:18.420
So old nodes would see this.

00:08:18.420 --> 00:08:21.500
Old nodes would see this,
they would see a no-op,

00:08:21.500 --> 00:08:25.590
and then they would see the drop
to get rid of this whole thing.

00:08:25.590 --> 00:08:28.400
So the old nodes
wouldn't see it at all.

00:08:28.400 --> 00:08:30.642
Then you have a KeyA
put on the stack,

00:08:30.642 --> 00:08:32.059
and then you end
the IF statement,

00:08:32.059 --> 00:08:33.500
and then you check signatures.

00:08:33.500 --> 00:08:35.059
So really the IF
statement is just

00:08:35.059 --> 00:08:41.340
determining which key gets
pushed onto the stack.

00:08:41.340 --> 00:08:43.200
And then after the
IF statement, there

00:08:43.200 --> 00:08:46.690
is a CHECKSIG to check the
signature from that key.

00:08:46.690 --> 00:08:50.400
So for example, if you're
using the revocation

00:08:50.400 --> 00:08:53.640
key, the key that has been
combined and revealed to you,

00:08:53.640 --> 00:08:57.800
you just put a 1 on the stack,
and then a signature from R.

00:08:57.800 --> 00:08:59.760
And then the OP_IF
results to true,

00:08:59.760 --> 00:09:03.450
so it executes this by just
pushing the key onto the stack.

00:09:03.450 --> 00:09:07.230
Then it executes OP_ELSE,
skips to OP_ENDIF,

00:09:07.230 --> 00:09:08.970
and then does OP_CHECKSIG.

00:09:08.970 --> 00:09:14.550
So basically you say 1, execute
OP_IF, KeyR, skip to CHECKSIG.

00:09:14.550 --> 00:09:17.960
So it's just, you need
to sign with this key.

00:09:17.960 --> 00:09:20.610
Or you say 0, and
signature from A.

00:09:20.610 --> 00:09:25.890
And then so the OP_IF takes
a 0, it skips to OP_ELSE

00:09:25.890 --> 00:09:33.870
because it's not true, it
pushes delay onto the stack,

00:09:33.870 --> 00:09:36.690
performs CHECKSEQUENCEVERIFY to
make sure that enough time has

00:09:36.690 --> 00:09:40.160
passed, drops the delay
number off the stack,

00:09:40.160 --> 00:09:41.910
which is a little
ugly-- it would be nicer

00:09:41.910 --> 00:09:46.530
if OP_CHECKSEQUENCEVERIFY did
that itself, but it doesn't--

00:09:46.530 --> 00:09:52.380
then pushes KeyA onto the
stack, ends the IF statement,

00:09:52.380 --> 00:09:54.120
and checks the signature.

00:09:54.120 --> 00:09:56.280
So it's a little
more complicated

00:09:56.280 --> 00:10:01.770
than in C, where you just can
say, KeyD or KeyA and time.

00:10:01.770 --> 00:10:04.110
But this is stack-based.

00:10:04.110 --> 00:10:08.370
And it's not too hard when
you get these things to work.

00:10:08.370 --> 00:10:12.690
So any questions
about this setup?

00:10:12.690 --> 00:10:13.420
Yes.

00:10:13.420 --> 00:10:15.510
AUDIENCE: So what's
OP_DROP again?

00:10:15.510 --> 00:10:17.880
TADGE DRYJA: OP_DROP takes
the topmost item on the stack

00:10:17.880 --> 00:10:23.400
and deletes it, and all the
lower items come back up.

00:10:23.400 --> 00:10:26.910
Yeah, it's just so that,
compatibility-wise--

00:10:26.910 --> 00:10:28.470
there would be ways to--

00:10:30.990 --> 00:10:32.690
since OP_CHECKSEQUENCEVERIFY
basically,

00:10:32.690 --> 00:10:35.280
this used to be a no-op
where it did nothing.

00:10:35.280 --> 00:10:39.090
And then the soft fork was,
OK, we're redefining no-op 3,

00:10:39.090 --> 00:10:41.790
I believe, to
OP_CHECKSEQUENCEVERIFY, where

00:10:41.790 --> 00:10:46.680
it looks at, basically,
the age of your inputs,

00:10:46.680 --> 00:10:49.650
and how many confirmations
your inputs have had,

00:10:49.650 --> 00:10:53.670
or really the specific input
you're spending in this case.

00:10:53.670 --> 00:10:55.680
Old nodes would just
see it as a no-op,

00:10:55.680 --> 00:10:59.220
and so you could put
something like delay,

00:10:59.220 --> 00:11:01.500
OP_CHECKSEQUENCEVERIFY,
and then an OP code

00:11:01.500 --> 00:11:05.070
around here that says, make
sure the top item on the stack

00:11:05.070 --> 00:11:07.200
is greater than 5.

00:11:07.200 --> 00:11:09.840
And if this consumed
the delay value

00:11:09.840 --> 00:11:12.630
by taking it off the
stack, the old nodes

00:11:12.630 --> 00:11:14.130
might say, oh, this isn't valid.

00:11:14.130 --> 00:11:19.800
Even though this is a no-op,
the subsequent OP code

00:11:19.800 --> 00:11:21.120
causes this to fail.

00:11:21.120 --> 00:11:23.400
Whereas in the new
version, it would be like,

00:11:23.400 --> 00:11:26.580
no, this is good because
this consumes that value.

00:11:26.580 --> 00:11:29.340
And that would actually make it
a hard fork, because then there

00:11:29.340 --> 00:11:32.040
would be transactions
where the old nodes thought

00:11:32.040 --> 00:11:35.940
it was not good and the new
nodes thought, yes, this is OK.

00:11:35.940 --> 00:11:40.650
So to ensure that
this only restricts

00:11:40.650 --> 00:11:45.120
the validity of scripts,
it doesn't pop that off.

00:11:45.120 --> 00:11:47.040
So you have to manually drop it.

00:11:47.040 --> 00:11:48.480
And DROP is there from before.

00:11:48.480 --> 00:11:52.247
So to an old node, it would
say delay, no OP_DROP.

00:11:52.247 --> 00:11:54.330
And it's like, OK, you put
something in the stack,

00:11:54.330 --> 00:11:58.230
you do nothing, and then you
take it off the stack-- fine.

00:11:58.230 --> 00:12:00.530
So that's just a
compatibility thing.

00:12:00.530 --> 00:12:02.280
If you were going to
make it from scratch,

00:12:02.280 --> 00:12:04.670
you'd probably do
it differently.

00:12:04.670 --> 00:12:06.670
Other questions about this?

00:12:06.670 --> 00:12:08.325
OK, cool.

00:12:13.240 --> 00:12:14.800
So then you reveal keys.

00:12:14.800 --> 00:12:21.040
You keep revealing things each
time you make a new state.

00:12:21.040 --> 00:12:24.432
And you can do these
several times a second.

00:12:24.432 --> 00:12:26.640
You can do it 10 times a
second, something like that.

00:12:26.640 --> 00:12:28.120
So you can have
millions, billions

00:12:28.120 --> 00:12:29.740
of different old transactions.

00:12:29.740 --> 00:12:31.930
The problem is, you
do have to remember

00:12:31.930 --> 00:12:35.710
all of these old private keys
that your counterparty has

00:12:35.710 --> 00:12:36.640
given to you.

00:12:36.640 --> 00:12:41.008
Because if you forget one, they
might broadcast a transaction

00:12:41.008 --> 00:12:43.300
where you really need to know
that private key in order

00:12:43.300 --> 00:12:45.310
to grab the money immediately.

00:12:45.310 --> 00:12:50.020
So for example, you forget--

00:12:50.020 --> 00:12:54.160
this was revoked, but you forgot
about it, and you're Alice,

00:12:54.160 --> 00:12:55.713
and then Bob broadcasts this.

00:12:55.713 --> 00:12:57.380
You really need to
know that private key

00:12:57.380 --> 00:13:03.040
so you can grab Bob's five
coins with your combined key.

00:13:03.040 --> 00:13:06.720
So you need to keep track of
all of these little things.

00:13:06.720 --> 00:13:08.220
So it's 32 bytes each.

00:13:08.220 --> 00:13:10.050
It's not great for scalability.

00:13:10.050 --> 00:13:12.150
So there's actually a
couple of different ways

00:13:12.150 --> 00:13:12.900
you could do this.

00:13:12.900 --> 00:13:18.830
How can you remember a
chain of 32-byte secrets?

00:13:18.830 --> 00:13:23.110
A merkle tree itself would
have a root here, and then

00:13:23.110 --> 00:13:30.050
a bunch of little hashes that
go up to the tree's root.

00:13:30.050 --> 00:13:32.170
So if these were secrets--

00:13:32.170 --> 00:13:33.460
you can't go back down, right?

00:13:33.460 --> 00:13:37.540
So if you're like, OK, I got
secret 0, secret 1, secret 2,

00:13:37.540 --> 00:13:40.420
secret 3, well, I've got the
parents of these two things,

00:13:40.420 --> 00:13:43.180
but I can't actually
remember them any better.

00:13:43.180 --> 00:13:45.580
So a real simple way--

00:13:45.580 --> 00:13:47.430
say, OK, I've got--

00:13:47.430 --> 00:13:49.240
and you can construct
it however you want.

00:13:49.240 --> 00:13:51.282
Obviously if your counterparty
is not cooperating

00:13:51.282 --> 00:13:54.520
and these secret numbers
are just completely random,

00:13:54.520 --> 00:13:55.930
there's nothing you can do.

00:13:55.930 --> 00:13:57.722
If he just says, hey,
I'm going to give you

00:13:57.722 --> 00:13:59.740
secret 0, secret 1,
secret 2, there's

00:13:59.740 --> 00:14:02.620
no special properties
about these things.

00:14:02.620 --> 00:14:04.270
I can't do anything.

00:14:04.270 --> 00:14:06.790
The simplest way-- what's
a real simple way to say,

00:14:06.790 --> 00:14:09.730
OK, I'm going to reveal
secrets sequentially,

00:14:09.730 --> 00:14:11.560
and then you can
store fewer of them?

00:14:19.830 --> 00:14:22.382
It's sort of like a
blockchain, right?

00:14:22.382 --> 00:14:23.620
[CHUCKLING]

00:14:23.620 --> 00:14:30.750
So you could just say, OK,
well, I create secret 3.

00:14:30.750 --> 00:14:35.210
Secret 2 is the
hash of secret 3.

00:14:35.210 --> 00:14:39.860
Secret 1 is the
hash of secret 2.

00:14:39.860 --> 00:14:42.920
And so now I reveal 1.

00:14:42.920 --> 00:14:45.050
You don't know what
2 is, and so on.

00:14:45.050 --> 00:14:47.990
So 0 equals hash of 1.

00:14:47.990 --> 00:14:51.140
So you could just
have a linear chain,

00:14:51.140 --> 00:14:54.260
like this, so 0, 1, 2, 3.

00:14:54.260 --> 00:14:57.830
If you remember 3, you can
compute 2, and 1, and 0.

00:14:57.830 --> 00:15:01.250
If you remember 2, you can
compute 1 and 0, but not 3.

00:15:01.250 --> 00:15:02.955
So you can do that.

00:15:02.955 --> 00:15:04.580
That would actually
probably work fine.

00:15:04.580 --> 00:15:07.490
But we always want to
make unnecessary complex

00:15:07.490 --> 00:15:09.860
optimizations to things.

00:15:09.860 --> 00:15:13.280
So the problem with this is if
you've got a billion of them,

00:15:13.280 --> 00:15:16.550
and you need to go
back to the first one,

00:15:16.550 --> 00:15:20.280
you need to compute a
billion hash operations.

00:15:20.280 --> 00:15:21.530
That's kind of slow.

00:15:21.530 --> 00:15:24.770
So what we do--
or the basic idea,

00:15:24.770 --> 00:15:26.390
there's multiple
implementations,

00:15:26.390 --> 00:15:27.800
slight variations--

00:15:27.800 --> 00:15:29.090
you have a hash tree.

00:15:29.090 --> 00:15:30.680
So you reveal secrets
one at a time,

00:15:30.680 --> 00:15:32.720
you store only log(n)
secrets, and you

00:15:32.720 --> 00:15:37.210
re-compute any secret you want
with something around log(n)

00:15:37.210 --> 00:15:39.020
operations.

00:15:39.020 --> 00:15:40.070
I called it Elkrem.

00:15:40.070 --> 00:15:42.050
I think there's an
actual paper that

00:15:42.050 --> 00:15:43.810
basically is this, called GGM.

00:15:43.810 --> 00:15:47.860
And that's, I think,
written by people at MIT.

00:15:47.860 --> 00:15:50.110
But I called it Elkrem because
it's basically a merkle

00:15:50.110 --> 00:15:51.800
tree backwards, because
the arrows point

00:15:51.800 --> 00:15:54.690
the other direction.

00:15:54.690 --> 00:15:57.980
So in this case, you
start with a route-- you

00:15:57.980 --> 00:16:02.640
start with something up here.

00:16:02.640 --> 00:16:05.220
And you say, OK, if I
wanted to send to the left,

00:16:05.220 --> 00:16:09.630
I append a 0 to the
hash value of this root,

00:16:09.630 --> 00:16:11.550
and I hash to get that one.

00:16:11.550 --> 00:16:14.700
And if I want to go right,
I append a 1 at the end,

00:16:14.700 --> 00:16:16.980
hash that, and then
I go down here.

00:16:16.980 --> 00:16:19.160
So what that lets you do is--

00:16:19.160 --> 00:16:21.010
there is a sender
and a receiver.

00:16:21.010 --> 00:16:24.810
The sender just computes
a route, and stores that.

00:16:24.810 --> 00:16:27.045
They make a random
route up, store it,

00:16:27.045 --> 00:16:28.420
and then they also
keep track of,

00:16:28.420 --> 00:16:31.020
OK how many secrets
have I given?

00:16:31.020 --> 00:16:35.160
The receiver just receives
the first one, number 0--

00:16:35.160 --> 00:16:37.220
can't do anything.

00:16:37.220 --> 00:16:38.720
They receive 1.

00:16:38.720 --> 00:16:41.000
OK, still can't do anything.

00:16:41.000 --> 00:16:42.470
They receive 2.

00:16:42.470 --> 00:16:44.930
Now they can say, OK, well
I can throw away 0 and 1,

00:16:44.930 --> 00:16:48.140
because if I want to compute
0 and 1, I can just store 2.

00:16:48.140 --> 00:16:49.880
And if I want them
to send to the left,

00:16:49.880 --> 00:16:53.340
append to zero, and hash if
I want to send to the right--

00:16:53.340 --> 00:16:56.680
So I don't store
these, but I know

00:16:56.680 --> 00:16:58.660
they're still computable
for me if I ever

00:16:58.660 --> 00:17:01.030
want to grab them back.

00:17:01.030 --> 00:17:02.640
I receive 3, can't do anything.

00:17:02.640 --> 00:17:06.010
I receive 4, can't do anything.

00:17:06.010 --> 00:17:10.450
I receive 5, now I can do
the same thing with 3 and 4,

00:17:10.450 --> 00:17:15.130
remove those from the disk,
and only store 2 and 5.

00:17:15.130 --> 00:17:18.220
So if I get a request for
3, I can easily compute it.

00:17:18.220 --> 00:17:21.160
And then I receive 6, and I
can delete those two as well.

00:17:21.160 --> 00:17:24.160
So as I go up the
tree, sometimes I only

00:17:24.160 --> 00:17:25.869
have to store one
thing, sometimes

00:17:25.869 --> 00:17:29.272
I have to store three
things, because that's

00:17:29.272 --> 00:17:30.230
the height of the tree.

00:17:30.230 --> 00:17:34.540
Well, it's basically you
have to store at most one

00:17:34.540 --> 00:17:37.540
on every level, and
then sometimes two

00:17:37.540 --> 00:17:39.070
if there are two leaves.

00:17:39.070 --> 00:17:42.910
So basically log(n) storage,
and computing hashes

00:17:42.910 --> 00:17:44.300
is pretty quick, too.

00:17:44.300 --> 00:17:47.740
So that's a fun way
to only have to store

00:17:47.740 --> 00:17:50.170
a very small amount of data.

00:17:50.170 --> 00:17:52.080
Any questions about this?

00:17:52.080 --> 00:17:53.170
OK, so we're going quick.

00:17:56.326 --> 00:17:57.880
[INAUDIBLE] quick.

00:17:57.880 --> 00:18:00.890
OK, so we'll talk about
cross-chain swaps for most

00:18:00.890 --> 00:18:03.080
of the bulk of this day.

00:18:03.080 --> 00:18:06.580
So there are altcoins.

00:18:06.580 --> 00:18:07.930
I mostly work on Bitcoin.

00:18:07.930 --> 00:18:09.350
I think a lot of the
research is on Bitcoin.

00:18:09.350 --> 00:18:11.100
But there's a lot of
different coins, too.

00:18:11.100 --> 00:18:16.297
People saw the idea of Bitcoin
and said, hey, let's copy it.

00:18:16.297 --> 00:18:18.130
So initially, most of
them were just copies.

00:18:20.670 --> 00:18:22.590
There was a site
called coingen.io.

00:18:22.590 --> 00:18:25.530
So like 2012,
there started to be

00:18:25.530 --> 00:18:30.000
a lot of all coins, like
Litecoin, and Dogecoin,

00:18:30.000 --> 00:18:31.270
and things like that.

00:18:31.270 --> 00:18:33.990
And most of them were
real small changes,

00:18:33.990 --> 00:18:37.318
where they took the Bitcoin
source code on GitHub,

00:18:37.318 --> 00:18:39.360
and they changed a couple
numbers here and there,

00:18:39.360 --> 00:18:41.940
and they said, OK,
well, it's a new coin.

00:18:41.940 --> 00:18:45.480
And then BlueMatt made a site
called coingen.io, where you

00:18:45.480 --> 00:18:46.950
could do it all very easily.

00:18:46.950 --> 00:18:49.560
For people who weren't
programming-savvy,

00:18:49.560 --> 00:18:52.530
they could just make their
own altcoin by menus.

00:18:52.530 --> 00:18:55.500
There's a website, you say, I
want it to be called Tadgecoin,

00:18:55.500 --> 00:18:59.220
I want there to be 25
coins every three minutes,

00:18:59.220 --> 00:18:59.790
and I want--

00:18:59.790 --> 00:19:01.853
you know, just a
bunch of things.

00:19:01.853 --> 00:19:03.270
You could upload
a little picture,

00:19:03.270 --> 00:19:09.470
and it would make a program
for you based on those things.

00:19:09.470 --> 00:19:11.010
And then I think
he sold the site.

00:19:11.010 --> 00:19:14.440
I think it was the first
blockchain technology company,

00:19:14.440 --> 00:19:15.560
as far as I'm concerned.

00:19:15.560 --> 00:19:18.960
OK, so then recent ones
are very different.

00:19:18.960 --> 00:19:21.450
People trade altcoins
for bitcoins,

00:19:21.450 --> 00:19:24.810
and trade altcoins for altcoins,
and they use exchanges.

00:19:24.810 --> 00:19:26.420
I don't know if--

00:19:26.420 --> 00:19:30.160
have people here used
exchanges to trade altcoins?

00:19:30.160 --> 00:19:31.150
Some.

00:19:31.150 --> 00:19:32.230
I actually have.

00:19:32.230 --> 00:19:34.100
I hadn't until last year.

00:19:34.100 --> 00:19:38.320
But there was these
sort of hard forks

00:19:38.320 --> 00:19:40.540
from Bitcoin, like Bitcoin
Cash, and Bitcoin Gold,

00:19:40.540 --> 00:19:41.415
and Bitcoin whatever.

00:19:41.415 --> 00:19:43.510
And so I actually
opened an account,

00:19:43.510 --> 00:19:45.150
and sold them, and
got more Bitcoins.

00:19:45.150 --> 00:19:45.892
[CHUCKLING]

00:19:45.892 --> 00:19:46.600
How do you trade?

00:19:46.600 --> 00:19:48.730
Well, you use an exchange.

00:19:48.730 --> 00:19:50.920
And so the current
exchange model,

00:19:50.920 --> 00:19:54.730
pretty much without fail,
is give us all your coins,

00:19:54.730 --> 00:19:57.760
post orders on our site
to swap with other users,

00:19:57.760 --> 00:20:00.600
and then ask for
your coins back.

00:20:00.600 --> 00:20:04.680
So the "give us all your
coins" part, it works fine.

00:20:04.680 --> 00:20:07.500
They give you an address,
you send your coins

00:20:07.500 --> 00:20:10.650
to their address, and
it'll appear on their site,

00:20:10.650 --> 00:20:11.500
generally.

00:20:11.500 --> 00:20:14.100
But you definitely
can send your coins.

00:20:14.100 --> 00:20:18.690
The "ask for your coins back" is
where the model tends to fail.

00:20:18.690 --> 00:20:24.450
There's many, many cases where
they don't give them back.

00:20:24.450 --> 00:20:28.380
And there's a lot
of reasons for this.

00:20:28.380 --> 00:20:29.160
So Mt.

00:20:29.160 --> 00:20:32.070
Gox was one of the most
prominent early ones,

00:20:32.070 --> 00:20:36.360
but it certainly
wasn't the first.

00:20:36.360 --> 00:20:38.540
Probably one of the first
was called MyBitcoins.com.

00:20:38.540 --> 00:20:40.590
And then it was sort of--

00:20:40.590 --> 00:20:42.300
I don't know if it
was intentional,

00:20:42.300 --> 00:20:45.184
but the joke, after, was like,
well, it's his bitcoins now.

00:20:45.184 --> 00:20:46.546
[CHUCKLING]

00:20:47.820 --> 00:20:50.910
It was more of a web wallet
that had private keys

00:20:50.910 --> 00:20:52.290
than an actual exchange.

00:20:52.290 --> 00:20:54.810
But a lot of these exchanges--

00:20:54.810 --> 00:20:56.910
they're really easy to set up.

00:20:56.910 --> 00:21:00.240
You just write some
software, and people

00:21:00.240 --> 00:21:01.380
start sending you coins.

00:21:01.380 --> 00:21:04.110
And then either there's
internal problems

00:21:04.110 --> 00:21:06.240
where you've got
some rogue employee,

00:21:06.240 --> 00:21:08.670
or the rogue employee
is the only employee,

00:21:08.670 --> 00:21:12.240
and someone just realizes, hey,
this computer in front of me

00:21:12.240 --> 00:21:15.560
has $20 million
worth of stuff on it.

00:21:15.560 --> 00:21:20.370
I think I'll just unplug
it and keep all the money.

00:21:20.370 --> 00:21:21.890
Also hackers, right?

00:21:21.890 --> 00:21:23.670
They're probably
the best targets

00:21:23.670 --> 00:21:26.850
for trying to intrude
and hack into a system

00:21:26.850 --> 00:21:27.600
that you can find.

00:21:27.600 --> 00:21:30.060
Because there's a whole ton
of money on this computer.

00:21:30.060 --> 00:21:34.680
It's not like data or, oh, I
get someone's Facebook pictures

00:21:34.680 --> 00:21:36.820
or I get someone's
credit card numbers.

00:21:36.820 --> 00:21:41.020
Yeah, that's nice, but
bitcoins are sort of money,

00:21:41.020 --> 00:21:42.110
and you just steal them.

00:21:42.110 --> 00:21:45.067
OK, so other problems
with the exchange model

00:21:45.067 --> 00:21:46.650
is that people tend
to trust it a lot,

00:21:46.650 --> 00:21:48.420
and they think, well, this is--

00:21:48.420 --> 00:21:51.660
they assume that
it's like a bank,

00:21:51.660 --> 00:21:54.418
and banks are very trustworthy,
because in recent memory

00:21:54.418 --> 00:21:56.460
there haven't really been
bank failures, at least

00:21:56.460 --> 00:21:57.127
in this country.

00:21:57.127 --> 00:22:01.630
So they sort of carry that trust
forward, and bad things happen.

00:22:01.630 --> 00:22:03.090
So the idea is,
wouldn't it be cool

00:22:03.090 --> 00:22:05.910
if we could have
cross-chain swaps, where

00:22:05.910 --> 00:22:09.600
we have some kind of way where,
I've got a bunch of coinA,

00:22:09.600 --> 00:22:12.180
you've got a bunch of
coinB, and we can swap

00:22:12.180 --> 00:22:16.110
between them without giving
custody to some third party

00:22:16.110 --> 00:22:18.580
or even giving
custody to each other.

00:22:18.580 --> 00:22:22.620
So you can do this using Hash
Time Locked Contracts, just

00:22:22.620 --> 00:22:24.270
like in the Lighting Network.

00:22:24.270 --> 00:22:27.960
So you get this coin if and
only if I get this other coin.

00:22:27.960 --> 00:22:30.180
You want them to be atomic.

00:22:30.180 --> 00:22:33.180
Even if it's very quick, you
don't want any period of time

00:22:33.180 --> 00:22:38.590
in which one party has all the
assets or more of the assets.

00:22:38.590 --> 00:22:40.450
So the interesting
thing about this

00:22:40.450 --> 00:22:43.870
is the Lightning Network
sort of does this already.

00:22:43.870 --> 00:22:48.130
The Lightning Network is a
way to make atomic payments

00:22:48.130 --> 00:22:49.532
between different channels.

00:22:49.532 --> 00:22:51.490
And then if you look at
these channels and say,

00:22:51.490 --> 00:22:55.260
well, do the channels have
to be on the same coin,

00:22:55.260 --> 00:22:57.010
do they have to be in
the same blockchain?

00:22:57.010 --> 00:22:58.930
And basically, no,
not much difference

00:22:58.930 --> 00:23:04.100
has to happen for them to
be different blockchains.

00:23:04.100 --> 00:23:08.120
OK, so this is the HTLC
slide from last time.

00:23:08.120 --> 00:23:11.980
It's similar in that you have
these two outputs, the same as

00:23:11.980 --> 00:23:15.730
in a regular lightning payment
channel that's at rest.

00:23:15.730 --> 00:23:19.450
So for example, Bob holds this,
where if he broadcasts this,

00:23:19.450 --> 00:23:21.910
Alice gets two coins
right off the bat,

00:23:21.910 --> 00:23:29.170
Bob needs to wait 100 blocks, or
Alice can know Bob's revocation

00:23:29.170 --> 00:23:32.830
key, and she can get seven coins
or he gets the seven coins.

00:23:32.830 --> 00:23:35.290
And then you've got this HTLC,
Hash Time Locked Contract,

00:23:35.290 --> 00:23:41.130
where Alice needs to a
pre-image [INAUDIBLE]..

00:23:41.130 --> 00:23:46.750
Well, yeah, Alice needs to
know R, this receipt, or Bob

00:23:46.750 --> 00:23:48.220
has to wait.

00:23:48.220 --> 00:23:53.500
But the difference in waiting
is this is a relative time lock,

00:23:53.500 --> 00:23:58.630
so that Bob has to wait 100
blocks after he broadcasts

00:23:58.630 --> 00:24:00.940
this transaction.

00:24:00.940 --> 00:24:05.470
Whereas in this case, Bob has
to wait until height 500,000,

00:24:05.470 --> 00:24:07.990
regardless of when he
broadcasts this transaction.

00:24:07.990 --> 00:24:10.540
So it may be that he can
broadcast this transaction

00:24:10.540 --> 00:24:13.390
and immediately spend
by signing here,

00:24:13.390 --> 00:24:15.580
because that time has passed.

00:24:15.580 --> 00:24:17.628
So it's seems like
a small distinction,

00:24:17.628 --> 00:24:19.420
but it's actually pretty
important for this

00:24:19.420 --> 00:24:23.130
to be just absolute time.

00:24:23.130 --> 00:24:24.910
So that's how an HTLC works.

00:24:24.910 --> 00:24:28.810
This output's
Alice's, no question.

00:24:28.810 --> 00:24:30.640
This output should be Bob's.

00:24:30.640 --> 00:24:33.850
And by should, I
mean something's

00:24:33.850 --> 00:24:38.920
gone pretty seriously wrong
if Alice takes this money.

00:24:38.920 --> 00:24:40.250
This only is due to fraud.

00:24:40.250 --> 00:24:42.250
And fraud is not like in
a legal, defined sense.

00:24:42.250 --> 00:24:45.370
But we sort of can
think of, basically,

00:24:45.370 --> 00:24:47.830
this is always going to be
Alice's, this is approximately

00:24:47.830 --> 00:24:49.360
always going to be Bob's.

00:24:49.360 --> 00:24:51.730
This one, we're really not sure.

00:24:51.730 --> 00:24:54.460
This can fail, and it's
not due to any malice.

00:24:54.460 --> 00:24:58.840
This can-- it should be Alice's.

00:24:58.840 --> 00:25:00.790
You're trying to pay Alice here.

00:25:00.790 --> 00:25:03.760
But it may well be the case
that Bob takes it back.

00:25:03.760 --> 00:25:05.410
And that's not due
to fraud, that's

00:25:05.410 --> 00:25:09.040
just due to computers crashing,
or networks not working right,

00:25:09.040 --> 00:25:10.540
or something like that.

00:25:10.540 --> 00:25:13.300
This can sort of
innocently be broadcast

00:25:13.300 --> 00:25:17.560
and go back to Bob,
whereas this can't, really.

00:25:17.560 --> 00:25:21.430
Any questions about
the HTLC basic idea?

00:25:21.430 --> 00:25:25.150
So Alice needs to
know this secret,

00:25:25.150 --> 00:25:28.020
or Bob has to wait
until a certain time.

00:25:28.020 --> 00:25:32.530
OK, so the cross-chain
swaps is basically

00:25:32.530 --> 00:25:34.810
the same as a routing
payment in Lightning.

00:25:34.810 --> 00:25:37.810
Before, we said, OK, Alice
has a channel with Bob,

00:25:37.810 --> 00:25:40.270
Bob has a channel
with Carol, and now

00:25:40.270 --> 00:25:44.710
Alice wants to pay Carol
without opening a new channel.

00:25:44.710 --> 00:25:46.480
In the case of
lightning, where it's

00:25:46.480 --> 00:25:48.280
all on the same
blockchain, Alice

00:25:48.280 --> 00:25:50.290
could open a payment
channel to Carol

00:25:50.290 --> 00:25:52.690
and spend directly that way.

00:25:52.690 --> 00:25:55.480
In the case where these two
are different blockchains,

00:25:55.480 --> 00:25:57.100
you can't actually do that.

00:25:57.100 --> 00:25:58.730
You can't say,
oh, I'm going to--

00:25:58.730 --> 00:26:00.850
there's no defined
channel that will

00:26:00.850 --> 00:26:03.840
link two different blockchains.

00:26:03.840 --> 00:26:05.310
The other aspect
is, although this

00:26:05.310 --> 00:26:07.290
can work with three
parties, in the case

00:26:07.290 --> 00:26:10.500
of swaps, you're
generally not saying,

00:26:10.500 --> 00:26:16.120
hey, Bob, I will pay you five
Dogecoins if you pay Carol 100

00:26:16.120 --> 00:26:17.070
Vertcoins.

00:26:17.070 --> 00:26:20.190
You're usually saying, if
you pay me 100 Vertcoins.

00:26:20.190 --> 00:26:24.270
So usually it's
Alice sending to Bob,

00:26:24.270 --> 00:26:26.610
who's sending back to Alice.

00:26:26.610 --> 00:26:29.300
It still works if this is
the third party, Carol.

00:26:29.300 --> 00:26:31.800
But it sort of doesn't make as
much sense, because generally

00:26:31.800 --> 00:26:34.258
you're saying, hey, I'll give
you this if you give me that.

00:26:36.020 --> 00:26:38.960
So in this case, we have
two different blockchains.

00:26:38.960 --> 00:26:40.880
We've actually reduced
the number of parties,

00:26:40.880 --> 00:26:42.303
where it's just Alice and Bob.

00:26:42.303 --> 00:26:43.970
But we've got two
different blockchains.

00:26:43.970 --> 00:26:46.580
We've got Dogecoin,
which I think is yellow,

00:26:46.580 --> 00:26:48.555
and then Vertcoin is greenish.

00:26:48.555 --> 00:26:50.400
AUDIENCE: [INAUDIBLE]

00:26:50.400 --> 00:26:52.400
TADGE DRYJA: Oh, because
they don't have SegWit.

00:26:52.400 --> 00:26:55.597
Well, say Dogecoin
upgrades pretty soon.

00:26:55.597 --> 00:26:57.090
[CHUCKLING]

00:26:57.090 --> 00:26:59.360
So you could, but you'd
have to write a lot of code

00:26:59.360 --> 00:27:00.620
to deal with that.

00:27:00.620 --> 00:27:04.002
And to us, it's way
easier to just merge and--

00:27:04.002 --> 00:27:06.750
AUDIENCE: They don't have
CHECKSEQUENCEVERIFY on?

00:27:06.750 --> 00:27:08.930
There's probably ways
around it, but yeah--

00:27:08.930 --> 00:27:10.170
TADGE DRYJA: Just upgrade--

00:27:10.170 --> 00:27:11.910
who's in charge of Doge?

00:27:11.910 --> 00:27:12.770
I don't know.

00:27:12.770 --> 00:27:14.300
Tell them to upgrade.

00:27:14.300 --> 00:27:18.080
So a lot of these
altcoins, there's

00:27:18.080 --> 00:27:20.242
sort of archaeological
aspects to them,

00:27:20.242 --> 00:27:21.950
where you can see
where they branched off

00:27:21.950 --> 00:27:23.900
of the main Bitcoin codebase.

00:27:23.900 --> 00:27:25.970
Because a lot of times
they don't get updated

00:27:25.970 --> 00:27:28.000
because no one's
really working on them.

00:27:28.000 --> 00:27:30.500
Despite no one really working
on them or looking at them,

00:27:30.500 --> 00:27:32.750
they can still be worth
a billion dollars,

00:27:32.750 --> 00:27:34.430
as I think Doge was
a few months ago.

00:27:36.725 --> 00:27:38.600
So sometimes they catch
up, and they're like,

00:27:38.600 --> 00:27:40.850
oh, let's take all the code
from Bitcoin that they've

00:27:40.850 --> 00:27:43.340
developed from the last
few years and apply it.

00:27:43.340 --> 00:27:45.680
Sometimes the opposite
happens, where an altcoin will

00:27:45.680 --> 00:27:48.710
make something cool, and people
in Bitcoin will merge it in,

00:27:48.710 --> 00:27:51.820
but it's generally the
opposite direction.

00:27:51.820 --> 00:27:57.280
OK, so you've got these two
channels that have been set up.

00:27:57.280 --> 00:28:03.040
And Alice wants to sell her
Dogecoin and buy Vertcoin.

00:28:03.040 --> 00:28:08.797
So you have the same HTLC
construction, where Alice--

00:28:08.797 --> 00:28:10.630
what's interesting in
this case is that it's

00:28:10.630 --> 00:28:11.690
the same person on both sides.

00:28:11.690 --> 00:28:13.815
So there's actually some
optimizations you can use.

00:28:13.815 --> 00:28:16.120
But forget those for a second.

00:28:16.120 --> 00:28:18.490
Alice computes a
random number, R,

00:28:18.490 --> 00:28:21.168
hashes it to make
H. She sends it

00:28:21.168 --> 00:28:23.710
to herself, which doesn't really
make any sense in this case.

00:28:23.710 --> 00:28:26.430
So you can skip that step.

00:28:26.430 --> 00:28:31.220
Alice already knows H
and already knows R, so--

00:28:31.220 --> 00:28:35.010
but Alice doesn't have to
be Alice, it could be Carol.

00:28:35.010 --> 00:28:36.930
So there's optimizations
that you can do

00:28:36.930 --> 00:28:39.150
when they're the same person.

00:28:39.150 --> 00:28:41.690
OK, so she constructs
an HTLC to Bob.

00:28:41.690 --> 00:28:45.930
She says, OK, if Bob knows
R, he gets this money.

00:28:45.930 --> 00:28:49.290
Otherwise, Alice gets
it after 5 o'clock.

00:28:49.290 --> 00:28:54.900
Bob says, OK, I don't know R,
so I can't get these Dogecoins.

00:28:54.900 --> 00:29:01.440
Bob then forwards it to Alice,
saying, OK, if Alice knows R,

00:29:01.440 --> 00:29:06.060
she gets the coins, if Bob
waits till after 4 o'clock,

00:29:06.060 --> 00:29:09.100
he gets the coins.

00:29:09.100 --> 00:29:11.830
So it's sort of like why
make this construction?

00:29:11.830 --> 00:29:17.100
It actually still makes sense,
because even though Bob knows

00:29:17.100 --> 00:29:22.650
that Alice knows R, Alice
will have to reveal R in order

00:29:22.650 --> 00:29:27.985
to take the coins, right?

00:29:27.985 --> 00:29:29.610
So it's saying, OK,
you need to know R,

00:29:29.610 --> 00:29:32.280
and you need to not just know R,
but you have to show everyone.

00:29:32.280 --> 00:29:34.740
Because the actual
script says, OK, you

00:29:34.740 --> 00:29:38.940
need to know the pre-image
of this 20-byte hash.

00:29:38.940 --> 00:29:41.130
And when you actually
spend, you have

00:29:41.130 --> 00:29:43.320
to put that pre-image
in the blockchain.

00:29:43.320 --> 00:29:46.200
You have to put it in your
input for your transaction,

00:29:46.200 --> 00:29:47.620
and then Bob can see it.

00:29:47.620 --> 00:29:51.180
So the idea is, if Alice closes
this channel in Vertcoin,

00:29:51.180 --> 00:29:54.360
takes the coins by using
R, Bob will know R,

00:29:54.360 --> 00:29:56.160
and Bob will know it's
the same R that he

00:29:56.160 --> 00:30:01.200
can use to take the coins
on the Dogecoin network.

00:30:01.200 --> 00:30:04.450
So you add these two HTLCs.

00:30:04.450 --> 00:30:06.100
You then clear them out.

00:30:06.100 --> 00:30:10.170
So instead of revealing
R on the blockchain,

00:30:10.170 --> 00:30:13.810
Alice can just reveal
R directly to Bob,

00:30:13.810 --> 00:30:16.600
say, I'm clearing out
this HTLC because here's

00:30:16.600 --> 00:30:20.860
R. You know that I can do this,
so just give me the coins.

00:30:20.860 --> 00:30:23.800
You also know R, so you
can take the coins yourself

00:30:23.800 --> 00:30:26.052
if I don't cooperate
on that end.

00:30:26.052 --> 00:30:27.010
But hopefully she does.

00:30:27.010 --> 00:30:28.542
So then you can get
rid of the HTLC.

00:30:28.542 --> 00:30:30.000
Now it's back down
the two outputs.

00:30:34.480 --> 00:30:38.210
And then Bob says, OK,
I've lost the Vertcoin

00:30:38.210 --> 00:30:40.810
and I haven't really
gotten the Dogecoin yet,

00:30:40.810 --> 00:30:44.160
but I know I can close the
channel and take it if need be.

00:30:44.160 --> 00:30:45.640
And then Bob goes
to Alice, and she

00:30:45.640 --> 00:30:49.270
already knows R, but look, you
know that I know R, let's clear

00:30:49.270 --> 00:30:50.590
this.

00:30:50.590 --> 00:30:52.650
And then Alice can just
send the coins that way.

00:30:55.990 --> 00:30:58.730
OK, so any questions
about this setup?

00:30:58.730 --> 00:30:59.763
Yes.

00:30:59.763 --> 00:31:01.180
AUDIENCE: Because
there's latency,

00:31:01.180 --> 00:31:05.605
can Alice mess with Bob,
basically, take the Vertcoin

00:31:05.605 --> 00:31:08.120
before Bob has a
chance to get the Doge,

00:31:08.120 --> 00:31:10.160
and basically screw Bob?

00:31:10.160 --> 00:31:13.340
TADGE DRYJA: Yeah, well, that's
why you have different times

00:31:13.340 --> 00:31:14.870
here.

00:31:14.870 --> 00:31:20.310
So yes, that is possible, that
you could get to this step,

00:31:20.310 --> 00:31:22.720
and then Alice goes offline
and shuts the channels down,

00:31:22.720 --> 00:31:23.880
closes the channels.

00:31:23.880 --> 00:31:28.950
But the idea is that Bob
can grab these coins back

00:31:28.950 --> 00:31:33.000
after 4 PM, whereas Alice
has to wait until 5 PM

00:31:33.000 --> 00:31:34.050
to grab these coins back.

00:31:36.650 --> 00:31:43.640
So if Alice closes and tries to
wait till right before 4:00 PM

00:31:43.640 --> 00:31:48.020
and then immediately grab
these coins, Bob's actually OK.

00:31:48.020 --> 00:31:50.950
Because Bob says, OK, well,
you grabbed the Vertcoins,

00:31:50.950 --> 00:31:55.440
but I actually have another
hour until I have to--

00:31:55.440 --> 00:31:57.380
I have an hour to reveal
R where you're not

00:31:57.380 --> 00:31:59.900
able to get these coins back.

00:31:59.900 --> 00:32:02.420
So having this incrementing
time can help against that.

00:32:06.230 --> 00:32:08.810
An hour is probably not enough.

00:32:08.810 --> 00:32:10.760
The trade-off to
having these times

00:32:10.760 --> 00:32:13.910
is, if you have it
very far in the future,

00:32:13.910 --> 00:32:18.290
with very large gaps, those
HTLCs can get stuck there.

00:32:18.290 --> 00:32:20.930
And if Alice just
says, look, I'm

00:32:20.930 --> 00:32:24.980
leaving this third output
in the transaction,

00:32:24.980 --> 00:32:26.150
that can be annoying.

00:32:26.150 --> 00:32:29.150
Or if it gets stuck on chain,
it might take a long time

00:32:29.150 --> 00:32:30.630
to get it back.

00:32:30.630 --> 00:32:32.870
So you want long
enough times that you

00:32:32.870 --> 00:32:34.700
don't worry about
these timing attacks,

00:32:34.700 --> 00:32:37.133
where someone
immediately broadcasts,

00:32:37.133 --> 00:32:39.425
and now you only have an
hour, and maybe the blockchain

00:32:39.425 --> 00:32:42.260
is congested.

00:32:42.260 --> 00:32:45.450
Versus the annoyance
of, oh, it closed,

00:32:45.450 --> 00:32:47.990
and now I have to
wait until 5:00 PM.

00:32:47.990 --> 00:32:50.130
So those are the
trade-offs there.

00:32:50.130 --> 00:32:51.578
Any other questions?

00:32:59.050 --> 00:33:03.740
OK, so cross-chain swaps--

00:33:03.740 --> 00:33:06.770
H can be revealed-- sorry, R--

00:33:06.770 --> 00:33:08.570
well, H just goes
into either chain,

00:33:08.570 --> 00:33:10.550
R is then revealed
on either chain,

00:33:10.550 --> 00:33:16.520
so that both parties need
to watch both blockchains.

00:33:16.520 --> 00:33:19.850
This sort of makes sense,
in that the channels are

00:33:19.850 --> 00:33:21.800
on two different
blockchains, and both parties

00:33:21.800 --> 00:33:25.220
have a channel on each.

00:33:25.220 --> 00:33:27.270
So the receiver doesn't
need to be the initiator.

00:33:27.270 --> 00:33:29.040
So it doesn't have to
be Alice on both sides,

00:33:29.040 --> 00:33:30.957
but in most cases I think
it probably will be.

00:33:33.800 --> 00:33:35.720
Alice has a Vertcoin
channel, Alice also

00:33:35.720 --> 00:33:38.450
has a Dogecoin
channel, as does Bob.

00:33:38.450 --> 00:33:40.940
So they need to be
operating on both networks.

00:33:40.940 --> 00:33:45.830
There are possibilities where
if you had, say, this was Carol,

00:33:45.830 --> 00:33:50.840
and she sent to Dave
using Litecoin--

00:33:50.840 --> 00:33:55.370
so if you have Alice, Bob,
Carol, Dave, Doge, Vertcoin,

00:33:55.370 --> 00:33:56.930
Litecoin--

00:33:56.930 --> 00:34:01.640
Alice would not have to know
about anything but Dogecoin.

00:34:01.640 --> 00:34:05.510
So you actually only have
to worry about the networks

00:34:05.510 --> 00:34:09.260
that you have channels in,
even though there are secrets

00:34:09.260 --> 00:34:11.639
that could appear in other--

00:34:11.639 --> 00:34:14.880
well, no, sorry,
that's not true.

00:34:14.880 --> 00:34:18.710
So if this is Carol, Alice
does have to look at Vertcoin,

00:34:18.710 --> 00:34:23.210
because the Vertcoin
network could show things.

00:34:23.210 --> 00:34:26.360
So you have to look at
one additional chain.

00:34:26.360 --> 00:34:30.460
So that's one of the issues
with cross-chain swaps, where

00:34:30.460 --> 00:34:34.480
you may be routing
through a network

00:34:34.480 --> 00:34:36.730
that you're not aware
of, essentially.

00:34:36.730 --> 00:34:39.580
I don't think that's
likely in practice.

00:34:39.580 --> 00:34:41.770
So like it could
be, I'll send you

00:34:41.770 --> 00:34:45.850
five Dogecoins if you
send her 20 Litecoins,

00:34:45.850 --> 00:34:49.190
and then you send back
Dogecoins to this other place,

00:34:49.190 --> 00:34:50.080
but it's possible.

00:34:50.080 --> 00:34:50.679
Yes.

00:34:50.679 --> 00:34:52.096
AUDIENCE: I just
want to make sure

00:34:52.096 --> 00:34:54.159
that I'm understanding this.

00:34:54.159 --> 00:34:57.430
So when they're both Alice,
essentially that scenario

00:34:57.430 --> 00:35:01.390
is Alice is exchanging
Dogecoin for Vertcoin.

00:35:01.390 --> 00:35:02.110
TADGE DRYJA: Yes.

00:35:02.110 --> 00:35:03.910
AUDIENCE: And then
if on the right

00:35:03.910 --> 00:35:10.930
is Carol, that's saying Alice is
going to pay Carol in Dogecoin,

00:35:10.930 --> 00:35:13.830
even though she's
receiving Vertcoin.

00:35:13.830 --> 00:35:14.650
TADGE DRYJA: Right.

00:35:14.650 --> 00:35:18.370
Carol receives Vertcoin,
Alice loses Dogecoin.

00:35:18.370 --> 00:35:20.260
So it's an exchange [INAUDIBLE].

00:35:20.260 --> 00:35:25.235
AUDIENCE: So it's like you're
paying [INAUDIBLE] never see

00:35:25.235 --> 00:35:26.290
[INAUDIBLE]

00:35:26.290 --> 00:35:27.040
TADGE DRYJA: Yeah.

00:35:27.040 --> 00:35:28.623
So like you go to
some other country--

00:35:28.623 --> 00:35:31.570
you go to England, you
pay with your credit card,

00:35:31.570 --> 00:35:34.120
you lose dollars
but they get pounds.

00:35:34.120 --> 00:35:38.130
And there's somehow-- there's
an exchange rate in the middle.

00:35:38.130 --> 00:35:40.630
And so from Bob's perspective,
it works the same either way.

00:35:40.630 --> 00:35:43.340
He's getting more Dogecoins
and losing Vertcoins.

00:35:43.340 --> 00:35:45.682
AUDIENCE: So Bob needs
to have a lot of--

00:35:45.682 --> 00:35:49.630
well, in this case, he only
really needs Vertcoins.

00:35:49.630 --> 00:35:50.440
TADGE DRYJA: Right.

00:35:50.440 --> 00:35:55.030
So it's possible that you set
up this by initially funding it.

00:35:55.030 --> 00:35:57.250
So Alice says, I have
a ton of Dogecoin.

00:35:57.250 --> 00:36:00.040
Alice creates this channel,
and she has like 100 dogecoins,

00:36:00.040 --> 00:36:01.530
and Bob has zero.

00:36:01.530 --> 00:36:03.030
And same with Vertcoin--

00:36:03.030 --> 00:36:04.780
Bob could have a lot
of them, and say, OK,

00:36:04.780 --> 00:36:07.620
I have 20 vertcoins
and Alice has zero,

00:36:07.620 --> 00:36:11.530
and then we can make those
payments in that direction.

00:36:11.530 --> 00:36:12.990
You can pay them--

00:36:12.990 --> 00:36:16.720
so actually, in all the
software now, I think,

00:36:16.720 --> 00:36:20.020
there's only
single-funded channels.

00:36:20.020 --> 00:36:22.150
Because having both parties
funded at the same time

00:36:22.150 --> 00:36:24.280
is kind of--

00:36:24.280 --> 00:36:27.250
software-wise, a little harder,
and it's also, interface-wise,

00:36:27.250 --> 00:36:28.840
going to be complicated.

00:36:28.840 --> 00:36:34.720
Because how do you know when
to match someone's funding?

00:36:34.720 --> 00:36:36.670
So usually what
you do is you say,

00:36:36.670 --> 00:36:39.040
I'm Alice, hey Bob,
what's your public key?

00:36:39.040 --> 00:36:40.450
Give me a new public key.

00:36:40.450 --> 00:36:42.190
OK, I'm going to
construct this channel.

00:36:42.190 --> 00:36:43.210
Here, sign this.

00:36:43.210 --> 00:36:44.770
And then Bob's like, OK.

00:36:44.770 --> 00:36:48.700
And Bob has no money at stake
when this process happens.

00:36:48.700 --> 00:36:51.005
And then Bob also creates a
channel with Alice, saying,

00:36:51.005 --> 00:36:53.380
OK, I'm going to put a bunch
of Vertcoin in this channel.

00:36:53.380 --> 00:36:56.172
And they usually start with
all the money on one side

00:36:56.172 --> 00:36:57.130
so they can then trade.

00:37:00.040 --> 00:37:02.170
Other questions?

00:37:02.170 --> 00:37:06.590
So they have to look at
these different channels

00:37:06.590 --> 00:37:09.710
on different blockchains in
order to make sure this works.

00:37:09.710 --> 00:37:12.210
There's still a lot of
open questions here.

00:37:12.210 --> 00:37:14.090
How do you actually trade?

00:37:14.090 --> 00:37:15.860
This is really good
for trade execution,

00:37:15.860 --> 00:37:17.550
but what about discovery?

00:37:17.550 --> 00:37:20.610
So the current exchanges,
they're not just

00:37:20.610 --> 00:37:23.930
"put all your money in here
and then ask for it back,"

00:37:23.930 --> 00:37:26.660
there's that middle step where
you find all the other parties.

00:37:29.400 --> 00:37:34.640
So post the orders on the
blockchain, and maybe?

00:37:34.640 --> 00:37:37.100
There's problems-- I mean,
it's not too crazy of an idea,

00:37:37.100 --> 00:37:38.960
but there's some
problems with it.

00:37:38.960 --> 00:37:41.657
If you just say, hey, I
want to sell dogecoins

00:37:41.657 --> 00:37:43.490
and I want to buy
vertcoins, and you sort of

00:37:43.490 --> 00:37:46.160
put that in an OP_RETURN
on the blockchain, well,

00:37:46.160 --> 00:37:47.330
it's non-binding.

00:37:47.330 --> 00:37:49.340
You don't have to
actually do anything.

00:37:49.340 --> 00:37:52.130
There can be frontrunning,
where the orders

00:37:52.130 --> 00:37:56.360
can go in the wrong
sequence or in time.

00:37:56.360 --> 00:38:01.640
And it's not scalable, because
if everyone's posting orders

00:38:01.640 --> 00:38:04.430
on the blockchain, that
can take up a lot of space,

00:38:04.430 --> 00:38:06.200
probably more so than
actual transactions.

00:38:06.200 --> 00:38:07.940
I don't know what--

00:38:07.940 --> 00:38:10.400
I mean, I'm sure-- maybe.

00:38:10.400 --> 00:38:13.070
Total number of orders
placed on a order

00:38:13.070 --> 00:38:16.640
book versus total number
of actual order executions,

00:38:16.640 --> 00:38:19.160
usually there's a
lot more orders that

00:38:19.160 --> 00:38:21.130
then end up getting canceled.

00:38:21.130 --> 00:38:22.880
Because in most exchanges
that I've seen--

00:38:22.880 --> 00:38:26.288
and I believe this is the
case in regular New York Stock

00:38:26.288 --> 00:38:27.830
Exchange kind of
things, you can say,

00:38:27.830 --> 00:38:29.990
hey, I want to sell
this at this price,

00:38:29.990 --> 00:38:32.692
and then a few minutes later you
say, yeah, I changed my mind.

00:38:32.692 --> 00:38:34.400
I don't to sell it at
that price anymore.

00:38:34.400 --> 00:38:36.800
The price has moved, and
I've changed my mind.

00:38:36.800 --> 00:38:38.050
And a lot of times--

00:38:38.050 --> 00:38:38.550
yeah.

00:38:38.550 --> 00:38:40.092
AUDIENCE: The New
York Stock Exchange

00:38:40.092 --> 00:38:43.580
runs about 100 messages
for every executed trade.

00:38:43.580 --> 00:38:47.720
TADGE DRYJA: OK, so about 1% of
the actual trades get executed.

00:38:47.720 --> 00:38:50.720
Yeah, that sounds
probably about the same

00:38:50.720 --> 00:38:53.125
as in a lot of
Bitcoin exchanges.

00:38:53.125 --> 00:38:54.500
Usually in the
Bitcoin exchanges,

00:38:54.500 --> 00:39:00.530
they don't charge you to post
an order and then take it back.

00:39:00.530 --> 00:39:01.208
That's free.

00:39:01.208 --> 00:39:02.750
Whereas the trade
actually executing,

00:39:02.750 --> 00:39:05.600
usually they have
some kind of fee.

00:39:05.600 --> 00:39:09.100
So posting the orders
themselves on the blockchain

00:39:09.100 --> 00:39:11.443
seems like a cool
idea, but you've

00:39:11.443 --> 00:39:12.860
got, now, this
scalability problem

00:39:12.860 --> 00:39:13.943
of all these transactions.

00:39:13.943 --> 00:39:16.720
Now it's probably
100 times worse.

00:39:16.720 --> 00:39:18.800
And frontrunning
could also be tricky.

00:39:18.800 --> 00:39:23.150
Because the blockchain does
provide sequence and timing,

00:39:23.150 --> 00:39:24.900
but it's up to the miners.

00:39:24.900 --> 00:39:27.380
So if you have a
10-minute window,

00:39:27.380 --> 00:39:29.090
during that 10-minute
window, the miners

00:39:29.090 --> 00:39:32.600
can basically shuffle things
around however they want.

00:39:32.600 --> 00:39:34.100
And so if the miner
is also trading,

00:39:34.100 --> 00:39:36.420
they can see, oh, I see
all these different orders,

00:39:36.420 --> 00:39:41.270
I will match these orders, and
let those happen afterwards.

00:39:41.270 --> 00:39:42.950
So this is an issue.

00:39:42.950 --> 00:39:45.800
So there's a bunch of different
models people are looking at.

00:39:45.800 --> 00:39:50.413
And to be clear here, this is
not something that really--

00:39:50.413 --> 00:39:52.830
I don't want to say it doesn't
exist yet, it sort of does.

00:39:52.830 --> 00:39:57.210
There are these decentralized
exchanges popping up, mostly

00:39:57.210 --> 00:39:59.430
on the Ethereum
network right now.

00:39:59.430 --> 00:40:01.560
Because then it's not
actually cross-chain.

00:40:01.560 --> 00:40:03.900
You can have cross-asset,
because there's

00:40:03.900 --> 00:40:06.990
all these ERC-20 tokens.

00:40:06.990 --> 00:40:09.240
But the cross-chain swaps
themselves are a bit more

00:40:09.240 --> 00:40:10.230
complicated to program.

00:40:10.230 --> 00:40:16.210
So I don't know of any
live, not-Mainnet operation

00:40:16.210 --> 00:40:17.300
like this.

00:40:17.300 --> 00:40:19.690
So one model would be you
have a central order book

00:40:19.690 --> 00:40:21.500
and a central counterparty.

00:40:21.500 --> 00:40:24.790
So the exchange says, OK,
we're still the exchange,

00:40:24.790 --> 00:40:28.060
we still have a website,
we still have order--

00:40:28.060 --> 00:40:31.440
buys, and sells,
and stuff like that.

00:40:31.440 --> 00:40:33.110
And not only that,
but the exchange

00:40:33.110 --> 00:40:35.060
is one side of every trade.

00:40:35.060 --> 00:40:37.760
So they say, OK, open
a channel with us,

00:40:37.760 --> 00:40:40.038
put all your vertcoins in,
put all your dogecoins in.

00:40:40.038 --> 00:40:42.080
And then we'll open a
different channel with you,

00:40:42.080 --> 00:40:43.940
and we'll put litecoins in it.

00:40:43.940 --> 00:40:46.390
And you trade with us.

00:40:46.390 --> 00:40:48.140
But then what they can
do is they can say,

00:40:48.140 --> 00:40:49.765
well, we're not
actually going to trade

00:40:49.765 --> 00:40:52.760
unless there's someone
else performing

00:40:52.760 --> 00:40:55.003
a similar, opposite trade.

00:40:55.003 --> 00:40:56.420
And then they can
keep the spread.

00:40:56.420 --> 00:40:59.720
So they say, OK, we're
selling Vertcoin at this rate

00:40:59.720 --> 00:41:03.540
and buying it at this other,
slightly different rate.

00:41:03.540 --> 00:41:06.680
So that seems the most feasible.

00:41:06.680 --> 00:41:09.830
I would venture that that's
going to happen first,

00:41:09.830 --> 00:41:13.340
because it's not too crazy.

00:41:13.340 --> 00:41:14.810
But it has similar
centralization

00:41:14.810 --> 00:41:16.340
to the current model.

00:41:16.340 --> 00:41:18.500
But there is less
counterparty risk.

00:41:18.500 --> 00:41:21.950
So if you are worried
about an exchange shutting

00:41:21.950 --> 00:41:25.070
down and running off with all
your Dogecoin, this can help.

00:41:25.070 --> 00:41:27.320
Say, OK, well, I have a
channel with my Dogecoin in it

00:41:27.320 --> 00:41:29.172
and a channel with
my Vertcoin in it,

00:41:29.172 --> 00:41:31.130
and I can sell some
Dogecoin, get some Vertcoin

00:41:31.130 --> 00:41:34.790
from the exchange, and I
still have a nice order book.

00:41:34.790 --> 00:41:37.660
It doesn't solve any kind
of frontrunning problem.

00:41:37.660 --> 00:41:40.360
The exchange can still
order things how they want.

00:41:40.360 --> 00:41:42.500
And the exchange
can still shut down.

00:41:42.500 --> 00:41:45.320
But it's much more
difficult for the exchange

00:41:45.320 --> 00:41:50.640
to somehow steal your coins,
which is a problem now.

00:41:50.640 --> 00:41:54.260
Another model-- you say, well,
we have a central order book,

00:41:54.260 --> 00:41:58.700
so the exchange still
exists and aggregates

00:41:58.700 --> 00:42:01.730
all the orders of everyone
who wants to buy and sell.

00:42:01.730 --> 00:42:03.910
But there's multiple
counterparties

00:42:03.910 --> 00:42:06.070
that you interact with directly.

00:42:06.070 --> 00:42:08.830
So the exchange says,
OK, I'm E, and I

00:42:08.830 --> 00:42:11.080
will tell Alice about Bob.

00:42:11.080 --> 00:42:14.080
Alice says, hey, I
want to sell Dogecoin

00:42:14.080 --> 00:42:17.310
and buy Vertcoin at this rate.

00:42:17.310 --> 00:42:20.050
And then the exchange tells
Alice and Bob, OK, you guys

00:42:20.050 --> 00:42:20.800
matched.

00:42:20.800 --> 00:42:24.430
Bob, you want to sell Vertcoin,
Alice, you want to buy it.

00:42:24.430 --> 00:42:28.660
Here, connect to each other
and perform this trade.

00:42:28.660 --> 00:42:31.990
This is cooler, but
there's questions,

00:42:31.990 --> 00:42:34.840
in that if you're connecting
to many counterparties,

00:42:34.840 --> 00:42:36.100
it's costly.

00:42:36.100 --> 00:42:39.220
You have to open a new
channel, and that is on chain.

00:42:39.220 --> 00:42:42.010
Also, how do you
enforce trade execution?

00:42:42.010 --> 00:42:46.790
If it's a trade on a current
exchange, and you say,

00:42:46.790 --> 00:42:49.890
OK, I want to buy bitcoins,
And you click, OK, it just

00:42:49.890 --> 00:42:50.530
happened.

00:42:50.530 --> 00:42:52.000
They are aren't
even your bitcoins.

00:42:52.000 --> 00:42:53.720
You don't really
have control of them.

00:42:53.720 --> 00:42:55.428
So when you say you
want to do something,

00:42:55.428 --> 00:42:57.340
they actually execute it.

00:42:57.340 --> 00:43:00.700
In this case, if they don't
have a channel with you,

00:43:00.700 --> 00:43:03.850
they just are observing
the trade occur.

00:43:03.850 --> 00:43:08.740
So they're saying, OK,
Alice and Bob, do this.

00:43:08.740 --> 00:43:11.652
It might not even be
possible to enforce.

00:43:11.652 --> 00:43:13.360
You'd have to have
some kind of penalties

00:43:13.360 --> 00:43:16.330
if Bob says hey, Alice,
said she was going to sell,

00:43:16.330 --> 00:43:19.860
but then didn't, or Bob
complains, things like that.

00:43:22.470 --> 00:43:25.480
So there's a lot of ideas here.

00:43:25.480 --> 00:43:29.200
Another is, OK, if
you're building channels,

00:43:29.200 --> 00:43:31.660
each channel that you built
has these unchained costs

00:43:31.660 --> 00:43:33.680
and takes quite a bit of time.

00:43:33.680 --> 00:43:36.700
So maybe you could have
a multi-hop network

00:43:36.700 --> 00:43:38.150
from different coins.

00:43:38.150 --> 00:43:41.260
So instead of just
Alice, Bob, Alice,

00:43:41.260 --> 00:43:43.180
you've got Dave and Carol.

00:43:43.180 --> 00:43:47.470
And as long as I'm connected
to someone in this network,

00:43:47.470 --> 00:43:50.710
I can route payments to them
and they can route payments

00:43:50.710 --> 00:43:52.390
to me via different channels.

00:43:52.390 --> 00:43:56.377
So I'm connected to this
multicoin network kind of mesh.

00:43:56.377 --> 00:43:57.460
That would be really cool.

00:44:00.250 --> 00:44:02.260
It's not implemented.

00:44:02.260 --> 00:44:04.190
It's not even really
researched that well yet.

00:44:04.190 --> 00:44:07.070
So these are sort of ideas.

00:44:07.070 --> 00:44:08.320
But that would be really cool.

00:44:08.320 --> 00:44:10.028
Then you wouldn't need
as much liquidity.

00:44:10.028 --> 00:44:13.762
So one of the issues with the
central counterparty model

00:44:13.762 --> 00:44:15.970
is the exchange still needs
to have a bunch of money.

00:44:15.970 --> 00:44:18.460
They still need to have a bunch
of dogecoins and vertcoins

00:44:18.460 --> 00:44:21.670
in order to be a
counterparty to every trade.

00:44:21.670 --> 00:44:24.460
And then the question is, well,
where did those come from?

00:44:24.460 --> 00:44:29.140
And if you say, oh, well, it
comes from customers, well,

00:44:29.140 --> 00:44:32.050
now that's back into
the custodial model,

00:44:32.050 --> 00:44:37.120
where they still have coins
that aren't really theirs.

00:44:37.120 --> 00:44:39.460
You could say, well, they--

00:44:39.460 --> 00:44:41.470
and what I'm guessing
is going to happen

00:44:41.470 --> 00:44:44.260
is they're going to say,
well, we charge a spread,

00:44:44.260 --> 00:44:46.850
and we'll accept investors.

00:44:46.850 --> 00:44:50.470
And so if you want to
invest in this exchange,

00:44:50.470 --> 00:44:53.050
give us a bunch of Dogecoin,
give us a bunch of Vertcoin.

00:44:53.050 --> 00:44:58.223
We will then use it to trade
with different parties,

00:44:58.223 --> 00:44:59.890
and then we'll keep
some kind of spread,

00:44:59.890 --> 00:45:03.640
and then, hey, you got a return
on your invested Dogecoin.

00:45:03.640 --> 00:45:05.140
You get more
Dogecoin at the end,

00:45:05.140 --> 00:45:07.763
and then you can withdraw it.

00:45:07.763 --> 00:45:10.180
I think this is still better
than the current model, where

00:45:10.180 --> 00:45:12.280
you leave a whole bunch
of coins on the exchange,

00:45:12.280 --> 00:45:14.740
and you get nothing.

00:45:14.740 --> 00:45:15.670
Now you can choose--

00:45:15.670 --> 00:45:18.520
OK, do I want to
give them my coins

00:45:18.520 --> 00:45:20.770
and take that counterparty
risk, but I get some return

00:45:20.770 --> 00:45:23.260
in exchange for that
risk, or do I just

00:45:23.260 --> 00:45:25.330
want to trade without
counterparty risk.

00:45:25.330 --> 00:45:28.390
So, another problem
with that model.

00:45:28.390 --> 00:45:30.940
But that's probably
what will happen.

00:45:30.940 --> 00:45:33.940
This doesn't have that
issue, in that there

00:45:33.940 --> 00:45:36.730
is no central counterparty who
needs to have a bunch of coins.

00:45:36.730 --> 00:45:39.002
I'm trading directly with
the people who own the coins

00:45:39.002 --> 00:45:39.710
and want to sell.

00:45:39.710 --> 00:45:40.213
Yeah.

00:45:40.213 --> 00:45:41.755
AUDIENCE: My question
is, even if you

00:45:41.755 --> 00:45:44.800
have this central role and
multiple counterparties,

00:45:44.800 --> 00:45:48.910
wouldn't there still
be these trader nodes

00:45:48.910 --> 00:45:52.672
that are going to go out
there and essentially

00:45:52.672 --> 00:45:54.019
be kind of the same thing?

00:45:54.019 --> 00:45:55.686
They're going to be
well-funded, they're

00:45:55.686 --> 00:45:58.990
going take fees by doing all
these different transactions,

00:45:58.990 --> 00:46:01.870
and they're going to
get bigger and bigger.

00:46:01.870 --> 00:46:04.100
TADGE DRYJA: Yes, I guess
the only distinction is--

00:46:04.100 --> 00:46:04.835
so yes,

00:46:04.835 --> 00:46:06.460
AUDIENCE: It just
allows it to happen--

00:46:06.460 --> 00:46:09.670
TADGE DRYJA: Over the not
even long term-- medium term--

00:46:09.670 --> 00:46:13.330
these, as a user interface,
they'll look the same.

00:46:13.330 --> 00:46:15.160
Because whether
it's the exchange

00:46:15.160 --> 00:46:17.380
itself saying, OK,
I'm aggregating,

00:46:17.380 --> 00:46:19.600
everyone deposit, I've
got a ton of capital,

00:46:19.600 --> 00:46:22.058
I'm going to be a counterparty
to these trades and a market

00:46:22.058 --> 00:46:26.080
maker, versus, oh, there's
no defined market maker,

00:46:26.080 --> 00:46:27.970
but the people
with a lot of money

00:46:27.970 --> 00:46:31.510
or who are really trying to do
this end up in that position.

00:46:31.510 --> 00:46:34.750
I guess the only difference
is, in this case,

00:46:34.750 --> 00:46:37.690
the counterparty is also
running the order book.

00:46:37.690 --> 00:46:40.430
And in this case,
they may be different.

00:46:40.430 --> 00:46:42.940
There's an order book
server, and then there's

00:46:42.940 --> 00:46:45.130
this big counterparty who
has a ton of money who's

00:46:45.130 --> 00:46:46.870
doing all the trades.

00:46:46.870 --> 00:46:50.168
So does that make
much of a difference.

00:46:50.168 --> 00:46:50.710
I don't know.

00:46:50.710 --> 00:46:51.215
Yes.

00:46:51.215 --> 00:46:52.715
AUDIENCE: In the
history of markets,

00:46:52.715 --> 00:46:54.740
the second example is the
one that you see more.

00:46:54.740 --> 00:46:55.948
AUDIENCE: Right, yeah, right?

00:46:55.948 --> 00:46:59.920
New York Stock Exchange, London
Stock Exchange, and so on.

00:46:59.920 --> 00:47:03.930
The first model has
the centralized party

00:47:03.930 --> 00:47:07.544
collecting huge economic rents
because they're centralized,

00:47:07.544 --> 00:47:09.502
which is kind of interesting,
where Bitcoin was

00:47:09.502 --> 00:47:13.305
supposed to be decentralized.

00:47:13.305 --> 00:47:15.210
TADGE DRYJA: Yeah,
so this probably

00:47:15.210 --> 00:47:19.290
ends up with a small
number of pretty big nodes,

00:47:19.290 --> 00:47:20.940
mostly because of
the efficiency.

00:47:20.940 --> 00:47:23.760
If you're connecting to 100
different counterparties,

00:47:23.760 --> 00:47:26.280
and then you never actually
trade with any of them,

00:47:26.280 --> 00:47:28.560
it's very costly to
build those channels,

00:47:28.560 --> 00:47:31.440
and which probably has
analogies to, in real life,

00:47:31.440 --> 00:47:34.015
it's costly to maintain
these relationships

00:47:34.015 --> 00:47:35.890
with all these different
companies and stuff.

00:47:35.890 --> 00:47:38.040
It's much more efficient
if we just all meet

00:47:38.040 --> 00:47:41.660
under this buttonwood tree.

00:47:41.660 --> 00:47:44.680
It's a different issue in that,
enforcing trade execution,

00:47:44.680 --> 00:47:47.390
you might not have legal--

00:47:47.390 --> 00:47:49.790
you might not know who any
of these people are legally.

00:47:49.790 --> 00:47:51.680
So you have some
kind of penalties

00:47:51.680 --> 00:47:55.070
or some kind of proofs that the
trade occurred the correct way,

00:47:55.070 --> 00:47:56.780
things like that.

00:47:56.780 --> 00:47:57.280
Yes.

00:47:57.280 --> 00:47:58.738
AUDIENCE: How about
the enforcing--

00:47:58.738 --> 00:48:03.530
[INAUDIBLE] what we'd call
it, but the way the trades are

00:48:03.530 --> 00:48:06.875
set up, do you need
to enforce them,

00:48:06.875 --> 00:48:08.750
or before you enter into
them, do you already

00:48:08.750 --> 00:48:10.830
know what [INAUDIBLE]

00:48:10.830 --> 00:48:16.010
TADGE DRYJA: So the
example is, before you--

00:48:16.010 --> 00:48:20.090
OK, so the example is,
Alice goes to a server.

00:48:20.090 --> 00:48:23.660
So you have an exchange,
but this exchange

00:48:23.660 --> 00:48:25.160
is only the order book.

00:48:25.160 --> 00:48:28.010
So there's little buy
and sell kind of things.

00:48:28.010 --> 00:48:34.950
And then Alice says,
OK, I want to buy VTC.

00:48:34.950 --> 00:48:36.130
And then-- this is Alice--

00:48:36.130 --> 00:48:40.720
Bob says, OK, I want
to buy Dogecoin.

00:48:43.770 --> 00:48:46.080
Then the exchange says,
oh, you guys crossed.

00:48:46.080 --> 00:48:48.120
You want to buy
Vertcoin at a rate

00:48:48.120 --> 00:48:52.140
that he's willing to sell at,
or slightly higher, or whatever,

00:48:52.140 --> 00:48:54.240
so trade.

00:48:54.240 --> 00:48:57.520
So the exchange tells both
people, hey, you matched,

00:48:57.520 --> 00:49:00.270
now you have to trade.

00:49:00.270 --> 00:49:03.210
And then as soon as A sees, oh,
you matched, you have to trade,

00:49:03.210 --> 00:49:08.420
Alice disappears, and
says, oh, I didn't mean to.

00:49:08.420 --> 00:49:12.550
So the exchange only
can provide information.

00:49:12.550 --> 00:49:14.470
They can't actually
force Alice and Bob

00:49:14.470 --> 00:49:17.256
to do the trade is the problem.

00:49:17.256 --> 00:49:17.923
AUDIENCE: Right.

00:49:17.923 --> 00:49:20.492
I guess you can broadcast--

00:49:20.492 --> 00:49:22.850
in broadcasting your
potential trade,

00:49:22.850 --> 00:49:25.793
there's information for somebody
to come in at those-- so

00:49:25.793 --> 00:49:30.720
if it's at a specific
price, and you're actually

00:49:30.720 --> 00:49:34.280
publishing what you would need
to actually execute the trade.

00:49:34.280 --> 00:49:35.700
TADGE DRYJA: Ah, so that--

00:49:35.700 --> 00:49:40.140
yeah, at least in Bitcoin,
I don't know how to do that.

00:49:40.140 --> 00:49:43.770
Because you need to know who
your counterparty is in order

00:49:43.770 --> 00:49:47.700
to either use these channels,
or even if it were on chain,

00:49:47.700 --> 00:49:49.650
you have to share these secret--

00:49:49.650 --> 00:49:51.960
it's interactive with
your counterparty.

00:49:51.960 --> 00:49:55.490
So at least in Bitcoin, I
don't know a way to say,

00:49:55.490 --> 00:50:00.150
Alice is posting her buy
Vertcoin order in a way

00:50:00.150 --> 00:50:01.980
that anyone can
then go and fill it

00:50:01.980 --> 00:50:06.930
without additional
interactivity from Alice.

00:50:06.930 --> 00:50:09.390
I think there's ways
to do that in Ethereum,

00:50:09.390 --> 00:50:12.060
for Ethereum tokens, and
there are people who've

00:50:12.060 --> 00:50:13.900
written software like that.

00:50:13.900 --> 00:50:17.180
But in the Bitcoin model,
there might be a way to do it.

00:50:17.180 --> 00:50:20.450
We haven't figured it out.

00:50:20.450 --> 00:50:21.530
So it's sort of--

00:50:21.530 --> 00:50:24.440
you put in your orders,
they return and say, OK,

00:50:24.440 --> 00:50:25.783
trade, and now--

00:50:25.783 --> 00:50:27.700
AUDIENCE: You have to
create the [INAUDIBLE]..

00:50:27.700 --> 00:50:30.075
TADGE DRYJA: Yeah, now they
have to continue to interact.

00:50:30.075 --> 00:50:32.440
So it's pretty straightforward
for Bob or Alice--

00:50:32.440 --> 00:50:35.570
Alice could just unplug her
computer right at that point.

00:50:35.570 --> 00:50:40.580
And that introduces timing
sort of issues where Alice just

00:50:40.580 --> 00:50:43.160
puts in all these fake trades.

00:50:43.160 --> 00:50:45.270
Maybe they're kind of out there.

00:50:45.270 --> 00:50:47.270
But sometimes the market
moves during the time

00:50:47.270 --> 00:50:52.650
between I put my trade in
and the execution comes back.

00:50:52.650 --> 00:50:54.417
And so I unplug most of them.

00:50:54.417 --> 00:50:56.750
I ignore most of them, but
the ones that are beneficial,

00:50:56.750 --> 00:50:58.620
I actually go through with.

00:50:58.620 --> 00:51:01.220
AUDIENCE: Which isn't too far
from the way the markets work.

00:51:01.220 --> 00:51:02.220
TADGE DRYJA: Well, yeah.

00:51:02.220 --> 00:51:03.640
[CHUCKLING]

00:51:05.762 --> 00:51:07.220
AUDIENCE: The
difference is, you're

00:51:07.220 --> 00:51:10.130
saying these are not live
hot bids and hot offers,

00:51:10.130 --> 00:51:12.812
meaning executable.

00:51:12.812 --> 00:51:16.730
They had another step
if they were executable.

00:51:16.730 --> 00:51:19.680
So this is a new
form of spoofing.

00:51:19.680 --> 00:51:22.820
This spoofing goes on
in the US swaps market

00:51:22.820 --> 00:51:26.650
all the time, because
[INAUDIBLE] bids and offers.

00:51:26.650 --> 00:51:29.040
But in the market where
there's executable bids

00:51:29.040 --> 00:51:33.220
and offers, that's the
distinction-- this is not hot.

00:51:33.220 --> 00:51:35.400
[INAUDIBLE]

00:51:35.400 --> 00:51:36.290
TADGE DRYJA: Right.

00:51:36.290 --> 00:51:38.120
I guess so "hot" in
this case would be--

00:51:41.690 --> 00:51:45.530
if Alice's offer contains all
the information needed by Bob

00:51:45.530 --> 00:51:47.242
to execute the
trade, then it would

00:51:47.242 --> 00:51:48.950
be sort of hot in that
sense, in that Bob

00:51:48.950 --> 00:51:53.060
doesn't have to interact with
Alice anymore to execute.

00:51:53.060 --> 00:51:55.970
With these construction--
with the cross-chain swaps,

00:51:55.970 --> 00:52:01.200
using these channels, you still
have to talk to each other.

00:52:01.200 --> 00:52:03.590
Bob generates-- no, Alice
generates the R value,

00:52:03.590 --> 00:52:05.150
shares the hash with Bob.

00:52:05.150 --> 00:52:06.860
They're talking to each other.

00:52:06.860 --> 00:52:08.030
So we don't know--

00:52:08.030 --> 00:52:10.880
if someone figures out a cool
way to do it, then great,

00:52:10.880 --> 00:52:13.690
that will solve this issue.

00:52:13.690 --> 00:52:14.323
Yes.

00:52:14.323 --> 00:52:19.360
AUDIENCE: Is 0x and Radar
Relay, are they hot [INAUDIBLE]

00:52:19.360 --> 00:52:22.430
TADGE DRYJA: I believe 0x
is, from what I've read.

00:52:22.430 --> 00:52:26.390
I don't know about how
[STAMMERING] whatever that is--

00:52:26.390 --> 00:52:27.610
Radar Relay works.

00:52:27.610 --> 00:52:32.210
But 0x, yeah,
basically, your order

00:52:32.210 --> 00:52:37.480
is executable by any party
without further input from you.

00:52:37.480 --> 00:52:38.980
But it also has scaling issues.

00:52:38.980 --> 00:52:41.650
So that's a good segue way
to the next part, which

00:52:41.650 --> 00:52:44.740
is having some kind of
distributed order book, where

00:52:44.740 --> 00:52:46.930
there is no central
order book, there

00:52:46.930 --> 00:52:49.240
is no central counterparty,
the whole thing

00:52:49.240 --> 00:52:51.910
is a big mesh network
kind of thing.

00:52:51.910 --> 00:52:53.710
That would be really cool.

00:52:53.710 --> 00:52:57.555
That seems the furthest out, in
terms of, how do you do this.

00:52:57.555 --> 00:52:58.930
I mean, people
are working on it,

00:52:58.930 --> 00:53:02.290
but it seems hard to
make practical in that

00:53:02.290 --> 00:53:03.850
how do you ensure
fairness, right?

00:53:03.850 --> 00:53:05.465
Who's ordering these things?

00:53:05.465 --> 00:53:07.090
And you could say,
well, the blockchain

00:53:07.090 --> 00:53:08.320
is ordering these things.

00:53:08.320 --> 00:53:11.410
But that ends up being
that the miners order it.

00:53:11.410 --> 00:53:15.130
So if Alice is buy
Vertcoin, she's like, OK,

00:53:15.130 --> 00:53:18.170
I'm buying Vertcoin
at a price of 5.

00:53:18.170 --> 00:53:19.820
And then he says,
OK, I'll buy Doge

00:53:19.820 --> 00:53:23.810
at a price of whatever--
basically, you cross,

00:53:23.810 --> 00:53:28.010
and you have an order where
there's some kind of overlap.

00:53:28.010 --> 00:53:31.310
The miner can say, OK, well,
I'll instead ignore this order,

00:53:31.310 --> 00:53:35.810
execute my own, and then
execute with this guy

00:53:35.810 --> 00:53:37.640
and take the spread.

00:53:37.640 --> 00:53:40.250
Because the miner really gets
to sequence things however

00:53:40.250 --> 00:53:41.240
they want.

00:53:41.240 --> 00:53:43.880
The blockchain does
provide ordering,

00:53:43.880 --> 00:53:45.080
but at the block level.

00:53:45.080 --> 00:53:47.390
Within a block, it's
totally up to the miner.

00:53:47.390 --> 00:53:50.800
So the miners could
swap things around.

00:53:50.800 --> 00:53:53.390
But yeah, how do you ensure
fairness in terms of timing?

00:53:53.390 --> 00:53:55.700
How do you enforce
trade execution?

00:53:55.700 --> 00:53:58.340
And probably the biggest
for a distributed order book

00:53:58.340 --> 00:54:01.220
is just the scalability
of the orders.

00:54:01.220 --> 00:54:05.180
You probably don't want to put
all the orders on a blockchain,

00:54:05.180 --> 00:54:09.320
because it just ends
up being a ton of data.

00:54:09.320 --> 00:54:12.770
So you have to have some
kind of broadcast network

00:54:12.770 --> 00:54:15.350
where you've got these
orders, they probably

00:54:15.350 --> 00:54:19.280
should have some way to
expire, but expiry is also

00:54:19.280 --> 00:54:24.830
an issue in that, how
do you ensure that--

00:54:24.830 --> 00:54:26.390
hey, I'm canceling
this order, how

00:54:26.390 --> 00:54:28.223
do you ensure that the
cancellation actually

00:54:28.223 --> 00:54:31.480
propagates if someone
can say, OK, I've

00:54:31.480 --> 00:54:33.520
got pretty good
control of the network,

00:54:33.520 --> 00:54:36.580
and I can just block
these order cancellations,

00:54:36.580 --> 00:54:39.040
and wait, and then execute.

00:54:39.040 --> 00:54:40.510
So this is sort of--

00:54:40.510 --> 00:54:45.080
there's papers, there's ideas,
but it's kind of out there.

00:54:47.940 --> 00:54:51.480
OK, so that's basically--
yeah, that was it.

00:54:51.480 --> 00:54:52.720
That's a little earlier.

00:54:52.720 --> 00:54:56.820
But yeah, this was basically
the stuff for today.

00:54:56.820 --> 00:54:58.740
The idea works, right,
the cross-chain swaps.

00:54:58.740 --> 00:55:01.600
But there's still a lot
of issues, in terms of,

00:55:01.600 --> 00:55:03.750
OK, how do you actually
get these to work?

00:55:03.750 --> 00:55:06.600
How do you build a
scalable trading platform?

00:55:06.600 --> 00:55:08.400
And there aren't really any yet.

00:55:08.400 --> 00:55:12.420
There are some things on
Ethereum that work OK.

00:55:12.420 --> 00:55:14.400
The fees end up
being kind of high.

00:55:14.400 --> 00:55:16.590
And that's also
Ethereum, where it's not

00:55:16.590 --> 00:55:18.332
between different blockchains.

00:55:18.332 --> 00:55:20.040
It's all running on
the Ethereum network,

00:55:20.040 --> 00:55:22.830
and the Ethereum network
allows you to specify,

00:55:22.830 --> 00:55:25.860
well, this is actually something
else, this isn't ether.

00:55:25.860 --> 00:55:28.010
You can do that
in Bitcoin, but--

00:55:28.010 --> 00:55:29.790
so there are
protocols in Bitcoin,

00:55:29.790 --> 00:55:33.510
like Omni, and
Mastercoin, and things,

00:55:33.510 --> 00:55:36.150
where you can sort of
create different assets

00:55:36.150 --> 00:55:38.400
by using OP_RETURN.

00:55:38.400 --> 00:55:40.650
And basically all of those
have moved to Ethereum now,

00:55:40.650 --> 00:55:44.153
because Ethereum is a much
nicer design for those things.

00:55:44.153 --> 00:55:46.320
And most of the Bitcoin
developers are sort of like,

00:55:46.320 --> 00:55:52.300
great, now all these non-Bitcoin
transaction data have left,

00:55:52.300 --> 00:55:55.410
and Bitcoin is just focused
on moving bitcoin around.

00:55:55.410 --> 00:55:57.210
Yeah, so the basic
idea works, there's

00:55:57.210 --> 00:55:59.550
still a lot of unsolved
questions-- further research

00:55:59.550 --> 00:56:02.512
required, which is great to
hear when you're a researcher.

00:56:02.512 --> 00:56:03.750
[CHUCKLING]

00:56:03.750 --> 00:56:05.640
And there's people
working on this here.

00:56:05.640 --> 00:56:08.760
I'm working with an MEng
student on cross-chain swaps

00:56:08.760 --> 00:56:09.420
this semester.

00:56:09.420 --> 00:56:11.128
There's other people
working on all sorts

00:56:11.128 --> 00:56:12.810
of decentralized
exchange things.

00:56:12.810 --> 00:56:14.460
Neha is also very
interested in it.

00:56:14.460 --> 00:56:19.500
So if you want to work
with Neha, that's a chance.

00:56:19.500 --> 00:56:21.120
And yeah, I think
it'll be big, right?

00:56:21.120 --> 00:56:23.520
Because if you look
at these exchanges,

00:56:23.520 --> 00:56:25.980
there's a lot of profit.

00:56:25.980 --> 00:56:29.750
So I don't know, a year or two
ago, you look at like Poloniex,

00:56:29.750 --> 00:56:32.490
they were making like
$1 million a day.

00:56:32.490 --> 00:56:34.050
There's so much volume.

00:56:34.050 --> 00:56:37.210
And they have very
few employees.

00:56:37.210 --> 00:56:39.870
So and they're like--

00:56:39.870 --> 00:56:43.500
I think the market is getting
sort of more established now,

00:56:43.500 --> 00:56:45.270
in terms of its going
to be larger players

00:56:45.270 --> 00:56:46.320
and stuff like that.

00:56:46.320 --> 00:56:49.140
But it was pretty much like
Wild Wild West a few years ago,

00:56:49.140 --> 00:56:51.390
where you're just like, I'm
going to open an exchange,

00:56:51.390 --> 00:56:54.870
and I don't even
need a bank account.

00:56:54.870 --> 00:56:58.200
The big exchanges that have
bank accounts I feel like

00:56:58.200 --> 00:56:59.820
are less profitable.

00:56:59.820 --> 00:57:01.650
So Coinbase makes
a lot of revenue,

00:57:01.650 --> 00:57:04.170
but they have a lot of fees--

00:57:04.170 --> 00:57:05.230
a lot of costs.

00:57:05.230 --> 00:57:08.230
They have a ton of employees,
they have a ton of lawyers,

00:57:08.230 --> 00:57:10.015
they have to worry about banks.

00:57:10.015 --> 00:57:11.640
Whereas if you're
like Poloniex-- well,

00:57:11.640 --> 00:57:13.660
Poloniex is now--

00:57:13.660 --> 00:57:17.510
it lasted for like a year or
two where they could do that.

00:57:17.510 --> 00:57:19.680
But if you're just some
random altcoin exchange,

00:57:19.680 --> 00:57:21.090
you don't need a bank account.

00:57:21.090 --> 00:57:23.160
You just say, look,
I'm an exchange where

00:57:23.160 --> 00:57:26.520
you can trade Dogecoin and
Vertcoin, and that's it.

00:57:26.520 --> 00:57:28.110
There's no dollars involved.

00:57:28.110 --> 00:57:30.300
So those kind of
places, they can open up

00:57:30.300 --> 00:57:33.300
on any server,
anywhere in the world.

00:57:33.300 --> 00:57:35.160
They don't even need
to be companies,

00:57:35.160 --> 00:57:37.110
they can just be
someone's server.

00:57:39.780 --> 00:57:42.330
And the fact that
they have custody

00:57:42.330 --> 00:57:44.760
means they keep
getting shut down

00:57:44.760 --> 00:57:47.190
or just running off with money.

00:57:47.190 --> 00:57:50.145
Crypsy-- Crypsy was
that guy, right?

00:57:50.145 --> 00:57:52.580
AUDIENCE: [INAUDIBLE]
exchange wallet

00:57:52.580 --> 00:57:55.160
as like his own
personal bank account.

00:57:55.160 --> 00:57:57.020
Yeah, spent all
the money one day.

00:57:57.020 --> 00:58:00.090
TADGE DRYJA: Right, so--

00:58:00.090 --> 00:58:01.650
and then he said--

00:58:01.650 --> 00:58:04.200
I remember there was a blog
post where he just sort of said

00:58:04.200 --> 00:58:04.860
he did that.

00:58:04.860 --> 00:58:05.310
And it was just like--

00:58:05.310 --> 00:58:06.902
AUDIENCE: He was
trying to justify it.

00:58:06.902 --> 00:58:10.600
Like yeah, we're making fees
and stuff, so it was OK,

00:58:10.600 --> 00:58:14.235
we though we could
[INAUDIBLE] It's

00:58:14.235 --> 00:58:17.200
like where the two graphs
just diverge, unfortunately,

00:58:17.200 --> 00:58:20.057
and it went to zero.

00:58:20.057 --> 00:58:22.140
TADGE DRYJA: But it was
just an amazing blog post,

00:58:22.140 --> 00:58:23.130
where it's like,
wait, you're just

00:58:23.130 --> 00:58:25.170
admitting to a whole
bunch of crimes here,

00:58:25.170 --> 00:58:27.270
you probably shouldn't
have written this.

00:58:27.270 --> 00:58:30.300
And then he fled to China,
but I think they got him.

00:58:30.300 --> 00:58:33.980
He's in jail now or something.

00:58:33.980 --> 00:58:38.010
So there's a lot of you
know pretty bad actors

00:58:38.010 --> 00:58:40.230
in the exchange space.

00:58:40.230 --> 00:58:43.020
It's not well-run generally.

00:58:43.020 --> 00:58:46.500
But there's enormous amounts
of profit, which, to me, seems

00:58:46.500 --> 00:58:47.717
like an inefficiency, right?

00:58:47.717 --> 00:58:49.800
Wait, why are these people
making $1 million a day

00:58:49.800 --> 00:58:53.100
for something that is sort
of just running automatically

00:58:53.100 --> 00:58:53.880
on this computer?

00:58:53.880 --> 00:58:57.540
That seems like
ripe for disruption.

00:58:57.540 --> 00:58:59.610
And so there's a lot of
people interested in, OK,

00:58:59.610 --> 00:59:01.170
how do we decentralize
the exchanges,

00:59:01.170 --> 00:59:06.540
make them less trust-involved,
less risk-involved,

00:59:06.540 --> 00:59:10.620
and probably make less money
than Paloniex, or OK coin,

00:59:10.620 --> 00:59:11.520
or whatever.

00:59:11.520 --> 00:59:15.570
But that's sort of better,
because an exchange where

00:59:15.570 --> 00:59:17.570
there's less profitability
means more people are

00:59:17.570 --> 00:59:20.410
going to want to trade on it
because there's lower fees.

00:59:20.410 --> 00:59:23.620
So there's a lot of
research into this.

00:59:23.620 --> 00:59:26.280
I think it's pretty cool.

00:59:26.280 --> 00:59:28.710
So next class, on
Wednesday, I'll

00:59:28.710 --> 00:59:31.560
talk about discrete
log contracts, which

00:59:31.560 --> 00:59:35.970
share some of these issues,
in that it's a different way

00:59:35.970 --> 00:59:38.220
to execute a trade,
but it doesn't really

00:59:38.220 --> 00:59:41.940
define how you find people
to execute that trade.

00:59:41.940 --> 00:59:44.730
I personally am more interested
in the discrete log contract

00:59:44.730 --> 00:59:47.710
stuff, probably because
I came up with it,

00:59:47.710 --> 00:59:51.940
but also because I'm not
that excited about altcoins

00:59:51.940 --> 00:59:53.725
in general.

00:59:53.725 --> 00:59:55.450
I don't know, people
like altcoins,

00:59:55.450 --> 00:59:57.910
but I don't really
feel that, oh, we

00:59:57.910 --> 01:00:00.580
need to have all these different
altcoins that sort of act

01:00:00.580 --> 01:00:02.180
like money--

01:00:02.180 --> 01:00:04.660
I don't know--
which is mostly what

01:00:04.660 --> 01:00:06.407
cross-chain swaps let you do.

01:00:06.407 --> 01:00:07.990
So the discrete log
contracts, though,

01:00:07.990 --> 01:00:12.130
has the same issues with
how do you find each other.

01:00:12.130 --> 01:00:14.950
And it's mostly a
scalability thing, right?

01:00:14.950 --> 01:00:18.130
You can do this sort of OTC,
where you talk in a chat room,

01:00:18.130 --> 01:00:20.968
and you sort of know each
other, and you trade that way.

01:00:20.968 --> 01:00:22.510
And that's the level
it is right now.

01:00:22.510 --> 01:00:25.590
But how to scale it up
is another question.