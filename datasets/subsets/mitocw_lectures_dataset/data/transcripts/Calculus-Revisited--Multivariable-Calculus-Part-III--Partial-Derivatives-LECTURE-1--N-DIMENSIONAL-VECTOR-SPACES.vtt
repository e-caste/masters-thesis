WEBVTT

00:00:00.040 --> 00:00:02.460
The following content is
provided under a Creative

00:00:02.460 --> 00:00:03.870
Commons license.

00:00:03.870 --> 00:00:06.320
Your support will help
MIT OpenCourseWare

00:00:06.320 --> 00:00:10.560
continue to offer high quality
educational resources for free.

00:00:10.560 --> 00:00:13.300
To make a donation or
view additional materials

00:00:13.300 --> 00:00:17.210
from hundreds of MIT courses,
visit MIT OpenCourseWare

00:00:17.210 --> 00:00:19.650
at ocw.mit.edu.

00:00:53.118 --> 00:00:54.620
HERBERT GROSS: Hi.

00:00:54.620 --> 00:00:58.200
We've sort of arrive
at D-day in our course;

00:00:58.200 --> 00:01:01.530
that in a manner of speaking,
everything that we've done up

00:01:01.530 --> 00:01:04.140
to now has been a rehearsal.

00:01:04.140 --> 00:01:07.050
That today we are
going to come to grips

00:01:07.050 --> 00:01:09.870
with what the course
is all about: namely,

00:01:09.870 --> 00:01:14.800
a real-valued function of
several real variables.

00:01:14.800 --> 00:01:17.360
And before getting into
that, what I'd like to do

00:01:17.360 --> 00:01:20.830
is to review very briefly
what we've talked about

00:01:20.830 --> 00:01:23.500
so far in terms of
functions, since we've

00:01:23.500 --> 00:01:25.860
introduced the vector notation.

00:01:25.860 --> 00:01:27.730
Namely, what we've
mentioned is, is

00:01:27.730 --> 00:01:29.230
that our function
machine could have

00:01:29.230 --> 00:01:32.640
either a vector or a
scalar as its input,

00:01:32.640 --> 00:01:36.190
and either a vector or
a scalar as its output.

00:01:36.190 --> 00:01:39.210
Part one of our course
centered around the idea

00:01:39.210 --> 00:01:42.880
where both the input and
the outputs were scalars.

00:01:42.880 --> 00:01:46.210
Whereas, the previous
block of material

00:01:46.210 --> 00:01:49.670
concerned the case where
our input was a scalar,

00:01:49.670 --> 00:01:52.630
and our output was a vector.

00:01:52.630 --> 00:01:55.070
Today what we're
going to discuss

00:01:55.070 --> 00:02:00.910
is the situation that occurs
when our input is a vector,

00:02:00.910 --> 00:02:04.240
and our output is a scalar.

00:02:04.240 --> 00:02:09.180
And I call today's lecture
"n-dimensional Vector Spaces."

00:02:09.180 --> 00:02:13.250
Eventually, we'll discuss
vector spaces in more detail.

00:02:13.250 --> 00:02:18.110
For the time being, I
simply want to set the mood,

00:02:18.110 --> 00:02:20.460
and hopefully by the
time I'm through,

00:02:20.460 --> 00:02:24.190
show you a rather peaceful
coexistence between the worlds

00:02:24.190 --> 00:02:26.390
of the new mathematics,
and the worlds

00:02:26.390 --> 00:02:28.090
of traditional mathematics.

00:02:28.090 --> 00:02:30.220
In fact, in many of
our topics that we're

00:02:30.220 --> 00:02:32.690
going to tackle in
this block of material,

00:02:32.690 --> 00:02:36.150
we will give both
points of view.

00:02:36.150 --> 00:02:38.910
But to set the stage
properly-- to get

00:02:38.910 --> 00:02:40.730
into the idea of what
a vector space is all

00:02:40.730 --> 00:02:43.240
about-- and if that
word frightens you, just

00:02:43.240 --> 00:02:45.460
don't worry about
for a minute or two.

00:02:45.460 --> 00:02:48.450
Worry about it after that,
but let's just get started.

00:02:48.450 --> 00:02:50.490
Let's consider the
situation where

00:02:50.490 --> 00:02:54.660
I have a function machine
where my input is a vector

00:02:54.660 --> 00:02:57.920
and my output is a scalar.

00:02:57.920 --> 00:03:01.840
As an example, let me just
generically let v represent

00:03:01.840 --> 00:03:05.970
the vector whose
form is x*i plus y*j,

00:03:05.970 --> 00:03:08.580
using i and j components.

00:03:08.580 --> 00:03:16.140
Let me define f of v to be
pi times the square of the i

00:03:16.140 --> 00:03:18.200
component times the j component.

00:03:18.200 --> 00:03:20.210
And let's not worry
right now about why I

00:03:20.210 --> 00:03:22.360
picked this particular recipe.

00:03:22.360 --> 00:03:26.640
Let's simply observe that
once this recipe is chosen,

00:03:26.640 --> 00:03:33.040
f is a function which maps a
two-dimensional vector here,

00:03:33.040 --> 00:03:37.880
in i and j components, into
a number of pi x squared y.

00:03:37.880 --> 00:03:40.530
Just to illustrate
this recipe, notice

00:03:40.530 --> 00:03:43.880
that if our vector
were 3i plus 4j,

00:03:43.880 --> 00:03:47.240
the output of the f machine--
if this were the input--

00:03:47.240 --> 00:03:48.150
would be what?

00:03:48.150 --> 00:03:53.010
Pi times the square of the first
component-- the component of i,

00:03:53.010 --> 00:03:57.820
that's 3 squared-- times the
component of j, which is 4.

00:03:57.820 --> 00:04:00.790
And that leads to 36*pi.

00:04:00.790 --> 00:04:03.650
By the way, observe that
order does make a difference,

00:04:03.650 --> 00:04:07.040
namely if I reverse the
roles of the coefficients,

00:04:07.040 --> 00:04:12.610
and feed the vector 4i
plus 3j into my f machine,

00:04:12.610 --> 00:04:16.200
the output would be
pi times 4 squared--

00:04:16.200 --> 00:04:19.459
the square of the i
component-- times 3,

00:04:19.459 --> 00:04:22.290
and that would be 48*pi.

00:04:22.290 --> 00:04:26.240
Notice also that we have
allowed, already in our course,

00:04:26.240 --> 00:04:32.540
the abbreviation that a comma
b would represent a*i plus b*j,

00:04:32.540 --> 00:04:36.860
or a comma b comma c would
represent a*i plus b*j plus

00:04:36.860 --> 00:04:37.730
c*k.

00:04:37.730 --> 00:04:40.370
The idea is that if we
now apply this shorthand

00:04:40.370 --> 00:04:45.100
notation to these two vectors,
what we could say is what?

00:04:45.100 --> 00:04:50.680
f of this vector, in other
words, f of 3 comma 4 is 36*pi,

00:04:50.680 --> 00:04:54.305
whereas f of 4 comma 3 is 48*pi.

00:04:54.305 --> 00:04:56.470
And that's exactly
what we mean when

00:04:56.470 --> 00:04:59.900
we say that we may treat
a two-dimensional vector

00:04:59.900 --> 00:05:01.850
as an ordered pair.

00:05:01.850 --> 00:05:05.150
You see, it's, not only
a pair but the order

00:05:05.150 --> 00:05:06.720
does make a difference.

00:05:06.720 --> 00:05:09.310
Both in what the
vector is and what

00:05:09.310 --> 00:05:12.280
the output of the f machine is.

00:05:12.280 --> 00:05:13.210
OK?

00:05:13.210 --> 00:05:16.090
Hopefully, let's
say, so far so good,

00:05:16.090 --> 00:05:21.900
and let's tackle now a rather
completely different problem.

00:05:21.900 --> 00:05:24.440
What I'd like to do
now is the following.

00:05:24.440 --> 00:05:28.300
Let's consider the cylinder--
the right circular cylinder--

00:05:28.300 --> 00:05:33.530
the radius of whose base is
x, and whose height is y.

00:05:33.530 --> 00:05:40.910
Notice that the volume of this
cylinder is pi x squared y.

00:05:40.910 --> 00:05:46.080
And if I use the same f
that we used previously--

00:05:46.080 --> 00:05:48.380
in other words,
the same f that we

00:05:48.380 --> 00:05:52.540
were talking about over here--
notice that another way--

00:05:52.540 --> 00:05:54.410
see how is f defined?

00:05:54.410 --> 00:05:59.220
Given that the input was x
comma y the output was pi x

00:05:59.220 --> 00:06:04.380
squared y, notice that
the volume is f of x, y.

00:06:04.380 --> 00:06:08.150
In particular, if I want
the volume of the cylinder,

00:06:08.150 --> 00:06:13.700
the radius of whose base is
3, and whose height is 4--

00:06:13.700 --> 00:06:15.320
see x is 3 and y is 4--

00:06:15.320 --> 00:06:19.040
what I really want
is f of 3 comma 4.

00:06:19.040 --> 00:06:23.190
That's pi times 3
squared times 4.

00:06:23.190 --> 00:06:27.010
f of 3 comma 4 is 36*pi.

00:06:27.010 --> 00:06:28.730
Now I'd like to
pause for a second

00:06:28.730 --> 00:06:32.280
again, and return to
our earlier remark.

00:06:32.280 --> 00:06:39.400
Namely, if I look at this,
and if I look at this.

00:06:45.500 --> 00:06:49.060
Notice that these two
expressions are identical.

00:06:49.060 --> 00:06:52.370
I cannot tell the difference
between whether I'm looking

00:06:52.370 --> 00:06:56.370
at the vector 3i plus 4j,
or whether I'm looking

00:06:56.370 --> 00:06:59.920
at the cylinder, the
radius of whose base is 3,

00:06:59.920 --> 00:07:03.500
and whose height is 4; whether
I look at this equation,

00:07:03.500 --> 00:07:06.040
or whether I look
at this equation.

00:07:06.040 --> 00:07:09.830
The difference is that in the
first case somehow or other,

00:07:09.830 --> 00:07:12.190
it was quite natural
to think of 3 comma

00:07:12.190 --> 00:07:17.000
4 as being either an
ordered pair, or an arrow.

00:07:17.000 --> 00:07:19.090
In this case,
however, my contention

00:07:19.090 --> 00:07:22.300
is that when we
think of the radius

00:07:22.300 --> 00:07:24.620
of the base of the
cylinder, and the height,

00:07:24.620 --> 00:07:27.660
we do not tend to think
in terms of arrows,

00:07:27.660 --> 00:07:30.530
but rather in terms
of ordered pairs.

00:07:30.530 --> 00:07:36.410
In other words, the ordered pair
x comma y, in the expression

00:07:36.410 --> 00:07:40.990
f of x, y, need not be
viewed as an arrow, but as

00:07:40.990 --> 00:07:42.770
an ordered pair.

00:07:42.770 --> 00:07:46.870
And an ordered pair
is called a 2-tuple.

00:07:46.870 --> 00:07:49.320
This leads to a
generalization that I

00:07:49.320 --> 00:07:51.540
think is rather
important, and I think

00:07:51.540 --> 00:07:57.310
you will see in a moment,
where the idea of this approach

00:07:57.310 --> 00:08:00.410
comes into functions of
several real variables.

00:08:00.410 --> 00:08:05.520
The topic I have in mind is
something called an n-tuple.

00:08:05.520 --> 00:08:09.130
And let me read into that
rather gradually as follows.

00:08:09.130 --> 00:08:15.220
Without giving you a specific
physical example-- meaning

00:08:15.220 --> 00:08:18.290
I'll give you an illustration,
but leave the numerical amounts

00:08:18.290 --> 00:08:19.390
out.

00:08:19.390 --> 00:08:23.370
Quite possibly if I'm studying
temperature in a room,

00:08:23.370 --> 00:08:25.790
the temperature will
in general what?

00:08:25.790 --> 00:08:28.960
It will depend on what
position I'm at in the room,

00:08:28.960 --> 00:08:33.820
and also at what time I
measure the temperature.

00:08:33.820 --> 00:08:36.710
It's fair to assume that
in many applications

00:08:36.710 --> 00:08:39.809
the temperature is some
function of the four

00:08:39.809 --> 00:08:43.750
independent variables
x, y, z, and t,

00:08:43.750 --> 00:08:47.400
where x, y, and z are
the Cartesian coordinates

00:08:47.400 --> 00:08:52.020
of three-dimensional space,
and t represents time.

00:08:52.020 --> 00:08:56.740
What I'm driving at is I can
now visualize this in terms

00:08:56.740 --> 00:08:58.810
of my function machine again.

00:08:58.810 --> 00:09:03.420
Namely to compute T, I
think of feeding what?

00:09:03.420 --> 00:09:08.180
Specific values into the
machine for x, y, z, and t.

00:09:08.180 --> 00:09:13.440
The f machine then
performs on x, y, z, and t

00:09:13.440 --> 00:09:18.200
as indicated by f to compute t.

00:09:18.200 --> 00:09:21.050
The input of my f
machine in this case

00:09:21.050 --> 00:09:25.490
is what I'm going to call a
4-tuple for the time being.

00:09:25.490 --> 00:09:29.700
I need four values--
x, y, z, and t.

00:09:29.700 --> 00:09:31.620
Order does make a difference.

00:09:31.620 --> 00:09:36.060
For example, if I interchange
the x- and the y-coordinate,

00:09:36.060 --> 00:09:39.200
those x and y, what I'm doing
is I'm interchanging the x-

00:09:39.200 --> 00:09:41.560
and the y-coordinate
of the point in space,

00:09:41.560 --> 00:09:44.800
and that in general is going
to change the point in space.

00:09:44.800 --> 00:09:48.010
The point, however, is that
in this particular f machine,

00:09:48.010 --> 00:09:51.480
notice that my
output is a scalar.

00:09:51.480 --> 00:09:54.020
Namely the temperature
is a number,

00:09:54.020 --> 00:09:57.680
but the input is a 4-tuple.

00:09:57.680 --> 00:10:00.910
x, y, z, and t.

00:10:00.910 --> 00:10:03.100
Now the trouble
with using symbolism

00:10:03.100 --> 00:10:07.280
like x, y, z, and t, I
guess-- without going

00:10:07.280 --> 00:10:09.940
into a long philosophic
discussion--

00:10:09.940 --> 00:10:11.410
among other things,
as soon as you

00:10:11.410 --> 00:10:14.800
have 27 or more
independent variables,

00:10:14.800 --> 00:10:17.070
you run out of letters
of the alphabet.

00:10:17.070 --> 00:10:20.730
As a result, it is
quite common for one

00:10:20.730 --> 00:10:23.430
to adopt a new notation.

00:10:23.430 --> 00:10:26.040
instead of saying
let (x, y, z, t)

00:10:26.040 --> 00:10:30.410
be a 4-tuple, what one
usually does is chooses

00:10:30.410 --> 00:10:34.065
one symbol-- say x-- and
then uses subscripts.

00:10:34.065 --> 00:10:38.570
Namely, a general 4-tuple
would have the form what?

00:10:38.570 --> 00:10:43.560
x_1 comma x_2 comma x_3
comma x_4, where x_1,

00:10:43.560 --> 00:10:46.150
x_2, x_3 and x_4 are numbers.

00:10:46.150 --> 00:10:48.940
An expression like this
is called the 4-tuple.

00:10:48.940 --> 00:10:51.280
What is this a
generalization of?

00:10:51.280 --> 00:10:55.010
The 4-tuple is a generalization
of the one-dimensional,

00:10:55.010 --> 00:10:57.910
two-dimensional, and
three-dimensional arrow,

00:10:57.910 --> 00:11:00.450
so to speak, where we
could think of what?

00:11:00.450 --> 00:11:06.200
The vector x_1*i as just needing
one number to specify it.

00:11:06.200 --> 00:11:11.930
The vector x_1*i plus x_2*j
could've been used to do what?

00:11:11.930 --> 00:11:15.580
It could've been abbreviated
by the 2-tuple (x_1, x_2).

00:11:15.580 --> 00:11:20.150
And the vector x_1*i plus
x_2*j plus x_3*k could've been

00:11:20.150 --> 00:11:24.470
abbreviated by the
3-tuple (x_1, x_2, x_3).

00:11:24.470 --> 00:11:26.610
It is conventional
in one-, two-,

00:11:26.610 --> 00:11:30.240
or three-dimensional
space to use x, y, and z,

00:11:30.240 --> 00:11:32.680
instead of x_1, x_2, and x_3.

00:11:32.680 --> 00:11:34.390
But that's just a convention.

00:11:34.390 --> 00:11:37.141
I think that it's because we
learnt it that way that we do

00:11:37.141 --> 00:11:37.640
it.

00:11:37.640 --> 00:11:39.900
In general, I
think the subscript

00:11:39.900 --> 00:11:44.440
notation is much nicer, but
in general the idea is what?

00:11:44.440 --> 00:11:50.240
Given an ordered array of
n numbers, x_1 up to x_n,

00:11:50.240 --> 00:11:52.590
we call that an n-tuple.

00:11:52.590 --> 00:11:55.120
And my friend and
colleague John Fitch

00:11:55.120 --> 00:11:56.780
mentioned to me
that if n is odd,

00:11:56.780 --> 00:11:58.770
like one, three,
five, or seven, then

00:11:58.770 --> 00:12:01.120
it's known as an odd-tuple.

00:12:01.120 --> 00:12:03.290
Which isn't a very
funny story, that's

00:12:03.290 --> 00:12:06.020
why I told you John told
me that particular story.

00:12:06.020 --> 00:12:10.200
But the whole idea is
this is an n-tuple.

00:12:10.200 --> 00:12:12.500
And the whole idea
again is what?

00:12:12.500 --> 00:12:15.110
That an n-tuple makes
sense, even when

00:12:15.110 --> 00:12:17.310
n is greater than three.

00:12:17.310 --> 00:12:20.210
The whole name of
the game of functions

00:12:20.210 --> 00:12:26.200
of several real variables-- in
terms of modern mathematics,

00:12:26.200 --> 00:12:28.800
in terms of the
language of n-tuples--

00:12:28.800 --> 00:12:32.360
is that a real-valued
function of several--

00:12:32.360 --> 00:12:35.950
where by several you mean more
than one-- real variables is

00:12:35.950 --> 00:12:39.360
simply a function in
which the input is

00:12:39.360 --> 00:12:43.730
an n-tuple and the
output is a number.

00:12:43.730 --> 00:12:44.570
OK?

00:12:44.570 --> 00:12:46.530
That's what this whole
thing is all about.

00:12:46.530 --> 00:12:50.530
And because of that, when we
then abbreviate the n-tuple,

00:12:50.530 --> 00:12:53.150
we use x with a bar under it.

00:12:53.150 --> 00:12:54.570
Let's call it x-bar.

00:12:54.570 --> 00:12:57.360
Rather than x with
the arrow over it,

00:12:57.360 --> 00:13:00.070
since arrows may
be inappropriate.

00:13:00.070 --> 00:13:01.770
Now what do I mean
by inappropriate?

00:13:01.770 --> 00:13:04.180
Well I mean that even
in the case of one, two,

00:13:04.180 --> 00:13:06.530
or three dimensions,
you might be thinking

00:13:06.530 --> 00:13:10.670
of, say, the radius and
the height of a cylinder,

00:13:10.670 --> 00:13:12.500
rather than as an arrow.

00:13:12.500 --> 00:13:14.520
And in more than
three dimensions--

00:13:14.520 --> 00:13:17.670
for most of us at least--
it's difficult to visualize

00:13:17.670 --> 00:13:19.820
what we would mean by an arrow.

00:13:19.820 --> 00:13:22.460
So we just use the
bar underneath.

00:13:22.460 --> 00:13:25.520
Now again, the major
point is, notice this--

00:13:25.520 --> 00:13:27.160
I keep saying the major point.

00:13:27.160 --> 00:13:29.720
I guess there's a lot of
major points about this.

00:13:29.720 --> 00:13:34.120
Remember that we did not
call arrows "vectors".

00:13:34.120 --> 00:13:38.630
We did not call arrows "vectors"
until we defined a structure

00:13:38.630 --> 00:13:39.290
on the arrows.

00:13:39.290 --> 00:13:40.250
Remember what we did?

00:13:40.250 --> 00:13:42.790
We told what it meant for
two arrows to be equal,

00:13:42.790 --> 00:13:45.350
we told how we added
two arrows, and we

00:13:45.350 --> 00:13:48.230
told how we multiplied
an arrow by a scalar.

00:13:48.230 --> 00:13:53.650
In a similar way, we will
not call n-tuples a structure

00:13:53.650 --> 00:13:57.970
until we tell how to
equate a pair of n-tuples,

00:13:57.970 --> 00:14:00.270
how to add a pair,
and how to multiply

00:14:00.270 --> 00:14:01.960
an n-tuple by a number.

00:14:01.960 --> 00:14:04.670
By the way, the structure
that we wind up with

00:14:04.670 --> 00:14:08.490
is then called an
n-dimensional vector space,

00:14:08.490 --> 00:14:12.270
or more concisely, n-space.

00:14:12.270 --> 00:14:14.480
And the idea works
like this-- let's

00:14:14.480 --> 00:14:16.690
pick a particular value of n.

00:14:16.690 --> 00:14:18.270
Lets just call it n.

00:14:18.270 --> 00:14:23.200
And let S sub n be the
set of all n-tuples x_1

00:14:23.200 --> 00:14:25.410
up to x_n, in other
words, the set of what?

00:14:25.410 --> 00:14:29.850
All n-tuples of
numbers x_1 up to x_n.

00:14:29.850 --> 00:14:31.730
Let's pick two
particular members

00:14:31.730 --> 00:14:34.830
of S sub n, which we'll
call a-bar and b-bar.

00:14:34.830 --> 00:14:37.090
Where a-bar is simply
an abbreviation

00:14:37.090 --> 00:14:42.860
for the n-tuple a_1 up to a_n,
where the a_1, a_2 up to a_n,

00:14:42.860 --> 00:14:44.640
et cetera, are real numbers.

00:14:44.640 --> 00:14:48.100
And b-bar is an abbreviation
for the n-tuple b_1,

00:14:48.100 --> 00:14:52.580
et cetera, b_n, where
b_1 up through b_n

00:14:52.580 --> 00:14:54.870
are also real numbers.

00:14:54.870 --> 00:14:58.120
Now again, here's where
structure comes into play.

00:14:58.120 --> 00:15:01.810
We have already defined
an n-tuple arithmetic

00:15:01.810 --> 00:15:04.370
in terms of arrows
for the case when

00:15:04.370 --> 00:15:07.640
n is either one, two, or three.

00:15:07.640 --> 00:15:10.910
Based on what happens when
n is one, two, or three,

00:15:10.910 --> 00:15:13.480
we invent the
following definitions.

00:15:13.480 --> 00:15:17.570
First of all, we
invent the definition

00:15:17.570 --> 00:15:22.580
that a-bar equals b-bar means
that the components-- meaning

00:15:22.580 --> 00:15:23.080
what?

00:15:23.080 --> 00:15:26.230
The individual members of
the n-tuple-- the components

00:15:26.230 --> 00:15:30.680
of a-bar are equal to the
components of b-bar, component

00:15:30.680 --> 00:15:31.570
by component.

00:15:31.570 --> 00:15:34.730
In other words, a_1
is equal to b_1,

00:15:34.730 --> 00:15:36.710
a_2 is equal to b_2, et cetera.

00:15:36.710 --> 00:15:37.980
All the way up to what?

00:15:37.980 --> 00:15:40.117
a_n is equal to b_n.

00:15:40.117 --> 00:15:41.950
Now, in other words
again, what we're saying

00:15:41.950 --> 00:15:44.310
is that for two
n-tuples to be equal,

00:15:44.310 --> 00:15:48.420
by definition, they should be
equal component by component,

00:15:48.420 --> 00:15:50.550
and this is
motivated by the fact

00:15:50.550 --> 00:15:52.300
that we already know
that we've accepted

00:15:52.300 --> 00:15:55.580
this structural definition
for the case of arrows.

00:15:55.580 --> 00:16:01.950
Similarly, given two n-tuples
a-bar and b-bar, to add them,

00:16:01.950 --> 00:16:06.150
let me define that to be the
n-tuple that I get by adding

00:16:06.150 --> 00:16:08.140
component by component.

00:16:08.140 --> 00:16:11.480
In other words, to find the
first component of a-bar plus

00:16:11.480 --> 00:16:14.950
b-bar, I add the first
component of a-bar

00:16:14.950 --> 00:16:17.080
to the first component of b-bar.

00:16:17.080 --> 00:16:20.970
Noticing of course,
that this is what?

00:16:20.970 --> 00:16:21.690
Be careful here.

00:16:21.690 --> 00:16:23.530
This is one number.

00:16:23.530 --> 00:16:25.800
a_1 plus b_1 is one number.

00:16:25.800 --> 00:16:27.750
a_2 plus b_2 is a number.

00:16:27.750 --> 00:16:30.020
a_n plus b_n is a number.

00:16:30.020 --> 00:16:32.550
In other words, notice
that by this definition,

00:16:32.550 --> 00:16:37.040
the sum of two n-tuples
is again an n-tuple.

00:16:37.040 --> 00:16:41.780
And finally, to multiply
a scalar by an n-tuple,

00:16:41.780 --> 00:16:44.330
I will agree to
define that definition

00:16:44.330 --> 00:16:51.050
to mean that you multiply the
n-tuple component by component

00:16:51.050 --> 00:16:54.500
by that particular
scalar, or number.

00:16:54.500 --> 00:16:57.360
Notice again that
all I have done here

00:16:57.360 --> 00:17:02.930
is I have obtained these
three structural definitions

00:17:02.930 --> 00:17:07.020
from the equivalent
situations of arrows.

00:17:07.020 --> 00:17:10.740
And since everything that was
true about arrows followed

00:17:10.740 --> 00:17:13.310
from these three
basic definitions,

00:17:13.310 --> 00:17:18.450
any set of n-tuples that obeys
this particular structure will

00:17:18.450 --> 00:17:20.930
also behave like the arrows did.

00:17:20.930 --> 00:17:23.869
And that's why we call
it a vector space.

00:17:23.869 --> 00:17:27.770
They behave like vectors even
though they can no longer

00:17:27.770 --> 00:17:30.060
be viewed as arrows.

00:17:30.060 --> 00:17:32.010
And again there are
creative people who

00:17:32.010 --> 00:17:33.780
view these things as arrows.

00:17:33.780 --> 00:17:35.750
I remember feeling very
intimidated one day

00:17:35.750 --> 00:17:37.760
by my undergraduate
professor the first time

00:17:37.760 --> 00:17:39.210
I learned vector spaces.

00:17:39.210 --> 00:17:42.084
I said, how do you visualize
an n-dimensional vector space?

00:17:42.084 --> 00:17:44.250
And in full seriousness,
without batting an eyelash,

00:17:44.250 --> 00:17:46.890
he says, "I visualize it
like a porcupine with a bunch

00:17:46.890 --> 00:17:48.460
of quills coming out of it."

00:17:48.460 --> 00:17:51.020
And I knew that he knew what
was visualizing it like,

00:17:51.020 --> 00:17:52.850
but didn't help me one bit.

00:17:52.850 --> 00:17:55.800
I'm saying, if you can
visualize this things as arrows,

00:17:55.800 --> 00:17:56.650
be my guest.

00:17:56.650 --> 00:17:58.030
Feel free to do so.

00:17:58.030 --> 00:18:01.710
If you can't, notice that
every one of these definitions

00:18:01.710 --> 00:18:05.130
stands on its own two feet.

00:18:05.130 --> 00:18:08.220
Subject to the condition that
when n is one, two, or three,

00:18:08.220 --> 00:18:12.130
we happen to have a very nice
geometric interpretation.

00:18:12.130 --> 00:18:15.010
By the way, I may have
given you the impression

00:18:15.010 --> 00:18:18.320
that vector spaces were
invented because of functions

00:18:18.320 --> 00:18:19.640
of several variables.

00:18:19.640 --> 00:18:22.280
Rather, the impression I
would like to leave you with

00:18:22.280 --> 00:18:25.210
is, that in terms of motivating
vector spaces, in terms

00:18:25.210 --> 00:18:27.610
of this course, that
was the motivation

00:18:27.610 --> 00:18:29.050
that we elected to use.

00:18:29.050 --> 00:18:31.660
That the mathematician
talked about vector spaces

00:18:31.660 --> 00:18:33.890
in many a different
context from what

00:18:33.890 --> 00:18:35.994
we might even dream possible.

00:18:35.994 --> 00:18:38.160
In other words, I don't
have to think of temperature

00:18:38.160 --> 00:18:41.460
being a function of the four
variables x, y, z, and t.

00:18:41.460 --> 00:18:44.070
Let me give you a different
kind of non-trivial example

00:18:44.070 --> 00:18:49.230
of a four-space that doesn't
even bring functions into play.

00:18:49.230 --> 00:18:52.940
Let's suppose I invent
the abbreviation,

00:18:52.940 --> 00:18:56.210
I write the 4-tuple
(a_0, a_1, a_2,

00:18:56.210 --> 00:19:02.720
a_3) to denote the cubic
polynomial a_0 plus a_1*x plus

00:19:02.720 --> 00:19:05.540
a_2 x squared plus a_3 x cubed.

00:19:05.540 --> 00:19:09.670
Notice that I can use these
as a place value system.

00:19:09.670 --> 00:19:12.230
The first member tells
me my constant term,

00:19:12.230 --> 00:19:14.260
the second member tells
me the coefficient

00:19:14.260 --> 00:19:17.660
of x, the third member tells me
the coefficient of x squared,

00:19:17.660 --> 00:19:20.890
and the fourth number gives
me the coefficient of x cubed.

00:19:20.890 --> 00:19:24.790
Notice that for two polynomials
to be identically equal,

00:19:24.790 --> 00:19:27.280
they must be equal, what?

00:19:27.280 --> 00:19:29.110
Coefficient by coefficient.

00:19:29.110 --> 00:19:30.870
That means what?

00:19:30.870 --> 00:19:32.700
Component by component.

00:19:32.700 --> 00:19:34.740
How do we add two polynomials?

00:19:34.740 --> 00:19:38.080
We add them coefficient
by coefficient.

00:19:38.080 --> 00:19:39.200
We add like terms.

00:19:39.200 --> 00:19:42.830
In other words, given two
polynomials, we add them what?

00:19:42.830 --> 00:19:44.230
Component by component.

00:19:44.230 --> 00:19:47.080
We add the two constant terms
together, the two coefficients

00:19:47.080 --> 00:19:49.000
of x together, the
two coefficients

00:19:49.000 --> 00:19:52.050
of x squared together,
the two coefficients of x

00:19:52.050 --> 00:19:52.730
cubed together.

00:19:52.730 --> 00:19:53.630
You see?

00:19:53.630 --> 00:19:56.320
How do we multiply a
polynomial by a scalar?

00:19:56.320 --> 00:19:59.420
We multiply each
term by the scalar.

00:19:59.420 --> 00:20:02.340
That, in turn, is equivalent
to multiplying each coefficient

00:20:02.340 --> 00:20:03.610
by that scalar.

00:20:03.610 --> 00:20:06.120
And that says, in terms
of n-tuple notation,

00:20:06.120 --> 00:20:10.100
that we have multiplied each
component by that scalar.

00:20:10.100 --> 00:20:12.450
The set of polynomials
of degree n

00:20:12.450 --> 00:20:16.680
forms a very nice vector space
in terms of our definition

00:20:16.680 --> 00:20:18.150
of a vector space.

00:20:18.150 --> 00:20:21.670
Now, of course, the danger
is that one gets the idea

00:20:21.670 --> 00:20:25.250
that any set of n-tuples can
be viewed as a vector space.

00:20:25.250 --> 00:20:27.080
An n-dimensional vector space.

00:20:27.080 --> 00:20:29.050
But this we have to
be careful about.

00:20:29.050 --> 00:20:31.380
Remember, it is
not the n-tuples,

00:20:31.380 --> 00:20:33.380
it is structure that they obey.

00:20:33.380 --> 00:20:36.600
Let me give you sort of a
simple example over here.

00:20:36.600 --> 00:20:38.520
Let me consider the
following situation.

00:20:38.520 --> 00:20:40.520
First of all, let me just
emphasize a statement;

00:20:40.520 --> 00:20:42.450
I just made it, let me
just read it with you.

00:20:42.450 --> 00:20:46.640
n-tuples are not
automatically n-spaces.

00:20:46.640 --> 00:20:52.600
For example, let me invent the
2-tuple a comma b to represent

00:20:52.600 --> 00:20:54.940
the number a plus b.

00:20:54.940 --> 00:20:58.390
For example, if I define
the 2-tuple a comma

00:20:58.390 --> 00:21:00.980
b to be an abbreviation
for a plus b,

00:21:00.980 --> 00:21:05.127
What would 4 comma 5 denote?

00:21:05.127 --> 00:21:06.460
Remember the 2-tuple means what?

00:21:06.460 --> 00:21:08.910
To get the value of
the 2-tuple is just

00:21:08.910 --> 00:21:10.760
the sum of the components.

00:21:10.760 --> 00:21:16.610
If I add a and b, in this
case, 4 plus 5 happens to be 9.

00:21:16.610 --> 00:21:21.360
How about the 2-tuple 6 comma
3, what value would that have?

00:21:21.360 --> 00:21:24.210
That would also
have the value 9.

00:21:24.210 --> 00:21:27.720
Therefore numerically,
the 2-tuple 4 comma 5

00:21:27.720 --> 00:21:30.870
is equal to the
2-tuple 6 comma 3.

00:21:30.870 --> 00:21:33.740
Yet notice that the
first component is not

00:21:33.740 --> 00:21:35.690
equal to the first
component here.

00:21:35.690 --> 00:21:38.630
In other words 4
is not equal to 6.

00:21:38.630 --> 00:21:42.610
Nor is 5 is equal
to 3, but if I were

00:21:42.610 --> 00:21:44.950
to choose this
definition of equality,

00:21:44.950 --> 00:21:47.940
I could not say that
these 2-tuples form

00:21:47.940 --> 00:21:51.770
a two-dimensional vector
space, because it violates

00:21:51.770 --> 00:21:54.910
the first definition for
a vector space, namely

00:21:54.910 --> 00:21:59.710
the definition of what it means
for two vectors to be equal.

00:21:59.710 --> 00:22:01.790
Since we're going to
let most of our material

00:22:01.790 --> 00:22:06.150
be covered by the exercises
and the supplementary notes,

00:22:06.150 --> 00:22:09.850
and this is just to be an
overview, let's move on now.

00:22:09.850 --> 00:22:13.020
Let's assume that we now know
what n-dimensional vector

00:22:13.020 --> 00:22:14.200
spaces are like.

00:22:14.200 --> 00:22:17.850
We now know that we can view
functions of several variables

00:22:17.850 --> 00:22:22.510
as functions that map n-tuples
into numbers, and as a result,

00:22:22.510 --> 00:22:25.600
it now makes sense to
talk about things like:

00:22:25.600 --> 00:22:28.620
suppose you were given the
n-tuple (x_1, x_2, x_3,

00:22:28.620 --> 00:22:33.420
x_3) and suppose that under
f, that n-tuple was mapped

00:22:33.420 --> 00:22:39.430
into x_1 cubed plus x_2
plus x_3 squared plus 2*x_4.

00:22:39.430 --> 00:22:46.230
For example, if I were to
replace x_1 by 1, x_2 by 3,

00:22:46.230 --> 00:22:52.170
x_3 by 1, and x_4 by 2, I would
arrive at the result what?

00:22:52.170 --> 00:22:57.130
1 cubed plus 3 plus 1
squared plus 2 times 2,

00:22:57.130 --> 00:22:59.130
and I can compute that output.

00:22:59.130 --> 00:23:01.370
Now the question that
comes up in calculus is,

00:23:01.370 --> 00:23:03.250
can we talk about limits here?

00:23:03.250 --> 00:23:08.280
Instead of computing what f of
1 comma 3 comma 1 comma 2 is,

00:23:08.280 --> 00:23:13.000
can I compute the limit of this
thing as (x_1, x_2, x_3, x_4)

00:23:13.000 --> 00:23:17.390
approaches 1 comma
3 comma 1 comma 2?

00:23:17.390 --> 00:23:21.320
I think intuitively it's clear
that since equality means

00:23:21.320 --> 00:23:24.590
that you must have equality
component by component,

00:23:24.590 --> 00:23:27.850
to say that this
approaches this means

00:23:27.850 --> 00:23:30.280
that the first component
here must approach

00:23:30.280 --> 00:23:31.810
the first component here.

00:23:31.810 --> 00:23:33.420
The second component
here approaches

00:23:33.420 --> 00:23:35.540
is the second component
here, et cetera.

00:23:35.540 --> 00:23:37.960
In other words, this
could be replaced

00:23:37.960 --> 00:23:41.440
by the four separate linear
one-dimensional limit

00:23:41.440 --> 00:23:47.400
problems: x_1 approaches 1, x_2
approaches 3, x_3 approaches 1,

00:23:47.400 --> 00:23:49.090
and x_4 approaches 2.

00:23:49.090 --> 00:23:51.360
And we would then be
tempted to say what?

00:23:51.360 --> 00:23:59.290
We will replace x_1 by 1,
x_2 by 3, x_3 by 1, x_4 by 2,

00:23:59.290 --> 00:24:01.610
see what happens
to this expression.

00:24:01.610 --> 00:24:04.750
And we would then be tempted to
say that this particular limit

00:24:04.750 --> 00:24:07.390
was equal to 9.

00:24:07.390 --> 00:24:11.020
Now the interesting point is
this-- that traditionally,

00:24:11.020 --> 00:24:15.510
this particular problem was
tackled long before anyone

00:24:15.510 --> 00:24:17.700
invented vector spaces.

00:24:17.700 --> 00:24:19.830
Or at least long
before anybody was

00:24:19.830 --> 00:24:23.290
serious about vector spaces.

00:24:23.290 --> 00:24:25.490
People did say,
why can't we reduce

00:24:25.490 --> 00:24:27.680
the study of
four-dimensional space

00:24:27.680 --> 00:24:30.140
to four separate studies
of one-dimensional space?

00:24:30.140 --> 00:24:33.880
In other words, let x_1 approach
1, x_2 approach 3, in that case

00:24:33.880 --> 00:24:35.030
you're allowing what?

00:24:35.030 --> 00:24:40.650
Four separate one-dimensional
limits to be taking place here.

00:24:40.650 --> 00:24:43.540
But the insight that
modern math gave

00:24:43.540 --> 00:24:46.720
us was that we can now go back
to our traditional definition

00:24:46.720 --> 00:24:47.220
of limit.

00:24:47.220 --> 00:24:50.570
Remember what was our old
structural definition of limit?

00:24:50.570 --> 00:24:53.140
Way back from the
first time we had it.

00:24:53.140 --> 00:24:56.850
The limit of f of x as x
approaches a equals L means,

00:24:56.850 --> 00:25:00.410
given epsilon greater than
0, we can find delta greater

00:25:00.410 --> 00:25:04.680
than zero, such that whenever
the absolute value of x minus a

00:25:04.680 --> 00:25:06.960
is greater than 0
but less than delta,

00:25:06.960 --> 00:25:10.670
the absolute value of f of x
minus L is less than epsilon

00:25:10.670 --> 00:25:12.740
Now here's what
the new math said.

00:25:12.740 --> 00:25:15.130
The modern approach
said look, let's just

00:25:15.130 --> 00:25:16.760
take our old
structural definition--

00:25:16.760 --> 00:25:19.580
the same as before-- and
vectorize everything.

00:25:19.580 --> 00:25:22.010
Notice in this situation
that we're dealing with,

00:25:22.010 --> 00:25:24.670
the input is where we have
the several variables.

00:25:24.670 --> 00:25:28.230
The input is the
n-tuple, the vector, OK?

00:25:28.230 --> 00:25:30.340
And the output is the scalar.

00:25:30.340 --> 00:25:33.100
So f is a scalar, L is a scalar.

00:25:33.100 --> 00:25:36.670
But x and a are
vectors, so every place

00:25:36.670 --> 00:25:41.340
I see an x and an a, I have
to put the bar underneath.

00:25:41.340 --> 00:25:44.380
And now I read this definition,
and all of a sudden,

00:25:44.380 --> 00:25:46.940
as so often has happened
in our course up to now,

00:25:46.940 --> 00:25:49.480
I come to something that
I've never seen before.

00:25:49.480 --> 00:25:53.220
Namely, as soon
as I look at this.

00:25:53.220 --> 00:25:57.200
This made very good sense
when these were arrows.

00:25:57.200 --> 00:25:59.760
Namely, we talked
about this earlier

00:25:59.760 --> 00:26:01.540
in our course and
one of our lectures.

00:26:01.540 --> 00:26:04.410
That to say the two arrows
were near each other

00:26:04.410 --> 00:26:06.790
was to say that their
difference was small,

00:26:06.790 --> 00:26:09.290
and that in turn said if
the arrows were placed tail

00:26:09.290 --> 00:26:12.480
to tail, we could make the
distance between their heads

00:26:12.480 --> 00:26:14.130
as small as we wish.

00:26:14.130 --> 00:26:17.650
Now the price that we have
to pay for higher dimensions

00:26:17.650 --> 00:26:20.010
is that if we have more
dimensions than what

00:26:20.010 --> 00:26:23.240
we can draw arrows in, the
problem that we're faced

00:26:23.240 --> 00:26:25.910
is that we have not
defined what you

00:26:25.910 --> 00:26:31.380
mean by the magnitude of x
minus a, where x and a happen

00:26:31.380 --> 00:26:33.710
to be n-tuples.

00:26:33.710 --> 00:26:36.480
And here again, we come
back to our structure.

00:26:36.480 --> 00:26:40.120
But now for the first time the
structure is not redundant.

00:26:40.120 --> 00:26:42.530
Let me tell you
what I mean by that.

00:26:42.530 --> 00:26:44.920
In the one-dimensional
case we define

00:26:44.920 --> 00:26:49.860
the magnitude of x minus a to
be the square root of x_1 minus

00:26:49.860 --> 00:26:52.220
a_1 squared, where
the vector x was

00:26:52.220 --> 00:26:57.640
the 1-tuple x_1, and the
vector a was the n-tuple a_1.

00:26:57.640 --> 00:26:59.710
In the two-dimensional
case, we said,

00:26:59.710 --> 00:27:03.910
OK, let's define the
magnitude of the vector

00:27:03.910 --> 00:27:07.590
x minus a to be x_1
minus a_1 squared

00:27:07.590 --> 00:27:10.370
plus x_2 minus a_2 squared.

00:27:10.370 --> 00:27:11.820
And in the
three-dimensional case,

00:27:11.820 --> 00:27:16.460
we said, let's define the
magnitude of x-bar minus a-bar

00:27:16.460 --> 00:27:19.740
to be the square root
of x_1 minus a_1 squared

00:27:19.740 --> 00:27:24.260
plus x_2 minus a_2 squared
plus x_3 minus a_3 squared.

00:27:24.260 --> 00:27:28.690
At that time, I kept saying,
notice that these recipes do

00:27:28.690 --> 00:27:32.620
not depend on a picture, that
these are numerical results

00:27:32.620 --> 00:27:34.060
that we can compute
without having

00:27:34.060 --> 00:27:35.550
to draw a picture at all.

00:27:35.550 --> 00:27:39.460
What happened of course was that
in the one-dimensional case,

00:27:39.460 --> 00:27:42.890
in the two-dimensional case,
in the three-dimensional case,

00:27:42.890 --> 00:27:46.360
it was easier to
visualize the picture.

00:27:46.360 --> 00:27:49.240
Now here's where the
real kicker comes in--

00:27:49.240 --> 00:27:52.270
and this is the real crucial
point-- structurally,

00:27:52.270 --> 00:27:54.780
can't you see what's
happening over here?

00:27:54.780 --> 00:27:58.360
Can't you see how I can now
define the absolute value

00:27:58.360 --> 00:28:04.850
of the vector x-bar minus a-bar,
even if n is greater than 3,

00:28:04.850 --> 00:28:06.820
in such a way that
the definition will

00:28:06.820 --> 00:28:11.620
make sense and still mimic
everything that we're doing?

00:28:11.620 --> 00:28:14.100
I hope you are a
step ahead of me

00:28:14.100 --> 00:28:17.730
on this except for some new
notation I introduced here.

00:28:17.730 --> 00:28:20.290
It turns out that in
the modern math book,

00:28:20.290 --> 00:28:24.960
one distinguishes between
the absolute value

00:28:24.960 --> 00:28:28.290
of a number, and the
magnitude of a vector,

00:28:28.290 --> 00:28:34.140
and it is frequently traditional
to introduce a double bar

00:28:34.140 --> 00:28:39.010
on each side to represent the
magnitude of the difference

00:28:39.010 --> 00:28:40.140
between two vectors,

00:28:40.140 --> 00:28:42.700
which I claim behaves
like a distance.

00:28:42.700 --> 00:28:44.510
Let me show you
what I mean by that.

00:28:44.510 --> 00:28:48.820
Let me define the magnitude
of the n-tuple x-bar

00:28:48.820 --> 00:28:53.400
minus the n-tuple a-bar,
written this way, to be

00:28:53.400 --> 00:28:57.110
the positive square root
of x_1 minus a_1 squared,

00:28:57.110 --> 00:29:02.710
plus et cetera, plus
x_n minus a_n squared.

00:29:02.710 --> 00:29:04.720
The thing that I would
like you to notice here

00:29:04.720 --> 00:29:08.850
is that since each of these
numbers are non-negative--

00:29:08.850 --> 00:29:10.850
see they're squares
of real numbers--

00:29:10.850 --> 00:29:14.600
the only way this can be 0--
well the only way that the sum

00:29:14.600 --> 00:29:17.860
of squares of non-negative
numbers can be 0

00:29:17.860 --> 00:29:20.080
is for each of the
numbers to be 0.

00:29:20.080 --> 00:29:23.860
Consequently, the only way the
magnitude of x-bar minus a-bar

00:29:23.860 --> 00:29:28.710
can equal 0 is if x_1 equals
a_1, x_2 equals a_2, et cetera,

00:29:28.710 --> 00:29:31.060
and x_n equals a_n.

00:29:31.060 --> 00:29:35.900
In this vein, notice that
the geometric phrase x-bar

00:29:35.900 --> 00:29:39.870
near a-bar still makes sense.

00:29:39.870 --> 00:29:41.760
It doesn't make
sense pictorially,

00:29:41.760 --> 00:29:44.955
because we can't draw the
arrows if n is greater than 3.

00:29:44.955 --> 00:29:46.330
But notice that
what we're saying

00:29:46.330 --> 00:29:49.630
is that for x to be
near a, all we're saying

00:29:49.630 --> 00:29:53.140
is that the magnitude--
defined this way--

00:29:53.140 --> 00:29:57.420
the magnitude of x-bar
minus a-bar is small.

00:29:57.420 --> 00:30:00.010
When you're adding
up positive squares,

00:30:00.010 --> 00:30:03.700
the only way the sum can be
small is if each of the factors

00:30:03.700 --> 00:30:04.640
are small.

00:30:04.640 --> 00:30:07.580
But notice what these factors
are, except for the square,

00:30:07.580 --> 00:30:11.440
it's the difference between
x_1 and a_1, x_2 and a_2,

00:30:11.440 --> 00:30:13.730
et cetera, x_n and a_n.

00:30:13.730 --> 00:30:17.320
In other words, to say that
x-bar is near a-bar means

00:30:17.320 --> 00:30:21.400
that x_1 is near a_1, x_2
is near a_2, et cetera,

00:30:21.400 --> 00:30:24.170
and x_n is near a_n,
which is exactly

00:30:24.170 --> 00:30:25.730
the traditional approach.

00:30:25.730 --> 00:30:28.960
And in fact, except for the
fact that we can capitalize

00:30:28.960 --> 00:30:31.340
on structure,
notice that once we

00:30:31.340 --> 00:30:34.840
define the magnitude of
the difference between two

00:30:34.840 --> 00:30:37.170
n-tuples-- do you
notice that by the way?

00:30:37.170 --> 00:30:41.490
The magnitude of the difference
of two n-tuples is a number.

00:30:41.490 --> 00:30:45.240
Notice now if we replace
this fancy phrase--

00:30:45.240 --> 00:30:47.830
which we didn't know
the meaning of before,

00:30:47.830 --> 00:30:52.340
but which we now know--
by its new definition,

00:30:52.340 --> 00:30:56.420
we obtain the traditional
definition of limit.

00:30:56.420 --> 00:31:01.840
Namely the limit of f of x_1 up
to x_n, as x_1 approaches a_1,

00:31:01.840 --> 00:31:03.630
et cetera, and x_n
approaches a_n,

00:31:03.630 --> 00:31:07.830
equals L means that given
epsilon greater than 0,

00:31:07.830 --> 00:31:10.930
we can find delta
greater than 0 such

00:31:10.930 --> 00:31:14.040
that whenever the square
root of x_1 minus a_1

00:31:14.040 --> 00:31:18.630
squared plus et cetera x_n minus
a_n squared is less than delta

00:31:18.630 --> 00:31:21.460
but greater than 0, then
the magnitude-- you see,

00:31:21.460 --> 00:31:23.330
these numbers
here-- the magnitude

00:31:23.330 --> 00:31:28.010
of f of x_1 up to x_n minus
L is less than epsilon.

00:31:28.010 --> 00:31:30.300
In, other words,
this definition here

00:31:30.300 --> 00:31:33.940
happens to be the
traditional definition.

00:31:33.940 --> 00:31:34.670
OK?

00:31:34.670 --> 00:31:38.340
But the point is that the
traditional definition

00:31:38.340 --> 00:31:42.330
has exactly the same structure
as the modern definition.

00:31:42.330 --> 00:31:44.820
And as a result, to make
fun of the traditional math

00:31:44.820 --> 00:31:47.230
because it's not as
pretty as the modern math

00:31:47.230 --> 00:31:49.070
is the wrong thing to say.

00:31:49.070 --> 00:31:51.340
It's like the fellow who
once asked me at a PTA

00:31:51.340 --> 00:31:54.680
meeting, "how much is 8 plus
7 in the new mathematics?"

00:31:54.680 --> 00:31:56.550
That part hasn't changed.

00:31:56.550 --> 00:31:59.380
The beauty of using
the n-tuple notation

00:31:59.380 --> 00:32:03.370
was that it allowed us to
use the previous structure

00:32:03.370 --> 00:32:04.180
of limits.

00:32:04.180 --> 00:32:07.350
So that we can get all of our
theorems, all of our formulas

00:32:07.350 --> 00:32:10.470
and what have you, to go
through word for word,

00:32:10.470 --> 00:32:14.640
even though the higher the
dimension, the more complex

00:32:14.640 --> 00:32:15.950
our computations are.

00:32:15.950 --> 00:32:19.600
But structurally, It
essentially boiled down to,

00:32:19.600 --> 00:32:21.990
after you've seen
one-dimensional space,

00:32:21.990 --> 00:32:23.160
you've seen them all.

00:32:23.160 --> 00:32:26.100
That was the big innovation
with the modern approach

00:32:26.100 --> 00:32:28.100
to n-dimensional vector spaces.

00:32:28.100 --> 00:32:30.540
And to help put this
in proper perspective,

00:32:30.540 --> 00:32:34.100
next time I shall
introduce the calculus

00:32:34.100 --> 00:32:38.000
of several real variables
in terms of the more

00:32:38.000 --> 00:32:39.430
traditional approach.

00:32:39.430 --> 00:32:44.220
But again, until
next time, good bye.

00:32:44.220 --> 00:32:46.590
Funding for the
publication of this video

00:32:46.590 --> 00:32:51.470
was provided by the Gabriella
and Paul Rosenbaum foundation.

00:32:51.470 --> 00:32:55.640
Help OCW continue to provide
free and open access to MIT

00:32:55.640 --> 00:33:03.350
courses by making a donation
at MIT ocw.mit.edu/donate.