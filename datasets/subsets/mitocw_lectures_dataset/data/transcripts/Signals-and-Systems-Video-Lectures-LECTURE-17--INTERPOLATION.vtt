WEBVTT

00:00:00.040 --> 00:00:02.470
The following content is
provided under a Creative

00:00:02.470 --> 00:00:03.880
Commons license.

00:00:03.880 --> 00:00:06.920
Your support will help MIT
OpenCourseWare continue to

00:00:06.920 --> 00:00:10.570
offer high quality educational
resources for free.

00:00:10.570 --> 00:00:13.470
To make a donation or view
additional materials from

00:00:13.470 --> 00:00:19.290
hundreds of MIT courses, visit
MIT OpenCourseWare at

00:00:19.290 --> 00:00:20.730
ocw.mit.edu.

00:00:20.730 --> 00:00:55.220
[MUSIC PLAYING]

00:00:55.220 --> 00:00:58.180
PROFESSOR: In discussing the
sampling theorem, we saw that

00:00:58.180 --> 00:01:01.650
for a band limited signal,
which is sampled at a

00:01:01.650 --> 00:01:05.660
frequency that is at least twice
the highest frequency,

00:01:05.660 --> 00:01:09.320
we can implement exact
reconstruction of the original

00:01:09.320 --> 00:01:16.240
signal by low pass filtering an
impulse train, whose areas

00:01:16.240 --> 00:01:19.640
are identical to the
sample values.

00:01:19.640 --> 00:01:23.200
Well essentially, this low
pass filtering operation

00:01:23.200 --> 00:01:26.980
provides for us an interpolation
in between the

00:01:26.980 --> 00:01:28.440
sampled values.

00:01:28.440 --> 00:01:32.160
In other words, the output of a
low pass filter, in fact, is

00:01:32.160 --> 00:01:36.820
a continuous curve, which fits
between the sampled values

00:01:36.820 --> 00:01:39.980
some continuous function.

00:01:39.980 --> 00:01:44.170
Now, I'm sure that many of you
are familiar with other kinds

00:01:44.170 --> 00:01:47.330
of interpolation that we could
potentially provide in between

00:01:47.330 --> 00:01:48.810
sampled values.

00:01:48.810 --> 00:01:52.280
And in fact, in today's lecture
what I would like to

00:01:52.280 --> 00:01:58.640
do is first of all developed
the interpretation of the

00:01:58.640 --> 00:02:03.640
reconstruction as an
interpolation process and then

00:02:03.640 --> 00:02:07.370
also see how this exact
interpolation, using a low

00:02:07.370 --> 00:02:12.350
pass filter, relates to other
kinds of interpolation, such

00:02:12.350 --> 00:02:14.520
as linear interpolation
that you may

00:02:14.520 --> 00:02:16.330
already be familiar with.

00:02:16.330 --> 00:02:21.220
Well to begin, let's again
review what the overall system

00:02:21.220 --> 00:02:25.290
is for exact sampling
and reconstruction.

00:02:25.290 --> 00:02:28.670
And so let me remind you that
the overall system for

00:02:28.670 --> 00:02:31.960
sampling and desampling, or
reconstruction, is as I

00:02:31.960 --> 00:02:34.040
indicate here.

00:02:34.040 --> 00:02:37.150
The sampling process consists
of multiplying

00:02:37.150 --> 00:02:38.960
by an impulse train.

00:02:38.960 --> 00:02:42.200
And then the reconstruction
process corresponds to

00:02:42.200 --> 00:02:46.590
processing that impulse train
with a low pass filter.

00:02:46.590 --> 00:02:52.420
So if the spectrum of the
original signal is what I

00:02:52.420 --> 00:02:57.890
indicate in this diagram, then
after sampling with an impulse

00:02:57.890 --> 00:03:02.020
train, that spectrum
is replicated.

00:03:02.020 --> 00:03:07.960
And this replicated spectrum
for reconstruction is then

00:03:07.960 --> 00:03:10.610
processed through a
low pass filter.

00:03:10.610 --> 00:03:14.770
And so, in fact, if this
frequency response is an ideal

00:03:14.770 --> 00:03:20.560
low pass filter, as I indicate
on the diagram below, then

00:03:20.560 --> 00:03:25.540
multiplying the spectrum of
the sample signal by this

00:03:25.540 --> 00:03:31.350
extracts for us just the
portion of the spectrum

00:03:31.350 --> 00:03:33.210
centered around the origin.

00:03:33.210 --> 00:03:36.920
And what we're left with,
then, is the spectrum,

00:03:36.920 --> 00:03:41.490
finally, of the reconstructed
signal, which for the case of

00:03:41.490 --> 00:03:46.070
an ideal low pass filter is
exactly equal to the spectrum

00:03:46.070 --> 00:03:48.160
of the original signal.

00:03:48.160 --> 00:03:55.780
Now, that is the frequency
domain picture of the sampling

00:03:55.780 --> 00:03:57.220
and reconstruction.

00:03:57.220 --> 00:04:00.600
Let's also look at, basically,
the same process.

00:04:00.600 --> 00:04:04.920
But let's examine it now
in the time domain.

00:04:04.920 --> 00:04:11.270
Well in the time domain, what we
have is our original signal

00:04:11.270 --> 00:04:14.110
multiplied by an
impulse train.

00:04:14.110 --> 00:04:19.920
And this then is the sample
signal, or the impulse train

00:04:19.920 --> 00:04:23.630
whose areas are equal to
the sample values.

00:04:23.630 --> 00:04:27.620
And because of the fact that
this is an impulse train, in

00:04:27.620 --> 00:04:34.160
fact, we can take this term
inside the summation.

00:04:34.160 --> 00:04:37.130
And of course, what counts
about x of t in this

00:04:37.130 --> 00:04:41.400
expression is just as values
at the sampling instance,

00:04:41.400 --> 00:04:47.220
which are displaced in time by
capital T. And so what we can

00:04:47.220 --> 00:04:52.350
equivalently write is the
expression for the impulse

00:04:52.350 --> 00:04:55.880
train samples, or impulse train
of samples, as I've

00:04:55.880 --> 00:04:57.010
indicated here.

00:04:57.010 --> 00:05:03.410
Simply an impulse train, whose
areas are the sampled values.

00:05:03.410 --> 00:05:08.650
Now, in the reconstruction we
process that impulse train

00:05:08.650 --> 00:05:10.940
with a low pass filter.

00:05:10.940 --> 00:05:13.880
That's the basic notion
of the reconstruction.

00:05:13.880 --> 00:05:18.810
And so in the time domain, the
reconstructed signal is

00:05:18.810 --> 00:05:23.850
related to the impulse train
of samples through a

00:05:23.850 --> 00:05:28.280
convolution with the filter
impulse response.

00:05:28.280 --> 00:05:32.670
And carrying out this
convolution, since this is

00:05:32.670 --> 00:05:35.880
just a train of pulses, in
effect, what happens in this

00:05:35.880 --> 00:05:40.640
convolution is that this
impulse response gets

00:05:40.640 --> 00:05:45.820
reproduced at each of the
locations of the impulses in x

00:05:45.820 --> 00:05:48.790
of p of t with the
appropriate area.

00:05:48.790 --> 00:05:52.580
And finally, then, in the time
domain, the reconstructed

00:05:52.580 --> 00:05:59.140
signal is simply a linear
combination of shifted

00:05:59.140 --> 00:06:03.280
versions of the impulse response
with amplitudes,

00:06:03.280 --> 00:06:05.080
which are the sample values.

00:06:05.080 --> 00:06:09.410
And so this expression, in
fact then, is our basic

00:06:09.410 --> 00:06:14.840
reconstruction expression
in the time domain.

00:06:14.840 --> 00:06:20.350
Well in terms of a diagram, we
can think of the original

00:06:20.350 --> 00:06:23.150
waveform as I've shown here.

00:06:23.150 --> 00:06:30.100
And the red arrows denote the
sampled wave form, or the

00:06:30.100 --> 00:06:35.790
train of impulses, whose
amplitudes are the sampled

00:06:35.790 --> 00:06:40.310
values of the original
continuous time signal.

00:06:40.310 --> 00:06:45.330
And then, I've shown here what
might be a typical impulse

00:06:45.330 --> 00:06:49.310
response, particularly typical
in the case where we're

00:06:49.310 --> 00:06:53.280
talking about reconstruction
with an ideal low pass filter.

00:06:53.280 --> 00:06:58.250
Now, what happens in the
reconstruction is that the

00:06:58.250 --> 00:07:04.140
convolution of these impulses
with this impulse response

00:07:04.140 --> 00:07:09.240
means that in the
reconstruction, we superimpose

00:07:09.240 --> 00:07:10.890
one of these impulse
responses--

00:07:10.890 --> 00:07:13.810
whatever the filter impulse
response happens to be--

00:07:13.810 --> 00:07:16.570
at each of these
time instance.

00:07:16.570 --> 00:07:20.310
And in doing that, then
those are added up.

00:07:20.310 --> 00:07:23.660
And that gives us the total
reconstructed signal.

00:07:23.660 --> 00:07:28.730
Of course, for the case in which
the filter is an ideal

00:07:28.730 --> 00:07:34.110
low pass filter, then what we
know is that in that case, the

00:07:34.110 --> 00:07:38.090
impulse response is of the
form of a sync function.

00:07:38.090 --> 00:07:41.880
But generally, we may want to
consider other kinds of

00:07:41.880 --> 00:07:43.070
impulse responses.

00:07:43.070 --> 00:07:47.420
And so in fact, the
interpolating impulse response

00:07:47.420 --> 00:07:50.160
may have and will have, as this
discussion goes along,

00:07:50.160 --> 00:07:52.830
some different shapes.

00:07:52.830 --> 00:07:56.750
Now what I'd like to do is
illustrate, or demonstrate,

00:07:56.750 --> 00:08:04.240
this process of effectively
doing the interpolation by

00:08:04.240 --> 00:08:07.530
replacing each of the impulses
by an appropriate

00:08:07.530 --> 00:08:10.250
interpolating impulse response
and adding these up.

00:08:10.250 --> 00:08:12.690
And I'd like to do this
with a computer

00:08:12.690 --> 00:08:14.690
movie that we generated.

00:08:14.690 --> 00:08:17.860
And what you'll see in the
computer movie is,

00:08:17.860 --> 00:08:20.040
essentially, an original
wave form, which is

00:08:20.040 --> 00:08:21.870
a continuous curve.

00:08:21.870 --> 00:08:29.000
And then below that in the movie
is a train of samples.

00:08:29.000 --> 00:08:33.500
And then below that will be
the reconstructed signal.

00:08:33.500 --> 00:08:38.110
And the reconstruction will be
carried out by showing the

00:08:38.110 --> 00:08:41.530
location of the impulse response
as it moves along in

00:08:41.530 --> 00:08:42.950
the wave form.

00:08:42.950 --> 00:08:46.650
And then the reconstructed curve
is simply the summation

00:08:46.650 --> 00:08:49.350
of those as that impulse
response moves along.

00:08:49.350 --> 00:08:53.930
So what you'll see then is an
impulse response like this--

00:08:53.930 --> 00:08:58.340
for the particular case of an
ideal low pass filter for the

00:08:58.340 --> 00:08:59.590
reconstruction--

00:09:02.140 --> 00:09:07.480
placed successively at the
locations of these impulses.

00:09:07.480 --> 00:09:10.400
And that is the convolution
process.

00:09:10.400 --> 00:09:14.490
And below that then will be
the summation of these.

00:09:14.490 --> 00:09:17.220
And the summation of those
will then be the

00:09:17.220 --> 00:09:18.740
reconstructed signal.

00:09:18.740 --> 00:09:23.250
So let's take a look at, first
of all that reconstruction

00:09:23.250 --> 00:09:26.150
where the impulse response
corresponds to the impulse

00:09:26.150 --> 00:09:29.800
response of an ideal
low pass filter.

00:09:29.800 --> 00:09:34.460
Shown here, first, is the
continuous time signal, which

00:09:34.460 --> 00:09:39.310
we want to sample and then
reconstruct using band limited

00:09:39.310 --> 00:09:42.860
interpolation, or equivalently,
ideal low pass

00:09:42.860 --> 00:09:45.120
filtering on the
set of samples.

00:09:45.120 --> 00:09:48.230
So the first step then
is to sample this

00:09:48.230 --> 00:09:49.940
continuous time signal.

00:09:49.940 --> 00:09:53.850
And we see here now the
set of samples.

00:09:53.850 --> 00:09:56.720
And superimposed on the samples
are the original

00:09:56.720 --> 00:10:01.180
continuous time signal to focus
on the fact that those

00:10:01.180 --> 00:10:03.420
are samples of the top curve.

00:10:03.420 --> 00:10:08.250
Let's now remove the continuous
time envelope of

00:10:08.250 --> 00:10:09.420
the samples.

00:10:09.420 --> 00:10:12.380
And it's this set of samples
that we then want to use for

00:10:12.380 --> 00:10:14.490
the reconstruction.

00:10:14.490 --> 00:10:17.900
The reconstruction process,
interpreted as interpolation,

00:10:17.900 --> 00:10:20.600
consists of replacing
each sample with a

00:10:20.600 --> 00:10:22.970
sine x over x function.

00:10:22.970 --> 00:10:28.940
And so let's first consider
the sample at t equals 0.

00:10:28.940 --> 00:10:32.800
And here is the interpolating
sine x over x function

00:10:32.800 --> 00:10:35.530
associated with that sample.

00:10:35.530 --> 00:10:41.610
Now, the more general process
then is to place a sine x over

00:10:41.610 --> 00:10:45.150
x function at the time location
of each sample and

00:10:45.150 --> 00:10:46.400
superimpose those.

00:10:48.980 --> 00:10:54.330
Let's begin that process at the
left-hand set of samples.

00:10:54.330 --> 00:10:58.800
And in the bottom curve, we'll
build up the reconstruction as

00:10:58.800 --> 00:11:02.150
those sine x over x functions
are added together.

00:11:02.150 --> 00:11:04.470
So we begin with the
left-hand sample.

00:11:04.470 --> 00:11:07.470
And we see there the sine x over
x function on the bottom

00:11:07.470 --> 00:11:11.900
curve is the first step
in the reconstruction.

00:11:11.900 --> 00:11:14.710
We now have the sine x over x
function associated with the

00:11:14.710 --> 00:11:16.070
second sample.

00:11:16.070 --> 00:11:18.620
Let's add that in.

00:11:18.620 --> 00:11:22.680
Now we move on to the
third sample.

00:11:22.680 --> 00:11:27.980
And that sine x over x
function is added in.

00:11:27.980 --> 00:11:33.860
Continuing on, the next sample
generates a sine x over x

00:11:33.860 --> 00:11:36.670
function, which is superimposed
on the result

00:11:36.670 --> 00:11:39.750
that we've accumulated so far.

00:11:39.750 --> 00:11:42.720
And now let's just speed
up the process.

00:11:42.720 --> 00:11:45.490
We'll move on to the
fifth sample.

00:11:45.490 --> 00:11:46.540
Add that in.

00:11:46.540 --> 00:11:48.710
The sixth sample, add that in.

00:11:48.710 --> 00:11:51.440
And continue on through
the set of samples.

00:11:51.440 --> 00:11:54.960
And keep in mind the fact that,
basically, what we're

00:11:54.960 --> 00:11:58.860
doing explicitly here is the
convolution of the impulse

00:11:58.860 --> 00:12:02.240
train with a sine x
over x function.

00:12:02.240 --> 00:12:05.730
And because the set of samples
that we started with were

00:12:05.730 --> 00:12:09.610
samples of an exactly band
limited function, what we are

00:12:09.610 --> 00:12:14.530
reconstructing exactly is the
original continuous time

00:12:14.530 --> 00:12:16.980
signal that we have
on the top trace.

00:12:24.900 --> 00:12:31.060
OK, so that then kind of gives
you the picture of doing

00:12:31.060 --> 00:12:34.720
interpolation by replacing
the impulses by

00:12:34.720 --> 00:12:35.870
a continuous curve.

00:12:35.870 --> 00:12:40.010
And that's the way we're fitting
a continuous curve to

00:12:40.010 --> 00:12:42.260
the original impulse train.

00:12:42.260 --> 00:12:47.870
And let me stress that this
reconstruction process--

00:12:47.870 --> 00:12:51.320
by putting the impulses
through a filter--

00:12:54.690 --> 00:12:59.320
follows this relationship
whether or not this impulse

00:12:59.320 --> 00:13:03.700
response, in fact, corresponds
to an ideal low pass filter.

00:13:03.700 --> 00:13:07.210
What this expression always says
is that reconstructing

00:13:07.210 --> 00:13:12.440
this way corresponds to
replacing the impulses by a

00:13:12.440 --> 00:13:17.940
shifted impulse response with
an amplitude that is an

00:13:17.940 --> 00:13:22.220
amplitude corresponding
to the sample value.

00:13:22.220 --> 00:13:27.120
Now the kind of reconstruction
that we've just talked about,

00:13:27.120 --> 00:13:32.320
and the ideal reconstruction,
is often referred to as band

00:13:32.320 --> 00:13:36.420
limited interpolation because
we're interpolating in between

00:13:36.420 --> 00:13:39.840
the samples by making the
assumption that the signal is

00:13:39.840 --> 00:13:43.840
band limited and using the
impulse response for an ideal

00:13:43.840 --> 00:13:48.780
low pass filter, which has a cut
off frequency consistent

00:13:48.780 --> 00:13:51.500
with the assumed bandwidth
for the signal.

00:13:51.500 --> 00:13:57.590
So if we look here, for example,
at the impulse train,

00:13:57.590 --> 00:14:02.170
then in the demonstration that
you just saw, we built up the

00:14:02.170 --> 00:14:05.420
reconstructed curve by replacing
each of these

00:14:05.420 --> 00:14:07.980
impulses with the
sync function.

00:14:07.980 --> 00:14:13.570
And the sum of those built up
the reconstructed curve.

00:14:13.570 --> 00:14:18.230
Well, there are lots of other
kinds of interpolation that

00:14:18.230 --> 00:14:23.180
are perhaps maybe not as exact
but often easier to implement.

00:14:23.180 --> 00:14:25.080
And what I'd like to
do is focus our

00:14:25.080 --> 00:14:28.300
attention on two of these.

00:14:28.300 --> 00:14:31.440
The first that I want to mention
is what's referred to

00:14:31.440 --> 00:14:34.760
as the zero order hold, where
in effect, we do the

00:14:34.760 --> 00:14:39.100
interpolation in between these
sample values by simply

00:14:39.100 --> 00:14:43.610
holding the sample value until
the next sampling instant.

00:14:43.610 --> 00:14:48.070
And the reconstruction that we
end up, in that case, will

00:14:48.070 --> 00:14:49.260
look something like this.

00:14:49.260 --> 00:14:54.590
It's a staircase, or box car,
kind of function where we've

00:14:54.590 --> 00:14:57.660
simply held the sample value
until the next sampling

00:14:57.660 --> 00:15:01.420
instant and then replaced by
that value, held it until the

00:15:01.420 --> 00:15:04.040
next sampling instant,
et cetera.

00:15:04.040 --> 00:15:07.750
Now that's one kind
of interpolation.

00:15:07.750 --> 00:15:11.030
Another kind of very common
interpolation is what's

00:15:11.030 --> 00:15:13.290
referred to as linear
interpolation, where we simply

00:15:13.290 --> 00:15:16.910
fit a straight line between
the sampled values.

00:15:16.910 --> 00:15:21.240
And in that case, the type of
reconstruction that we would

00:15:21.240 --> 00:15:25.060
get would look something like I
indicate here, where we take

00:15:25.060 --> 00:15:30.540
a sample value, and the
following sample value, and

00:15:30.540 --> 00:15:34.170
simply fit an interpolated curve
between them, which is a

00:15:34.170 --> 00:15:36.430
straight line.

00:15:36.430 --> 00:15:42.470
Now interestingly, in fact, both
the zero order hold and

00:15:42.470 --> 00:15:46.155
the linear interpolation, which
is often referred to as

00:15:46.155 --> 00:15:50.600
a first order hold, can also
be either implemented or

00:15:50.600 --> 00:15:53.820
interpreted, both implemented
and interpreted, in the

00:15:53.820 --> 00:15:56.670
context of the equation that
we just developed.

00:15:56.670 --> 00:16:00.450
In particular, the processing
of the impulse train of

00:16:00.450 --> 00:16:05.520
samples by a linear time
invariant filter.

00:16:05.520 --> 00:16:12.550
Specifically, if we consider
a system where the impulse

00:16:12.550 --> 00:16:21.030
response is a rectangular
function, then in fact, if we

00:16:21.030 --> 00:16:25.570
processed the train of samples
through a filter with this

00:16:25.570 --> 00:16:29.610
impulse response, exactly the
reconstruction that we would

00:16:29.610 --> 00:16:32.450
get is what I've shown here.

00:16:32.450 --> 00:16:38.810
Alternatively, if we chose an
impulse response which was a

00:16:38.810 --> 00:16:44.980
triangular impulse response,
then what in effect happens is

00:16:44.980 --> 00:16:49.690
that each of these impulses
activates this triangle.

00:16:49.690 --> 00:16:53.210
And when we add up those
triangles at successive

00:16:53.210 --> 00:16:57.630
locations, in fact, what we
generate is this linear

00:16:57.630 --> 00:16:59.730
interpolation.

00:16:59.730 --> 00:17:06.540
So what this says, in fact, is
that either a zero order hold,

00:17:06.540 --> 00:17:09.849
which holds the value, or
linear interpolation can

00:17:09.849 --> 00:17:15.190
likewise be interpreted as a
process of convulving the

00:17:15.190 --> 00:17:18.380
impulse train of samples
with an appropriate

00:17:18.380 --> 00:17:21.380
filter impulse response.

00:17:21.380 --> 00:17:25.480
Well, what I'd like to do is
demonstrate, as we did with

00:17:25.480 --> 00:17:29.860
the band limited interpolation
or the sync interpolation as

00:17:29.860 --> 00:17:31.500
it's sometimes called--
interpolating with

00:17:31.500 --> 00:17:33.100
a sine x over x--

00:17:33.100 --> 00:17:35.260
let me now show the process.

00:17:35.260 --> 00:17:41.820
First of all, where we have
a zero order hold as

00:17:41.820 --> 00:17:44.280
corresponding to this
impulse response.

00:17:44.280 --> 00:17:48.160
In which case, we'll see
basically the same process as

00:17:48.160 --> 00:17:52.340
we saw in the computer generated
movie previously.

00:17:52.340 --> 00:17:56.080
But now, rather than a sync
function replacing each of

00:17:56.080 --> 00:17:59.770
these impulses, we'll have
a rectangular function.

00:17:59.770 --> 00:18:04.200
That will generate then our
approximation, which is a zero

00:18:04.200 --> 00:18:06.130
order hold.

00:18:06.130 --> 00:18:08.900
And following that, we'll do
exactly the same thing with

00:18:08.900 --> 00:18:12.820
the same wave form, using
a first order hold or a

00:18:12.820 --> 00:18:14.960
triangular impulse response.

00:18:14.960 --> 00:18:18.330
In which case, what we'll see
again is that as the triangle

00:18:18.330 --> 00:18:23.150
moves along here, and we build
up the running sum or the

00:18:23.150 --> 00:18:27.900
convolution, then we'll, in
fact, fit the original curve

00:18:27.900 --> 00:18:29.550
with a linear curve.

00:18:29.550 --> 00:18:33.980
So now let's again look at that,
remembering that at the

00:18:33.980 --> 00:18:36.910
top we'll see the original
continuous curve, exactly the

00:18:36.910 --> 00:18:38.820
one that we had before.

00:18:38.820 --> 00:18:42.680
Below it, the set of samples
together with the impulse

00:18:42.680 --> 00:18:45.070
response moving along.

00:18:45.070 --> 00:18:48.650
And then finally below that,
the accumulation of those

00:18:48.650 --> 00:18:52.370
impulse responses, or
equivalently the convolution,

00:18:52.370 --> 00:18:56.050
or equivalently the
reconstruction.

00:18:56.050 --> 00:18:59.600
So we have the same continuous
time signal that we use

00:18:59.600 --> 00:19:03.740
previously with band limited
interpolation.

00:19:03.740 --> 00:19:08.130
And in this case now, we want to
sample and then interpolate

00:19:08.130 --> 00:19:10.810
first with a zero order
hold and then with

00:19:10.810 --> 00:19:11.790
a first order hold.

00:19:11.790 --> 00:19:15.250
So the first step then
is to sample the

00:19:15.250 --> 00:19:17.170
continuous time signal.

00:19:17.170 --> 00:19:21.360
And we show here the set
of samples, once again,

00:19:21.360 --> 00:19:25.360
superimposed on which we have
the continuous time signal,

00:19:25.360 --> 00:19:28.490
which of course is exactly
the same curve as

00:19:28.490 --> 00:19:30.650
we have in the top.

00:19:30.650 --> 00:19:34.020
Well, let's remove that envelope
so that we focus

00:19:34.020 --> 00:19:37.790
attention on the samples that
we're using to interpolate.

00:19:37.790 --> 00:19:41.690
And the interpolation process
consists of replacing each

00:19:41.690 --> 00:19:47.450
sample by a rectangular signal,
whose amplitude is

00:19:47.450 --> 00:19:49.570
equal to the sample size.

00:19:49.570 --> 00:19:53.510
So let's put one, first of all,
at t equals 0 associated

00:19:53.510 --> 00:19:56.550
with that sample.

00:19:56.550 --> 00:20:00.660
And that then would be the
interpolating rectangle

00:20:00.660 --> 00:20:04.370
associated with the sample
at t equals 0.

00:20:04.370 --> 00:20:07.780
Now to build up the
interpolation, what we'll have

00:20:07.780 --> 00:20:09.740
is one of those at each
sample time, and

00:20:09.740 --> 00:20:11.890
those are added together.

00:20:11.890 --> 00:20:14.930
We'll start that process,
as we did before, at the

00:20:14.930 --> 00:20:18.762
left-hand end of the set of
samples and build the

00:20:18.762 --> 00:20:20.390
interpolating signal
on the bottom.

00:20:20.390 --> 00:20:25.650
So with the left-hand sample,
we have first the rectangle

00:20:25.650 --> 00:20:27.640
associated with that.

00:20:27.640 --> 00:20:30.510
That's shown now on
the bottom curve.

00:20:30.510 --> 00:20:36.740
We now have an interpolating
rectangle with a second sample

00:20:36.740 --> 00:20:40.200
that gets added into
the bottom curve.

00:20:40.200 --> 00:20:44.210
Similarly, an interpolating
rectangle with the zero order

00:20:44.210 --> 00:20:46.430
hold with the third sample.

00:20:46.430 --> 00:20:49.440
We add that into the
bottom curve.

00:20:49.440 --> 00:20:52.570
And as we proceed, we're
building a staircase

00:20:52.570 --> 00:20:53.920
approximation.

00:20:53.920 --> 00:20:58.630
On to the next sample, that gets
added in as we see there.

00:20:58.630 --> 00:21:00.720
And now let's speed
up the process.

00:21:00.720 --> 00:21:04.920
And we'll see the staircase
approximation building up.

00:21:04.920 --> 00:21:09.390
And notice in this case, as in
the previous case, that what

00:21:09.390 --> 00:21:13.780
we're basically watching
dynamically is the convolution

00:21:13.780 --> 00:21:17.370
of the impulse train of samples
with the impulse

00:21:17.370 --> 00:21:20.420
response of the interpolating
filter, which in this

00:21:20.420 --> 00:21:24.800
particular case is just
a rectangular pulse.

00:21:24.800 --> 00:21:27.140
And so this staircase
approximation that we're

00:21:27.140 --> 00:21:32.040
generating is the zero order
hold interpolation between the

00:21:32.040 --> 00:21:37.070
samples of the band limited
signal, which is at the top.

00:21:41.890 --> 00:21:44.800
Now let's do the same thing
with a first order hold.

00:21:44.800 --> 00:21:49.610
So in this case, we want to
interpolate using a triangular

00:21:49.610 --> 00:21:53.760
impulse response rather then
the sine x over x, or

00:21:53.760 --> 00:21:56.940
rectangular impulse responses
that we showed previously.

00:21:56.940 --> 00:22:02.670
So first, let's say with the
sample at t equals 0, we would

00:22:02.670 --> 00:22:08.520
replace that with a triangular
interpolating function.

00:22:08.520 --> 00:22:12.050
And more generally, each impulse
or sample is replaced

00:22:12.050 --> 00:22:14.950
with a triangular interpolating
function of a

00:22:14.950 --> 00:22:17.550
height equal to the
sample type.

00:22:17.550 --> 00:22:20.050
And these are superimposed
to generate the linear

00:22:20.050 --> 00:22:21.680
interpolation.

00:22:21.680 --> 00:22:26.010
We'll begin this process with
the leftmost sample.

00:22:26.010 --> 00:22:29.950
And we'll build the
superposition below in the

00:22:29.950 --> 00:22:31.240
bottom curve.

00:22:31.240 --> 00:22:34.810
So here is the interpolating
triangle for

00:22:34.810 --> 00:22:36.970
the leftmost sample.

00:22:36.970 --> 00:22:40.750
And now it's reproduced below.

00:22:40.750 --> 00:22:43.760
With the second sample, we
have an interpolating

00:22:43.760 --> 00:22:47.490
triangle, which is added
into the bottom curve.

00:22:47.490 --> 00:22:50.670
And now on to the
third sample.

00:22:50.670 --> 00:22:55.800
And again, that interpolating
triangle will be added on to

00:22:55.800 --> 00:22:59.550
the curve that we've
developed so far.

00:22:59.550 --> 00:23:03.300
And now onto the next sample.

00:23:03.300 --> 00:23:05.630
We add that in.

00:23:05.630 --> 00:23:07.480
Then we'll speed
up the process.

00:23:07.480 --> 00:23:13.700
And as we proceed through, we
are building, basically, a

00:23:13.700 --> 00:23:18.670
linear interpolation in between
the sample points,

00:23:18.670 --> 00:23:20.550
essentially corresponding to--

00:23:20.550 --> 00:23:22.290
if one wants to think
of it this way--

00:23:22.290 --> 00:23:23.730
connecting the dots.

00:23:23.730 --> 00:23:26.550
And what you're watching, once
again, is essentially the

00:23:26.550 --> 00:23:31.220
convolution process convulving
the impulse train with the

00:23:31.220 --> 00:23:34.640
impulse response of the
interpolating filter.

00:23:34.640 --> 00:23:39.010
And what we're generating,
then, is a linear

00:23:39.010 --> 00:23:44.850
approximation to the band
limited continuous time curve

00:23:44.850 --> 00:23:46.100
at the top.

00:23:48.230 --> 00:23:54.500
OK, so what we have then is
several other kinds of

00:23:54.500 --> 00:23:59.940
interpolation, which fit within
the same context as

00:23:59.940 --> 00:24:02.210
exact band limited
interpolation.

00:24:02.210 --> 00:24:06.020
One being interpolation in the
time domain with an impulse

00:24:06.020 --> 00:24:08.130
response, which is
a rectangle.

00:24:08.130 --> 00:24:12.420
The second being interpolation
in the time domain with an

00:24:12.420 --> 00:24:15.520
impulse response, which
is a triangle.

00:24:15.520 --> 00:24:19.380
And in fact, it's interesting
to also look at the

00:24:19.380 --> 00:24:22.710
relationship between that and
band limited interpolation.

00:24:22.710 --> 00:24:27.190
Look at it, specifically,
in the frequency domain.

00:24:27.190 --> 00:24:32.170
Well, in the frequency domain,
what we know, of course, is

00:24:32.170 --> 00:24:36.810
that for exact interpolation,
what we want as our

00:24:36.810 --> 00:24:40.780
interpolating filter is an
ideal low pass filter.

00:24:40.780 --> 00:24:43.850
Now keep in mind, by the way,
that an ideal low pass filter

00:24:43.850 --> 00:24:46.350
is an abstraction, as I've
stressed several

00:24:46.350 --> 00:24:47.850
times in the past.

00:24:47.850 --> 00:24:52.700
An ideal low pass filter is a
non-causal filter and, in

00:24:52.700 --> 00:24:55.730
fact, infinite extent, which is
one of the reasons why in

00:24:55.730 --> 00:24:58.710
any case we would use some
approximation to it.

00:24:58.710 --> 00:25:05.700
But here, what we have is the
exact interpolating filter.

00:25:05.700 --> 00:25:11.030
And that corresponds to an
ideal low pass filter.

00:25:11.030 --> 00:25:17.260
If, instead, we carried out the
interpolating using the

00:25:17.260 --> 00:25:21.280
zero order hold, the zero order
hold has a rectangular

00:25:21.280 --> 00:25:22.740
impulse response.

00:25:22.740 --> 00:25:25.600
And that means in the frequency
domain, its

00:25:25.600 --> 00:25:30.410
frequency response is of the
form of a sync function, or

00:25:30.410 --> 00:25:31.890
sine x over x.

00:25:31.890 --> 00:25:35.910
And so this, in fact, when we're
doing the reconstruction

00:25:35.910 --> 00:25:40.230
with a zero order hold, is the
associated frequency response.

00:25:40.230 --> 00:25:43.040
Now notice that it does some

00:25:43.040 --> 00:25:44.930
approximate low pass filtering.

00:25:44.930 --> 00:25:51.430
But of course, it permits
significant energy outside the

00:25:51.430 --> 00:25:53.670
past band of the filter.

00:25:53.670 --> 00:25:56.680
Well, instead of the zero order
hold, if we used the

00:25:56.680 --> 00:25:59.610
first order hold corresponding
to the triangular impulse

00:25:59.610 --> 00:26:03.630
response, in that case then in
the frequency domain, the

00:26:03.630 --> 00:26:07.560
associated frequency response
would be the Fourier transform

00:26:07.560 --> 00:26:09.090
of the triangle.

00:26:09.090 --> 00:26:13.520
And the Fourier transform of a
triangle is a sine squared x

00:26:13.520 --> 00:26:16.310
over x squared kind
of function.

00:26:16.310 --> 00:26:20.770
And so in that case, what we
would have for the frequency

00:26:20.770 --> 00:26:24.070
response, associated with the
first order hold, is a

00:26:24.070 --> 00:26:27.750
frequency response
as I show here.

00:26:27.750 --> 00:26:33.330
And the fact that there's
somewhat more attenuation

00:26:33.330 --> 00:26:37.620
outside the past band of the
ideal filter is what suggests,

00:26:37.620 --> 00:26:42.270
in fact, that the first order
hold, or linear interpolation,

00:26:42.270 --> 00:26:46.280
gives us a somewhat smoother
approximation to the original

00:26:46.280 --> 00:26:49.620
signal than the zero
order hold does.

00:26:49.620 --> 00:26:53.680
And so, in fact, just to compare
these two, we can see

00:26:53.680 --> 00:26:57.990
that here is the ideal filter.

00:26:57.990 --> 00:27:03.300
Here is the zero order hold,
corresponding to generating a

00:27:03.300 --> 00:27:05.790
box car kind of reconstruction.

00:27:05.790 --> 00:27:09.710
And here is the first order
hold, corresponding to a

00:27:09.710 --> 00:27:12.500
linear interpolation.

00:27:12.500 --> 00:27:17.460
Now in fact, in many sampling
systems, in any sampling

00:27:17.460 --> 00:27:22.200
system really, we need to use
some approximation to the low

00:27:22.200 --> 00:27:23.520
pass filter.

00:27:23.520 --> 00:27:27.340
And very often, in fact, what
is done in many sampling

00:27:27.340 --> 00:27:32.130
systems, is to first use just
the zero order hold, and then

00:27:32.130 --> 00:27:34.300
follow the zero order
hold with some

00:27:34.300 --> 00:27:37.830
additional low pass filtering.

00:27:37.830 --> 00:27:43.240
Well, to illustrate some of
these ideas and the notion of

00:27:43.240 --> 00:27:46.380
doing a reconstruction with a
zero order hold or first order

00:27:46.380 --> 00:27:50.700
hold and then in fact adding
to that some additional low

00:27:50.700 --> 00:27:56.220
pass filtering, what I'd like
to do is demonstrate, or

00:27:56.220 --> 00:27:59.820
illustrate, sampling and
interpolation in the context

00:27:59.820 --> 00:28:01.230
of some images.

00:28:01.230 --> 00:28:05.380
An image, of course, is a
two-dimensional signal.

00:28:05.380 --> 00:28:07.490
The independent variables
are spatial

00:28:07.490 --> 00:28:09.650
variables not time variables.

00:28:09.650 --> 00:28:13.050
And of course, we can sample
in both of the spatial

00:28:13.050 --> 00:28:16.020
dimensions, both in x and y.

00:28:16.020 --> 00:28:22.000
And what I've chosen as a
possibly appropriate choice

00:28:22.000 --> 00:28:26.140
for an image is, again,
our friend and

00:28:26.140 --> 00:28:29.350
colleague J.B.J. Fourier.

00:28:29.350 --> 00:28:33.800
So let's begin with the original
image, which we then

00:28:33.800 --> 00:28:36.350
want to sample and
reconstruct.

00:28:36.350 --> 00:28:40.590
And the sampling is done by
effectively multiplying by a

00:28:40.590 --> 00:28:43.510
pulse both horizontally
and vertically.

00:28:43.510 --> 00:28:47.840
The sample picture is then
the next one that I show.

00:28:47.840 --> 00:28:51.930
And as you can see, this
corresponds, in effect, to

00:28:51.930 --> 00:28:54.280
extracting small brightness
elements out of

00:28:54.280 --> 00:28:55.080
the original image.

00:28:55.080 --> 00:28:58.200
In fact, let's look in
a little closer.

00:28:58.200 --> 00:29:01.500
And what you can see,
essentially, is that what we

00:29:01.500 --> 00:29:05.220
have, of course, are not
impulses spatially but small

00:29:05.220 --> 00:29:10.490
spatial pillars that implement
the sampling for us.

00:29:10.490 --> 00:29:15.450
OK, now going back to the
original sample picture, we

00:29:15.450 --> 00:29:18.920
know that a picture can be
reconstructed by low pass

00:29:18.920 --> 00:29:20.200
filtering from the samples.

00:29:20.200 --> 00:29:23.850
And in fact, we can do that
optically in this case by

00:29:23.850 --> 00:29:26.480
simply defocusing the camera.

00:29:26.480 --> 00:29:30.270
And when we do that, what
happens is that we smear out

00:29:30.270 --> 00:29:34.430
the picture, or effectively
convulve the impulses with the

00:29:34.430 --> 00:29:36.620
point spread function of
the optical system.

00:29:36.620 --> 00:29:40.340
And this then is not too
bad a reconstruction.

00:29:40.340 --> 00:29:44.420
So that's an approximate
reconstruction.

00:29:44.420 --> 00:29:47.840
And focusing back now
what we have again

00:29:47.840 --> 00:29:49.830
is the sample picture.

00:29:53.990 --> 00:29:58.590
Now these images are, in fact,
taken off a computer display.

00:29:58.590 --> 00:30:02.620
And a common procedure in
computer generated or

00:30:02.620 --> 00:30:08.090
displayed images is in fact the
use of a zero order hold.

00:30:08.090 --> 00:30:11.640
And if the sampling rate is
high enough, then that

00:30:11.640 --> 00:30:13.490
actually works reasonably
well.

00:30:13.490 --> 00:30:16.650
So now let's look at the result
of applying a zero

00:30:16.650 --> 00:30:21.350
order hold to the sample image
that I just showed.

00:30:24.580 --> 00:30:27.760
The zero order hold corresponds
to replacing the

00:30:27.760 --> 00:30:30.910
impulses by rectangles.

00:30:30.910 --> 00:30:35.180
And you can see that what that
generates is a mosaic effect,

00:30:35.180 --> 00:30:37.490
as you would expect.

00:30:37.490 --> 00:30:41.860
And in fact, let's go in a
little closer and emphasize

00:30:41.860 --> 00:30:42.840
the mosaic effect.

00:30:42.840 --> 00:30:45.390
You can see that, essentially,
where there were impulses

00:30:45.390 --> 00:30:49.200
previously, there are now
rectangles with those

00:30:49.200 --> 00:30:50.870
brightness values.

00:30:50.870 --> 00:30:55.300
A very common procedure with
computer generated images is

00:30:55.300 --> 00:30:59.110
to first do a zero order hold,
as we've done here, and then

00:30:59.110 --> 00:31:02.460
follow that with some additional
low pass filtering.

00:31:02.460 --> 00:31:05.900
And fact, we can do that low
pass filtering now again by

00:31:05.900 --> 00:31:07.930
defocusing the camera.

00:31:07.930 --> 00:31:12.890
And you can begin to see that
with the zero order hold plus

00:31:12.890 --> 00:31:14.140
the low pass filtering, the

00:31:14.140 --> 00:31:17.230
reconstruction is not that bad.

00:31:17.230 --> 00:31:21.450
Well, let's go back to
the full image with

00:31:21.450 --> 00:31:23.930
the zero order hold.

00:31:23.930 --> 00:31:29.200
And again, now the effect of
low pass filtering will be

00:31:29.200 --> 00:31:30.100
somewhat better.

00:31:30.100 --> 00:31:33.310
And let's defocus again here.

00:31:33.310 --> 00:31:37.210
And you can begin to see that
this is a reasonable

00:31:37.210 --> 00:31:39.370
reconstruction.

00:31:39.370 --> 00:31:44.050
With the mosaic, in fact, with
this back in focus, you can

00:31:44.050 --> 00:31:47.440
apply your own low pass
filtering to it either by

00:31:47.440 --> 00:31:51.040
squinting, or if you have the
right or wrong kind of

00:31:51.040 --> 00:31:55.800
eyeglasses, either taking them
off or putting them on.

00:31:55.800 --> 00:31:59.780
Now, in addition to the zero
order hold, we can, of course,

00:31:59.780 --> 00:32:01.260
apply a first order hold.

00:32:01.260 --> 00:32:05.550
And that would correspond to
replacing the impulses,

00:32:05.550 --> 00:32:09.310
instead of with rectangles as
we have here, replacing them

00:32:09.310 --> 00:32:10.880
with triangles.

00:32:10.880 --> 00:32:14.930
And so now let's take a look at
the result of a first order

00:32:14.930 --> 00:32:18.430
hold applied to the
original samples.

00:32:18.430 --> 00:32:22.410
And you can see now that the
reconstruction is somewhat

00:32:22.410 --> 00:32:24.960
smoother because of the fact
that we're using an impulse

00:32:24.960 --> 00:32:28.750
response that's somewhat
smoother or a corresponding

00:32:28.750 --> 00:32:31.310
frequency response that
has a sharper cut off.

00:32:31.310 --> 00:32:34.580
I emphasize again that this is
a somewhat low pass filtered

00:32:34.580 --> 00:32:38.220
version of the original because
we have under sampled

00:32:38.220 --> 00:32:41.870
somewhat spatially to bring out
the point that I want to

00:32:41.870 --> 00:32:43.120
illustrate.

00:32:46.840 --> 00:32:52.120
OK, to emphasize these effects
even more, what I'd like to do

00:32:52.120 --> 00:32:55.750
is go through, basically,
the same sequence again.

00:32:55.750 --> 00:32:58.990
But in this case, what we'll
do is double the sample

00:32:58.990 --> 00:33:02.830
spacing both horizontal
and vertically.

00:33:02.830 --> 00:33:05.550
This of course, means that
we'll be even more highly

00:33:05.550 --> 00:33:09.970
under sampled than in the ones
I previously showed.

00:33:09.970 --> 00:33:12.970
And so the result of the
reconstructions with some low

00:33:12.970 --> 00:33:18.910
pass filtering will be a much
more low pass filtered image.

00:33:18.910 --> 00:33:21.590
So we now have the
sampled picture.

00:33:21.590 --> 00:33:24.900
But I've now under sampled
considerably more.

00:33:24.900 --> 00:33:28.460
And you can see the effect
of the sampling.

00:33:28.460 --> 00:33:33.510
And if we now apply a zero order
hold to this picture, we

00:33:33.510 --> 00:33:34.910
will again get a mosaic.

00:33:34.910 --> 00:33:37.200
And let's look at that.

00:33:37.200 --> 00:33:40.300
And that mosaic, of
course, looks even

00:33:40.300 --> 00:33:42.290
blockier than the original.

00:33:42.290 --> 00:33:46.110
And again, it emphasizes the
fact that the zero order hold

00:33:46.110 --> 00:33:50.140
simply corresponds to filling
in squares, or replacing the

00:33:50.140 --> 00:33:53.120
impulses, by squares, with the

00:33:53.120 --> 00:33:55.990
corresponding brightness values.

00:33:55.990 --> 00:34:00.540
Finally, if we, instead of a
zero order hold, use a first

00:34:00.540 --> 00:34:04.910
order hold, corresponding to two
dimensional triangles in

00:34:04.910 --> 00:34:06.750
place of these original
blocks.

00:34:06.750 --> 00:34:09.920
What we get is the next image.

00:34:09.920 --> 00:34:13.840
And that, again, is a smoother
reconstruction consistent with

00:34:13.840 --> 00:34:16.040
the fact that the triangles
are smoother than the

00:34:16.040 --> 00:34:17.270
rectangles.

00:34:17.270 --> 00:34:20.530
Again, I emphasize that this
looks so highly low pass

00:34:20.530 --> 00:34:24.280
filtered because of the fact
that we've under sampled so

00:34:24.280 --> 00:34:27.720
severely to essentially
emphasize the effect.

00:34:31.110 --> 00:34:35.469
As I mentioned, the images that
we just looked at were

00:34:35.469 --> 00:34:38.250
taken from a computer, although
of course the

00:34:38.250 --> 00:34:41.659
original images were continuous
time images or more

00:34:41.659 --> 00:34:43.880
specifically, continuous
space.

00:34:43.880 --> 00:34:45.280
That is the independent
variable

00:34:45.280 --> 00:34:47.830
is a spatial variable.

00:34:47.830 --> 00:34:52.900
Now, computer processing of
signals, pictures, speech, or

00:34:52.900 --> 00:34:57.040
whatever the signals are is
very important and useful

00:34:57.040 --> 00:35:00.070
because it offers a lot
of flexibility.

00:35:00.070 --> 00:35:02.220
And in fact, the kinds of things
that I showed with

00:35:02.220 --> 00:35:07.120
these pictures would have been
very hard to do without, in

00:35:07.120 --> 00:35:10.620
fact, doing computer
processing.

00:35:10.620 --> 00:35:15.250
Well, in computer processing
of any kind of signal,

00:35:15.250 --> 00:35:20.800
basically what's required is
that we do the processing in

00:35:20.800 --> 00:35:24.280
the context of discrete time
signals and discrete time

00:35:24.280 --> 00:35:27.860
processing because of the
fact that a computer

00:35:27.860 --> 00:35:29.310
is run off a clock.

00:35:29.310 --> 00:35:35.630
And essentially, things happen
in the computer as a sequence

00:35:35.630 --> 00:35:39.400
of numbers and as a sequence
of events.

00:35:39.400 --> 00:35:43.290
Well, it turns out that the
sampling theorem, in fact, as

00:35:43.290 --> 00:35:47.280
I've indicated previously,
provides us with a very nice

00:35:47.280 --> 00:35:53.170
mechanism for converting our
continuous time signals into

00:35:53.170 --> 00:35:54.830
discrete time signals.

00:35:54.830 --> 00:35:58.810
For example, for computer
processing or, in fact, if

00:35:58.810 --> 00:36:02.230
it's not a computer for some
other kind of discrete time or

00:36:02.230 --> 00:36:04.930
perhaps digital processing.

00:36:04.930 --> 00:36:11.700
Well, the basic idea, as I've
indicated previously, is to

00:36:11.700 --> 00:36:15.520
carry out discrete time
processing of continuous time

00:36:15.520 --> 00:36:22.010
signals by first converting the
continuous time signal to

00:36:22.010 --> 00:36:27.890
a discrete time signal, carry
out the appropriate discrete

00:36:27.890 --> 00:36:33.310
time processing of the discrete
time signal, and then

00:36:33.310 --> 00:36:37.210
after we're done with that
processing, converting from

00:36:37.210 --> 00:36:41.840
the discrete time sequence
back to a continuous time

00:36:41.840 --> 00:36:45.400
signal, corresponding to the
output that we have here.

00:36:48.010 --> 00:36:51.500
Well in the remainder of this
lecture, what I'd like to

00:36:51.500 --> 00:36:55.830
analyze is the first step in
that process, namely the

00:36:55.830 --> 00:36:59.710
conversion from a continuous
time signal to a discrete time

00:36:59.710 --> 00:37:05.630
signal and understand how the
two relate both in the time

00:37:05.630 --> 00:37:07.900
domain and in the frequency
domain.

00:37:07.900 --> 00:37:11.410
And in the next lecture, we'll
be analyzing and demonstrating

00:37:11.410 --> 00:37:15.750
the overall system, including
some intermediate processing.

00:37:15.750 --> 00:37:20.560
So the first step in the process
is the conversion from

00:37:20.560 --> 00:37:24.670
a continuous time signal to
a discrete time signal.

00:37:24.670 --> 00:37:28.160
And that can be thought of as
a process that involves two

00:37:28.160 --> 00:37:31.490
steps, although in practical
terms it may not be

00:37:31.490 --> 00:37:34.680
implemented specifically
as these two steps.

00:37:34.680 --> 00:37:39.500
The two steps are to first
convert from the continuous

00:37:39.500 --> 00:37:45.010
time, or continuous time
continuous signal, to an

00:37:45.010 --> 00:37:52.150
impulse train through a sampling
process and then to

00:37:52.150 --> 00:37:56.950
convert that impulse train to
a discrete time sequence.

00:37:56.950 --> 00:38:02.640
And the discrete time sequence
x of n is simply then a

00:38:02.640 --> 00:38:08.320
sequence of values which are the
samples of the continuous

00:38:08.320 --> 00:38:09.450
time signal.

00:38:09.450 --> 00:38:12.550
And as we'll see as we walk
through this, basically the

00:38:12.550 --> 00:38:16.960
step of going from the impulse
train to the sequence

00:38:16.960 --> 00:38:22.320
corresponds principally to a
relabeling step where we pick

00:38:22.320 --> 00:38:29.250
off the impulse values and use
those as the sequence values

00:38:29.250 --> 00:38:31.670
for the discrete time signal.

00:38:31.670 --> 00:38:35.880
So what I'd like to do as a
first step in understanding

00:38:35.880 --> 00:38:40.980
this process is to analyze
it in particular with our

00:38:40.980 --> 00:38:44.160
attention focused on trying
to understand what the

00:38:44.160 --> 00:38:48.040
relationship is in the frequency
domain between the

00:38:48.040 --> 00:38:52.370
discrete time Fourier transform
of the sequence,

00:38:52.370 --> 00:38:56.380
discrete time signal, and the
continuous time Fourier

00:38:56.380 --> 00:39:00.630
transform of the original
unsampled, and then the

00:39:00.630 --> 00:39:02.170
sampled signal.

00:39:02.170 --> 00:39:04.430
So let's go through that.

00:39:04.430 --> 00:39:10.760
And in particular, what we have
is a process where the

00:39:10.760 --> 00:39:15.020
continuous time signal is,
of course, modulated or

00:39:15.020 --> 00:39:17.740
multiplied by an
impulse train.

00:39:17.740 --> 00:39:20.060
And that gives us,
then, another

00:39:20.060 --> 00:39:21.290
continuous time signal.

00:39:21.290 --> 00:39:23.470
We're still in the continuous
time domain.

00:39:23.470 --> 00:39:26.200
It gives us another continuous
time signal, which is an

00:39:26.200 --> 00:39:28.120
impulse train.

00:39:28.120 --> 00:39:31.250
And in fact, we've gone
through this analysis

00:39:31.250 --> 00:39:32.540
previously.

00:39:32.540 --> 00:39:37.830
And what we have is this
multiplication or taking this

00:39:37.830 --> 00:39:42.630
term inside the summation and
recognizing that the impulse

00:39:42.630 --> 00:39:48.660
train is simply an impulse
train with areas of the

00:39:48.660 --> 00:39:51.680
impulses, which are
the samples of the

00:39:51.680 --> 00:39:53.510
continuous time function.

00:39:53.510 --> 00:39:56.190
We can then carry out
the analysis in

00:39:56.190 --> 00:39:59.540
the frequency domain.

00:39:59.540 --> 00:40:03.080
Now in the time domain, we have
a multiplication process.

00:40:03.080 --> 00:40:06.680
So in the frequency domain, we
have a convolution of the

00:40:06.680 --> 00:40:12.010
Fourier transform of the
continuous time signal, the

00:40:12.010 --> 00:40:14.820
original signal, and the Fourier
transform of the

00:40:14.820 --> 00:40:18.590
impulse train, which is itself
an impulse train.

00:40:18.590 --> 00:40:22.950
So in the frequency domain then,
the Fourier transform of

00:40:22.950 --> 00:40:26.590
the sampled signal, which is
an impulse train, is the

00:40:26.590 --> 00:40:30.780
convolution of the Fourier
transform of the sampling

00:40:30.780 --> 00:40:34.310
function P of t and the Fourier
transform of the

00:40:34.310 --> 00:40:36.440
sampled signal.

00:40:36.440 --> 00:40:41.710
Since the sampling signal is a
periodic impulse train, its

00:40:41.710 --> 00:40:44.750
Fourier transform is
an impulse train.

00:40:44.750 --> 00:40:49.700
And consequently, carrying out
this convolution in effect

00:40:49.700 --> 00:40:53.300
says that this Fourier
transform simply gets

00:40:53.300 --> 00:40:57.600
replicated at each of the
locations of these impulses.

00:40:57.600 --> 00:41:02.390
And finally, what we end up
with then is a Fourier

00:41:02.390 --> 00:41:08.730
transform after the sampling
process, which is the original

00:41:08.730 --> 00:41:13.650
Fourier transform of the
continuous signal but added to

00:41:13.650 --> 00:41:17.750
itself shifted by integer
multiples of

00:41:17.750 --> 00:41:19.350
the sampling frequency.

00:41:19.350 --> 00:41:23.040
And so this is the basic
equation then that tells us in

00:41:23.040 --> 00:41:28.280
the frequency domain what
happens through the first part

00:41:28.280 --> 00:41:30.510
of this two step process.

00:41:30.510 --> 00:41:33.030
Now I emphasize that it's
a two step process.

00:41:33.030 --> 00:41:38.500
The first process is sampling,
where we're still essentially

00:41:38.500 --> 00:41:41.240
in the continuous time world.

00:41:41.240 --> 00:41:46.050
The next step is essentially a
relabeling process, where we

00:41:46.050 --> 00:41:50.650
convert that impulse train
simply to a sequence.

00:41:50.650 --> 00:41:53.770
So let's look at
the next step.

00:41:53.770 --> 00:41:57.780
The next step is to take the
impulse train and convert it

00:41:57.780 --> 00:42:01.850
through a process
to a sequence.

00:42:01.850 --> 00:42:06.880
And the sequence values are
simply then samples of the

00:42:06.880 --> 00:42:09.550
original continuous signal.

00:42:09.550 --> 00:42:13.840
And so now we can
analyze this.

00:42:13.840 --> 00:42:18.860
And what we want to relate is
the discrete time Fourier

00:42:18.860 --> 00:42:22.930
transform of this and the
continuous time Fourier

00:42:22.930 --> 00:42:25.920
transform of this, or in fact,
the continuous time Fourier

00:42:25.920 --> 00:42:30.660
transform of x of C of T.

00:42:30.660 --> 00:42:34.930
OK, we have the impulse train.

00:42:34.930 --> 00:42:40.570
And it's Fourier transform we
can get by simply evaluating

00:42:40.570 --> 00:42:42.000
the Fourier transform.

00:42:42.000 --> 00:42:45.430
And since the Fourier
transform of this--

00:42:45.430 --> 00:42:48.170
since this corresponds
to an impulse train--

00:42:48.170 --> 00:42:51.140
the Fourier transform, by the
time we change some sums and

00:42:51.140 --> 00:42:56.340
integrals, will then have this
impulse replaced by the

00:42:56.340 --> 00:42:59.420
Fourier transform of the shifted
impulse, which is this

00:42:59.420 --> 00:43:01.570
exponential factor.

00:43:01.570 --> 00:43:04.950
So this expression is the
Fourier transform of the

00:43:04.950 --> 00:43:08.850
impulse train, the continuous
time Fourier transform.

00:43:08.850 --> 00:43:13.750
And alternatively, we can look
at the Fourier transform of

00:43:13.750 --> 00:43:15.080
the sequence.

00:43:15.080 --> 00:43:17.540
And this, of course,
is a discrete

00:43:17.540 --> 00:43:21.110
time Fourier transform.

00:43:21.110 --> 00:43:25.310
So we have the continuous time
Fourier transform of the

00:43:25.310 --> 00:43:29.570
impulse train, we have the
discrete Fourier transform of

00:43:29.570 --> 00:43:30.360
the sequence.

00:43:30.360 --> 00:43:33.970
And now we want to look at
how those two relate.

00:43:33.970 --> 00:43:37.750
Well, it pretty much falls out
of just comparing these two

00:43:37.750 --> 00:43:39.020
summations.

00:43:39.020 --> 00:43:44.870
In particular, this term and
this term are identical.

00:43:44.870 --> 00:43:52.100
That's just a relabeling of what
the sequence values are.

00:43:52.100 --> 00:43:55.540
And notice that when we compare
these exponential

00:43:55.540 --> 00:44:01.350
factors, they're identical as
long as we associate capital

00:44:01.350 --> 00:44:05.650
omega with little omega times
capital T. In other words, if

00:44:05.650 --> 00:44:09.370
we were to replace here capital
omega by little omega

00:44:09.370 --> 00:44:15.060
times capital T, and replace x
of n by x of c of nt, then

00:44:15.060 --> 00:44:20.220
this expression would be
identical to this expression.

00:44:20.220 --> 00:44:26.010
So in fact, these two are equal
with a relabeling, or

00:44:26.010 --> 00:44:29.970
with a transformation, between
small omega and capital omega.

00:44:29.970 --> 00:44:34.350
And so in fact, the relationship
that we have is

00:44:34.350 --> 00:44:39.000
that the discrete time Fourier
transform of the sequence of

00:44:39.000 --> 00:44:43.990
samples is equal to the
continuous time Fourier

00:44:43.990 --> 00:44:50.440
transform of the impulse train
of samples where we associate

00:44:50.440 --> 00:44:54.460
the continuous time frequency
variable and the discrete time

00:44:54.460 --> 00:44:58.200
frequency variable through
a frequency scaling as I

00:44:58.200 --> 00:44:59.520
indicate here.

00:44:59.520 --> 00:45:04.130
Or said another way, the
discrete time spectrum is the

00:45:04.130 --> 00:45:10.090
continuous time spectrum of the
samples with small omega

00:45:10.090 --> 00:45:12.440
replaced by capital
omega divided by

00:45:12.440 --> 00:45:15.480
capital T. All right.

00:45:15.480 --> 00:45:19.660
So we have then this
two step process.

00:45:19.660 --> 00:45:22.960
The first step is taking the
continuous time signal,

00:45:22.960 --> 00:45:26.130
sampling it with an
impulse train.

00:45:26.130 --> 00:45:31.480
In the frequency domain, that
corresponds to replicating the

00:45:31.480 --> 00:45:34.200
Fourier transform
of the original

00:45:34.200 --> 00:45:36.540
continuous time signal.

00:45:36.540 --> 00:45:41.780
The second step is relabeling
that, in effect turning it

00:45:41.780 --> 00:45:43.170
into a sequence.

00:45:43.170 --> 00:45:46.580
And what that does in the
frequency domain is provide us

00:45:46.580 --> 00:45:50.140
with a rescaling of the
frequency axis, or as we'll

00:45:50.140 --> 00:45:55.040
see a frequency normalization,
which is associated with the

00:45:55.040 --> 00:45:56.130
corresponding time

00:45:56.130 --> 00:45:58.740
normalization in the time domain.

00:45:58.740 --> 00:46:01.810
Well, let's look at those
statements a little more

00:46:01.810 --> 00:46:04.350
specifically.

00:46:04.350 --> 00:46:06.900
What I show here
is the original

00:46:06.900 --> 00:46:09.750
continuous time signal.

00:46:09.750 --> 00:46:16.020
And then below it is
the sampled signal.

00:46:16.020 --> 00:46:20.770
And these two are signals in
the continuous time domain.

00:46:20.770 --> 00:46:23.310
Now, what is the conversion
from this

00:46:23.310 --> 00:46:25.660
impulse train to a sequence?

00:46:25.660 --> 00:46:31.040
Well, it's simply taking these
impulse areas, or these sample

00:46:31.040 --> 00:46:39.070
values, and relabeling them, in
effect as I show below, as

00:46:39.070 --> 00:46:41.850
sequence values.

00:46:41.850 --> 00:46:48.610
And essentially, I'm now
replacing the impulse by the

00:46:48.610 --> 00:46:50.700
designation of a
sequence value.

00:46:50.700 --> 00:46:51.830
That's one step.

00:46:51.830 --> 00:46:56.930
But the other important step to
focus on is that whereas in

00:46:56.930 --> 00:47:00.370
the impulse train, these
impulses are spaced by integer

00:47:00.370 --> 00:47:05.000
multiples of the sampling
period capital T. In the

00:47:05.000 --> 00:47:08.390
sequence, of course, because
of the way that we label

00:47:08.390 --> 00:47:13.210
sequences, these are always
spaced by simply integer

00:47:13.210 --> 00:47:14.750
multiples of one.

00:47:14.750 --> 00:47:18.160
So in effect, you could say that
the step in going from

00:47:18.160 --> 00:47:23.180
here to here corresponds to
normalizing out in the time

00:47:23.180 --> 00:47:27.590
domain the sampling
period capital T.

00:47:27.590 --> 00:47:31.570
To stress that another way, if
the sampling period were

00:47:31.570 --> 00:47:35.810
doubled so that in this picture,
the spacing stretched

00:47:35.810 --> 00:47:38.280
out by a factor of two.

00:47:38.280 --> 00:47:45.320
Nevertheless, for the discrete
time signal, the spacing would

00:47:45.320 --> 00:47:46.740
remain as one.

00:47:46.740 --> 00:47:52.470
And essentially, it's the
envelope of those sequence

00:47:52.470 --> 00:47:56.460
values that would then get
compressed in time.

00:47:56.460 --> 00:48:00.370
So you can think of the step
in going from the impulse

00:48:00.370 --> 00:48:04.430
train to the samples as,
essentially, a time

00:48:04.430 --> 00:48:05.740
normalization.

00:48:05.740 --> 00:48:08.470
Now let's look at this in
the frequency domain.

00:48:08.470 --> 00:48:11.320
In the frequency domain, what
we have is the Fourier

00:48:11.320 --> 00:48:16.110
transform of our original
continuous signal.

00:48:16.110 --> 00:48:21.220
After sampling with an impulse
train, this spectrum retains

00:48:21.220 --> 00:48:26.280
its shape but is replicated at
integer multiples of the

00:48:26.280 --> 00:48:31.350
sampling frequency 2 pi over
capital T, as I indicate here.

00:48:31.350 --> 00:48:38.000
Now, we know that a discrete
time spectrum must be periodic

00:48:38.000 --> 00:48:40.580
in frequency with a
period of 2 pi.

00:48:40.580 --> 00:48:42.560
Here, we have the periodicity.

00:48:42.560 --> 00:48:45.590
But it's not periodic with
a period of 2 pi.

00:48:45.590 --> 00:48:47.750
It's periodic with a period,
which is equal to

00:48:47.750 --> 00:48:50.680
the sampling frequency.

00:48:50.680 --> 00:48:55.930
However, in converting from the
samples to the sequence

00:48:55.930 --> 00:48:58.610
values, we go through
another step.

00:48:58.610 --> 00:48:59.490
What's the other step?

00:48:59.490 --> 00:49:02.940
The other step is a time
normalization, where we take

00:49:02.940 --> 00:49:05.890
the impulses, which are spaced
by the sampling period.

00:49:05.890 --> 00:49:08.810
And we rescale that, essentially
in the time

00:49:08.810 --> 00:49:11.400
domain, to a spacing
which is unity.

00:49:11.400 --> 00:49:19.990
So we're dividing out in the
time domain by a factor, which

00:49:19.990 --> 00:49:23.050
is equal to the sampling
period.

00:49:23.050 --> 00:49:28.740
Well, dividing out in the time
domain by capital T would

00:49:28.740 --> 00:49:33.510
correspond to multiplying in
the frequency domain the

00:49:33.510 --> 00:49:38.060
frequency axis by capital T.
And indeed, what happens is

00:49:38.060 --> 00:49:42.270
that in going from the impulse
train to the sequence values,

00:49:42.270 --> 00:49:49.250
we now rescale this axis so
that, in fact, the axis gets

00:49:49.250 --> 00:49:53.550
stretched by capital T. And
the frequency, which

00:49:53.550 --> 00:49:57.380
corresponded to 2 pi over
capital T, now gets

00:49:57.380 --> 00:50:00.980
renormalized to 2 pi.

00:50:00.980 --> 00:50:04.740
So just looking at this again,
and perhaps with the overall

00:50:04.740 --> 00:50:08.940
picture, in the time domain,
we've gone from a continuous

00:50:08.940 --> 00:50:13.380
curve to samples, relabeled
those, and in effect

00:50:13.380 --> 00:50:15.780
implemented a time
normalization.

00:50:15.780 --> 00:50:20.180
Corresponding in the frequency
domain, we have replicated the

00:50:20.180 --> 00:50:24.690
spectrum through the initial
sampling process and then

00:50:24.690 --> 00:50:29.020
rescaled the frequency axis
so that, in fact, now this

00:50:29.020 --> 00:50:33.480
periodicity corresponds to a
periodicity here, which is 2

00:50:33.480 --> 00:50:37.870
pi, and here, which is the
sampling frequency.

00:50:37.870 --> 00:50:41.470
So very often, in fact--
and we'll be

00:50:41.470 --> 00:50:44.000
doing this next time--

00:50:44.000 --> 00:50:49.630
when you think of continuous
time signals, which have been

00:50:49.630 --> 00:50:52.280
converted to discrete time
signals, when you look at the

00:50:52.280 --> 00:50:56.520
discrete time frequency axis,
the frequency 2 pi is

00:50:56.520 --> 00:51:03.290
associated with the sampling
frequency as it was applied to

00:51:03.290 --> 00:51:06.530
the original continuous
time signal.

00:51:06.530 --> 00:51:13.010
Now as I indicated, what we'll
want to go on to from here is

00:51:13.010 --> 00:51:15.880
an understanding of what
happens when we take a

00:51:15.880 --> 00:51:19.180
continuous time signal, convert
it to a discrete time

00:51:19.180 --> 00:51:22.440
signal as I've just gone
through, do some discrete time

00:51:22.440 --> 00:51:25.890
processing with a linear time
invariant system, and then

00:51:25.890 --> 00:51:29.520
carry that back into the
continuous time world.

00:51:29.520 --> 00:51:34.190
That is a procedure that we'll
go through, and analyze, and

00:51:34.190 --> 00:51:38.660
in fact, illustrate in some
detail next time.

00:51:38.660 --> 00:51:42.970
In preparation for that, what I
would be eager to encourage

00:51:42.970 --> 00:51:46.650
you to do using the study guide
and in reviewing this

00:51:46.650 --> 00:51:53.340
lecture, is to begin the next
lecture with a careful and

00:51:53.340 --> 00:51:56.220
thorough understanding
of the arguments that

00:51:56.220 --> 00:51:57.500
I've just gone through.

00:51:57.500 --> 00:52:02.210
In particular, understanding the
process that's involved in

00:52:02.210 --> 00:52:06.320
going from a continuous time
signal through sampling to a

00:52:06.320 --> 00:52:08.390
discrete time signal.

00:52:08.390 --> 00:52:11.860
And what that means in the
frequency domain in terms of

00:52:11.860 --> 00:52:15.710
taking the original spectrum,
replicating it because of the

00:52:15.710 --> 00:52:20.590
sampling process, and then
rescaling that so that the

00:52:20.590 --> 00:52:24.710
periodicity gets rescaled so
that it's periodic with a

00:52:24.710 --> 00:52:26.010
period of 2 pi.

00:52:26.010 --> 00:52:31.120
So we'll continue with that next
time, focusing now on the

00:52:31.120 --> 00:52:33.610
subsequent steps in
the processing.

00:52:33.610 --> 00:52:34.860
Thank you.