WEBVTT

00:00:10.230 --> 00:00:13.340
In the previous video we
identified clusters, or tissue

00:00:13.340 --> 00:00:16.050
substances, in a
healthy brain image.

00:00:16.050 --> 00:00:17.780
It would be really
helpful if we can

00:00:17.780 --> 00:00:20.460
use these clusters to
automatically detect

00:00:20.460 --> 00:00:23.950
tumors in MRI images
of sick patients.

00:00:23.950 --> 00:00:27.620
The tumor.csv file corresponds
to an MRI brain image

00:00:27.620 --> 00:00:30.560
of a patient with
oligodendroglioma,

00:00:30.560 --> 00:00:34.540
a tumor that commonly occurs
in the front lobe of the brain.

00:00:34.540 --> 00:00:37.500
Since brain biopsy is the
only definite diagnosis

00:00:37.500 --> 00:00:42.260
of this tumor, MRI guidance is
key in determining its location

00:00:42.260 --> 00:00:43.680
and geometry.

00:00:43.680 --> 00:00:46.450
Now, make sure that
the tumor.csv file

00:00:46.450 --> 00:00:48.450
is in your current directory.

00:00:48.450 --> 00:00:51.280
Let's go to the console,
and clear it, and then

00:00:51.280 --> 00:00:53.990
read the data, and
save it to a data frame

00:00:53.990 --> 00:00:58.560
that we're going to call tumor,
and use the read.csv function,

00:00:58.560 --> 00:01:01.330
which takes as an input
the tumor dataset,

00:01:01.330 --> 00:01:04.040
and make sure to turn off
the header using header

00:01:04.040 --> 00:01:05.790
equals FALSE.

00:01:05.790 --> 00:01:09.350
And let's quickly
create our tumorMatrix,

00:01:09.350 --> 00:01:13.690
using the as.matrix
function over the tumor data

00:01:13.690 --> 00:01:18.600
frame, and the tumorVector,
using the as.vector

00:01:18.600 --> 00:01:20.650
function over the tumorMatrix.

00:01:25.560 --> 00:01:28.210
Now, we will not run the
k-means algorithm again

00:01:28.210 --> 00:01:29.880
on the tumor vector.

00:01:29.880 --> 00:01:33.259
Instead, we will apply the
k-means clustering results

00:01:33.259 --> 00:01:35.370
that we found using
the healthy brain

00:01:35.370 --> 00:01:37.650
image on the tumor vector.

00:01:37.650 --> 00:01:40.180
In other words, we
treat the healthy vector

00:01:40.180 --> 00:01:44.430
as training set and the tumor
vector as a testing set.

00:01:44.430 --> 00:01:46.520
To do this, we first
need to install

00:01:46.520 --> 00:01:49.090
a new package that
is called flexclust.

00:01:49.090 --> 00:01:50.920
So let us type
install.packages("flexclus").

00:01:57.550 --> 00:01:59.300
And then the first
thing R will ask

00:01:59.300 --> 00:02:01.790
us is to set the
region that is closest

00:02:01.790 --> 00:02:03.970
to our geographical location.

00:02:03.970 --> 00:02:07.280
And after that, press
OK, and the installation

00:02:07.280 --> 00:02:11.310
shouldn't take more than
two seconds to complete.

00:02:11.310 --> 00:02:11.810
OK.

00:02:11.810 --> 00:02:13.710
Now that the package
is installed,

00:02:13.710 --> 00:02:15.920
let us load it by typing
library(flexclust).

00:02:22.020 --> 00:02:25.920
The flexclust package contains
the object class KCCA,

00:02:25.920 --> 00:02:29.890
which stands for K-Centroids
Cluster Analysis.

00:02:29.890 --> 00:02:32.450
We need to convert the
information from the clustering

00:02:32.450 --> 00:02:36.500
algorithm to an object
of the class KCCA.

00:02:36.500 --> 00:02:38.480
And this conversion
is needed before we

00:02:38.480 --> 00:02:41.770
can use the predict function
on the test set tumorVector.

00:02:41.770 --> 00:02:46.670
So calling our new
variable KMC.kcca

00:02:46.670 --> 00:02:50.120
and then using the
as.kcca function, which

00:02:50.120 --> 00:02:55.500
takes as a first input the
original KMC variable that

00:02:55.500 --> 00:02:58.230
stored all the information
from the k-means clustering

00:02:58.230 --> 00:03:02.220
function, and the second input
is the data that we clustered.

00:03:02.220 --> 00:03:04.460
And in this case,
it's the training set,

00:03:04.460 --> 00:03:05.810
which is the healthyVector.

00:03:09.000 --> 00:03:11.300
And now, be aware that
this data conversion

00:03:11.300 --> 00:03:14.350
will take some time to run.

00:03:14.350 --> 00:03:19.070
Now that R finally finished
creating the object KMC.kcca,

00:03:19.070 --> 00:03:21.900
we can cluster the
pixels in the tumorVector

00:03:21.900 --> 00:03:23.930
using the predict function.

00:03:23.930 --> 00:03:26.130
Let us call the cluster
vector tumorClusters =

00:03:26.130 --> 00:03:27.750
predict(KMC.kcca,
newdata=tumorVector).

00:03:47.070 --> 00:03:49.870
And now, the
tumorClusters is a vector

00:03:49.870 --> 00:03:53.940
that assigns a value 1 through
5 to each of the intensity

00:03:53.940 --> 00:03:56.550
values in the
tumorVector, as predicted

00:03:56.550 --> 00:03:58.880
by the k-means algorithm.

00:03:58.880 --> 00:04:01.340
To output the segmented
image, we first

00:04:01.340 --> 00:04:04.270
need to convert the tumor
clusters to a matrix.

00:04:04.270 --> 00:04:06.860
So let's use the
dimension function,

00:04:06.860 --> 00:04:10.150
and then the input is
simply tumorClusters,

00:04:10.150 --> 00:04:12.640
and then using the c
function with the first input

00:04:12.640 --> 00:04:17.060
as the number of rows
in the tumorMatrix

00:04:17.060 --> 00:04:18.800
and the second
input as the number

00:04:18.800 --> 00:04:22.540
of columns in the tumorMatrix.

00:04:22.540 --> 00:04:24.780
And now, we can
visualize the clusters

00:04:24.780 --> 00:04:29.640
by using the image function with
the input tumorClusters matrix,

00:04:29.640 --> 00:04:32.570
and make sure to set
the axes to FALSE,

00:04:32.570 --> 00:04:36.750
and let's use again these
fancy rainbow colors, here.

00:04:36.750 --> 00:04:38.050
So col=rainbow(k).

00:04:42.010 --> 00:04:44.850
Again, k is equal to 5.

00:04:44.850 --> 00:04:45.520
Alright.

00:04:45.520 --> 00:04:47.500
Let's navigate to
the graphics window,

00:04:47.500 --> 00:04:50.540
now, to see if we
can detect the tumor.

00:04:50.540 --> 00:04:51.840
Oh, and yes, we do!

00:04:51.840 --> 00:04:54.010
It is this abnormal
substance here

00:04:54.010 --> 00:04:56.070
that is highlighted
in blue that was not

00:04:56.070 --> 00:04:58.700
present in the
healthy MRI image.

00:04:58.700 --> 00:05:02.800
So we were successfully able
to identify, more or less,

00:05:02.800 --> 00:05:06.390
the geometry of the
malignant structure.

00:05:06.390 --> 00:05:09.160
We see that we did a good job
capturing the major tissue

00:05:09.160 --> 00:05:11.040
substances of the brain.

00:05:11.040 --> 00:05:14.230
The grey matter is highlighted
in purple and the white matter

00:05:14.230 --> 00:05:15.480
in yellow.

00:05:15.480 --> 00:05:17.860
For the sick patient, the
substance highlighted in blue

00:05:17.860 --> 00:05:20.440
is the oligodendroglioma tumor.

00:05:20.440 --> 00:05:23.200
Notice that we do not see
substantial blue regions

00:05:23.200 --> 00:05:25.200
in the healthy
brain image, apart

00:05:25.200 --> 00:05:27.610
from the region around the eyes.

00:05:27.610 --> 00:05:30.260
Actually, looking
at the eyes regions,

00:05:30.260 --> 00:05:33.409
we notice that the two images
were not taken precisely

00:05:33.409 --> 00:05:35.620
at the same section
of the brain.

00:05:35.620 --> 00:05:37.340
This might explain
some differences

00:05:37.340 --> 00:05:40.230
in shapes between
the two images.

00:05:40.230 --> 00:05:43.390
Let's see how the images
look like originally.

00:05:43.390 --> 00:05:47.260
We see that the tumor region
has a lighter color intensity,

00:05:47.260 --> 00:05:49.740
which is very similar to
the region around the eyes

00:05:49.740 --> 00:05:51.620
in the healthy brain image.

00:05:51.620 --> 00:05:55.070
This might explain highlighting
this region in blue.

00:05:55.070 --> 00:05:58.140
Of course, we cannot claim
that we did a wonderful job

00:05:58.140 --> 00:06:01.670
obtaining the exact geometries
of all the tissue substances,

00:06:01.670 --> 00:06:04.440
but we are definitely
on the right track.

00:06:04.440 --> 00:06:08.010
In fact, to do so, we need to
use more advanced algorithms

00:06:08.010 --> 00:06:10.600
and fine-tune our
clustering technique.

00:06:10.600 --> 00:06:14.490
MRI image segmentation is an
ongoing field of research.

00:06:14.490 --> 00:06:17.350
While k-means clustering
is a good starting point,

00:06:17.350 --> 00:06:18.850
more advanced
techniques have been

00:06:18.850 --> 00:06:22.270
proposed in the literature, such
as the modified fuzzy k-means

00:06:22.270 --> 00:06:23.970
clustering method.

00:06:23.970 --> 00:06:26.430
Also, if you are
interested, R has

00:06:26.430 --> 00:06:31.300
packages that are specialized
for analyzing medical images.

00:06:31.300 --> 00:06:34.100
Now, if we had MRI
axial images taken

00:06:34.100 --> 00:06:36.140
at different sections
of the brain,

00:06:36.140 --> 00:06:39.230
we could segment each image
and capture the geometries

00:06:39.230 --> 00:06:41.800
of the substances
at different levels.

00:06:41.800 --> 00:06:45.490
Then, by interpolating
between the segmented images,

00:06:45.490 --> 00:06:48.320
we can estimate
the missing slices,

00:06:48.320 --> 00:06:51.400
and we can then obtain
a 3D reconstruction

00:06:51.400 --> 00:06:55.900
of the anatomy of the brain
from 2D MRI cross-sections.

00:06:55.900 --> 00:06:59.440
In fact, 3D reconstruction
is particularly

00:06:59.440 --> 00:07:02.290
important in the medical
field for diagnosis,

00:07:02.290 --> 00:07:06.640
surgical planning, and
biological research purposes.

00:07:06.640 --> 00:07:08.780
I hope that this
recitation gave you

00:07:08.780 --> 00:07:12.770
a flavor of this fascinating
field of image segmentation.

00:07:12.770 --> 00:07:16.110
In our next video, we will
review all the analytics tools

00:07:16.110 --> 00:07:18.160
we have covered so
far in this class

00:07:18.160 --> 00:07:22.240
and discuss their
uses, pros, and cons..290
And now let's look
at its structure.

00:06:53.930 --> 00:06:57.750
It seems that R reads it exactly
like the flower data frame

00:06:57.750 --> 00:07:02.360
and sees it as 50
observations and 50 variables.

00:07:02.360 --> 00:07:06.010
So converting the data to a
matrix and then to the vector

00:07:06.010 --> 00:07:08.210
is a crucial step.

00:07:08.210 --> 00:07:11.660
Now we should be ready to start
our hierarchical clustering.

00:07:11.660 --> 00:07:14.850
The first step is to create the
distance matrix, as you already

00:07:14.850 --> 00:07:16.850
know, which in
this case computes

00:07:16.850 --> 00:07:19.970
the difference between every two
intensity values in our flower

00:07:19.970 --> 00:07:20.470
vector.

00:07:20.470 --> 00:07:22.340
So let's type
distance=dist(flowerVector,

00:07:22.340 --> 00:07:23.170
method="euclidean").

00:07:35.930 --> 00:07:38.020
Now that we have
the distance, next

00:07:38.020 --> 00:07:41.540
we will be computing the
hierarchical clusters.0:07:30.780
now we can see our original
grayscale image here.

00:07:30.780 --> 00:07:34.200
You can see that it has a
very, very low resolution.

00:07:34.200 --> 00:07:36.860
But in our next video,
we will try to segment

00:07:36.860 --> 00:07:39.760
an MRI image of
the brain that has

00:07:39.760 --> 00:07:42.350
a much, much higher resolution.