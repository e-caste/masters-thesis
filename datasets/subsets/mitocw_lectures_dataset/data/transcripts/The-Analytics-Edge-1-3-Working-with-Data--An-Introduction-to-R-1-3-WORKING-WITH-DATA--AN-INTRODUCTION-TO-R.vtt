WEBVTT

00:00:04.490 --> 00:00:06.650
After working in
R, you often want

00:00:06.650 --> 00:00:09.930
to save your work so that you
can easily re-run commands

00:00:09.930 --> 00:00:11.910
and rebuild models.

00:00:11.910 --> 00:00:13.660
There are several
ways of doing this,

00:00:13.660 --> 00:00:15.990
but the method we
recommend is by using

00:00:15.990 --> 00:00:18.540
what's called a script file.

00:00:18.540 --> 00:00:20.680
Let's open a new script file.

00:00:20.680 --> 00:00:25.580
Go to File, New Document, on
a Mac, and File, New Script,

00:00:25.580 --> 00:00:27.590
on a PC.

00:00:27.590 --> 00:00:31.140
This will pop up a
blank script file.

00:00:31.140 --> 00:00:32.940
You can copy and
paste any commands

00:00:32.940 --> 00:00:36.900
that you've run in your
console into the script file.

00:00:36.900 --> 00:00:41.620
For example, say we want to
save the table commands we ran.

00:00:41.620 --> 00:00:44.670
Let's Copy the
first table command

00:00:44.670 --> 00:00:47.910
and then Paste it
into the script file.

00:00:47.910 --> 00:00:50.760
We can also take the
first tapply command

00:00:50.760 --> 00:00:56.980
we ran, Copy and Paste
it into our script file.

00:00:56.980 --> 00:00:59.440
Now, if you highlight
these lines of code

00:00:59.440 --> 00:01:04.670
in the script file and press
Command-Enter on a Mac,

00:01:04.670 --> 00:01:08.950
and Control-r on a PC, it
will run these lines of code

00:01:08.950 --> 00:01:10.990
in your R console.

00:01:10.990 --> 00:01:13.960
So if you save this
file and then reopen it

00:01:13.960 --> 00:01:18.280
when you start R next time, you
can easily rerun any commands

00:01:18.280 --> 00:01:20.760
that you ran in this R session.

00:01:20.760 --> 00:01:23.260
A lot of times it's
easier to just write

00:01:23.260 --> 00:01:27.120
commands in your script file
and run them in your console

00:01:27.120 --> 00:01:31.180
because then they'll always
be saved in your script file.

00:01:31.180 --> 00:01:34.370
You can add comments
in your script file

00:01:34.370 --> 00:01:36.000
by using the pound sign.

00:01:36.000 --> 00:01:39.100
If you type pound,
and then some comment

00:01:39.100 --> 00:01:44.120
describing your script file, and
then highlight the whole thing

00:01:44.120 --> 00:01:47.520
and press Control-r
or Command-Enter,

00:01:47.520 --> 00:01:50.520
you'll see that the comment
runs in the console,

00:01:50.520 --> 00:01:52.009
but nothing happens.

00:01:52.009 --> 00:01:55.880
R recognizes this as a comment.

00:01:55.880 --> 00:01:58.900
If you want to save the
output of your R session

00:01:58.900 --> 00:02:03.500
in your console, I recommend
just saving it as a text file.

00:02:03.500 --> 00:02:07.760
In your console, you can
go to file, Save to file,

00:02:07.760 --> 00:02:12.460
and this will save your
output as a text file.

00:02:12.460 --> 00:02:14.470
You won't be able
to easily rerun

00:02:14.470 --> 00:02:17.140
this in R like the
script file, but it

00:02:17.140 --> 00:02:20.620
will have the summary
output of what you did.

00:02:20.620 --> 00:02:22.680
When you close R,
it will ask you

00:02:22.680 --> 00:02:24.900
if you want to save
your workspace.

00:02:24.900 --> 00:02:27.820
Make sure you have everything
you want in a script file

00:02:27.820 --> 00:02:31.380
and then don't worry about
saving your workspace.

00:02:31.380 --> 00:02:33.430
These are the basics
of R. We'll see

00:02:33.430 --> 00:02:35.780
a lot more in the
rest of this class.

00:02:35.780 --> 00:02:37.829
But hopefully you've
seen in this lecture

00:02:37.829 --> 00:02:39.960
how powerful R can be.

00:02:39.960 --> 00:02:42.920
In just one lecture, we
performed insightful data

00:02:42.920 --> 00:02:46.360
analysis on an
interesting data set.> 00:03:24.550
of the population under 15.

00:03:24.550 --> 00:03:28.320
We can do this with
the which.max function.

00:03:28.320 --> 00:03:40.090
So type which.max and then
in parentheses WHO$Under15.

00:03:40.090 --> 00:03:43.110
Close the parentheses
and hit Enter.

00:03:43.110 --> 00:03:46.910
This tells us that
the 124th observation

00:03:46.910 --> 00:03:50.910
has the maximum value
of the variable Under15.

00:03:50.910 --> 00:03:55.680
We can look up the country of
the 124th observation by typing

00:03:55.680 --> 00:04:02.080
WHO$Country and then
in square brackets 124.

00:04:02.080 --> 00:04:04.910
Close the square
brackets and hit Enter.

00:04:04.910 --> 00:04:08.000
So Niger is the country
with the maximum percentage

00:04:08.000 --> 00:04:11.990
of the population under 15.

00:04:11.990 --> 00:04:17.579
Let's now create a scatter plot
of GNI versus fertility rate.

00:04:17.579 --> 00:04:20.410
You can do this using
the plot function.

00:04:20.410 --> 00:04:27.500
So type plot and then
in parentheses WHO$GNI,

00:04:27.500 --> 00:04:31.450
the variable we want
on our x-axis, comma,

00:04:31.450 --> 00:04:38.470
and then WHO$FertilityRate, the
variable we want on our y-axis.

00:04:38.470 --> 00:04:41.420
Close the parentheses
and hit Enter.

00:04:41.420 --> 00:04:43.610
A scatter plot should appear.

00:04:43.610 --> 00:04:47.140
Income, or GNI,
is on the x-axis,

00:04:47.140 --> 00:04:50.420
and fertility rate
is on the y-axis.

00:04:50.420 --> 00:04:53.880
Each point in the scatter
plot is a country.

00:04:53.880 --> 00:04:56.110
We can see that most
countries here either

00:04:56.110 --> 00:05:01.350
have a low GNI or a high GNI
but a low fertility rate.

00:05:01.350 --> 00:05:03.600
However, there are
a few countries

00:05:03.600 --> 00:05:08.110
for which both the GNI and
the fertility rate are high.

00:05:08.110 --> 00:05:09.720
Let's investigate.

00:05:09.720 --> 00:05:13.150
We'll use the subset function
to identify the countries

00:05:13.150 --> 00:05:17.450
with a GNI greater than
10,000, and a fertility

00:05:17.450 --> 00:05:20.700
rate greater than 2.5.

00:05:20.700 --> 00:05:26.210
So go back to your R console
and then type Outliers--

00:05:26.210 --> 00:05:32.050
this is what we'll call
our subset-- equals subset,

00:05:32.050 --> 00:05:44.420
and then in parentheses WHO
comma GNI greater than 10,000

00:05:44.420 --> 00:05:52.570
and FertilityRate
greater than 2.5.

00:05:52.570 --> 00:05:56.140
Close the parentheses
and hit Enter.

00:05:56.140 --> 00:05:58.230
When we used subset
before, we only

00:05:58.230 --> 00:06:00.310
had one condition
to define which

00:06:00.310 --> 00:06:03.190
observations to
keep in the subset.

00:06:03.190 --> 00:06:08.140
Here we have two conditions,
separated by the and symbol.

00:06:08.140 --> 00:06:10.180
This means that
both conditions must

00:06:10.180 --> 00:06:14.510
be true for all
observations in the subset.

00:06:14.510 --> 00:06:17.720
We can see how many rows
of data are in our subset

00:06:17.720 --> 00:06:20.390
by using the nrow function.

00:06:20.390 --> 00:06:25.080
So type nrow for number of
rows, and in parentheses

00:06:25.080 --> 00:06:26.980
the name of our
subset, Outliers.

00:06:29.930 --> 00:06:33.050
This tells us that there are
seven countries for which

00:06:33.050 --> 00:06:37.290
the GNI is greater than
10,000 and the fertility rate

00:06:37.290 --> 00:06:40.190
is greater than 2.5.

00:06:40.190 --> 00:06:44.170
Now let's output just
the country names, GNI,

00:06:44.170 --> 00:06:47.090
and fertility rate of
these seven countries

00:06:47.090 --> 00:06:49.290
to investigate further.

00:06:49.290 --> 00:06:51.260
There's an easy
way of doing this,

00:06:51.260 --> 00:06:54.320
and we'll use this technique
several times in this class

00:06:54.320 --> 00:06:59.090
when we just want to extract a
few variables from a data set.

00:06:59.090 --> 00:07:01.350
So type the name
of our data set,

00:07:01.350 --> 00:07:04.840
Outliers, and then
in square brackets

00:07:04.840 --> 00:07:07.640
we'll make a vector of
the names of the variables

00:07:07.640 --> 00:07:09.290
we want to output.

00:07:09.290 --> 00:07:15.240
So c, and then in parentheses,
"Country" for the country name,

00:07:15.240 --> 00:07:20.420
comma, "GNI" comma, and
then "FertilityRate".

00:07:23.520 --> 00:07:27.570
Close th> 00:06:49.970
So we should expect
53 observations

00:06:49.970 --> 00:06:53.010
in our Europe subset,
which is right.

00:06:55.650 --> 00:06:58.060
Now, suppose we want
to save this new data

00:06:58.060 --> 00:07:01.500
frame, WHO_Europe,
to a csv file.

00:07:01.500 --> 00:07:05.430
You can use the write.csv
function to do this.

00:07:05.430 --> 00:07:10.440
Type write.csv, and
then in parentheses

00:07:10.440 --> 00:07:12.700
the name of the data
frame we want to save,

00:07:12.700 --> 00:07:17.280
WHO_Europe, comma,
and then in quotes

00:07:17.280 --> 00:07:19.740
the name of the file
we want to save it to.

00:07:19.740 --> 00:07:20.950
Let's call it WHO_Europe.csv.

00:07:24.810 --> 00:07:27.850
If you hit Enter,
nothing should happen,

00:07:27.850 --> 00:07:31.780
but you should now have a
file called WHO_Europe.csv

00:07:31.780 --> 00:07:35.040
in the same folder that
you saved WHO.csv in.

00:07:37.670 --> 00:07:40.980
And now that we've saved
this as a csv file,

00:07:40.980 --> 00:07:43.570
if we're not working
with it anymore in R,

00:07:43.570 --> 00:07:47.409
we can remove the data frame
from our current session in R.

00:07:47.409 --> 00:07:50.370
This is often useful if you're
working with a large data

00:07:50.370 --> 00:07:53.159
set that's taking
up a lot of space.

00:07:53.159 --> 00:07:58.110
First, let's type ls() to see
what variables we currently

00:07:58.110 --> 00:08:01.620
have in R. You could see
that WHO_Europe is one

00:08:01.620 --> 00:08:03.590
of our variables.

00:08:03.590 --> 00:08:09.990
Now, type rm for remove and
then the name WHO_Europe and hit

00:08:09.990 --> 00:08:11.210
Enter.

00:08:11.210 --> 00:08:14.930
If you type ls() again, you
should see that WHO_Europe is

00:08:14.930 --> 00:08:16.850
gone.

00:08:16.850 --> 00:08:21.430
In the next video, we'll
explore the WHO data set.