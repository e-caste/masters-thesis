WEBVTT

00:00:00.000 --> 00:00:02.555
The following content is
provided under a Creative

00:00:02.555 --> 00:00:03.650
Commons license.

00:00:03.650 --> 00:00:06.600
Your support will help MIT
OpenCourseWare continue to

00:00:06.600 --> 00:00:10.030
offer high quality educational
resources for free.

00:00:10.030 --> 00:00:12.810
To make a donation or to view
additional materials from

00:00:12.810 --> 00:00:16.560
hundreds of MIT courses, visit
MIT OpenCourseWare at

00:00:16.560 --> 00:00:17.810
ocw.mit.edu.

00:00:21.080 --> 00:00:27.350
PROFESSOR: I want to pretty much
finish up today talking

00:00:27.350 --> 00:00:31.420
about modulation.

00:00:31.420 --> 00:00:34.250
Part of the reason we don't
spend much time on this is, I

00:00:34.250 --> 00:00:39.360
think most of you have seen
some kind of undergraduate

00:00:39.360 --> 00:00:42.260
class in communication
or signal

00:00:42.260 --> 00:00:45.480
processing or something.

00:00:45.480 --> 00:00:50.070
Where you do a lot of this
because a lot of this is just

00:00:50.070 --> 00:00:54.170
nice exercises and -- well, nice
or not nice, depending on

00:00:54.170 --> 00:00:58.130
the way you about it -- in
multiplying waveforms by

00:00:58.130 --> 00:01:02.350
cosines and by sines and by
complex exponentials.

00:01:02.350 --> 00:01:06.770
And you keep doing this, and
doing this, and doing this and

00:01:06.770 --> 00:01:09.330
you get these long
expressions.

00:01:09.330 --> 00:01:13.180
And and it all means
something.

00:01:13.180 --> 00:01:16.000
So, most of you have seen
a good deal of this.

00:01:16.000 --> 00:01:20.230
You probably haven't seen the
Nyquist criterion before.

00:01:20.230 --> 00:01:23.360
I'm sure you haven't seen the
Nyquist criterion done

00:01:23.360 --> 00:01:28.680
carefully, because I've never
seen it done carefully before.

00:01:28.680 --> 00:01:32.990
I don't think it is done
carefully anywhere else.

00:01:32.990 --> 00:01:34.470
And I'm sure you don't
care about this.

00:01:34.470 --> 00:01:37.820
But, at some point, if you deal
with this stuff, you will

00:01:37.820 --> 00:01:38.570
care about it.

00:01:38.570 --> 00:01:41.070
Because at some point
you will need it.

00:01:41.070 --> 00:01:46.220
But anyway, we were looking at
pulse amplitude modulation,

00:01:46.220 --> 00:01:48.050
you remember.

00:01:48.050 --> 00:01:51.600
We were looking at the
modulated waveform.

00:01:51.600 --> 00:01:56.980
And this is all done down at
baseband, now, remember.

00:01:56.980 --> 00:02:02.430
And the interesting problems
down at baseband are, first,

00:02:02.430 --> 00:02:05.280
how do you choose
a signal set.

00:02:05.280 --> 00:02:09.530
Namely, how do you choose those
quantities u sub k, out

00:02:09.530 --> 00:02:12.240
of some set of possible
values.

00:02:12.240 --> 00:02:15.670
So they have an appropriate
distance between them.

00:02:15.670 --> 00:02:19.400
And, next, how do you choose
this waveform p of t, which is

00:02:19.400 --> 00:02:23.500
called the pulse, that
you're using.

00:02:23.500 --> 00:02:26.410
And then, after you've chosen
those two things, there's

00:02:26.410 --> 00:02:28.710
nothing more to be done.

00:02:28.710 --> 00:02:33.130
You simply form the modulated
waveform as u of t equals the

00:02:33.130 --> 00:02:36.400
sum of the signals which are
coming in regularly at

00:02:36.400 --> 00:02:37.900
intervals of t.

00:02:37.900 --> 00:02:42.300
You multiply each one of them
by this waveform, p of t.

00:02:42.300 --> 00:02:47.150
Or, alternatively, you think of
the waveform as being a sum

00:02:47.150 --> 00:02:48.850
of impulses.

00:02:48.850 --> 00:02:51.270
Each impulse weighted
by u sub k.

00:02:51.270 --> 00:02:54.520
And you think of passing this
string of impulses through a

00:02:54.520 --> 00:02:58.190
filter with impulse
response p of t.

00:02:58.190 --> 00:03:00.890
Which is usually the way that
it's implemented, except of

00:03:00.890 --> 00:03:03.900
course you're not using
ideal impulses.

00:03:03.900 --> 00:03:08.550
You're using sharp pulses which
have a flat spectrum

00:03:08.550 --> 00:03:11.950
over the bandwidth of
the filter p of t.

00:03:11.950 --> 00:03:15.340
But anyway, somehow or other
you implement this.

00:03:15.340 --> 00:03:18.790
And that is this fundamental
step we've been talking about

00:03:18.790 --> 00:03:21.920
for quite a while now,
of how do you turn

00:03:21.920 --> 00:03:24.020
sequences into waveforms.

00:03:24.020 --> 00:03:27.640
How do you turn waveforms into
sequences, it's a fundamental

00:03:27.640 --> 00:03:28.860
piece of source coding.

00:03:28.860 --> 00:03:31.890
It's a fundamental piece
of channel coding.

00:03:31.890 --> 00:03:35.350
Here we're doing the channel
coding part of it.

00:03:35.350 --> 00:03:38.050
Then we did something
kind of flaky.

00:03:38.050 --> 00:03:42.040
We said that when we received
this waveform, what we were

00:03:42.040 --> 00:03:46.290
going to do is to first pass it
through another filter, and

00:03:46.290 --> 00:03:48.180
then sample it.

00:03:48.180 --> 00:03:51.950
If you've done the homework yet,
you will probably have

00:03:51.950 --> 00:03:55.850
looked at what happens when you
take an arbitrary linear

00:03:55.850 --> 00:04:02.750
operation on this received
signal to try to retrieve what

00:04:02.750 --> 00:04:05.090
these signals u sub k are.

00:04:05.090 --> 00:04:09.700
And you will have found that
this filtering and sampling is

00:04:09.700 --> 00:04:16.170
in fact not a general linear
operation, but it's the only

00:04:16.170 --> 00:04:20.060
general linear operation that
you're interested in as far as

00:04:20.060 --> 00:04:23.550
retrieving these signals
from that waveform.

00:04:23.550 --> 00:04:28.270
So, in fact, this is, in fact,
more general than it looks.

00:04:28.270 --> 00:04:32.910
There a confusing thing here.

00:04:32.910 --> 00:04:42.900
If you receive u of t at the
receiver, and your question

00:04:42.900 --> 00:04:50.400
is, how do we get this sequence
of samples u sub k

00:04:50.400 --> 00:05:01.740
out of it, and suppose that this
pulse p of t or the --

00:05:01.740 --> 00:05:05.310
I mean, suppose for example
that the pulse is a narrow

00:05:05.310 --> 00:05:10.870
bandwidth pulse, and there's
just no way you can perform

00:05:10.870 --> 00:05:14.680
linear operations and get these
signals out from it.

00:05:14.680 --> 00:05:18.000
Is it possible to do nonlinear
operations and get the signals

00:05:18.000 --> 00:05:20.310
out from it?

00:05:20.310 --> 00:05:22.270
And you ought to think about
this question a little bit

00:05:22.270 --> 00:05:25.020
because it's kind of
an interesting one.

00:05:28.760 --> 00:05:34.180
If I don't tell you what the
signals u sub k are, if I ask

00:05:34.180 --> 00:05:39.260
you to build something which
extracts these samples u sub

00:05:39.260 --> 00:05:44.600
k, without any idea of what
signal set they're taken from,

00:05:44.600 --> 00:05:46.080
then there's nothing
you can do better

00:05:46.080 --> 00:05:48.890
than a linear operation.

00:05:48.890 --> 00:05:53.810
And, in fact, if this pulse p
of t has a bandwidth that's

00:05:53.810 --> 00:05:57.340
too narrow, you're just stuck.

00:05:57.340 --> 00:06:01.440
If I tell you that these u sub
k are drawn from a particular

00:06:01.440 --> 00:06:05.620
signal set -- for example,
suppose they're binary -- then

00:06:05.620 --> 00:06:09.950
you have an enormous extra
amount of information.

00:06:09.950 --> 00:06:14.220
And you can, in fact, given this
waveform, even though p

00:06:14.220 --> 00:06:17.230
of t is a very, very narrow
band, you can still in

00:06:17.230 --> 00:06:20.600
principle get these binary
signals out.

00:06:20.600 --> 00:06:23.070
So what's the game we're
playing here?

00:06:23.070 --> 00:06:27.040
I mean, we're doing kind
of a phony thing.

00:06:27.040 --> 00:06:31.810
We're restricting ourselves
to only linear operations.

00:06:31.810 --> 00:06:35.600
We are restricting ourselves
to retrieving these signals

00:06:35.600 --> 00:06:40.380
without knowing anything about
what the signal set is.

00:06:40.380 --> 00:06:43.230
Which is not really the problem
that we're interested

00:06:43.230 --> 00:06:44.620
in looking at.

00:06:44.620 --> 00:06:47.270
So what are we really doing?

00:06:47.270 --> 00:06:49.690
What we're really doing is
trying to look at this

00:06:49.690 --> 00:06:53.240
question of modulation
before we look at

00:06:53.240 --> 00:06:54.490
the question of noise.

00:06:58.350 --> 00:07:01.500
And after we start looking at
noise, the thing that we're

00:07:01.500 --> 00:07:04.900
going to find is that this
received waveform is a

00:07:04.900 --> 00:07:08.650
received waveform plus a lot
of noise on top of it.

00:07:08.650 --> 00:07:11.790
And if there's a lot of noise on
top of it, these non-linear

00:07:11.790 --> 00:07:14.295
operations you can think
of are not going

00:07:14.295 --> 00:07:17.720
to work very well.

00:07:17.720 --> 00:07:23.400
And I guess the problem is, you
just have to take that on

00:07:23.400 --> 00:07:24.640
faith right now.

00:07:24.640 --> 00:07:28.240
And after we look at random
processes, and after we look

00:07:28.240 --> 00:07:31.550
at how to deal with the noise
waveforms, you will in fact

00:07:31.550 --> 00:07:35.180
see that these operations we're
talking about here are

00:07:35.180 --> 00:07:37.770
exactly the things
we want to do.

00:07:37.770 --> 00:07:39.650
Now, I don't know whether
this is the right

00:07:39.650 --> 00:07:41.730
way to do it or not.

00:07:41.730 --> 00:07:44.670
Dealing with all this phony
stuff that you see in

00:07:44.670 --> 00:07:48.650
elementary courses before
dealing with the real stuff.

00:07:48.650 --> 00:07:51.370
I think it probably is, because
for most of you this

00:07:51.370 --> 00:07:54.440
is sort of familiar and
we'll come back later

00:07:54.440 --> 00:07:56.430
and make it all right.

00:07:56.430 --> 00:08:00.210
But who knows?

00:08:00.210 --> 00:08:01.460
Anyway.

00:08:04.090 --> 00:08:10.370
what we want to do then is to
find some composite filter, g,

00:08:10.370 --> 00:08:19.450
which is what happens when you
take the filter p, or the

00:08:19.450 --> 00:08:24.685
pulse p, pass it through a
filter q of t, what you get is

00:08:24.685 --> 00:08:26.960
the convolution of p and q.

00:08:26.960 --> 00:08:31.390
And, therefore, what comes out
after this filtering is done

00:08:31.390 --> 00:08:35.710
is a received waveform which is
just a sum over k of u sub

00:08:35.710 --> 00:08:39.650
k times g of t minus k t.

00:08:39.650 --> 00:08:43.000
In other words, these two
filters are not doing anything

00:08:43.000 --> 00:08:44.070
extra for you.

00:08:44.070 --> 00:08:46.890
All they are is a way of putting
part of the filter at

00:08:46.890 --> 00:08:50.050
the transmitter, part of the
filter at the receiver.

00:08:50.050 --> 00:08:53.090
When you look at noise you'll
find out that there is some

00:08:53.090 --> 00:08:56.120
real difference between what's
done at the transmitter and

00:08:56.120 --> 00:08:59.210
what's done at the receiver,
because the noise comes in

00:08:59.210 --> 00:09:01.670
between the transmitter
and the receiver.

00:09:01.670 --> 00:09:04.640
But for now, it doesn't make
any difference so the only

00:09:04.640 --> 00:09:07.200
thing we're interested in is
the properties of this

00:09:07.200 --> 00:09:10.370
composite waveform, g of t.

00:09:10.370 --> 00:09:15.160
And what we find is that if we
receive r of t, which is this

00:09:15.160 --> 00:09:19.910
waveform sum of u k g of t minus
k t, and if we want to

00:09:19.910 --> 00:09:24.580
retrieve the coefficient u sub
k, it becomes duck soup to do

00:09:24.580 --> 00:09:29.830
so if in fact this waveform is
like a sampling waveform.

00:09:29.830 --> 00:09:37.540
In other words, if g of t is
equal to 1 at t equals 0, and

00:09:37.540 --> 00:09:41.900
it's equal to 0 at each other
sample point, then all we have

00:09:41.900 --> 00:09:46.170
to do is take this waveform,
simply sample it each capital

00:09:46.170 --> 00:09:48.930
T seconds, and we get these
coefficients out

00:09:48.930 --> 00:09:50.840
automatically.

00:09:50.840 --> 00:09:55.280
Now, I should warn you at this
point that in the notes the

00:09:55.280 --> 00:10:02.030
scaling business is not
done quite right.

00:10:02.030 --> 00:10:09.110
Sometimes we talk about g of t
as a filter whose shifts are

00:10:09.110 --> 00:10:10.930
orthonormal to each other.

00:10:10.930 --> 00:10:14.470
And sometimes as a filter whose
shifts are orthogonal to

00:10:14.470 --> 00:10:15.720
each other.

00:10:15.720 --> 00:10:19.950
I advise you not to worry about
that, because you have

00:10:19.950 --> 00:10:22.190
to make changes about five
times in the notes

00:10:22.190 --> 00:10:24.160
to make it all right.

00:10:24.160 --> 00:10:26.600
And I will put up a new version
of the notes on the

00:10:26.600 --> 00:10:28.590
web which in fact
does this right.

00:10:28.590 --> 00:10:30.700
It's not important.

00:10:30.700 --> 00:10:35.310
It's just this old question of,
do you use a sinc function

00:10:35.310 --> 00:10:37.960
when you're dealing with
strictly band-limited

00:10:37.960 --> 00:10:42.490
functions, or do you multiply
the sinc function by 1 over

00:10:42.490 --> 00:10:45.880
the square root of t to
make it orthonormal.

00:10:45.880 --> 00:10:50.840
Or do you multiply it by
1 over t to make it --

00:10:50.840 --> 00:10:53.570
I mean, you can scale it in a
number of different ways.

00:10:53.570 --> 00:10:56.120
And, fundamentally, it doesn't
make any difference.

00:10:56.120 --> 00:10:58.290
It's just that if you want to
get the right answer you have

00:10:58.290 --> 00:11:01.130
to scale it the right way.

00:11:01.130 --> 00:11:04.880
And it's not quite right
in the notes.

00:11:04.880 --> 00:11:09.780
So I'll change it around and
send the thing out to you.

00:11:09.780 --> 00:11:12.830
Then it says that T-spaced
samples of r then reproduce u

00:11:12.830 --> 00:11:15.470
sub k without intersymbol
interference.

00:11:15.470 --> 00:11:20.490
The Nyquist criterion is
different from this business

00:11:20.490 --> 00:11:23.220
of the pulse being
ideal Nyquist.

00:11:23.220 --> 00:11:26.610
Ideal Nyquist is talking
about the time domain.

00:11:26.610 --> 00:11:29.680
It simply says the trivial thing
you, want a pulse which

00:11:29.680 --> 00:11:33.390
has 0's at every sample point
except for the sample point

00:11:33.390 --> 00:11:34.790
you're interested in.

00:11:34.790 --> 00:11:38.700
The Nyquist criterion translates
that ideal Nyquist

00:11:38.700 --> 00:11:43.550
property, in time, to a
property in frequency.

00:11:43.550 --> 00:11:46.950
And it says that the frequency,
that the Fourier

00:11:46.950 --> 00:11:50.830
transform of g of t has
to satisfy this

00:11:50.830 --> 00:11:52.680
relationship here.

00:11:52.680 --> 00:11:56.950
And there's this added condition
on g of f that it

00:11:56.950 --> 00:12:00.820
has to go to 0 fast enough
as f goes to infinity.

00:12:00.820 --> 00:12:04.230
But we won't worry
about that today.

00:12:04.230 --> 00:12:11.570
So the condition is this: the
picture that I showed you last

00:12:11.570 --> 00:12:13.610
time is this.

00:12:16.110 --> 00:12:23.200
We defined the nominal band, the
Nyquist band, as the base

00:12:23.200 --> 00:12:26.800
bandwidth w equals 1 over 2t.

00:12:26.800 --> 00:12:31.030
That's the bandwidth that a sinc
pulse would have if you

00:12:31.030 --> 00:12:32.790
were using a sinc pulse.

00:12:32.790 --> 00:12:35.910
The actual baseband limit,
b, should be close to w.

00:12:39.290 --> 00:12:42.230
And most of the work that people
do trying to build

00:12:42.230 --> 00:12:45.240
filters and things like this,
since what we're trying to do

00:12:45.240 --> 00:12:48.360
is find a waveform that we're
trying to transmit.

00:12:48.360 --> 00:12:51.250
And we're stuck with the FCC
and all these other things

00:12:51.250 --> 00:12:56.280
that say, you better keep
this band-limited.

00:12:56.280 --> 00:12:59.690
What we're going to do is to
make the actual band of the

00:12:59.690 --> 00:13:07.420
waveform close to the
nominal bandwidth.

00:13:07.420 --> 00:13:10.515
So we're going to assume that
it's less than twice the

00:13:10.515 --> 00:13:12.130
nominal bandwidth.

00:13:12.130 --> 00:13:14.130
In other words, you can have a
little bit of slop, but you

00:13:14.130 --> 00:13:15.700
can't have too much.

00:13:15.700 --> 00:13:18.750
When you try to design a filter
that way, and you

00:13:18.750 --> 00:13:23.160
satisfy the Nyquist criterion,
which is talking about all of

00:13:23.160 --> 00:13:26.190
these bands all the way out to
infinity, and the fact they

00:13:26.190 --> 00:13:30.310
have to add up in a certain
way, if you only have this

00:13:30.310 --> 00:13:34.270
band here and part of
the next band --

00:13:34.270 --> 00:13:39.430
if this function has to go to
0 before you get out to 2w,

00:13:39.430 --> 00:13:42.530
then the only thing you have
to worry about is what does

00:13:42.530 --> 00:13:44.370
this waveform look like here.

00:13:44.370 --> 00:13:47.740
You take this and
you pick it up.

00:13:47.740 --> 00:13:50.200
And you put it over here,
and you add it up.

00:13:50.200 --> 00:13:54.340
You take this, you put it over
here and you add it up.

00:13:54.340 --> 00:14:00.460
And if the pulse, p of t is
real, then what you have over

00:14:00.460 --> 00:14:05.030
here is the complex conjugate
of what you have here.

00:14:05.030 --> 00:14:08.220
And if you make this real in
frequency also -- in other

00:14:08.220 --> 00:14:11.470
words, you have symmetry
in time and symmetry in

00:14:11.470 --> 00:14:16.190
frequency, then this band edge
symmetry requirement is that

00:14:16.190 --> 00:14:20.110
when you add this to this, you
get something which is an

00:14:20.110 --> 00:14:25.260
ideal rectangular pulse.

00:14:25.260 --> 00:14:30.430
Now, if you think of taking this
waveform here -- now you

00:14:30.430 --> 00:14:34.040
only have to worry about the
positive frequency part of it.

00:14:34.040 --> 00:14:39.140
And you take that point right
there, which is halfway

00:14:39.140 --> 00:14:40.700
between 0 and t.

00:14:40.700 --> 00:14:42.800
In other words, this
is at t over 2.

00:14:45.770 --> 00:14:49.200
And it's also at frequency w.

00:14:49.200 --> 00:14:56.080
And you rotate this thing around
by 180 degrees, then

00:14:56.080 --> 00:14:58.050
this comes up there.

00:14:58.050 --> 00:15:00.650
And it fills in this little
slot up here.

00:15:00.650 --> 00:15:02.500
That's what the band edge
symmetry means.

00:15:02.500 --> 00:15:02.800
Yes?

00:15:02.800 --> 00:15:04.050
AUDIENCE: [UNINTELLIGIBLE]

00:15:15.500 --> 00:15:18.080
PROFESSOR: Ah, yes.

00:15:18.080 --> 00:15:21.740
We could, if we wanted
to, put various

00:15:21.740 --> 00:15:25.240
notches in this filter.

00:15:25.240 --> 00:15:30.540
But we've defined the bandwidth,
b, as the largest

00:15:30.540 --> 00:15:38.240
frequency, f, such that g
hat of f is 0 beyond b.

00:15:38.240 --> 00:15:43.590
In other words, everywhere
beyond b, g hat of

00:15:43.590 --> 00:15:45.360
f is equal to 0.

00:15:45.360 --> 00:15:54.560
Now, if g hat f cuts down to 0,
say, back here, there's no

00:15:54.560 --> 00:15:57.060
way you can meet the
Nyquist criterion.

00:15:57.060 --> 00:15:59.750
Because there's no way you can
build this thing up with all

00:15:59.750 --> 00:16:03.260
these out-of-band components
so that you get something

00:16:03.260 --> 00:16:05.930
which is flat all the
way out to w.

00:16:08.530 --> 00:16:11.740
So you simply can't have a
filter which is band-limited

00:16:11.740 --> 00:16:15.370
to a frequency less than w.

00:16:15.370 --> 00:16:19.860
What you need is to use these
out-of-band frequencies as a

00:16:19.860 --> 00:16:25.030
way to help you construct this
ideal rectangular pulse.

00:16:25.030 --> 00:16:26.800
Through aliasing.

00:16:26.800 --> 00:16:29.230
In other words, the point
here is when we're doing

00:16:29.230 --> 00:16:33.400
transmission of data, we
know what the data is.

00:16:33.400 --> 00:16:37.020
We know what the filter
is, and we can use

00:16:37.020 --> 00:16:39.590
aliasing to our advantage.

00:16:39.590 --> 00:16:42.920
When we were talking about data
compression, aliasing

00:16:42.920 --> 00:16:44.910
just hurt us.

00:16:44.910 --> 00:16:48.240
Because we were trying to
represent this waveform that

00:16:48.240 --> 00:16:50.420
we didn't have any
control over.

00:16:50.420 --> 00:16:56.200
And the out-of-band parts added
into the baseband parts

00:16:56.200 --> 00:16:57.040
and they clobbered us.

00:16:57.040 --> 00:17:00.270
Because we couldn't get the
whole thing back again.

00:17:00.270 --> 00:17:04.670
Here, we're doing it
the other way.

00:17:04.670 --> 00:17:07.420
In, other words we're starting
out with a sequence.

00:17:07.420 --> 00:17:10.160
We're going to a waveform, and
then we're trying to get the

00:17:10.160 --> 00:17:13.880
sequence back from
the waveform.

00:17:13.880 --> 00:17:17.370
So it's really the opposite
kind of problem.

00:17:17.370 --> 00:17:21.230
And here, the whole game,
namely, the thing that Nyquist

00:17:21.230 --> 00:17:26.050
spotted, back in 1928, was you
could use these out-of-band

00:17:26.050 --> 00:17:29.440
frequencies to, in fact, help
you to get rid of this

00:17:29.440 --> 00:17:31.900
intersymbol interference.

00:17:31.900 --> 00:17:35.000
Because all you need to do is
make these things add up to

00:17:35.000 --> 00:17:38.590
this so that you have something
rectangular.

00:17:38.590 --> 00:17:40.120
And then when you do
the samples, you

00:17:40.120 --> 00:17:41.370
have to write samples.

00:17:46.580 --> 00:17:50.600
Now, the problem that a filter
designer comes to when saying

00:17:50.600 --> 00:17:56.680
this is to say, OK, how do I
design a frequency response

00:17:56.680 --> 00:18:03.070
which has the property that
it's going to go to 0

00:18:03.070 --> 00:18:05.800
quickly beyond w.

00:18:05.800 --> 00:18:09.940
Because the FCC, when we
translate this up to passband,

00:18:09.940 --> 00:18:13.010
is going to tell us we can't
have much energy outside of

00:18:13.010 --> 00:18:15.000
minus w to plus w.

00:18:15.000 --> 00:18:17.880
And if we can't design a good
filter, it means we have to

00:18:17.880 --> 00:18:19.300
make w smaller.

00:18:19.300 --> 00:18:22.730
So we can keep ourselves within
this given bandwidth.

00:18:22.730 --> 00:18:25.760
And we don't want to do that
because that keeps us from

00:18:25.760 --> 00:18:27.670
transmitting much data.

00:18:27.670 --> 00:18:31.930
And then we can't sell our
product, so suddenly we have

00:18:31.930 --> 00:18:37.350
to design something which uses
all of this bandwidth that we

00:18:37.350 --> 00:18:39.630
have available.

00:18:39.630 --> 00:18:44.480
So what we want to do, then, is
to design something where b

00:18:44.480 --> 00:18:49.350
is just a little bit more than
w, but where also we get from

00:18:49.350 --> 00:18:52.650
t down to 0 very quickly.

00:18:52.650 --> 00:18:57.290
We could just use the square
pulse to start with.

00:18:57.290 --> 00:18:59.510
And what's the trouble
with that?

00:18:59.510 --> 00:19:03.900
This rectangular pulse, its
inverse Fourier transform is

00:19:03.900 --> 00:19:05.740
the sinc pulse.

00:19:05.740 --> 00:19:09.350
The sinc pulse, because a
discontinuity in the Fourier

00:19:09.350 --> 00:19:15.510
transform, it can't go to 0 any
faster than is 1 over t.

00:19:15.510 --> 00:19:18.120
And suddenly it goes to
0 as 1 over t goes to

00:19:18.120 --> 00:19:19.970
0 very, very slowly.

00:19:19.970 --> 00:19:26.270
In other words, you have
enormous problems over time.

00:19:26.270 --> 00:19:28.130
And you have enormous delay.

00:19:28.130 --> 00:19:31.150
And since you have so many
pulses adding up together,

00:19:31.150 --> 00:19:34.410
everything has to be done
extraordinarily carefully.

00:19:34.410 --> 00:19:40.280
So what you want is a pulse
which remains equal to t over

00:19:40.280 --> 00:19:42.320
a y bandwidth here.

00:19:42.320 --> 00:19:45.170
Which gets down to 0
very, very fast.

00:19:45.170 --> 00:19:47.880
So the problem is, how do you
design something which gets

00:19:47.880 --> 00:19:50.310
from here down to
here very, very

00:19:50.310 --> 00:19:53.420
quickly and very smoothly.

00:19:53.420 --> 00:19:57.020
You want it to go smoothly
because if you have any

00:19:57.020 --> 00:20:01.030
discontinuities in g of f,
you're back to the problem

00:20:01.030 --> 00:20:05.950
where g of t goes to
0 as 1 over t.

00:20:05.950 --> 00:20:09.150
If you have a slope
discontinuity, g of t is going

00:20:09.150 --> 00:20:12.440
to go to 0 as 1 over
t squared.

00:20:12.440 --> 00:20:15.030
If you have a second derivative
discontinuity, it's

00:20:15.030 --> 00:20:18.580
going to go to 0 as
1 over t cubed.

00:20:18.580 --> 00:20:22.790
Now, 1 over t cubed is not bad,
and filter designers sort

00:20:22.790 --> 00:20:24.430
of live with that.

00:20:24.430 --> 00:20:28.220
So they design these filters
which are raised cosine

00:20:28.220 --> 00:20:35.110
filters, which over the band
here -- someday I'll get a pen

00:20:35.110 --> 00:20:38.660
that works -- are flat.

00:20:38.660 --> 00:20:44.730
Over this band here, from here
to here, this is a squared

00:20:44.730 --> 00:20:47.680
cosine, analytically.

00:20:47.680 --> 00:20:51.410
And a squared cosine is just the
same as a cosine which you

00:20:51.410 --> 00:20:56.100
take and displace up so it's
centered right there.

00:20:56.100 --> 00:21:03.280
Well, excuse me, it's
the same as a sine

00:21:03.280 --> 00:21:05.010
which is centered there.

00:21:05.010 --> 00:21:07.470
Which is what you get when
you square a cosine

00:21:07.470 --> 00:21:12.060
pulse as 1/2 plus.

00:21:12.060 --> 00:21:13.540
Anyway, it looks like this.

00:21:16.360 --> 00:21:19.430
So our problem is, how do you
design a filter which gets

00:21:19.430 --> 00:21:24.930
from here to there quickly but
where the inverse transform

00:21:24.930 --> 00:21:28.310
also goes to 0 relatively
quickly?

00:21:28.310 --> 00:21:33.720
Now, if you want to do this
and you also face the fact

00:21:33.720 --> 00:21:38.670
that in a Nyquist criterion, any
part of g hat of f which

00:21:38.670 --> 00:21:42.660
is imaginary, the Nyquist
criterion says that what do

00:21:42.660 --> 00:21:45.420
you have to do in-band and what
you have to do out of

00:21:45.420 --> 00:21:48.100
band have to add
up there also.

00:21:48.100 --> 00:21:51.460
That doesn't help you at all
in getting from this real

00:21:51.460 --> 00:21:54.770
number t here down to 0.

00:21:54.770 --> 00:21:59.170
So anything you do as a complex
part of g hat of f is

00:21:59.170 --> 00:22:00.770
just wasted.

00:22:00.770 --> 00:22:04.040
I mean, your problem is getting
from t to 0 with a

00:22:04.040 --> 00:22:05.800
smooth waveform.

00:22:05.800 --> 00:22:10.330
You would like to make g
hat of f strictly real.

00:22:10.330 --> 00:22:12.020
You would like to make
it symmetric.

00:22:12.020 --> 00:22:15.100
Why would you like to
make it symmetric?

00:22:15.100 --> 00:22:20.230
Because this thing down here
and this thing up here are

00:22:20.230 --> 00:22:22.030
really part of the
same problem.

00:22:22.030 --> 00:22:25.820
If you find a good way to make
a function go to 0 quickly up

00:22:25.820 --> 00:22:29.980
here, you might as well use
the same thing over here.

00:22:29.980 --> 00:22:33.460
So you might as well wind up
with a function which is

00:22:33.460 --> 00:22:36.540
symmetric and real.

00:22:36.540 --> 00:22:39.860
That leads us into the next
thing we want to look at.

00:22:39.860 --> 00:22:42.350
That's a slightly
flaky argument.

00:22:42.350 --> 00:22:47.230
We're going to find a better
argument as we go.

00:22:47.230 --> 00:22:50.840
What we've said is, the real
part of g hat of f has to

00:22:50.840 --> 00:22:54.970
satisfy this band edged
symmetry condition.

00:22:54.970 --> 00:22:59.860
Choosing the imaginary part
unequal to 0 simply increases

00:22:59.860 --> 00:23:02.320
the energy outside of
the Nyquist band.

00:23:02.320 --> 00:23:09.290
You don't get any effect on
reducing delay out of that.

00:23:09.290 --> 00:23:12.910
Thus, we're going to restrict
g of f to be real.

00:23:12.910 --> 00:23:16.600
And we're going to also restrict
it to be symmetric.

00:23:16.600 --> 00:23:18.630
Although that's less
important.

00:23:18.630 --> 00:23:22.040
Now, when we start to look at
noise, we're going to find out

00:23:22.040 --> 00:23:22.840
something else.

00:23:22.840 --> 00:23:25.360
We're going to find out that we
want to make the magnitude

00:23:25.360 --> 00:23:30.790
of p of f equal to the
magnitude of g of f.

00:23:30.790 --> 00:23:34.100
Now, magnitude doesn't
make any difference.

00:23:34.100 --> 00:23:37.560
So we want the frequency
characteristic of p of f to be

00:23:37.560 --> 00:23:41.770
the same as the frequency
characteristic of q of f.

00:23:41.770 --> 00:23:45.270
In other words, there's no
point descending a p of f

00:23:45.270 --> 00:23:49.570
which is a perfect sinc function
and then using a very

00:23:49.570 --> 00:23:51.620
sloppy q of f.

00:23:51.620 --> 00:23:53.440
Because that's kind of silly.

00:23:53.440 --> 00:23:57.100
There's no point to using it
very sloppy p of f and then

00:23:57.100 --> 00:24:01.040
using a very sharp q of f,
because somehow when you start

00:24:01.040 --> 00:24:05.530
looking at noise, you're going
to lose everything.

00:24:05.530 --> 00:24:10.350
Because the noise gets added
to this pulse that you're

00:24:10.350 --> 00:24:11.440
transmitting.

00:24:11.440 --> 00:24:15.350
So, what we're going to find
when we look at this later, is

00:24:15.350 --> 00:24:17.310
we really want to choose
the magnitudes

00:24:17.310 --> 00:24:20.970
of these to be equal.

00:24:20.970 --> 00:24:26.180
Since g hat of f is equal to
this product, and since we've

00:24:26.180 --> 00:24:29.920
already decided we want to
make this real, what this

00:24:29.920 --> 00:24:36.110
means is that q hat of f is
going to be equal to p complex

00:24:36.110 --> 00:24:37.950
conjugate of f.

00:24:37.950 --> 00:24:41.590
What that means is the filter q
of t should be equal to the

00:24:41.590 --> 00:24:44.860
complex conjugate
of p of minus t.

00:24:44.860 --> 00:24:50.410
You take a p of t, and you
turn it around like this.

00:24:50.410 --> 00:24:54.400
If p of t is real, this is
called a matched filter.

00:24:54.400 --> 00:24:57.000
And it's a filter which sort of
collects everything which

00:24:57.000 --> 00:25:01.560
is in p of t, and all brings it
up to 1p, which is what we

00:25:01.560 --> 00:25:03.300
would like to do here.

00:25:03.300 --> 00:25:08.110
So, anyway, when we do this it
means that g of t is going to

00:25:08.110 --> 00:25:10.850
be this convolution of p of t.

00:25:10.850 --> 00:25:14.200
And q of t, which we can now
write as the integral of p of

00:25:14.200 --> 00:25:19.920
tau, times p complex conjugate
of t minus tau, p tau.

00:25:19.920 --> 00:25:24.520
And what we're interested in is,
is this going to be ideal

00:25:24.520 --> 00:25:25.272
Nyquist or not.

00:25:25.272 --> 00:25:26.990
And what does that mean if
it is ideal Nyquist?

00:25:35.660 --> 00:25:40.680
If g of t is ideal Nyquist, it
means that the samples of g of

00:25:40.680 --> 00:25:45.890
t, times k times this signaling
interval, t, have to

00:25:45.890 --> 00:25:49.360
have the property that these
samples are equal to 1 for k

00:25:49.360 --> 00:25:53.900
equals 0, and 0 for
k unequal to 0.

00:25:53.900 --> 00:25:55.760
What does that mean?

00:25:55.760 --> 00:25:59.510
If you look at this, that
kind of looks like these

00:25:59.510 --> 00:26:02.590
orthogonality conditions that
we've been dealing with,

00:26:02.590 --> 00:26:04.210
doesn't it?

00:26:04.210 --> 00:26:07.460
So that what it says is that
this set of functions, p

00:26:07.460 --> 00:26:09.220
of t minus k t.

00:26:09.220 --> 00:26:14.630
In other words, the pulse p of
t and all of it shifts by t,

00:26:14.630 --> 00:26:17.310
2t, 3t, and everything else.

00:26:17.310 --> 00:26:21.970
This set of pulses all have to
be orthogonal to each other.

00:26:21.970 --> 00:26:24.890
And the thing which is a little
screwed up in the notes

00:26:24.890 --> 00:26:27.750
is whether these are
orthogonal or

00:26:27.750 --> 00:26:29.750
orthonormal, or what.

00:26:29.750 --> 00:26:31.320
And you need to make
a few changes to

00:26:31.320 --> 00:26:34.100
make all of that right.

00:26:34.100 --> 00:26:36.720
These functions are all
real L2 functions.

00:26:40.250 --> 00:26:43.030
But we're going to allow the
possibility of complex

00:26:43.030 --> 00:26:44.190
functions for later.

00:26:44.190 --> 00:26:46.440
In other words, if we're
transmitting a baseband

00:26:46.440 --> 00:26:50.120
waveform on a channel,
how do you transmit

00:26:50.120 --> 00:26:51.370
an imaginary waveform?

00:26:53.800 --> 00:26:57.910
Well, I've never seen anything
in electromagnetics, or in

00:26:57.910 --> 00:27:00.590
optics, or anything else,
that lets me transmit

00:27:00.590 --> 00:27:02.940
an imaginary waveform.

00:27:02.940 --> 00:27:05.110
These are not physical.

00:27:05.110 --> 00:27:07.320
We will often think of baseband

00:27:07.320 --> 00:27:09.880
waveforms that are imaginary.

00:27:09.880 --> 00:27:12.090
Real and imaginary complex.

00:27:12.090 --> 00:27:18.700
And when we translate them up
to baseband, we'll find

00:27:18.700 --> 00:27:19.700
something real.

00:27:19.700 --> 00:27:21.720
But the actual waveforms
that get

00:27:21.720 --> 00:27:25.240
transmitted are always real.

00:27:25.240 --> 00:27:27.430
There's no way you
can avoid that.

00:27:27.430 --> 00:27:29.140
That's real life.

00:27:29.140 --> 00:27:30.550
Real life is real.

00:27:30.550 --> 00:27:31.990
That's why they call
it real, I guess.

00:27:31.990 --> 00:27:34.300
That's why they call
it real life.

00:27:34.300 --> 00:27:36.520
I don't know.

00:27:36.520 --> 00:27:41.720
I mean it's more real than
something imaginary, isn't it?

00:27:41.720 --> 00:27:45.430
So, anyway, what gets
transmitted is real.

00:27:45.430 --> 00:27:50.750
But we'll allow p of t to be
complex just for when we start

00:27:50.750 --> 00:27:56.030
dealing with something called
QAM, which is our next topic.

00:27:56.030 --> 00:27:59.860
So in vector terms, the integral
of u of tau times q

00:27:59.860 --> 00:28:03.900
of k t minus tau is the
projection of u

00:28:03.900 --> 00:28:08.100
of t onto this waveform.

00:28:08.100 --> 00:28:11.360
And partly for that reason, q
of t it's called the matched

00:28:11.360 --> 00:28:12.540
filter to p of t.

00:28:12.540 --> 00:28:17.060
In other words, you use this
waveform here as a way of

00:28:17.060 --> 00:28:21.950
selecting out the parts of this
waveform u of tau, u of

00:28:21.950 --> 00:28:24.680
t, that we're interested in.

00:28:24.680 --> 00:28:29.900
So that any way you look at it,
we're going to use a pulse

00:28:29.900 --> 00:28:36.400
waveform, p of t, which has this
property that its shifts

00:28:36.400 --> 00:28:38.640
are all orthogonal
to each other.

00:28:38.640 --> 00:28:42.285
When we start studying noise,
you will be very thankful that

00:28:42.285 --> 00:28:44.040
we did this.

00:28:44.040 --> 00:28:46.780
Because when you use pulses that
are orthogonal to each

00:28:46.780 --> 00:28:49.410
other, you can break
up the noise into

00:28:49.410 --> 00:28:51.390
an orthogonal expansion.

00:28:51.390 --> 00:28:54.190
And what goes on at one place
is completely independent of

00:28:54.190 --> 00:28:56.360
what goes on at every
other place.

00:28:56.360 --> 00:28:59.190
And we'll find out about
this as we go.

00:28:59.190 --> 00:29:03.450
But, anyway, we have the nice
property now, that anytime we

00:29:03.450 --> 00:29:09.130
find a function g of t, that
satisfies the Nyquist

00:29:09.130 --> 00:29:14.770
criterion And any time we choose
p of t and g of t so

00:29:14.770 --> 00:29:19.100
that their Fourier transforms
have the same magnitude, then

00:29:19.100 --> 00:29:23.330
presto, we have freely
gotten a set

00:29:23.330 --> 00:29:26.200
of orthonormal functions.

00:29:26.200 --> 00:29:29.130
Which just comes out
in the wash.

00:29:29.130 --> 00:29:34.210
Before we worked very hard to
get these truncated sinusoid

00:29:34.210 --> 00:29:39.310
expansions and sinc weighted
sinusoid expansions, and all

00:29:39.310 --> 00:29:41.900
of this stuff to generate
different

00:29:41.900 --> 00:29:45.610
orthonormal sets of waveforms.

00:29:45.610 --> 00:29:48.600
Suddenly, we just have an
orthonormal set of waveforms

00:29:48.600 --> 00:29:52.040
and a very large set of
orthonormal waveforms popping

00:29:52.040 --> 00:29:54.840
up and staring us in
the face here.

00:29:54.840 --> 00:29:57.610
And in fact these are the
waveforms we're going to use

00:29:57.610 --> 00:30:00.230
for communication, so
they're nice things.

00:30:00.230 --> 00:30:03.390
Nobody uses sinc functions
for communication.

00:30:03.390 --> 00:30:05.570
Nobody uses rectangular
functions.

00:30:05.570 --> 00:30:08.720
You can't use either one of
them because rectangular

00:30:08.720 --> 00:30:12.680
functions have lousy frequency
characteristics.

00:30:12.680 --> 00:30:15.760
Sinc functions have lousy
time characteristics.

00:30:15.760 --> 00:30:20.330
These functions p of t are
sort of nice compromises.

00:30:20.330 --> 00:30:21.760
And they're orthonormal,
again.

00:30:26.110 --> 00:30:28.120
Let's go on to the rest
of modulation.

00:30:30.810 --> 00:30:34.710
We've been talking about
baseband modulation.

00:30:34.710 --> 00:30:37.490
And when we're thinking about
PAM, pulse amplitude

00:30:37.490 --> 00:30:42.000
modulation, we are thinking in
terms of this sequence of

00:30:42.000 --> 00:30:44.160
symbols coming in.

00:30:44.160 --> 00:30:46.590
The symbols being turned
into signals.

00:30:46.590 --> 00:30:49.910
The signals been turned
into waveforms.

00:30:49.910 --> 00:30:53.990
And what comes out here, then,
is some baseband waveform.

00:30:53.990 --> 00:30:56.420
That's what the Nyquist
criterion is designed for.

00:30:56.420 --> 00:31:01.240
How do you make a baseband
waveform which is very sharply

00:31:01.240 --> 00:31:04.020
cut off in frequency?

00:31:04.020 --> 00:31:07.180
Usually what we want to transmit
is something at

00:31:07.180 --> 00:31:10.310
passband, so we somehow want
to take this baseband

00:31:10.310 --> 00:31:14.020
waveform, convert it
up to passband.

00:31:14.020 --> 00:31:16.480
We're then going to transmit
it on a channel.

00:31:16.480 --> 00:31:23.280
I mean, why do we have to turn
it into passband anyway?

00:31:23.280 --> 00:31:25.860
Well, if you did everything at
baseband, you wouldn't have

00:31:25.860 --> 00:31:28.330
more than one channel
available.

00:31:28.330 --> 00:31:30.120
I mean, wireless, you
know you have all

00:31:30.120 --> 00:31:31.880
these different channels.

00:31:31.880 --> 00:31:34.990
The way it's done today, you
use something called CDMA,

00:31:34.990 --> 00:31:38.770
where you're not breaking
into narrow channels.

00:31:38.770 --> 00:31:41.740
But you should understand how
to break it into narrow

00:31:41.740 --> 00:31:45.930
channels before understanding
how to look at it as

00:31:45.930 --> 00:31:47.920
co-division multiple access.

00:31:47.920 --> 00:31:50.600
If you're using optics, you
want to send things in

00:31:50.600 --> 00:31:53.160
different frequency bands.

00:31:53.160 --> 00:31:57.060
Whether it's optics or
electromagnetics simply

00:31:57.060 --> 00:32:00.020
determines the frequency band
you're looking at anyway.

00:32:00.020 --> 00:32:03.540
You can't propagate things
in every frequency band.

00:32:03.540 --> 00:32:06.910
Things don't propagate very
well at baseband.

00:32:06.910 --> 00:32:10.130
So for all of these reasons,
we want to convert these

00:32:10.130 --> 00:32:13.430
baseband waveforms
to passband.

00:32:13.430 --> 00:32:15.900
Why don't we generate them
originally at passband?

00:32:20.070 --> 00:32:23.800
Because things are changing
too fast there.

00:32:23.800 --> 00:32:26.990
I mean, you want to do digital
signal processing to massage

00:32:26.990 --> 00:32:29.110
these signals, to do
all the filtering.

00:32:29.110 --> 00:32:31.720
To do most of the other
things you want to do.

00:32:31.720 --> 00:32:34.590
And you can do those very
easily at baseband.

00:32:34.590 --> 00:32:36.920
And it's hard to do
them at passband.

00:32:36.920 --> 00:32:41.330
So the generic way things
are done is to first

00:32:41.330 --> 00:32:42.970
take a signal sequence.

00:32:42.970 --> 00:32:45.410
Convert it into a baseband
waveform.

00:32:45.410 --> 00:32:48.620
Take the baseband waveform,
convert it up to passband.

00:32:48.620 --> 00:32:51.040
And the passband is appropriate
to whatever the

00:32:51.040 --> 00:32:52.100
channel is.

00:32:52.100 --> 00:32:52.910
You send it.

00:32:52.910 --> 00:32:57.320
You take it down from passband
back to baseband, and then you

00:32:57.320 --> 00:33:00.570
filter and sample and get
the waveform back again.

00:33:00.570 --> 00:33:01.890
You don't have to do this.

00:33:01.890 --> 00:33:06.320
We could generate the waveform
directly at passband.

00:33:06.320 --> 00:33:08.980
There's a lot of research going
on now trying to do

00:33:08.980 --> 00:33:13.720
this, which is trying to make
things a little bit simpler.

00:33:13.720 --> 00:33:15.870
Well, it's not really trying
to make things simpler.

00:33:15.870 --> 00:33:18.770
It's really trying to trying
to pull a fast one

00:33:18.770 --> 00:33:21.340
on the FCC, I think.

00:33:21.340 --> 00:33:23.930
But, anyway, this
is being done.

00:33:23.930 --> 00:33:27.610
And it doesn't go through this
two-step process on the way.

00:33:27.610 --> 00:33:31.670
So it saves a little
extra work.

00:33:34.220 --> 00:33:39.500
So what we're going to do with
our PAM waveform, them, we're

00:33:39.500 --> 00:33:43.530
going to take u of t, which
is the PAM waveform.

00:33:43.530 --> 00:33:44.860
And I'm sure you've
all seen this.

00:33:44.860 --> 00:33:46.720
I hope you've all seen it
somewhere or other.

00:33:46.720 --> 00:33:49.370
Because everybody likes
to talk about this.

00:33:49.370 --> 00:33:53.640
Because you don't have to know
anything to talk about this.

00:33:53.640 --> 00:33:55.200
So you take u of t.

00:33:55.200 --> 00:33:59.400
We multiply it by e to
the 2 pi i f c t.

00:33:59.400 --> 00:34:02.550
In other words, you multiply
it by a sine wave.

00:34:02.550 --> 00:34:05.080
A complex sine wave.

00:34:05.080 --> 00:34:08.110
When you do this, this
thing is complex.

00:34:08.110 --> 00:34:09.910
You can't transmit it.

00:34:09.910 --> 00:34:11.290
So what do we do about that?

00:34:11.290 --> 00:34:12.660
Well, this is real.

00:34:12.660 --> 00:34:14.280
This is complex.

00:34:14.280 --> 00:34:18.140
If we add the complex conjugate
of this, this plus

00:34:18.140 --> 00:34:20.980
its complex conjugate
is real again.

00:34:20.980 --> 00:34:26.270
So we transmit this times this
complex sinusoid, plus this

00:34:26.270 --> 00:34:30.250
other complex sinusoid,
which is the complex

00:34:30.250 --> 00:34:31.650
conjugate of this.

00:34:31.650 --> 00:34:37.010
And you get 2 u of t times
the cosine of 2 pi f c t.

00:34:37.010 --> 00:34:39.110
Which is just what you would
do if you were implementing

00:34:39.110 --> 00:34:39.770
this anyway.

00:34:39.770 --> 00:34:44.180
You take the waveform u of t,
you multiply it by cosine wave

00:34:44.180 --> 00:34:46.010
at the carrier frequency.

00:34:46.010 --> 00:34:49.040
And bingo, up it goes to
carrier frequency.

00:34:49.040 --> 00:34:50.960
This is real.

00:34:50.960 --> 00:34:52.690
This was real.

00:34:52.690 --> 00:34:55.030
And everybody's happy.

00:34:55.030 --> 00:34:59.760
And in frequency, what this
looks like, since all we're

00:34:59.760 --> 00:35:03.840
doing here is just, by this
shift formula that we have for

00:35:03.840 --> 00:35:10.070
Fourier transforms, the
multiplying a time waveform by

00:35:10.070 --> 00:35:13.390
an exponential --

00:35:13.390 --> 00:35:20.180
by a complex sinusoid, is simply
is the same as shifting

00:35:20.180 --> 00:35:21.760
the frequency response.

00:35:21.760 --> 00:35:25.170
So the Fourier transform
of this is u hat of

00:35:25.170 --> 00:35:26.850
that minus f c.

00:35:26.850 --> 00:35:30.440
The Fourier transform of u f
t times this is u hat of

00:35:30.440 --> 00:35:32.160
f the plus f c.

00:35:32.160 --> 00:35:35.200
And you start out with this
waveform, whatever

00:35:35.200 --> 00:35:38.720
that shape is here.

00:35:38.720 --> 00:35:42.000
This, I tried to draw to satisfy
the Nyquist criteria,

00:35:42.000 --> 00:35:42.780
which it does it.

00:35:42.780 --> 00:35:46.230
Satisfies that band edge
symmetry condition.

00:35:46.230 --> 00:35:48.060
So this gets shifted up.

00:35:48.060 --> 00:35:50.200
It also gets shifted down.

00:35:50.200 --> 00:35:57.400
And the transmitted waveform
then exists in the band which

00:35:57.400 --> 00:36:03.130
I'll call b sub u. b sub u is
the bandwidth of u of t.

00:36:03.130 --> 00:36:05.440
Namely, it's this baseband
bandwidth that we've been

00:36:05.440 --> 00:36:06.810
talking about.

00:36:06.810 --> 00:36:11.740
But, unfortunately, when we do
this thing shifted up and this

00:36:11.740 --> 00:36:15.820
thing shifted down, the overall
bandwidth here is now

00:36:15.820 --> 00:36:18.870
twice as much as
it was before.

00:36:18.870 --> 00:36:21.960
Now, every communication
engineer in the world, I

00:36:21.960 --> 00:36:25.540
think, measures bandwidth
in the same way.

00:36:25.540 --> 00:36:28.220
When you talk about bandwidth,
you're always talking about

00:36:28.220 --> 00:36:30.430
positive bandwidth.

00:36:30.430 --> 00:36:35.570
Because, back a long time ago,
communication engineers didn't

00:36:35.570 --> 00:36:37.350
know about complex sinusoids.

00:36:37.350 --> 00:36:42.000
So everything was done in terms
of cosines and sines.

00:36:42.000 --> 00:36:44.770
Which was very good, because
back then communication

00:36:44.770 --> 00:36:47.620
engineers didn't have
much else to do.

00:36:47.620 --> 00:36:51.270
So they had to learn to write
everything twice.

00:36:51.270 --> 00:36:54.410
And now, since we have so many
other things to worry about,

00:36:54.410 --> 00:36:56.890
we want to use complex sinusoids
and only write

00:36:56.890 --> 00:36:58.120
things once.

00:36:58.120 --> 00:37:01.610
Well, in fact we have to write
it twice here, but we don't

00:37:01.610 --> 00:37:04.720
write it twice very often.

00:37:04.720 --> 00:37:08.720
But, anyway, when this thing,
which exists for minus b u up

00:37:08.720 --> 00:37:12.820
to plus b u gets translated
up in frequency, we have

00:37:12.820 --> 00:37:18.060
something which exists from f
c minus b u to f c plus b u.

00:37:18.060 --> 00:37:21.310
And this negative band
is down here.

00:37:21.310 --> 00:37:25.470
Now, we're going to assume
everywhere, usually without

00:37:25.470 --> 00:37:30.840
talking about it, that when we
modulate this up in frequency,

00:37:30.840 --> 00:37:35.840
that the bandwidth here, this
b u here, is less than the

00:37:35.840 --> 00:37:37.580
carrier frequency.

00:37:37.580 --> 00:37:40.330
In other words, when we
translate it up in frequency,

00:37:40.330 --> 00:37:44.300
this and this do not intersect
with each other.

00:37:44.300 --> 00:37:46.910
If this and this intersected
with each other, it would be

00:37:46.910 --> 00:37:49.220
something very much
like aliasing.

00:37:49.220 --> 00:37:52.210
You just couldn't to sort
out from this, plus

00:37:52.210 --> 00:37:55.540
this, what this is.

00:37:55.540 --> 00:37:59.120
Here, if I drew it on paper at
least, if you tell me what

00:37:59.120 --> 00:38:04.100
this is, I can figure
out what that is.

00:38:04.100 --> 00:38:08.520
Namely, demodulating it
independent of how we design

00:38:08.520 --> 00:38:12.470
the demodulator is, in some
sense trivial, too.

00:38:12.470 --> 00:38:14.720
You just take this and
you bring it back

00:38:14.720 --> 00:38:17.520
down to passband again.

00:38:17.520 --> 00:38:21.200
Well, anyway, since
communication engineers define

00:38:21.200 --> 00:38:25.410
bandwidth in terms of positive
frequencies, the bandwidth of

00:38:25.410 --> 00:38:29.590
this baseband waveform
is b sub u.

00:38:29.590 --> 00:38:33.220
The bandwidth of this waveform
is 2 b sub u.

00:38:35.860 --> 00:38:38.420
You can't get away from that.

00:38:38.420 --> 00:38:42.200
You have doubled the bandwidth,
and you wind up

00:38:42.200 --> 00:38:44.870
with this plus this.

00:38:44.870 --> 00:38:47.060
And this looks kind
of strange.

00:38:47.060 --> 00:38:49.590
So let's try to sort it out.

00:38:54.300 --> 00:38:59.240
The baseband waveform
is limited to b.

00:38:59.240 --> 00:39:01.620
If it's shifted up to passband,
the passband

00:39:01.620 --> 00:39:05.270
waveform becomes
limited to 2 b.

00:39:05.270 --> 00:39:09.320
Might as well put these
little u's in here.

00:39:09.320 --> 00:39:13.530
Because putting in little u's
here is a way of getting

00:39:13.530 --> 00:39:17.570
around the problem of talking
about baseband

00:39:17.570 --> 00:39:19.150
waveforms for a while.

00:39:19.150 --> 00:39:21.800
And then talking about
passband waveforms.

00:39:21.800 --> 00:39:24.810
And one of them is always
twice the other one.

00:39:29.010 --> 00:39:37.420
If you filter out this lower
band here, now, what's the

00:39:37.420 --> 00:39:41.420
lower sideband here?

00:39:41.420 --> 00:39:45.010
Who thinks the lower
sideband is this?

00:39:45.010 --> 00:39:49.550
Who thinks the lower sideband
is this little thing here?

00:39:49.550 --> 00:39:51.230
Well, you all should
think that because

00:39:51.230 --> 00:39:52.600
that's what it is.

00:39:52.600 --> 00:39:55.350
So when people talk about
sidebands, what they're

00:39:55.350 --> 00:39:59.880
referring to, it's not, this
is one sideband and this is

00:39:59.880 --> 00:40:00.890
another sideband.

00:40:00.890 --> 00:40:04.890
What they're referring to is
this is one sideband and this

00:40:04.890 --> 00:40:07.910
is one sideband.

00:40:07.910 --> 00:40:10.710
This is stuff you all
know, I'm sure.

00:40:10.710 --> 00:40:12.180
But haven't thought
about for a while.

00:40:15.510 --> 00:40:21.410
If you filter out this lower
sideband, then this resulting

00:40:21.410 --> 00:40:29.470
waveform, which now runs only
in this upper sideband here,

00:40:29.470 --> 00:40:32.270
and since it has to be real it
has this accompanying lower

00:40:32.270 --> 00:40:36.160
sideband down here going with
it, but you then have the

00:40:36.160 --> 00:40:41.350
frequency band b sub u
like you had before.

00:40:41.350 --> 00:40:45.170
So, in principle, you can design
a communication system

00:40:45.170 --> 00:40:49.010
by translating things up in
frequency by the carrier, and

00:40:49.010 --> 00:40:52.440
then chopping off that
lower sideband.

00:40:52.440 --> 00:40:55.450
And then you haven't gained
anything in frequency.

00:40:55.450 --> 00:40:59.390
And everything is essentially
the same as it was before.

00:40:59.390 --> 00:41:02.160
Now, this used to be a very
popular thing to do with

00:41:02.160 --> 00:41:03.920
analog communication.

00:41:03.920 --> 00:41:07.440
Partly because communication
engineers felt the only thing

00:41:07.440 --> 00:41:10.690
they had to study back then was,
how do you change things

00:41:10.690 --> 00:41:13.020
in frequency and how do
you build filters.

00:41:13.020 --> 00:41:14.300
So they're very good at this.

00:41:14.300 --> 00:41:15.720
They love to do this.

00:41:15.720 --> 00:41:17.300
And this was their
preferred way of

00:41:17.300 --> 00:41:18.380
dealing with the problem.

00:41:18.380 --> 00:41:22.000
They just got rid of that
sideband, sent this positive

00:41:22.000 --> 00:41:24.720
sideband, and then somehow
they would get it

00:41:24.720 --> 00:41:27.100
back down to here.

00:41:27.100 --> 00:41:30.150
Single sideband is hardly
ever used for digital

00:41:30.150 --> 00:41:31.510
communication.

00:41:31.510 --> 00:41:35.300
It's not the usual way
of doing things.

00:41:35.300 --> 00:41:39.320
Partly because these filters
become very tricky when you're

00:41:39.320 --> 00:41:42.820
trying to send data
at a high speed.

00:41:42.820 --> 00:41:46.840
All sorts of noise in here when
you try to do this and

00:41:46.840 --> 00:41:49.510
you don't do it quite right.

00:41:49.510 --> 00:41:54.320
Affects you enormously, and
people have just seen over the

00:41:54.320 --> 00:41:58.410
years that those systems don't
work as well as the systems

00:41:58.410 --> 00:42:01.940
which do something else that
we'll talk about later.

00:42:01.940 --> 00:42:04.900
Namely, QAM, which is what
we want to talk about.

00:42:08.040 --> 00:42:10.220
If you don't do this filtering,
you call this

00:42:10.220 --> 00:42:14.840
system a double sideband pulse
amplitude modulation system.

00:42:14.840 --> 00:42:17.520
Which is what happens when
you use pulse amplitude

00:42:17.520 --> 00:42:18.830
modulation.

00:42:18.830 --> 00:42:22.410
Namely, this baseband choosing a
baseband pulse, which is the

00:42:22.410 --> 00:42:23.530
thing we're interested in.

00:42:23.530 --> 00:42:26.290
Because that's where the Nyquist
criterion and all this

00:42:26.290 --> 00:42:28.160
neat stuff comes in.

00:42:28.160 --> 00:42:30.520
And then you translate
it up in frequency.

00:42:30.520 --> 00:42:33.640
And you waste half the
available frequency.

00:42:33.640 --> 00:42:37.390
If you don't care about
frequency management, this is

00:42:37.390 --> 00:42:38.650
a fine thing to do.

00:42:38.650 --> 00:42:40.580
Nothing wrong with it.

00:42:40.580 --> 00:42:42.360
You just waste some frequency.

00:42:42.360 --> 00:42:44.490
It's the cheapest way
to do things.

00:42:44.490 --> 00:42:46.270
And there are lots of
cheap communication

00:42:46.270 --> 00:42:47.720
systems which do this.

00:42:50.380 --> 00:42:55.320
But if you're trying to send
data, if you're concerned

00:42:55.320 --> 00:43:00.630
about the frequency efficiency
of the system, then you're not

00:43:00.630 --> 00:43:01.880
going to do this.

00:43:05.230 --> 00:43:11.060
So what we're going to do is do
something called quadrature

00:43:11.060 --> 00:43:12.310
amplitude modulation.

00:43:15.090 --> 00:43:19.190
QAM, which is what quadrature
amplitude modulation stands

00:43:19.190 --> 00:43:23.890
for, solves the frequency
waste problem of double

00:43:23.890 --> 00:43:28.650
sideband amplitude modulation
by using a complex baseband

00:43:28.650 --> 00:43:31.430
waveform u of t.

00:43:31.430 --> 00:43:35.990
Before, what we were talking
about is these signals which

00:43:35.990 --> 00:43:37.910
were one-dimensional signals.

00:43:37.910 --> 00:43:40.120
We would use these
one-dimensional signals to

00:43:40.120 --> 00:43:44.260
modulate this waveform p of t.

00:43:44.260 --> 00:43:46.830
And we wound up with
a real waveform.

00:43:46.830 --> 00:43:50.600
Now what we're going to do is
use complex signals, which

00:43:50.600 --> 00:43:53.500
then have two dimensions.

00:43:53.500 --> 00:43:57.420
Use them to modulate
the same sort of

00:43:57.420 --> 00:44:00.500
pulse, p of t, usually.

00:44:00.500 --> 00:44:03.740
And wind up with a complex
baseband waveform.

00:44:03.740 --> 00:44:06.600
And then we're going to take
that baseband waveform,

00:44:06.600 --> 00:44:08.630
translate it up in frequency.

00:44:08.630 --> 00:44:11.290
So when we do this,
what do we get?

00:44:11.290 --> 00:44:15.430
We need a waveform to transmit
which is real.

00:44:15.430 --> 00:44:20.460
So we're going to take u
of t, which is complex.

00:44:20.460 --> 00:44:23.110
Translate, shift it
up in frequency

00:44:23.110 --> 00:44:25.070
by the carrier frequency.

00:44:25.070 --> 00:44:30.230
So we get u of t times e
to the 2 pi i f c t.

00:44:30.230 --> 00:44:33.870
To make it real, we have to
add all this junk down at

00:44:33.870 --> 00:44:36.530
negative frequencies, which we'd
just as soon not think

00:44:36.530 --> 00:44:39.210
about if we didn't have to.

00:44:39.210 --> 00:44:40.850
But they have to be there.

00:44:40.850 --> 00:44:46.160
So our total waveform is x sub
t equal this sum of things.

00:44:46.160 --> 00:44:50.160
When you look at this and you
take the real part of this,

00:44:50.160 --> 00:44:53.295
the real part of this, the
imaginary part of this, and

00:44:53.295 --> 00:44:56.860
the imaginary part of this, as
I'm sure most of you have seen

00:44:56.860 --> 00:45:02.430
before, x of t becomes 2 times
the real part of u of t.

00:45:02.430 --> 00:45:04.990
Times this complex
exponential.

00:45:09.180 --> 00:45:13.140
Which is equal to 2 times the
real part of u of t times this

00:45:13.140 --> 00:45:18.200
cosine wave minus 2 times the
imaginary part of u of t times

00:45:18.200 --> 00:45:19.350
a sine wave.

00:45:19.350 --> 00:45:26.400
Which says, you take this real
part of this baseband waveform

00:45:26.400 --> 00:45:27.660
you've generated.

00:45:27.660 --> 00:45:30.170
You multiply it by
cosine wave.

00:45:30.170 --> 00:45:32.290
You take the imaginary part,
and you multiply

00:45:32.290 --> 00:45:33.670
it by a sine wave.

00:45:33.670 --> 00:45:36.640
For implementation, is one thing
going to be real and the

00:45:36.640 --> 00:45:38.550
other thing imaginary?

00:45:38.550 --> 00:45:38.800
No.

00:45:38.800 --> 00:45:42.510
You can't make things that are
imaginary, so you just deal

00:45:42.510 --> 00:45:44.600
with two real waveforms.

00:45:44.600 --> 00:45:47.180
And you call one of them the
real part of u of t.

00:45:47.180 --> 00:45:49.615
You call the other one the
imaginary part of u of t.

00:45:49.615 --> 00:45:52.180
And the imaginary part of
u of t is in fact a

00:45:52.180 --> 00:45:53.780
real waveform again.

00:45:53.780 --> 00:45:57.470
So all this imaginary stuff is
just in our imagination.

00:45:57.470 --> 00:46:00.030
And the actual waveforms
look like this.

00:46:00.030 --> 00:46:03.730
You take one waveform
which is generated.

00:46:03.730 --> 00:46:05.320
Multiply it by cosine.

00:46:05.320 --> 00:46:07.350
Take another waveform.

00:46:07.350 --> 00:46:10.940
Multiply it by sine.

00:46:10.940 --> 00:46:14.800
What about these factors
of two here?

00:46:14.800 --> 00:46:19.530
The factors of two are things
that drive everybody crazy.

00:46:19.530 --> 00:46:23.330
Everyone I talk to, I ask them
how they manage to keep all

00:46:23.330 --> 00:46:24.430
this straight.

00:46:24.430 --> 00:46:27.180
And they all give me the same
answer: they say they can't

00:46:27.180 --> 00:46:27.930
keep it straight.

00:46:27.930 --> 00:46:30.680
It's just too hard to keep it
straight, and after they're

00:46:30.680 --> 00:46:36.390
all done, they try to figure out
what the answer should be

00:46:36.390 --> 00:46:39.310
by looking at energy
or something else.

00:46:39.310 --> 00:46:44.310
Or by just fudging things, which
is what most people do.

00:46:44.310 --> 00:46:48.680
And part of the trouble is,
you can do this two ways.

00:46:48.680 --> 00:46:50.790
You can do it three
ways, in fact.

00:46:50.790 --> 00:46:56.730
You can either I want to view
x of t as being some real

00:46:56.730 --> 00:47:01.910
function times the cosine wave
and leave out that 2.

00:47:01.910 --> 00:47:06.330
And some other function,
imaginary part of u t times

00:47:06.330 --> 00:47:08.570
the sine, and leave
out the 2 there.

00:47:08.570 --> 00:47:09.820
And many people do that.

00:47:12.790 --> 00:47:14.310
And would that be better?

00:47:14.310 --> 00:47:17.470
But when you put the 2 in with
the cosines and the sines, you

00:47:17.470 --> 00:47:21.580
have to put a 1/2 in here
and a 1/2 in here.

00:47:21.580 --> 00:47:24.650
Most people, when they think
about these things for a long

00:47:24.650 --> 00:47:28.360
time, they find it's far more
convenient to be able to think

00:47:28.360 --> 00:47:35.610
of this positive frequency part
of x of t as just u of t

00:47:35.610 --> 00:47:37.100
translated up in frequency.

00:47:37.100 --> 00:47:40.050
In other words, they like
this diagram here.

00:47:44.960 --> 00:47:46.540
Which says you take this.

00:47:46.540 --> 00:47:48.260
You translate it up.

00:47:48.260 --> 00:47:51.180
And after you translate it up,
you create something else down

00:47:51.180 --> 00:47:53.540
here, to make the whole
thing real.

00:47:53.540 --> 00:47:57.410
But what we think of is this
going up to this all the time.

00:47:57.410 --> 00:47:58.830
So that's one way of doing it.

00:47:58.830 --> 00:48:01.720
The other way of doing it is
thinking in terms of sines and

00:48:01.720 --> 00:48:05.370
cosines, removing that 2 here.

00:48:05.370 --> 00:48:10.190
And who can imagine what the
third way of doing it is?

00:48:10.190 --> 00:48:11.680
Just split the difference.

00:48:11.680 --> 00:48:15.030
Which means you put a
square root of 2 in.

00:48:15.030 --> 00:48:17.610
And, in fact, that makes
a whole lot of sense.

00:48:17.610 --> 00:48:22.160
Because then when you take the
waveform u of t, translate it

00:48:22.160 --> 00:48:23.110
up in frequency.

00:48:23.110 --> 00:48:26.710
Make it real, you have the same
energy in the baseband

00:48:26.710 --> 00:48:29.960
waveform as you have in
the passband waveform.

00:48:29.960 --> 00:48:30.980
I'm not going to show that.

00:48:30.980 --> 00:48:35.060
You can just figure it out
relatively easily.

00:48:35.060 --> 00:48:41.040
I mean, you know that the power
in a cosine wave is 1/2,

00:48:41.040 --> 00:48:43.250
the power in a sine
wave is 1/2.

00:48:43.250 --> 00:48:48.660
So when you're multiplying
things by 1/2 in here -- well,

00:48:48.660 --> 00:48:51.210
this has a power of 1/2.

00:48:51.210 --> 00:48:54.410
This has a power of 1/2.

00:48:54.410 --> 00:48:57.840
And when you start looking at
power here, you find out that

00:48:57.840 --> 00:49:01.730
that has to be a square root
of 2 rather than 2.

00:49:01.730 --> 00:49:03.450
So there are three
ways of doing it.

00:49:03.450 --> 00:49:06.710
People do it any one of
three different ways.

00:49:06.710 --> 00:49:09.240
It doesn't make any difference,
because any paper

00:49:09.240 --> 00:49:12.900
you read will start out doing
it one way and then, as they

00:49:12.900 --> 00:49:15.740
go through various equations,
they will start doing it a

00:49:15.740 --> 00:49:16.780
different way.

00:49:16.780 --> 00:49:18.820
And these factors of
2 multiply and

00:49:18.820 --> 00:49:20.450
multiply and multiply.

00:49:20.450 --> 00:49:23.510
And in big complicated papers,
sometimes I've found that

00:49:23.510 --> 00:49:27.370
these add up to a factor of
8 or 16 or something else.

00:49:27.370 --> 00:49:29.910
By the time people
are all done.

00:49:29.910 --> 00:49:33.510
And we will explain later why,
in fact, you don't really care

00:49:33.510 --> 00:49:36.140
about that very much.

00:49:36.140 --> 00:49:37.620
But you can't just
totally ignore

00:49:37.620 --> 00:49:40.510
those factors, so anyway.

00:49:40.510 --> 00:49:43.270
This is the way we will do it.

00:49:43.270 --> 00:49:47.230
We will try to be consistent
about this, and

00:49:47.230 --> 00:49:48.480
usually we will be.

00:49:55.130 --> 00:49:58.690
The way we want to think about
this conceptually is that

00:49:58.690 --> 00:50:02.450
quadrature amplitude modulation
is going to take

00:50:02.450 --> 00:50:06.830
this complex waveform u of t.

00:50:06.830 --> 00:50:11.450
It's going to shift it up in
frequency to f sub c, and then

00:50:11.450 --> 00:50:13.650
we're going to add the
complex conjugate.

00:50:13.650 --> 00:50:16.590
Add it to form the
real x sub t.

00:50:16.590 --> 00:50:17.780
In other words, we're
going to think of it

00:50:17.780 --> 00:50:20.040
as a two-stage operation.

00:50:20.040 --> 00:50:23.230
First you take waveform,
you translate it up.

00:50:23.230 --> 00:50:27.510
Then you take the real part or
something, or add the negative

00:50:27.510 --> 00:50:29.400
frequency part.

00:50:29.400 --> 00:50:33.160
And we're going to think both of
this double operation of 1

00:50:33.160 --> 00:50:35.310
going from u of t
to the positive

00:50:35.310 --> 00:50:36.900
frequency part of things.

00:50:36.900 --> 00:50:39.530
And then, of looking at
the real waveform that

00:50:39.530 --> 00:50:42.740
corresponds to that.

00:50:42.740 --> 00:50:46.380
What we're going to be doing
here in terms of all of this

00:50:46.380 --> 00:50:50.360
is, we're going to start
out with binary data.

00:50:50.360 --> 00:50:54.190
From the binary data, we're
going to go to symbols.

00:50:54.190 --> 00:50:56.400
And we're going to go to symbols
by taking a number of

00:50:56.400 --> 00:50:58.600
binary data --

00:50:58.600 --> 00:51:00.810
a number of binary digits.

00:51:00.810 --> 00:51:03.760
Framing then into b tuples.

00:51:03.760 --> 00:51:06.670
Each b tuple will correspond
to a set

00:51:06.670 --> 00:51:08.330
of 2 to the b symbols.

00:51:08.330 --> 00:51:12.340
We're going to map these symbols
into complex signals.

00:51:12.340 --> 00:51:15.750
We're going to map the complex
signals into a baseband

00:51:15.750 --> 00:51:17.080
waveform u of t.

00:51:17.080 --> 00:51:20.270
We're going to map the baseband
waveform u of t into

00:51:20.270 --> 00:51:23.940
this positive frequency waveform
u of t times this

00:51:23.940 --> 00:51:25.540
complex sinusoid.

00:51:25.540 --> 00:51:28.580
And finally we're going to add
on the negative frequency part

00:51:28.580 --> 00:51:30.400
to wind up with x of t.

00:51:30.400 --> 00:51:32.550
What do you think we
do at the receiver?

00:51:32.550 --> 00:51:35.330
As always, we do just
the opposite.

00:51:35.330 --> 00:51:38.470
Namely, one of the reasons for
wanting to think about this

00:51:38.470 --> 00:51:42.000
this way, is we want to use
this layering idea.

00:51:42.000 --> 00:51:44.700
And the layering idea says,
you start out with the

00:51:44.700 --> 00:51:46.850
received waveform x of t.

00:51:46.850 --> 00:51:49.780
And later on we'll have to
add the noise to it.

00:51:49.780 --> 00:51:53.050
You go from there to the
positive frequency part.

00:51:53.050 --> 00:51:55.410
You go from the positive
frequency part.

00:51:55.410 --> 00:51:57.420
You shift it down to u of t.

00:51:57.420 --> 00:52:00.120
How we got from here to there,
I'll explain in a minute.

00:52:00.120 --> 00:52:03.100
You go from here down
to baseband again.

00:52:03.100 --> 00:52:06.530
You go from the baseband to
the complex signals, which

00:52:06.530 --> 00:52:09.760
we're going to do simply by
filtering and sampling.

00:52:09.760 --> 00:52:13.170
We go from the complex signals
to the symbols, which is in

00:52:13.170 --> 00:52:14.830
fact a trivial operation.

00:52:14.830 --> 00:52:16.820
It's just a look-up operation.

00:52:16.820 --> 00:52:20.640
And then from there we
un-segment things into binary

00:52:20.640 --> 00:52:21.370
digits again.

00:52:21.370 --> 00:52:23.030
So that's the whole system.

00:52:23.030 --> 00:52:25.700
And it has all these different
pieces to it.

00:52:25.700 --> 00:52:29.000
I couldn't draw it as our
favorite kind of diagram,

00:52:29.000 --> 00:52:30.670
because it has too many
blocks in it.

00:52:30.670 --> 00:52:33.730
So that has to do.

00:52:36.320 --> 00:52:38.700
What we're going to do now is
look at each of these pieces

00:52:38.700 --> 00:52:40.670
one at a time.

00:52:40.670 --> 00:52:45.440
And the first part is the
complex QAM signal set.

00:52:45.440 --> 00:52:49.210
And, just for some notation
here, so we'll be on the same

00:52:49.210 --> 00:52:57.170
page, but we use r to talk about
the bits per second at

00:52:57.170 --> 00:53:02.830
which data is coming into
this whole system.

00:53:02.830 --> 00:53:05.400
That's the figure you're
interested in, when

00:53:05.400 --> 00:53:06.670
everything is done.

00:53:06.670 --> 00:53:10.020
How many bits per second
can you transmit?

00:53:10.020 --> 00:53:13.180
We're going to segment this
into b bits at a time.

00:53:13.180 --> 00:53:16.350
So we're going to have a symbol
set with 2 to the b

00:53:16.350 --> 00:53:18.850
elements in it.

00:53:18.850 --> 00:53:22.920
We're going to map these m
symbols, which are binary b

00:53:22.920 --> 00:53:27.820
tuples, into elements
from the signal set.

00:53:27.820 --> 00:53:31.570
The signal rate, then, is r
sub s, which is r over b.

00:53:31.570 --> 00:53:35.270
This is the number of signals
per second that we're sending.

00:53:35.270 --> 00:53:41.940
In other words, t, this signal
interval that we've always

00:53:41.940 --> 00:53:44.390
been using in everything
we've been doing, is

00:53:44.390 --> 00:53:46.740
one over r sub s.

00:53:46.740 --> 00:53:49.710
So t is the signal interval.

00:53:49.710 --> 00:53:53.090
Every t seconds, you've
got to send something.

00:53:53.090 --> 00:53:56.170
If you didn't send something
every t seconds, the way this

00:53:56.170 --> 00:54:01.350
stuff coming in from the source
would start piling up

00:54:01.350 --> 00:54:05.450
and your buffers would overflow
and it wouldn't work.

00:54:05.450 --> 00:54:08.420
The signals u sub k are
complex numbers.

00:54:08.420 --> 00:54:10.300
Or real 2-tuples.

00:54:10.300 --> 00:54:14.610
So we can, when we're trying
to decide what signal set

00:54:14.610 --> 00:54:18.890
we're using, we can just draw
our signals on a plane.

00:54:18.890 --> 00:54:23.030
The signal set is a
constellation, then, of m

00:54:23.030 --> 00:54:26.040
complex numbers or
real 2-tuples.

00:54:26.040 --> 00:54:29.120
So the problem of choosing the
signal set is, how do you

00:54:29.120 --> 00:54:32.870
choose m points on
a complex plane.

00:54:32.870 --> 00:54:36.190
What problem is that
similar to?

00:54:36.190 --> 00:54:41.060
It's similar to the quantization
problem where we

00:54:41.060 --> 00:54:44.590
were trying to choose m
representation points.

00:54:44.590 --> 00:54:47.240
And it's very close
to that problem.

00:54:47.240 --> 00:54:49.490
It's a very similar problems.

00:54:49.490 --> 00:54:52.180
Has a few small differences,
but not many.

00:54:56.370 --> 00:54:59.920
But, before getting into that,
we want to talk about a

00:54:59.920 --> 00:55:03.420
standard QAM signal set.

00:55:03.420 --> 00:55:08.620
In a minute I'll explain
why people do that.

00:55:08.620 --> 00:55:14.040
And, as you might imagine, a
standard QAM is just a square

00:55:14.040 --> 00:55:16.270
array of points.

00:55:16.270 --> 00:55:20.340
It's the simplest thing to do,
and sometimes the simplest

00:55:20.340 --> 00:55:21.700
thing is the best.

00:55:21.700 --> 00:55:25.770
So it's determined by some
distance, d, that you want to

00:55:25.770 --> 00:55:28.770
have between neighboring
points.

00:55:28.770 --> 00:55:31.800
And given that distance,
d, you just create a

00:55:31.800 --> 00:55:33.370
square array here.

00:55:33.370 --> 00:55:37.220
The square array means
that m has to have an

00:55:37.220 --> 00:55:38.690
integer square root.

00:55:38.690 --> 00:55:41.740
This is drawn for m equals 16.

00:55:41.740 --> 00:55:45.460
If you look at this, you see
that the real part of this

00:55:45.460 --> 00:55:48.350
it's the standard PAM set.

00:55:48.350 --> 00:55:53.040
The imaginary part is a standard
PAM set, which says

00:55:53.040 --> 00:55:56.340
you can deal with the real part
and the imaginary part

00:55:56.340 --> 00:55:57.190
separately.

00:55:57.190 --> 00:55:59.970
You take half the bits coming
in and you choose your real

00:55:59.970 --> 00:56:01.180
part signal.

00:56:01.180 --> 00:56:03.090
Take the other half of
the bits coming in.

00:56:03.090 --> 00:56:05.560
You form your imaginary
part signal, and

00:56:05.560 --> 00:56:07.310
bingo, you're all done.

00:56:07.310 --> 00:56:11.670
The energy per 2D signal, we
can find the energy for 2D

00:56:11.670 --> 00:56:14.540
signal by looking
at it this way.

00:56:14.540 --> 00:56:18.610
It's two PAM systems running
in parallel to each other.

00:56:18.610 --> 00:56:24.580
For the PAM system, the energy
in one of these dimensions is

00:56:24.580 --> 00:56:28.150
then d squared times the square
root of n squared,

00:56:28.150 --> 00:56:31.210
minus 1 divided by 12.

00:56:31.210 --> 00:56:35.120
But now we want to look at the
energy which we have in both

00:56:35.120 --> 00:56:37.410
the real part and the
imaginary part.

00:56:37.410 --> 00:56:39.300
So we need this extra factor.

00:56:39.300 --> 00:56:41.710
Well, we need to add together
two of these things.

00:56:41.710 --> 00:56:46.660
So we wind up with d squared
times m minus 1 divided by 6.

00:56:46.660 --> 00:56:47.910
Big deal.

00:56:54.060 --> 00:56:57.460
Choosing a good signal set is
similar to choosing a 2D set

00:56:57.460 --> 00:57:01.180
of representation points
in quantization.

00:57:01.180 --> 00:57:04.610
If you like to optimize things,
you see this problem

00:57:04.610 --> 00:57:08.530
and you say, gee, at least
there's something I can put my

00:57:08.530 --> 00:57:11.410
teeth into here.

00:57:11.410 --> 00:57:15.820
What's the best way to
choose a signal set?

00:57:15.820 --> 00:57:18.010
And we found that for
quantization that wasn't a

00:57:18.010 --> 00:57:21.270
terribly nice problem, although
at least we had

00:57:21.270 --> 00:57:26.340
things like algorithms to try
to choose reasonable sets.

00:57:26.340 --> 00:57:29.140
And we then looked at entropy
quantization and things like

00:57:29.140 --> 00:57:32.120
this, and it was a certain
amount of fun.

00:57:32.120 --> 00:57:34.560
Here, this problem
it's just ugly.

00:57:34.560 --> 00:57:38.540
There's no other way
to express it.

00:57:38.540 --> 00:57:40.080
I had to be convinced of this.

00:57:40.080 --> 00:57:43.440
I once spent an inordinate
amount of time trying to find

00:57:43.440 --> 00:57:46.910
the best signal set with eight
points in it, in two

00:57:46.910 --> 00:57:47.990
dimensions.

00:57:47.990 --> 00:57:52.820
How do you put eight single
points in two dimensions in

00:57:52.820 --> 00:57:56.710
such a way that every point is
distance at least d from every

00:57:56.710 --> 00:57:58.980
other point, and you
minimize the energy

00:57:58.980 --> 00:58:02.100
of the set of points?

00:58:02.100 --> 00:58:04.520
The answer is just
absolutely ugly.

00:58:04.520 --> 00:58:05.810
It has no symmetry.

00:58:05.810 --> 00:58:07.400
Nothing nice about it.

00:58:07.400 --> 00:58:10.000
You do the same thing for
16 points, and it's

00:58:10.000 --> 00:58:11.180
just an ugly problem.

00:58:11.180 --> 00:58:13.660
You do the same thing for
any number of points.

00:58:13.660 --> 00:58:14.680
Except for four points.

00:58:14.680 --> 00:58:16.260
For four points, it's easy.

00:58:16.260 --> 00:58:19.730
For four points, you use
standard QAM and it's the best

00:58:19.730 --> 00:58:21.220
thing to do.

00:58:21.220 --> 00:58:23.460
And that problem is easy.

00:58:23.460 --> 00:58:25.680
But you know, that's
not much fun.

00:58:25.680 --> 00:58:28.260
Because you say, bleugh.

00:58:28.260 --> 00:58:32.650
So, partly for that
reason, people use

00:58:32.650 --> 00:58:36.020
standard signal sets.

00:58:36.020 --> 00:58:39.370
Partly because you don't seem
to be able to gain much by

00:58:39.370 --> 00:58:42.860
doing anything else.

00:58:42.860 --> 00:58:47.060
So that's about all we can say
about standard -- oh, with

00:58:47.060 --> 00:58:49.810
eight signals, you can't use
a standard signal set.

00:58:49.810 --> 00:58:52.510
That was one reason we had
to worry about it.

00:58:52.510 --> 00:58:56.480
Back a long time ago, we were
trying to design a 7200 bit

00:58:56.480 --> 00:58:58.440
per second modem.

00:58:58.440 --> 00:59:03.210
Back in the days when people
did 2400 bits per second.

00:59:03.210 --> 00:59:06.250
And we managed to do 4800
bits per second by

00:59:06.250 --> 00:59:09.120
using QAM, big deal.

00:59:09.120 --> 00:59:12.320
And then we said, well, we can
pile in an extra bit by using

00:59:12.320 --> 00:59:17.350
three bits per two dimensions
instead of two bits.

00:59:17.350 --> 00:59:20.110
And spent this enormous amount
of time trying to find a

00:59:20.110 --> 00:59:21.490
sensible signal set.

00:59:21.490 --> 00:59:23.580
I don't even want to tell you
what it was, because it wasn't

00:59:23.580 --> 00:59:25.810
interesting at all.

00:59:25.810 --> 00:59:30.970
So, enough for signal sets.

00:59:30.970 --> 00:59:33.860
The next thing is, how do
you turn the signals

00:59:33.860 --> 00:59:36.260
into complex waveforms?

00:59:36.260 --> 00:59:39.420
Namely, how do you go from the
signals in two dimensions,

00:59:39.420 --> 00:59:45.100
complex signals into a baseband
waveform u of t?

00:59:45.100 --> 00:59:48.890
Well, fortunately, Nyquist's
theory is exactly the same

00:59:48.890 --> 00:59:52.380
here as it was when we were
dealing with PAM.

00:59:52.380 --> 00:59:55.370
Everything we said before
works here.

00:59:55.370 --> 00:59:58.270
The only difference is that you
don't have to choose the

00:59:58.270 --> 01:00:00.820
pulse p of t to be real.

01:00:00.820 --> 01:00:03.240
But if you look back at what we
did, we didn't assume that

01:00:03.240 --> 01:00:05.810
p of t was real before,
anyway.

01:00:05.810 --> 01:00:09.120
We just said, you might as well
choose it to be real.

01:00:09.120 --> 01:00:13.460
But you don't have to choose
it to be real.

01:00:13.460 --> 01:00:19.680
Bandedge symmetry requires
that g of t be real.

01:00:19.680 --> 01:00:21.230
Anybody know why that is?

01:00:24.300 --> 01:00:28.910
When you choose g of t to be
real, the negative frequency

01:00:28.910 --> 01:00:31.420
part is the complex
conjugate of the

01:00:31.420 --> 01:00:33.530
positive frequency part.

01:00:33.530 --> 01:00:38.570
Which is why, when we took
this out-of-band stuff at

01:00:38.570 --> 01:00:42.070
negative frequencies, piled it
into the positive frequencies,

01:00:42.070 --> 01:00:45.530
we got the same thing as if we
simply rotate it around on the

01:00:45.530 --> 01:00:46.930
positive frequency.

01:00:46.930 --> 01:00:50.660
So that bandedge symmetry
condition really requires that

01:00:50.660 --> 01:00:52.970
g of t be real.

01:00:52.970 --> 01:00:56.330
The orthogonality of t a t
minus k t, this set of

01:00:56.330 --> 01:01:00.560
waveforms, requires
g of t to be real.

01:01:00.560 --> 01:01:03.060
Neither of these things require
p of t to be real.

01:01:03.060 --> 01:01:06.640
You can choose p of t to have
any old phase characteristic

01:01:06.640 --> 01:01:10.590
you want to, but if we're
choosing p of t -- if we're

01:01:10.590 --> 01:01:15.760
choosing p hat of f magnitude
to be the square root of a

01:01:15.760 --> 01:01:21.440
Nyquist waveform, then you can
choose this phase to be

01:01:21.440 --> 01:01:24.080
anything you want to make it.

01:01:24.080 --> 01:01:29.970
But you're just restricted in,
aside from the phase, you're

01:01:29.970 --> 01:01:33.310
somewhat restricted in
what p of t can be.

01:01:33.310 --> 01:01:33.620
OK.

01:01:33.620 --> 01:01:35.960
So we're going to make the
nominal passband, Nyquist

01:01:35.960 --> 01:01:37.640
band, with 1 over t.

01:01:37.640 --> 01:01:40.360
Before we made the passband --

01:01:40.360 --> 01:01:44.590
before we made the baseband
bandwidth 1 over 2t.

01:01:44.590 --> 01:01:49.580
When we go up the passband we
double the bandwidth so the

01:01:49.580 --> 01:01:52.210
Nyquist bandwidth
is now 1 over t.

01:01:52.210 --> 01:01:54.800
The passband bandwidth
is 1 over t.

01:01:54.800 --> 01:01:57.270
That's the only thing
that's changed.

01:01:57.270 --> 01:02:00.150
Usually people design these
filters, which they design at

01:02:00.150 --> 01:02:05.340
baseband, to go 5-10% over
the Nyquist band.

01:02:05.340 --> 01:02:10.880
In other words, these filters
are very, very sharp, usually.

01:02:10.880 --> 01:02:13.390
I mean, once you design
a filter, it

01:02:13.390 --> 01:02:14.450
doesn't cost anything.

01:02:14.450 --> 01:02:17.480
You put it on a chip and
that's the end of it.

01:02:17.480 --> 01:02:19.650
And the cost of it is zero.

01:02:19.650 --> 01:02:22.850
So it's just the cost to design
it, so you might as

01:02:22.850 --> 01:02:24.100
well make it small.

01:02:28.360 --> 01:02:31.630
So finally, we want
to go to base,

01:02:31.630 --> 01:02:33.540
from baseband to passband.

01:02:33.540 --> 01:02:36.240
We talked about this
a little bit.

01:02:36.240 --> 01:02:40.990
In terms of these frequencies,
the baseband frequency b sub

01:02:40.990 --> 01:02:43.420
u, we want to assume
that that's less

01:02:43.420 --> 01:02:44.780
than the carrier frequency.

01:02:44.780 --> 01:02:49.540
This is this condition that we
needed to make sure that the

01:02:49.540 --> 01:02:56.050
positive frequency part
-- ah, here it is.

01:02:56.050 --> 01:02:58.550
That's the condition that
makes sure that this is

01:02:58.550 --> 01:03:01.440
separated from that, and doesn't
cause intersymbol

01:03:01.440 --> 01:03:04.740
interference between the two.

01:03:04.740 --> 01:03:08.110
So, everything we do, we'll
make this assumption.

01:03:08.110 --> 01:03:13.540
I mean, a part of this is, if
you're going to modulate with

01:03:13.540 --> 01:03:16.640
such a small carrier frequency,
you might as well

01:03:16.640 --> 01:03:17.630
not do it at all.

01:03:17.630 --> 01:03:19.220
You might as well just
generate the

01:03:19.220 --> 01:03:21.180
waveform you want directly.

01:03:21.180 --> 01:03:25.610
Because you don't gain that much
by doing it at baseband.

01:03:25.610 --> 01:03:30.150
Because you don't really have
a baseband in that case.

01:03:30.150 --> 01:03:34.480
So, u of t times e to the 2 pi
i f c t is strictly in the

01:03:34.480 --> 01:03:36.880
positive frequency band, then.

01:03:36.880 --> 01:03:39.850
And these two bands
don't overlap.

01:03:39.850 --> 01:03:42.110
As I said before, we're
going to view this as

01:03:42.110 --> 01:03:43.670
two different steps.

01:03:43.670 --> 01:03:46.490
The first step is, I'm going
to take this complex

01:03:46.490 --> 01:03:48.490
waveform, u of t.

01:03:48.490 --> 01:03:51.410
Multiply it by a complex
sinusoid, which shifts me up

01:03:51.410 --> 01:03:52.720
in frequency.

01:03:52.720 --> 01:03:56.650
Just going to call that
u passband of t.

01:03:56.650 --> 01:04:00.250
This is this passband signal
that I want to think about.

01:04:00.250 --> 01:04:02.480
The thing that's up in
positive frequencies.

01:04:02.480 --> 01:04:05.210
I'm going to ignore the thing
at negative frequencies.

01:04:05.210 --> 01:04:11.910
And then I'm going to form the
actual waveform x sub t, as

01:04:11.910 --> 01:04:14.640
this plus its conjugate.

01:04:26.000 --> 01:04:29.640
If you think a little bit now,
you can see that since these

01:04:29.640 --> 01:04:33.770
two bands are separated, if you
think in terms of complex

01:04:33.770 --> 01:04:38.720
waveforms, how do you retrieve
this band up here by a

01:04:38.720 --> 01:04:42.750
waveform which has
both bands in it?

01:04:42.750 --> 01:04:46.270
Well, you filter out what's at
negative frequencies, OK?

01:04:48.800 --> 01:04:55.160
So we want to design a filter
which filters out the negative

01:04:55.160 --> 01:04:58.660
frequencies and x of t, and
only leaves the positive

01:04:58.660 --> 01:04:59.160
frequencies.

01:04:59.160 --> 01:05:03.210
In other words, you want a
filter whose frequency

01:05:03.210 --> 01:05:08.470
response is just 1 for all
positive frequencies, 0 for

01:05:08.470 --> 01:05:11.070
all negative frequencies.

01:05:11.070 --> 01:05:14.610
And that filter is called
a Hilbert filter.

01:05:14.610 --> 01:05:19.020
Have any of you ever heard of
a Hilbert filter before?

01:05:19.020 --> 01:05:21.460
I don't know of anybody
that's ever built one.

01:05:21.460 --> 01:05:24.520
And we'll see why they don't
built them in a while.

01:05:24.520 --> 01:05:26.420
But it's a nice idea.

01:05:26.420 --> 01:05:28.750
I mean, if you try to build
one you'll find that it's

01:05:28.750 --> 01:05:35.820
harder to build --

01:05:35.820 --> 01:05:39.150
you'll find that you have to
implement four real filters in

01:05:39.150 --> 01:05:40.920
order to implement
this filter.

01:05:40.920 --> 01:05:43.160
So we'll find out that's
not the thing to do.

01:05:43.160 --> 01:05:46.400
But it's nice conceptually
because it lets us study

01:05:46.400 --> 01:05:51.260
things like energy, power,
and linearity, and

01:05:51.260 --> 01:05:52.510
all of these things.

01:05:56.140 --> 01:06:01.490
So the transmitter then becomes
this thing you start

01:06:01.490 --> 01:06:04.990
out with a complex waveform
of baseband.

01:06:04.990 --> 01:06:07.860
You shift it up in frequency.

01:06:07.860 --> 01:06:09.690
This gives you this
high frequency

01:06:09.690 --> 01:06:12.960
waveform, u sub p of t.

01:06:12.960 --> 01:06:16.830
You then take 2 times the
real part of that to

01:06:16.830 --> 01:06:18.450
find the real waveform.

01:06:18.450 --> 01:06:20.220
We won't worry about
how to implement

01:06:20.220 --> 01:06:23.050
this, you just do it.

01:06:23.050 --> 01:06:26.440
This passband waveform, you
then pass it through this

01:06:26.440 --> 01:06:29.190
Hilbert filter, which just
chops off the negative

01:06:29.190 --> 01:06:31.000
frequency part of it.

01:06:31.000 --> 01:06:34.120
Gives you a complex
waveform again.

01:06:34.120 --> 01:06:39.050
You multiply by e to the minus 2
pi i f c t, which takes this

01:06:39.050 --> 01:06:41.260
positive frequency waveform,
shifts it

01:06:41.260 --> 01:06:43.610
back down to baseband.

01:06:43.610 --> 01:06:46.490
So this is a nice convenient way
of thinking about, how do

01:06:46.490 --> 01:06:50.390
you go from baseband up to
passband and passband down to

01:06:50.390 --> 01:06:52.150
baseband again.

01:06:52.150 --> 01:06:52.820
Now.

01:06:52.820 --> 01:06:58.050
If you want to view these
vectors here as vectors, want

01:06:58.050 --> 01:07:03.980
to view u of t as a vector in
L2, there's an important thing

01:07:03.980 --> 01:07:05.660
here going on.

01:07:05.660 --> 01:07:08.900
We'll have to talk about it
a good deal later on.

01:07:08.900 --> 01:07:11.410
This is a complex waveform.

01:07:11.410 --> 01:07:14.970
You want to deal with it as
a vector in complex L2.

01:07:14.970 --> 01:07:19.580
In complex L2, when we're
dealing with vectors, we have

01:07:19.580 --> 01:07:23.390
scalars, which are
complex numbers.

01:07:23.390 --> 01:07:28.150
When we start dealing with real
parts of these things, we

01:07:28.150 --> 01:07:33.150
want to view the real parts as
being elements of real L2.

01:07:33.150 --> 01:07:36.370
Where the scalars are
real numbers.

01:07:36.370 --> 01:07:41.050
And what this says is that real
L2 is not a subspace of

01:07:41.050 --> 01:07:43.480
complex L2.

01:07:43.480 --> 01:07:47.020
It's not a subspace because
the scalars are different.

01:07:47.020 --> 01:07:50.350
This might sound like
mathematical nitpicking.

01:07:50.350 --> 01:07:52.280
But, put it in the back
of your mind.

01:07:52.280 --> 01:07:54.650
Because at some point
it's going to come

01:07:54.650 --> 01:07:56.830
up and clobber you.

01:07:56.830 --> 01:07:59.810
And at that point, you will
want to think that in fact

01:07:59.810 --> 01:08:04.950
real L2 is not a subspace
of complex L2.

01:08:04.950 --> 01:08:08.390
When we start thinking about
orthonormal expansions for u

01:08:08.390 --> 01:08:12.950
of t and orthonormal expansions
for x of t, in fact

01:08:12.950 --> 01:08:15.600
you have to be quite
careful about this.

01:08:15.600 --> 01:08:18.820
Because you take an orthonormal
expansion here,

01:08:18.820 --> 01:08:21.840
translate it up into
frequency.

01:08:21.840 --> 01:08:27.640
And you wind up with a bunch
of complex waveforms.

01:08:27.640 --> 01:08:29.910
And they aren't real
waveforms.

01:08:29.910 --> 01:08:32.430
And funny things start
happening.

01:08:32.430 --> 01:08:34.090
So we'll deal with all
of that later.

01:08:34.090 --> 01:08:37.100
This is just to warn you
that we have to be

01:08:37.100 --> 01:08:39.550
careful about that.

01:08:39.550 --> 01:08:41.970
This is not the way people
implement these things.

01:08:41.970 --> 01:08:46.410
Because these Hilbert filters
are in fact for real filters.

01:08:49.020 --> 01:08:55.620
So the implementation
is what you've seen.

01:08:55.620 --> 01:08:57.350
I mean, the implementation
is old.

01:08:57.350 --> 01:09:00.940
And it's the way you want
to build these things.

01:09:00.940 --> 01:09:05.290
You start out with two real
baseband waveforms.

01:09:05.290 --> 01:09:07.940
One which we call the
real part of u of t.

01:09:07.940 --> 01:09:11.130
One which we call the imaginary
part of u of t.

01:09:11.130 --> 01:09:14.000
In this single diagram, one
of them is the stuff

01:09:14.000 --> 01:09:15.270
that goes this way.

01:09:15.270 --> 01:09:17.880
And the other one is the stuff
that goes this way.

01:09:17.880 --> 01:09:21.940
And if, in fact, you're using a
standard QAM signal set, the

01:09:21.940 --> 01:09:25.490
two are completely independent
of each other.

01:09:25.490 --> 01:09:31.310
So the real part of u of t is
just the sum of these shifted

01:09:31.310 --> 01:09:34.160
pulses times the real parts.

01:09:34.160 --> 01:09:36.600
This is the sum of the
shifted pulses

01:09:36.600 --> 01:09:39.590
times the complex parts.

01:09:39.590 --> 01:09:43.050
The defined u sub k prime is a
real part, and u sub k double

01:09:43.050 --> 01:09:45.890
prime is the imaginary part.

01:09:45.890 --> 01:09:53.320
In the notes, this and this are
called a sub k and a sub k

01:09:53.320 --> 01:09:55.170
double prime.

01:09:55.170 --> 01:09:57.600
Which doesn't correspond
to anything else.

01:09:57.600 --> 01:10:00.430
So, this is the correct
way of doing it.

01:10:00.430 --> 01:10:03.490
But, anyway, when you get all
done, x sub t is 2 times the

01:10:03.490 --> 01:10:09.630
cosine of this low pass
modulated PAM waveform.

01:10:09.630 --> 01:10:13.530
Minus 2 times the sine
of this low pass

01:10:13.530 --> 01:10:16.240
PAM modulated waveform.

01:10:16.240 --> 01:10:19.910
So, QAM, when you look at it
this way, is simply two

01:10:19.910 --> 01:10:23.160
different PAM systems.

01:10:23.160 --> 01:10:26.410
One of them modulated on a
cosine carrier, one of them

01:10:26.410 --> 01:10:28.410
modulated on a sine carrier.

01:10:36.220 --> 01:10:40.220
And the picture of
that is this.

01:10:40.220 --> 01:10:41.470
Aargh.

01:10:46.970 --> 01:10:50.940
Can't keep my notation
straight.

01:10:50.940 --> 01:10:54.880
I'm sure it doesn't bother most
of you that much, but it

01:10:54.880 --> 01:10:57.330
bothers me.

01:10:57.330 --> 01:10:59.410
All of those a's
should be u's.

01:10:59.410 --> 01:11:02.460
They were a's last year,
but they don't make

01:11:02.460 --> 01:11:05.290
any sense as a's.

01:11:05.290 --> 01:11:12.640
So the thing we're going to do
now is we start out with the

01:11:12.640 --> 01:11:14.190
sequence of signals.

01:11:14.190 --> 01:11:15.550
The real part of the
signals and the

01:11:15.550 --> 01:11:17.390
imaginary part of the signals.

01:11:17.390 --> 01:11:21.530
This is why it's called double
side band quadrature carrier,

01:11:21.530 --> 01:11:23.050
because in fact we're doing two

01:11:23.050 --> 01:11:26.760
different things in parallel.

01:11:26.760 --> 01:11:31.010
We generate this as
a pulse waveform.

01:11:31.010 --> 01:11:32.930
We filter it by p of t.

01:11:32.930 --> 01:11:36.850
We're thinking of p of t
as a real waveform now.

01:11:36.850 --> 01:11:39.840
If you want p of t to be complex
you have to modify

01:11:39.840 --> 01:11:40.950
this all a little bit.

01:11:40.950 --> 01:11:46.720
But there's no real reason to
make p of t complex anyway.

01:11:46.720 --> 01:11:50.360
So when you get out of here,
what you have is just this low

01:11:50.360 --> 01:11:53.980
pass real waveform,
real PAM waveform.

01:11:53.980 --> 01:11:57.480
Here's another low pass
real PAM waveform.

01:11:57.480 --> 01:12:01.540
You module this up by
multiplying by cosine of 2 pi

01:12:01.540 --> 01:12:05.700
f c t, in fact, by 2 cosine
of 2 pi f ct .

01:12:05.700 --> 01:12:09.330
You modulate this up by
multiplying by minus sine.

01:12:09.330 --> 01:12:12.290
And you get the actual
waveform that

01:12:12.290 --> 01:12:13.880
you're going to transmit.

01:12:13.880 --> 01:12:15.640
How do you demodulate this?

01:12:15.640 --> 01:12:20.130
Well, again, I'm sure you've
seen it in one of the

01:12:20.130 --> 01:12:22.310
undergraduate courses
you've taken.

01:12:22.310 --> 01:12:25.840
Because if you take this
waveform, which is the sum of

01:12:25.840 --> 01:12:30.120
this and this, and you multiply
this by cosine of 2

01:12:30.120 --> 01:12:32.330
pi f c t, what's going
to happen?

01:12:34.960 --> 01:12:39.070
Taking this waveform and
multiplying it by cosine is

01:12:39.070 --> 01:12:41.770
going to take this
cosine waveform.

01:12:41.770 --> 01:12:45.560
Half of it goes up in frequency
by f sub c.

01:12:45.560 --> 01:12:50.440
The other half goes down in
frequency by f sub c of t.

01:12:50.440 --> 01:12:56.060
When you multiply by sine,
the same thing happens.

01:12:56.060 --> 01:13:01.640
And all of the stuff at this
double frequency term all gets

01:13:01.640 --> 01:13:02.940
filtered out.

01:13:02.940 --> 01:13:04.730
I mean, you have enough
filtering to

01:13:04.730 --> 01:13:06.380
just wash that away.

01:13:06.380 --> 01:13:10.260
And you wind up, just with this
one waveform which is the

01:13:10.260 --> 01:13:11.520
result of this.

01:13:11.520 --> 01:13:14.920
Another waveform which is
the result of this.

01:13:14.920 --> 01:13:17.720
You can show that the two don't
interfere at all, and

01:13:17.720 --> 01:13:19.980
you just have to do
the multiplication

01:13:19.980 --> 01:13:20.810
to find this out.

01:13:20.810 --> 01:13:23.940
It looks a little bit like black
magic when you look at

01:13:23.940 --> 01:13:24.730
it like this.

01:13:24.730 --> 01:13:28.400
Because when you're multiplying
by a cosine wave,

01:13:28.400 --> 01:13:31.550
I mean it's easy to see what
cosine squared does here.

01:13:31.550 --> 01:13:33.010
But it's a little harder
to see what

01:13:33.010 --> 01:13:35.050
happens to all of this.

01:13:35.050 --> 01:13:39.480
And when we look at it the
other way, which was this

01:13:39.480 --> 01:13:44.290
Hilbert filter kind of thing,
when you look at in terms of

01:13:44.290 --> 01:13:48.750
the Hilbert filter it's quite
clear that you can filter out

01:13:48.750 --> 01:13:51.550
the lower sideband and then you
can just go back down to

01:13:51.550 --> 01:13:52.480
baseband again.

01:13:52.480 --> 01:13:55.550
So it's very clear that
the whole thing works.

01:13:55.550 --> 01:13:58.630
Except you wouldn't implement
it this way.

01:13:58.630 --> 01:14:02.300
Here you have to be more careful
to see that works.

01:14:02.300 --> 01:14:05.080
But in fact you would.

01:14:09.160 --> 01:14:12.630
Well, after you get all done,
then you get these baseband

01:14:12.630 --> 01:14:15.250
PAM waveforms back again.

01:14:15.250 --> 01:14:17.650
You sample them after
filtering.

01:14:17.650 --> 01:14:20.920
And you're all done.

01:14:20.920 --> 01:14:26.630
With that, we are almost done
with what we want to do with

01:14:26.630 --> 01:14:31.720
modulating up to passband
and down to baseband.

01:14:31.720 --> 01:14:34.240
We'll spend a little bit of
time reviewing a couple of

01:14:34.240 --> 01:14:37.550
minor points on this
next time.

01:14:37.550 --> 01:14:40.660
Like, I guess, the main thing
we have to talk about is how

01:14:40.660 --> 01:14:45.090
do you do frequency recovery,
which is kind of a neat thing.

01:14:45.090 --> 01:14:48.000
And then we'll go on to talking
about random processes

01:14:48.000 --> 01:14:50.420
and how you deal with noise.

01:14:50.420 --> 01:14:51.890
So.

01:14:51.890 --> 01:14:57.040
If you want to read ahead, we
will probably have the notes

01:14:57.040 --> 01:15:01.820
on random processes on the
web sometime tomorrow

01:15:01.820 --> 01:15:03.370
afternoon or Sunday.

01:15:03.370 --> 01:15:04.620
Thanks.