WEBVTT

00:00:00.040 --> 00:00:02.460
The following content is
provided under a Creative

00:00:02.460 --> 00:00:03.870
Commons license.

00:00:03.870 --> 00:00:06.910
Your support will help MIT
OpenCourseWare continue to

00:00:06.910 --> 00:00:10.560
offer high quality educational
resources for free.

00:00:10.560 --> 00:00:13.460
To make a donation or view
additional materials from

00:00:13.460 --> 00:00:18.440
hundreds of MIT courses, visit
MIT OpenCourseWare at

00:00:18.440 --> 00:00:23.200
ocw.mit.edu

00:00:23.200 --> 00:00:25.690
PROFESSOR: Good morning.

00:00:25.690 --> 00:00:29.010
I want to start today's lecture
with, I guess one

00:00:29.010 --> 00:00:30.540
could call it, a confession.

00:00:30.540 --> 00:00:34.650
This isn't a real
6.00 lecture.

00:00:34.650 --> 00:00:39.390
I'm standing here on June 30th
in an empty classroom dressed,

00:00:39.390 --> 00:00:41.920
for some bizarre reason,
as if it's the winter.

00:00:41.920 --> 00:00:47.070
I guess it's what the video
folks would call continuity.

00:00:47.070 --> 00:00:51.110
What happened is Professor
Grimson gave a beautiful

00:00:51.110 --> 00:00:58.350
lecture 13, for which we have a
lovely picture and no sound.

00:00:58.350 --> 00:01:01.930
We decided that probably those
of you watching this in

00:01:01.930 --> 00:01:05.360
OpenCourseWare would be
unhappy just to watch

00:01:05.360 --> 00:01:09.040
Professor Grimson and not hear
him, so we're now re-taping

00:01:09.040 --> 00:01:10.210
the lecture.

00:01:10.210 --> 00:01:12.400
This is, actually, one of two
lectures we're going to be

00:01:12.400 --> 00:01:16.380
re-taping because we
had video problems.

00:01:16.380 --> 00:01:19.110
So when I say something
hilariously funny, and there

00:01:19.110 --> 00:01:21.090
is no laughter in
the room, it's

00:01:21.090 --> 00:01:23.860
because the room is empty.

00:01:23.860 --> 00:01:28.183
Do me a favor and laugh out
there in video-land, so maybe

00:01:28.183 --> 00:01:30.810
at least someone will respond.

00:01:30.810 --> 00:01:38.090
OK, the last lecture closed with
a slight mystery, not a

00:01:38.090 --> 00:01:40.190
great mystery, but
a little mystery.

00:01:40.190 --> 00:01:44.110
We ran our simulation of the
drunkard's walk and got a

00:01:44.110 --> 00:01:46.470
result that wasn't credible.

00:01:46.470 --> 00:01:49.070
How did we know it
wasn't credible?

00:01:49.070 --> 00:01:52.840
Well we had worked out some
details on the blackboard of

00:01:52.840 --> 00:01:56.250
what we thought would happen
with a small number of steps,

00:01:56.250 --> 00:01:59.130
and the results we got
didn't match that.

00:01:59.130 --> 00:02:01.530
That told us we had
something wrong.

00:02:01.530 --> 00:02:04.200
We asked you to go think about
it and come back today

00:02:04.200 --> 00:02:06.840
prepared to tell us
what was wrong.

00:02:06.840 --> 00:02:09.550
Well since there is no one here
to ask, I'm not going to

00:02:09.550 --> 00:02:14.250
ask the class to fix it, but
instead I have had the

00:02:14.250 --> 00:02:17.390
laborious task of fixing
it myself.

00:02:17.390 --> 00:02:18.790
So let's look at it.

00:02:18.790 --> 00:02:21.440
The problem was in SimWalk.

00:02:21.440 --> 00:02:24.140
And what we had is we had
the wrong argument here.

00:02:24.140 --> 00:02:27.580
We had numTrials Instead
of numSteps.

00:02:27.580 --> 00:02:30.040
And so it didn't
make any sense.

00:02:30.040 --> 00:02:33.360
I've now fixed it, and I,
now, want to run it.

00:02:33.360 --> 00:02:37.540
Well clearly, what I should do
to begin with, is run it on

00:02:37.540 --> 00:02:41.970
some examples for which we
already know the answer.

00:02:41.970 --> 00:02:46.410
So I'll change drunkTest to
instead of running it on large

00:02:46.410 --> 00:02:51.770
numbers of steps, run
it on just a few.

00:02:51.770 --> 00:02:53.150
And let's see what we get.

00:02:59.976 --> 00:03:03.950
We run a lot of trials here,
since it's a short trial.

00:03:03.950 --> 00:03:09.540
And what we see is for 100
trials of 0 steps, the mean

00:03:09.540 --> 00:03:12.960
was 0, the max was
0, the min was 0.

00:03:12.960 --> 00:03:15.180
Well that's exactly what
we saw when we looked

00:03:15.180 --> 00:03:16.060
at it on the board.

00:03:16.060 --> 00:03:17.560
It should happen.

00:03:17.560 --> 00:03:19.770
And the same thing with 1.

00:03:19.770 --> 00:03:23.106
Everything worked the way
it was supposed to work.

00:03:23.106 --> 00:03:25.680
It doesn't tell us the
program is perfect.

00:03:25.680 --> 00:03:29.040
It does tell us it works in at
least two examples, which was

00:03:29.040 --> 00:03:31.826
better than we had last time.

00:03:31.826 --> 00:03:35.480
All right now let's look at it
on a larger set of examples.

00:03:38.090 --> 00:03:41.580
I think I won't run 100 trials
here, because it'll take a

00:03:41.580 --> 00:03:42.960
little longer than we want.

00:03:45.630 --> 00:03:46.944
So let's run maybe 20.

00:03:52.268 --> 00:03:55.750
Let's see what we get.

00:03:55.750 --> 00:03:57.000
Well it's running
through here.

00:03:57.000 --> 00:04:01.530
Now we're getting examples that
seem much more credible.

00:04:01.530 --> 00:04:06.350
When we take 10 steps, the mean
is 2.85, and the max is

00:04:06.350 --> 00:04:10.660
between 6 and 1, or the max
is 6, the min is 1.

00:04:10.660 --> 00:04:12.420
It's what we would hope
for, that there's

00:04:12.420 --> 00:04:14.110
some dispersion there.

00:04:14.110 --> 00:04:18.720
And as we get up higher, we see
that for a 100,000 steps,

00:04:18.720 --> 00:04:22.932
the mean is 248, and there's
quite a spread between the max

00:04:22.932 --> 00:04:25.870
and the min.

00:04:25.870 --> 00:04:30.380
Finally we get to look at the
question that had us writing

00:04:30.380 --> 00:04:33.710
this code in the first place--

00:04:33.710 --> 00:04:37.700
how far should we expect this
drunk to be, given a

00:04:37.700 --> 00:04:39.530
particular amount of time.

00:04:39.530 --> 00:04:42.790
Well we can look at these
numbers and try and think

00:04:42.790 --> 00:04:47.840
about them in our heads, but in
fact, it's a lot easier to

00:04:47.840 --> 00:04:49.430
look at a picture.

00:04:49.430 --> 00:04:52.130
And this will get us to a theme
that we'll be getting to

00:04:52.130 --> 00:04:58.100
shortly in the course of how
do we visualize data.

00:04:58.100 --> 00:05:01.560
So here we have a
visualization.

00:05:01.560 --> 00:05:06.030
What I'm plotting, here, is the
mean number of the mean

00:05:06.030 --> 00:05:12.020
distance against the number of
steps for this random walk.

00:05:12.020 --> 00:05:17.380
And what we can see is, as we
knew, at 0, it's 0, and then

00:05:17.380 --> 00:05:19.180
it sort of goes up.

00:05:19.180 --> 00:05:20.735
And I've taken it only
up to a 1,000.

00:05:20.735 --> 00:05:22.880
And at 1,000 we're somewhere,
it looks

00:05:22.880 --> 00:05:25.335
like, around 25 steps.

00:05:28.160 --> 00:05:30.750
So we can learn something.

00:05:30.750 --> 00:05:33.620
Well what can we learn
from this?

00:05:33.620 --> 00:05:35.010
How fast is it growing?

00:05:35.010 --> 00:05:37.890
Well it seems to grow
pretty fast, and

00:05:37.890 --> 00:05:39.140
then it flattens out.

00:05:42.490 --> 00:05:46.590
It looks to me like, roughly
speaking, the distance is

00:05:46.590 --> 00:05:50.410
growing as sort of close
to the square root of

00:05:50.410 --> 00:05:52.860
the number of steps.

00:05:52.860 --> 00:05:55.530
Well I could look at
it more closely.

00:05:55.530 --> 00:05:59.640
We, actually, know this is not
exactly the square root.

00:05:59.640 --> 00:06:04.740
Right, the square root of a
1,000 is not going to be 25,

00:06:04.740 --> 00:06:08.390
but I'm not going to delve
into the details of that.

00:06:08.390 --> 00:06:10.450
It's, actually, a little
bit complicated.

00:06:10.450 --> 00:06:14.370
We could derive it, but we
won't, because I want to get

00:06:14.370 --> 00:06:18.160
to what I think is a more
important message.

00:06:22.280 --> 00:06:26.690
How much should we infer from
this or from the numbers I

00:06:26.690 --> 00:06:32.620
displayed before, and I want
to say not too much.

00:06:32.620 --> 00:06:42.550
Because what we saw, if we go
look at what we had before, is

00:06:42.550 --> 00:06:48.900
quite a dispersion between
the max and the min.

00:06:48.900 --> 00:07:01.990
And furthermore, if we run it
again, the 20 trials, we're

00:07:01.990 --> 00:07:03.240
getting different answers.

00:07:06.220 --> 00:07:11.040
So what you can see, here, is
for 10,000 steps, here, my

00:07:11.040 --> 00:07:18.450
mean was 78, and here, for
10,000 steps, my mean is 90.

00:07:18.450 --> 00:07:20.340
Here, the mean was 279.

00:07:20.340 --> 00:07:21.830
Here, it was 248.

00:07:21.830 --> 00:07:25.800
The maxs and the mins
are different.

00:07:25.800 --> 00:07:29.650
So I don't want to read too
much into that graph.

00:07:29.650 --> 00:07:33.470
Now one of the issues we should
have asked is, well

00:07:33.470 --> 00:07:35.610
it's the mean of how
many trials.

00:07:35.610 --> 00:07:38.290
I didn't tell you.

00:07:38.290 --> 00:07:40.310
And to be honest, I don't
quite remember.

00:07:40.310 --> 00:07:42.350
I think it was 20.

00:07:42.350 --> 00:07:45.790
But I don't have enough
information to interpret it.

00:07:49.070 --> 00:07:52.570
I need a lot more and that's
going to be what this whole

00:07:52.570 --> 00:07:58.260
next unit of the course is about
is how do we think about

00:07:58.260 --> 00:08:02.460
the results of programs when
the programs themselves are

00:08:02.460 --> 00:08:04.990
stochastic.

00:08:04.990 --> 00:08:09.430
And this is important because,
as you will see, not only in

00:08:09.430 --> 00:08:11.910
this course, but as you progress
in your careers, if

00:08:11.910 --> 00:08:15.980
you're involved in engineering
or science, is that almost

00:08:15.980 --> 00:08:19.220
everything in the real
world is stochastic.

00:08:19.220 --> 00:08:21.600
And in order to think about it,
we have to really think

00:08:21.600 --> 00:08:25.360
pretty hard about what
those things mean.

00:08:25.360 --> 00:08:28.920
So I want to, now, pull back
and talk a little bit, sort

00:08:28.920 --> 00:08:32.740
of, philosophically about
that, about the role of

00:08:32.740 --> 00:08:33.990
randomness in computation--

00:08:36.789 --> 00:08:40.140
something you probably haven't
seen a lot, if at all in the

00:08:40.140 --> 00:08:42.760
other courses you've taken
if you're a freshman or

00:08:42.760 --> 00:08:47.520
sophomore, and that's because
there's something really

00:08:47.520 --> 00:08:51.040
comforting about Newtonian
mechanics.

00:08:51.040 --> 00:08:54.350
When I first learned physics,
it was really comforting.

00:08:54.350 --> 00:08:56.860
I learn the physics
of Isaac Newton.

00:08:56.860 --> 00:08:59.410
You push down on one end of the
lever, the other end of

00:08:59.410 --> 00:09:01.290
the lever goes up.

00:09:01.290 --> 00:09:04.340
You throw a ball up in the air,
it travels a parabolic

00:09:04.340 --> 00:09:05.590
path and lands.

00:09:08.010 --> 00:09:13.310
F equals MA, that wonderful
rule of physics.

00:09:13.310 --> 00:09:15.450
Everything happened
for a reason.

00:09:15.450 --> 00:09:17.950
It was predictable.

00:09:17.950 --> 00:09:22.500
It was a great comfort to
some of us about it.

00:09:22.500 --> 00:09:28.770
And for centuries, that's the
way the world thought, from

00:09:28.770 --> 00:09:32.880
almost the beginning of the
times of science to, really,

00:09:32.880 --> 00:09:35.640
if you look at history of
science, to today, people

00:09:35.640 --> 00:09:38.400
believed the world was
deterministic.

00:09:38.400 --> 00:09:40.720
And they liked it.

00:09:40.720 --> 00:09:46.060
Then along came the so-called
Copenhagen Doctrine and

00:09:46.060 --> 00:09:51.790
quantum physics in the 20th
century, and the comforting

00:09:51.790 --> 00:09:56.090
world of Newtonian physics
disappeared.

00:09:56.090 --> 00:09:59.220
The Doctrine, the Copenhagen
Doctrine, led by the

00:09:59.220 --> 00:10:04.110
physicists Bohr and Heisenberg,
argued that at its

00:10:04.110 --> 00:10:08.780
most predictable and most
fundamental level, the

00:10:08.780 --> 00:10:14.230
behavior of the physical world
cannot be predicted.

00:10:14.230 --> 00:10:18.370
One can make probabilistic
statements of the form x is

00:10:18.370 --> 00:10:23.070
highly likely to occur, but not
statements of the form x

00:10:23.070 --> 00:10:26.360
is certain to occur--

00:10:26.360 --> 00:10:28.850
period.

00:10:28.850 --> 00:10:31.750
I can make the probabilistic
statement that if I take this

00:10:31.750 --> 00:10:33.350
laser pointer and put
it on the table,

00:10:33.350 --> 00:10:35.540
it won't fall through.

00:10:35.540 --> 00:10:38.230
The molecules won't separate
in such a nice way that it

00:10:38.230 --> 00:10:43.270
just drops through, but I can't
promise it won't happen.

00:10:43.270 --> 00:10:46.590
Truth is I'm going to make that
promise anyway, because I

00:10:46.590 --> 00:10:50.740
believe in probability, and it's
highly, highly probable.

00:10:50.740 --> 00:10:55.100
But they tried to say that,
in fact, the world is all

00:10:55.100 --> 00:10:55.870
stochastic.

00:10:55.870 --> 00:10:59.330
Everything is probabilistic.

00:10:59.330 --> 00:11:04.170
Other distinguished physicists
at the time, most notably

00:11:04.170 --> 00:11:09.030
Einstein and Schrodinger,
vehemently disagreed.

00:11:09.030 --> 00:11:13.090
This debate, it's hard to
believe, actually, roiled the

00:11:13.090 --> 00:11:17.650
world of physics, philosophy,
and religion.

00:11:17.650 --> 00:11:21.870
The heart of the debate was
the validity of something

00:11:21.870 --> 00:11:23.550
called causal non-determinism.

00:11:40.710 --> 00:11:42.410
The idea here--

00:11:42.410 --> 00:11:47.010
causal means caused by
previous events.

00:11:47.010 --> 00:11:51.140
So causal non-determinism was
the belief that not every

00:11:51.140 --> 00:11:56.110
event is caused by
previous events.

00:11:56.110 --> 00:12:00.050
Einstein and Schrodinger found
this view philosophically

00:12:00.050 --> 00:12:05.720
unacceptable, as exemplified
by Einstein's often quoted

00:12:05.720 --> 00:12:11.440
comment, "God does
not play dice."

00:12:11.440 --> 00:12:15.950
What they argued is for
something called predictive

00:12:15.950 --> 00:12:17.200
non-determinism.

00:12:32.260 --> 00:12:37.510
The concept here was that our
inability to make accurate

00:12:37.510 --> 00:12:40.880
measurements about the physical
world makes it

00:12:40.880 --> 00:12:44.050
impossible to make precise
predictions about the future.

00:12:46.550 --> 00:12:50.700
So this distinction was nicely
summed up again by Einstein,

00:12:50.700 --> 00:12:54.410
who said, and I quote, "the
essentially statistical

00:12:54.410 --> 00:12:59.060
character of contemporary
theory is solely to be

00:12:59.060 --> 00:13:02.290
ascribed to the fact that this
theory operates with an

00:13:02.290 --> 00:13:07.960
incomplete description of
physical systems," i.e.,

00:13:07.960 --> 00:13:11.370
things are not unpredictable,
they just look unpredictable

00:13:11.370 --> 00:13:16.330
because we don't know enough
about the initial states.

00:13:16.330 --> 00:13:20.720
This question is still
unsettled in science.

00:13:20.720 --> 00:13:22.990
The good news is it probably
doesn't matter at all

00:13:22.990 --> 00:13:25.510
what the truth is.

00:13:25.510 --> 00:13:29.280
However you want to look at it,
we have to assume that the

00:13:29.280 --> 00:13:33.410
world is non-deterministic,
because we can't, actually,

00:13:33.410 --> 00:13:35.290
predict it.

00:13:35.290 --> 00:13:37.810
So there's a little experiment
I sometimes do.

00:13:37.810 --> 00:13:39.665
I'll pretend to do it,
even though there

00:13:39.665 --> 00:13:41.350
are no students here.

00:13:41.350 --> 00:13:43.110
I take three coins--

00:13:43.110 --> 00:13:45.630
see if there are students in the
class, I ask the students

00:13:45.630 --> 00:13:48.370
to give me coins, and then
I try to steal them.

00:13:48.370 --> 00:13:50.200
But since there are no students,
I'm going to have to

00:13:50.200 --> 00:13:56.030
use my own coins, and I'm going
to ask, is at least one

00:13:56.030 --> 00:13:57.280
of them heads.

00:13:59.240 --> 00:14:05.250
Well the truth is, it's
completely predictable.

00:14:05.250 --> 00:14:07.470
I know the answer.

00:14:07.470 --> 00:14:09.030
But you don't know the
answer, because you

00:14:09.030 --> 00:14:11.320
can't see these coins.

00:14:11.320 --> 00:14:15.410
And so you might as well assume
it's probabilistic, and

00:14:15.410 --> 00:14:19.930
guess well, he put 3 coins down
at random, the odds of

00:14:19.930 --> 00:14:23.430
each one being a head is
1/2, so probably 1

00:14:23.430 --> 00:14:25.630
of the 3 is a head.

00:14:25.630 --> 00:14:29.620
And you're relying on
probability, because you don't

00:14:29.620 --> 00:14:32.200
know what's going on--

00:14:32.200 --> 00:14:33.450
predictive non-determinism.

00:14:36.720 --> 00:14:39.520
OK, and that's the way we're
going to deal with a lot of

00:14:39.520 --> 00:14:42.360
things going on for the
rest of the semester.

00:14:42.360 --> 00:14:46.410
We'll look at a lot of examples
where we have to act

00:14:46.410 --> 00:14:49.380
as if things are
non-deterministic.

00:14:49.380 --> 00:14:53.120
And that gets us to this notion
of what mathematicians

00:14:53.120 --> 00:14:54.580
call stochastic processes.

00:15:04.760 --> 00:15:10.090
A process is stochastic if it's
next state depends on

00:15:10.090 --> 00:15:14.910
both the previous states and
some random element.

00:15:48.550 --> 00:15:53.390
So now what I'm going to do is
pick up one of these coins,

00:15:53.390 --> 00:16:00.320
flip it in the air, put it down,
and ask, again, about

00:16:00.320 --> 00:16:04.270
the state of these
three coins.

00:16:04.270 --> 00:16:08.160
It depends upon the previous
state, because these two coins

00:16:08.160 --> 00:16:11.880
have the same value they had in
the previous state, plus a

00:16:11.880 --> 00:16:14.720
stochastic element, a
probabilistic element, a

00:16:14.720 --> 00:16:16.340
random element--

00:16:16.340 --> 00:16:18.680
the value of that coin,
which I just flipped.

00:16:21.320 --> 00:16:26.520
OK, most programming languages,
including Python,

00:16:26.520 --> 00:16:31.450
include simple ways to write
programs that use randomness.

00:16:31.450 --> 00:16:38.110
As we'll see, as we've already
seen in Python with our

00:16:38.110 --> 00:16:47.930
drunkard's walk, we use the
function random.choice, which,

00:16:47.930 --> 00:16:52.020
given a set of values
at random, chose

00:16:52.020 --> 00:16:54.460
one of those values.

00:16:54.460 --> 00:16:58.900
That function and almost all
of the other functions in

00:16:58.900 --> 00:17:04.380
Python that involve randomness
are implemented using

00:17:04.380 --> 00:17:05.630
something called
random.random.

00:17:10.200 --> 00:17:14.579
This function generates a random
float that's greater

00:17:14.579 --> 00:17:23.119
than 0 and no greater than 1.0,
So you get one of the

00:17:23.119 --> 00:17:26.050
infinite or seemingly infinite
number of floating point

00:17:26.050 --> 00:17:31.890
values that are greater than
0 and no greater than 1.

00:17:31.890 --> 00:17:35.360
So let's go look at
another example of

00:17:35.360 --> 00:17:36.610
the stochastic process.

00:17:40.510 --> 00:17:41.885
We're going to look
at throwing dice.

00:17:48.170 --> 00:17:55.350
So I've got something called
rollDie, which chooses a value

00:17:55.350 --> 00:17:57.630
between 1 and 6.

00:17:57.630 --> 00:17:59.790
For those of you who have
never gambled with

00:17:59.790 --> 00:18:01.820
dice, it's a cube.

00:18:01.820 --> 00:18:04.410
You roll it, and it has a value
between 1 and 6 that

00:18:04.410 --> 00:18:06.620
shows up at random.

00:18:06.620 --> 00:18:12.760
And then I've got this little
program called testRoll that

00:18:12.760 --> 00:18:17.420
rolls a bunch of dice and
comes up with an answer.

00:18:17.420 --> 00:18:21.190
All right, so let's
see what happens.

00:18:24.000 --> 00:18:27.060
Actually, before we do that,
let me ask you--

00:18:27.060 --> 00:18:29.550
we can look at a question.

00:18:29.550 --> 00:18:34.350
Imagine I roll it, and
I run it some large

00:18:34.350 --> 00:18:37.900
number of times, 10.

00:18:37.900 --> 00:18:40.940
Would you expect to
see the value--

00:18:44.890 --> 00:18:50.780
more likely see that value or
might more likely see a value

00:18:50.780 --> 00:18:52.030
that looks like this.

00:19:02.120 --> 00:19:05.390
Which of these values is more
likely to come up from my

00:19:05.390 --> 00:19:07.870
random rolls of the die?

00:19:12.380 --> 00:19:14.860
Well when I take a vote--

00:19:14.860 --> 00:19:16.230
if I take a vote--

00:19:16.230 --> 00:19:21.110
historically in this class, this
strikes people as more

00:19:21.110 --> 00:19:23.840
likely to happen than this.

00:19:23.840 --> 00:19:27.790
But it's a trick question,
because as it happens, they're

00:19:27.790 --> 00:19:29.920
equally likely.

00:19:29.920 --> 00:19:36.590
And the reason they're equally
likely is each roll is

00:19:36.590 --> 00:19:40.120
independent of the
previous rolls.

00:19:43.240 --> 00:19:46.620
And as we'll see in our
excursion in probability and

00:19:46.620 --> 00:19:53.030
randomness, independence is a
very important assumption.

00:19:53.030 --> 00:19:59.020
In a stochastic process, two
events are independent if the

00:19:59.020 --> 00:20:02.700
outcome of one event has
no influence on the

00:20:02.700 --> 00:20:05.540
outcome of the other.

00:20:05.540 --> 00:20:10.490
The events are independent if
the outcome of one event has

00:20:10.490 --> 00:20:14.870
no influence on the outcome
of the other.

00:20:14.870 --> 00:20:17.880
So it's a bit easier to think
about this, maybe, if we

00:20:17.880 --> 00:20:21.050
simplify the situation for the
moment to think about flipping

00:20:21.050 --> 00:20:25.830
coins, which have either heads
or tails, and I'll look at the

00:20:25.830 --> 00:20:30.590
value 0 or 1 as the
examples there.

00:20:30.590 --> 00:20:32.240
That means I can use--

00:20:32.240 --> 00:20:34.960
I have a binary die
for some reason.

00:20:34.960 --> 00:20:41.380
So as we've seen before, if I
flip a coin ten times, how

00:20:41.380 --> 00:20:45.330
many different possibilities,
sequences

00:20:45.330 --> 00:20:47.220
of 0 and 1 are there?

00:20:47.220 --> 00:20:49.730
Well we've seen this kind of
thing a lot of times already

00:20:49.730 --> 00:20:51.880
this semester.

00:20:51.880 --> 00:20:55.930
There are 2 to the 10 binary
numbers of 10 digits, so we

00:20:55.930 --> 00:20:57.590
know that there are 2 to
the 10 possibilities.

00:21:00.870 --> 00:21:02.210
Each of these 2 to the 10

00:21:02.210 --> 00:21:06.350
possibilities are equally likely.

00:21:06.350 --> 00:21:13.140
So the number in which I have
all 0's is no more likely than

00:21:13.140 --> 00:21:16.670
the number of all 1's, is
no more likely than some

00:21:16.670 --> 00:21:19.580
seemingly random combinations
of 0 and 1.

00:21:24.800 --> 00:21:28.640
So it's a very small
probability.

00:21:28.640 --> 00:21:33.370
So what's the probability
of getting all 1's?

00:21:33.370 --> 00:21:36.060
It's 1 out of 2 to the 10.

00:21:39.120 --> 00:21:41.580
What's the probability
of getting all 0's?

00:21:41.580 --> 00:21:43.850
1 out of 2 to the 10.

00:21:43.850 --> 00:21:46.880
What's the probability of any
combination you would happen

00:21:46.880 --> 00:21:49.070
to pick of 0's and 1's?

00:21:49.070 --> 00:21:50.970
1 over 2 to the 10.

00:21:54.310 --> 00:21:57.520
I know I'm belaboring this
point, but the point I want to

00:21:57.520 --> 00:22:02.830
make is that when we talk about
some result having a

00:22:02.830 --> 00:22:07.000
particular probability, we are
asking, essentially, the

00:22:07.000 --> 00:22:19.960
question, what fraction of the
possible results have the

00:22:19.960 --> 00:22:22.550
property we're testing for.

00:22:26.720 --> 00:22:30.120
So I ask what property
are all 1's.

00:22:30.120 --> 00:22:32.225
I'm saying what fraction
are all 1's.

00:22:32.225 --> 00:22:36.350
If I say well, the properties
are exactly four 1's.

00:22:36.350 --> 00:22:40.600
What fraction of these numbers
have exactly four 1's in them?

00:22:40.600 --> 00:22:42.000
Whatever I want.

00:22:42.000 --> 00:22:47.250
So probabilities will
always be fractions.

00:22:47.250 --> 00:22:51.180
That's important because it
means that when we talk about

00:22:51.180 --> 00:22:55.450
the probability of some event
occurring, we know it has to

00:22:55.450 --> 00:23:00.060
be somewhere between 0 and 1.

00:23:00.060 --> 00:23:03.420
Probabilities are never
less than 0.

00:23:03.420 --> 00:23:05.900
They're never more than 1.

00:23:05.900 --> 00:23:10.710
Cannot happen, guaranteed
to happen, usually

00:23:10.710 --> 00:23:11.960
somewhere in between.

00:23:14.740 --> 00:23:18.570
All right, that's the key
thing to remember when

00:23:18.570 --> 00:23:19.820
thinking about probabilities.

00:23:22.230 --> 00:23:25.980
Suppose I want to ask, what's
the probability of getting

00:23:25.980 --> 00:23:30.240
some sequence of coin flips
other than all 1's.

00:23:33.040 --> 00:23:37.990
Well I know the probability of
getting all 1's is 1 out of 2

00:23:37.990 --> 00:23:39.240
to the 10th.

00:23:41.400 --> 00:23:43.750
I know the probability
of getting some

00:23:43.750 --> 00:23:46.350
sequence of flips is 1.

00:23:46.350 --> 00:23:49.110
It's certain I'll get one
of those numbers.

00:23:49.110 --> 00:23:52.610
So the answer is the probability
of not getting all

00:23:52.610 --> 00:23:55.680
1's is 1 minus 1 over
2 to the 10th.

00:23:58.200 --> 00:24:02.490
This is an important
trick to remember.

00:24:02.490 --> 00:24:07.010
Typically we have two ways of
computing probabilities.

00:24:07.010 --> 00:24:11.240
We can either compute it
directly, as I did when I

00:24:11.240 --> 00:24:16.170
computed the probability of
getting all 1's, or we can

00:24:16.170 --> 00:24:22.940
compute the probability of
something not happening by

00:24:22.940 --> 00:24:26.450
subtracting one probability
from another,

00:24:26.450 --> 00:24:29.240
this 1 minus trick.

00:24:29.240 --> 00:24:32.720
And so you'll see me using
this formulation a lot of

00:24:32.720 --> 00:24:36.760
times, And we'll talk as we
go forward about when

00:24:36.760 --> 00:24:38.910
you do it which way.

00:24:38.910 --> 00:24:45.910
All right so let's go back,
finally, to our six-sided die.

00:24:45.910 --> 00:24:50.020
How many sequences are there
of length 10 for that?

00:24:50.020 --> 00:24:51.290
2 to the 10th?

00:24:51.290 --> 00:24:52.620
No.

00:24:52.620 --> 00:24:54.370
6 to the 10th.

00:24:54.370 --> 00:24:57.390
Because unlike the coin where
we only had 2 possibilities,

00:24:57.390 --> 00:25:00.020
we now have 6 possibilities.

00:25:00.020 --> 00:25:05.120
So there are 6 to the 10th
different sequences of rolls I

00:25:05.120 --> 00:25:08.470
could get, quite a few.

00:25:08.470 --> 00:25:14.600
So the probability of getting 10
consecutive 1's is 1 over 6

00:25:14.600 --> 00:25:17.070
to the 10th.

00:25:17.070 --> 00:25:19.640
And of course, the probability
of getting this sequence,

00:25:19.640 --> 00:25:23.320
here, is also 1 over 6 to
the 10th, so we see

00:25:23.320 --> 00:25:26.815
that they are equal.

00:25:26.815 --> 00:25:31.080
OK, we're going to spend a lot
more time on probability and

00:25:31.080 --> 00:25:34.155
randomized and stochastic
algorithms.

00:25:34.155 --> 00:25:38.850
But before I do that, I want to
take a brief digression and

00:25:38.850 --> 00:25:41.570
return to the topic we looked
at a little earlier this

00:25:41.570 --> 00:25:46.220
morning, which was data
visualization, plotting.

00:25:46.220 --> 00:25:48.610
I want to do this
for two reasons.

00:25:48.610 --> 00:25:51.360
One, it's really important.

00:25:51.360 --> 00:25:54.650
It's something that all of us
do a lot of in the course of

00:25:54.650 --> 00:25:59.430
our work, but it also will just
make it a lot easier for

00:25:59.430 --> 00:26:03.720
me to talk about probability
and stochastics when I can

00:26:03.720 --> 00:26:07.040
draw some pretty pictures to
illustrate what's going on.

00:26:10.450 --> 00:26:17.720
Now many people, most of us,
probably, when we're writing

00:26:17.720 --> 00:26:21.470
code to do something, focus on
writing programs that perform

00:26:21.470 --> 00:26:25.000
some complicated analysis
of the data,

00:26:25.000 --> 00:26:26.960
and then print something.

00:26:26.960 --> 00:26:31.220
We don't spend enough time, I
think, worrying about how the

00:26:31.220 --> 00:26:35.760
results of our analyses are
presented so that somebody

00:26:35.760 --> 00:26:38.460
else can make sense of them, or
in fact, we can understand

00:26:38.460 --> 00:26:40.730
them better ourselves.

00:26:40.730 --> 00:26:44.660
Sometimes text is the best way,
but sometimes there's a

00:26:44.660 --> 00:26:49.140
lot of truth to the Chinese
proverb that a picture's

00:26:49.140 --> 00:26:53.330
meaning can express
10,000 words.

00:26:53.330 --> 00:26:55.840
Now most of us, sort
of, believe this.

00:26:55.840 --> 00:26:57.480
Why don't we do it?

00:26:57.480 --> 00:26:59.930
Well because in most programming
languages, it's

00:26:59.930 --> 00:27:03.010
hard to draw pretty pictures.

00:27:03.010 --> 00:27:05.670
One of the reasons we use
Python in this class is

00:27:05.670 --> 00:27:09.770
because in Python, it's easy to
draw pretty pictures or, at

00:27:09.770 --> 00:27:12.530
least, to make plots.

00:27:12.530 --> 00:27:14.020
Why is that?

00:27:14.020 --> 00:27:16.560
It's because somebody--

00:27:16.560 --> 00:27:17.780
not me--

00:27:17.780 --> 00:27:19.500
went to the trouble of building

00:27:19.500 --> 00:27:20.750
something called PyLab.

00:27:26.170 --> 00:27:30.780
PyLab is a Python library that
provides many of the

00:27:30.780 --> 00:27:34.050
facilities of something
called MATLAB.

00:27:41.170 --> 00:27:47.260
If you're an MIT student, the
probability of your graduating

00:27:47.260 --> 00:27:51.740
without using MATLAB
is very low.

00:27:51.740 --> 00:27:54.980
It is something people
use a lot.

00:27:54.980 --> 00:27:57.330
It's not my favorite programming
language.

00:27:57.330 --> 00:27:59.560
It has its utility.

00:27:59.560 --> 00:28:02.590
I like Python, because
it brings--

00:28:02.590 --> 00:28:07.600
a lot of the features of MATLAB
are easy to use in a

00:28:07.600 --> 00:28:10.270
programming language that
I find much more

00:28:10.270 --> 00:28:12.170
convivial than MATLAB.

00:28:14.710 --> 00:28:17.830
All right I'm not going to give
you a complete tutorial

00:28:17.830 --> 00:28:20.030
for PyLab here.

00:28:20.030 --> 00:28:23.630
It would take a long time,
and it would be boring.

00:28:23.630 --> 00:28:26.960
Instead I'm going to give you
a few examples, and in fact,

00:28:26.960 --> 00:28:32.166
focus primarily on the plotting
capabilities.

00:28:35.810 --> 00:28:39.880
And the good news is the
plotting capabilities in PyLab

00:28:39.880 --> 00:28:43.760
are almost identical to those in
MATLAB, so if you learn how

00:28:43.760 --> 00:28:48.580
to do it here, you'll already
know how to do it here.

00:28:48.580 --> 00:28:54.046
For details you should
take a look at--

00:28:54.046 --> 00:28:56.060
let me make sure I write
this correctly--

00:28:59.140 --> 00:29:15.360
this website,
matplotlib.sourceforge.net,

00:29:15.360 --> 00:29:18.750
and it's a very nicely put
together website that will

00:29:18.750 --> 00:29:22.880
give you all of the capabilities
of plotting.

00:29:22.880 --> 00:29:27.000
Also you'll find in the class
website, I've written a little

00:29:27.000 --> 00:29:31.330
chapter of a book about how to
do this sort of thing, and you

00:29:31.330 --> 00:29:32.750
may also find that helpful.

00:29:35.510 --> 00:29:39.170
I should point out that PyLab
is not part of the standard

00:29:39.170 --> 00:29:41.240
Python distribution.

00:29:41.240 --> 00:29:44.610
It has to be installed on your
computer, and again, there are

00:29:44.610 --> 00:29:46.890
instructions about how
to do this posted

00:29:46.890 --> 00:29:49.730
on the class website.

00:29:49.730 --> 00:29:53.290
All right let's start with
something very simple.

00:29:58.400 --> 00:29:59.480
We'll look at that, here.

00:29:59.480 --> 00:30:02.930
I'm beginning by importing.

00:30:08.500 --> 00:30:09.700
I'll import PyLab.

00:30:09.700 --> 00:30:13.220
You have to import
it to use it.

00:30:13.220 --> 00:30:16.470
And then I'm going to
plot two things.

00:30:16.470 --> 00:30:19.560
So what I want to observe,
here, is I'm

00:30:19.560 --> 00:30:20.980
going to plot two vectors--

00:30:20.980 --> 00:30:26.160
the vector 1, 2, 3, 4 and
the vector 1, 2, 3, 4.

00:30:26.160 --> 00:30:27.830
These are the x-coordinates.

00:30:27.830 --> 00:30:29.850
These are the y-coordinates.

00:30:29.850 --> 00:30:33.540
So we'll get a two-dimensional
plot, x versus y.

00:30:33.540 --> 00:30:36.900
And it's very important that
these two vectors be of the

00:30:36.900 --> 00:30:38.150
same length.

00:30:40.420 --> 00:30:43.170
Doubtless when you're using this
in your problem sets, you

00:30:43.170 --> 00:30:46.310
will screw up and you'll get
an error message, which you

00:30:46.310 --> 00:30:48.940
will have a hard time
interpreting, but what it

00:30:48.940 --> 00:30:51.340
probably is going to boil down
to is you've done something

00:30:51.340 --> 00:30:53.540
wrong, and you're plotting
things that are

00:30:53.540 --> 00:30:56.700
not the same length.

00:30:56.700 --> 00:30:59.290
After I plot these two things,
I'm going to type

00:30:59.290 --> 00:31:03.340
"pyLab.show," which will
put the plots up

00:31:03.340 --> 00:31:04.760
for us to look at.

00:31:04.760 --> 00:31:06.320
So let's do that now.

00:31:16.640 --> 00:31:20.530
So the first plot in
our straight line--

00:31:20.530 --> 00:31:24.900
1 versus 1, 2 versus 2, 3
versus 3, 4 versus 4--

00:31:24.900 --> 00:31:26.110
got that.

00:31:26.110 --> 00:31:30.500
Then it plotted this rather
funny looking zigzag we saw,

00:31:30.500 --> 00:31:35.280
kind of just randomly chosen
in the other one.

00:31:35.280 --> 00:31:37.615
And the plots will always look
something like this.

00:31:40.730 --> 00:31:46.295
I should mention, if we go look
at the code, pyLab.show--

00:31:49.030 --> 00:31:53.190
if I haven't said that, the plot
would not have appeared

00:31:53.190 --> 00:31:54.950
on my screen.

00:31:54.950 --> 00:31:59.440
PyLab would have produced it,
but not displayed it.

00:31:59.440 --> 00:32:03.000
You may think that's silly,
but in fact it's useful,

00:32:03.000 --> 00:32:06.350
because most of the time when
I'm writing programs that do

00:32:06.350 --> 00:32:10.200
plotting, I don't want to
see them on my screen.

00:32:10.200 --> 00:32:12.550
I'm producing a whole bunch of
plots, and I'm going to write

00:32:12.550 --> 00:32:16.170
them to files that I will then
look at later or include in a

00:32:16.170 --> 00:32:19.940
paper or a lecture or something,
so it makes me say

00:32:19.940 --> 00:32:23.230
that I want to see it.

00:32:23.230 --> 00:32:28.280
I should point out, depending
upon your operating system, it

00:32:28.280 --> 00:32:32.460
can be pretty annoying, because
if you try and do this

00:32:32.460 --> 00:32:36.180
twice in your code, something
bad can happen.

00:32:36.180 --> 00:32:39.350
The code can hang.

00:32:39.350 --> 00:32:41.600
Therefore, you should
only execute

00:32:41.600 --> 00:32:45.010
pyLab.show once per program.

00:32:45.010 --> 00:32:48.510
And it should always be the
last thing you executed,

00:32:48.510 --> 00:32:52.140
because once you execute
pyLab.show, the program will

00:32:52.140 --> 00:32:54.960
stop running, essentially.

00:32:54.960 --> 00:32:55.730
It's annoying.

00:32:55.730 --> 00:32:58.280
I wish it weren't that
way, but it is.

00:32:58.280 --> 00:33:01.840
So live with it.

00:33:01.840 --> 00:33:06.095
All right let's go look back
at our graph, our plot.

00:33:11.900 --> 00:33:15.450
At the top is a title.

00:33:15.450 --> 00:33:17.080
This is the default title.

00:33:17.080 --> 00:33:19.520
It says figure 1.

00:33:19.520 --> 00:33:22.130
Later we'll see that I could
have given it a much better

00:33:22.130 --> 00:33:23.990
title than that.

00:33:23.990 --> 00:33:29.230
Then it's got the values of the
x and y-axes and a bunch

00:33:29.230 --> 00:33:34.050
of things down at the bottom
that we could point out.

00:33:34.050 --> 00:33:39.890
You can zoom in on the plots,
using that or zoom out.

00:33:39.890 --> 00:33:42.390
You can use this funny icon.

00:33:42.390 --> 00:33:46.940
It happens to be a floppy disk
icon, something that probably

00:33:46.940 --> 00:33:49.190
most of you have never seen.

00:33:49.190 --> 00:33:52.130
Congratulations if you've never
seen a floppy disk.

00:33:52.130 --> 00:33:54.750
Your life is better than
it would be had you had

00:33:54.750 --> 00:33:56.580
to deal with them.

00:33:56.580 --> 00:33:59.370
But that's used for saving
them to a file.

00:33:59.370 --> 00:34:00.890
You can move around in it.

00:34:00.890 --> 00:34:04.130
You can get back to what the
original figure was, a whole

00:34:04.130 --> 00:34:05.380
bunch of useful things.

00:34:05.380 --> 00:34:09.550
I suggest you just bring this
up and play with it.

00:34:14.520 --> 00:34:19.110
One of the things I should
mention here is you'll note

00:34:19.110 --> 00:34:23.639
that when I produced this,
I only use four points--

00:34:23.639 --> 00:34:26.800
1, 2, 3, and 4, say,
for this one.

00:34:26.800 --> 00:34:31.732
Yet it looks as if I have
a continuous plot.

00:34:31.732 --> 00:34:37.600
You know, it claims that
1.5 and 1.5 match.

00:34:37.600 --> 00:34:41.730
This can be very deceptive,
as we'll see later on, and

00:34:41.730 --> 00:34:45.150
probably it might have been
better for me to plot not

00:34:45.150 --> 00:34:48.960
lines here, but points,
indicating there are only four

00:34:48.960 --> 00:34:51.420
points in this graph.

00:34:51.420 --> 00:34:54.040
It's more apparent here, where
we see this funny looking

00:34:54.040 --> 00:34:58.070
zigzag, implying some
complicated relationship

00:34:58.070 --> 00:35:00.370
amongst the points,
which, actually,

00:35:00.370 --> 00:35:02.640
probably doesn't exist.

00:35:02.640 --> 00:35:09.060
And again later on we'll
see ways to avoid that.

00:35:09.060 --> 00:35:10.820
OK.

00:35:10.820 --> 00:35:14.940
It is, of course, possible to
produce more than one figure.

00:35:14.940 --> 00:35:16.190
So let's look at this.

00:35:18.720 --> 00:35:22.630
We'll comment this piece
out for now.

00:35:34.480 --> 00:35:37.900
And we'll run this code.

00:35:37.900 --> 00:35:41.540
So this says I want to plot
something on a figure I'm

00:35:41.540 --> 00:35:45.630
calling figure 1, as before,
And then I'm going to

00:35:45.630 --> 00:35:46.620
go to figure 2.

00:35:46.620 --> 00:35:49.650
So now instead of plotting
both of these on the same

00:35:49.650 --> 00:35:52.950
figure, I'm going to put them
on separate figures.

00:35:52.950 --> 00:35:59.100
And then pyLab.savefigure will,
actually, create a file

00:35:59.100 --> 00:36:02.880
in the directory in which I'm
running the program and save

00:36:02.880 --> 00:36:06.260
it-- called firstsaved And then
this will be secondsaved.

00:36:06.260 --> 00:36:07.640
And now I can run it.

00:36:14.820 --> 00:36:17.150
And now I have two figures--

00:36:17.150 --> 00:36:19.390
figure 1, as before--

00:36:19.390 --> 00:36:21.740
well not quite as before,
a different figure--

00:36:21.740 --> 00:36:22.990
and figure 2.

00:36:27.150 --> 00:36:30.850
Again, nothing very
magical there.

00:36:30.850 --> 00:36:33.530
And if we look in my directory,
we should see, I

00:36:33.530 --> 00:36:39.380
hope, firstsaved and
secondsaved, so if we look at

00:36:39.380 --> 00:36:44.770
secondsaved, we'll
see, there it is.

00:36:44.770 --> 00:36:48.640
And just to show that I'm not
cheating, you can notice that

00:36:48.640 --> 00:36:53.620
the time stamp is today at 10:34
AM, which happens to be

00:36:53.620 --> 00:36:58.170
when I'm giving this
particular lecture.

00:36:58.170 --> 00:37:03.025
All right you can put that
away now and continue.

00:37:08.000 --> 00:37:24.180
Now what I want you to notice
is the last one.

00:37:24.180 --> 00:37:27.030
I just gave it one argument--

00:37:27.030 --> 00:37:30.820
5, 6, 7 and 10.

00:37:30.820 --> 00:37:32.185
And if we look at what
it plotted--

00:37:41.100 --> 00:37:43.010
actually, I think I put that
in figure 1, didn't I?

00:37:47.110 --> 00:37:48.360
You'll see, here it is.

00:37:51.900 --> 00:37:57.480
And it's made up some values
for the x-axis.

00:37:57.480 --> 00:38:00.380
If you only give it one set of
values, it assumes it's the

00:38:00.380 --> 00:38:03.825
y-axis, and it finds values.

00:38:06.340 --> 00:38:10.890
All right now what values
is it going to

00:38:10.890 --> 00:38:13.090
choose for the x-axis?

00:38:13.090 --> 00:38:16.690
Well this is Python, so
surprise, surprise, the first

00:38:16.690 --> 00:38:21.610
value is 0, 1, 2, and 3.

00:38:21.610 --> 00:38:23.090
It's how I get the
four values.

00:38:25.890 --> 00:38:32.320
Now we could look at another
example, a slightly more

00:38:32.320 --> 00:38:33.570
interesting one.

00:38:37.190 --> 00:38:39.790
Comment this out, so we don't
look at the boring stuff over

00:38:39.790 --> 00:38:41.040
and over again.

00:38:46.330 --> 00:38:50.325
I've written a little program
to calculate interest.

00:38:58.270 --> 00:39:04.090
So I'm going to start with an
initial principal, here, of

00:39:04.090 --> 00:39:08.900
1,000, an interest rate
of 5%, 20 years, and

00:39:08.900 --> 00:39:12.490
just do compound interest.

00:39:12.490 --> 00:39:15.430
This, you all would know
how to write this.

00:39:15.430 --> 00:39:17.450
And I'm going to plot it
and see what we get.

00:39:26.350 --> 00:39:28.380
All right so what we have--

00:39:28.380 --> 00:39:32.040
something here, which, sort
of, shows the kind of

00:39:32.040 --> 00:39:36.420
beautiful growth you get with
compound interest, what the

00:39:36.420 --> 00:39:40.050
finance people call the magic
of compounding, which will

00:39:40.050 --> 00:39:43.710
make us all rich in principle,
until we see what the

00:39:43.710 --> 00:39:45.630
markets really do.

00:39:45.630 --> 00:39:48.790
But at any rate, for now we can
look at it, and it looks

00:39:48.790 --> 00:39:50.040
very pretty.

00:39:53.090 --> 00:39:56.850
But I don't know
what it means.

00:39:56.850 --> 00:40:00.560
I look and say, "oh, its figure
1." Well that's not

00:40:00.560 --> 00:40:05.670
very informative, and x goes
from 0 to 20, but if I haven't

00:40:05.670 --> 00:40:07.380
told you, you wouldn't
know what that meant.

00:40:07.380 --> 00:40:12.720
And y from 10,000 up to
28,000, but again, you

00:40:12.720 --> 00:40:13.970
wouldn't know what that means.

00:40:16.690 --> 00:40:19.340
We see this all the time.

00:40:19.340 --> 00:40:20.590
It's not a good thing.

00:40:24.340 --> 00:40:26.820
It's a bad thing, in fact.

00:40:26.820 --> 00:40:31.080
All plots should have
informative titles, and all

00:40:31.080 --> 00:40:33.730
axes should be labeled.

00:40:33.730 --> 00:40:36.570
I can't tell you the number of
times I've had a graduate

00:40:36.570 --> 00:40:40.890
student show up in my office,
having worked for weeks

00:40:40.890 --> 00:40:44.530
producing some data, put a plot
on my desk, and say, look

00:40:44.530 --> 00:40:46.570
at this, isn't it great.

00:40:46.570 --> 00:40:49.940
And I say, I have no
idea what it means.

00:40:49.940 --> 00:40:52.560
And sometimes, I'll say, well
what is the y-axis, and they

00:40:52.560 --> 00:40:53.680
end up scratching their head.

00:40:53.680 --> 00:40:56.700
They're not quite sure.

00:40:56.700 --> 00:40:58.390
You've got to label your axes.

00:40:58.390 --> 00:40:59.590
You've got to put a title.

00:40:59.590 --> 00:41:02.575
You've got to give the
person a break.

00:41:02.575 --> 00:41:05.000
Well how do we do that?

00:41:05.000 --> 00:41:07.750
Well it's pretty simple.

00:41:07.750 --> 00:41:09.000
So here's this code.

00:41:15.530 --> 00:41:23.770
So I just want to get rid of
the old graphs, because

00:41:23.770 --> 00:41:26.035
sometimes if you look at them,
it causes you problems.

00:41:30.720 --> 00:41:32.770
Because it's now hung.

00:41:32.770 --> 00:41:34.790
It won't continue until
I get rid of it.

00:41:34.790 --> 00:41:37.110
Now my shell is back.

00:41:37.110 --> 00:41:43.090
So pyLab.title just says, OK,
I'm going to call it 5%

00:41:43.090 --> 00:41:45.500
growth, compounded annually.

00:41:45.500 --> 00:41:49.570
Notice that I've put in that
it's 5% interest rate and that

00:41:49.570 --> 00:41:51.340
I'm compounding it
annually, not

00:41:51.340 --> 00:41:52.710
semi-annually or quarterly.

00:41:55.790 --> 00:41:59.280
The x-axis is going to be the
years of compounding and the

00:41:59.280 --> 00:42:02.760
y-axis, the value of the
principle in dollars.

00:42:11.450 --> 00:42:15.350
So now it's the same
curve, but a far

00:42:15.350 --> 00:42:17.455
more informative picture.

00:42:20.580 --> 00:42:23.730
All right here's where
I want to stop today.

00:42:23.730 --> 00:42:27.960
We're going to come back to this
topic, in probably more

00:42:27.960 --> 00:42:31.640
detail than you want, and spend
quite a lot of time

00:42:31.640 --> 00:42:35.890
talking about how do we produce
beautiful plots, and

00:42:35.890 --> 00:42:38.080
more importantly, how do we
produce plots that are,

00:42:38.080 --> 00:42:41.760
actually, meaningful to
those reading them.

00:42:41.760 --> 00:42:43.220
Thanks a lot.

00:42:43.220 --> 00:42:44.710
I'll see you in the
next lecture.