WEBVTT

00:00:00.040 --> 00:00:02.470
The following content is
provided under a Creative

00:00:02.470 --> 00:00:03.880
Commons license.

00:00:03.880 --> 00:00:06.920
Your support will help MIT
OpenCourseWare continue to

00:00:06.920 --> 00:00:10.570
offer high quality educational
resources for free.

00:00:10.570 --> 00:00:13.470
To make a donation or view
additional materials from

00:00:13.470 --> 00:00:19.290
hundreds of MIT courses, visit
MIT OpenCourseWare at

00:00:19.290 --> 00:00:20.750
ocw.mit.edu.

00:00:20.750 --> 00:00:56.781
[MUSIC PLAYING]

00:00:56.781 --> 00:00:59.630
PROFESSOR: In the last lecture,
we discussed a number

00:00:59.630 --> 00:01:04.610
of general properties for
systems, which, as you recall,

00:01:04.610 --> 00:01:08.710
applied both to continuous-time
and to

00:01:08.710 --> 00:01:12.060
discrete-time systems.

00:01:12.060 --> 00:01:15.590
These properties were the
properties associated with a

00:01:15.590 --> 00:01:17.810
system having memory.

00:01:17.810 --> 00:01:22.390
The issue of whether a system
is or isn't invertible, we

00:01:22.390 --> 00:01:27.180
talked about causality and
stability, and finally we

00:01:27.180 --> 00:01:31.170
talked about when linearity
and time invariance.

00:01:31.170 --> 00:01:34.710
In today's lecture, what
I'd like to do is focus

00:01:34.710 --> 00:01:39.210
specifically on linearity and
time invariance, and show how

00:01:39.210 --> 00:01:43.420
for systems that have those
properties, we can exploit

00:01:43.420 --> 00:01:47.840
them to generate a general
representation.

00:01:47.840 --> 00:01:50.610
Let me begin by just
reviewing the two

00:01:50.610 --> 00:01:52.700
properties again quickly.

00:01:52.700 --> 00:01:57.480
Time invariance, as you recall,
is a property that

00:01:57.480 --> 00:01:59.430
applied both to continuous-time
and

00:01:59.430 --> 00:02:05.280
discrete-time systems, and in
essence stated that for any

00:02:05.280 --> 00:02:10.070
given input and output
relationship if we simply

00:02:10.070 --> 00:02:13.470
shift the input,
then the output

00:02:13.470 --> 00:02:15.800
shifts by the same amount.

00:02:15.800 --> 00:02:20.320
And of course, exactly the same
kind of statement applied

00:02:20.320 --> 00:02:22.590
in discrete time.

00:02:22.590 --> 00:02:25.510
So time invariance was a
property that said that the

00:02:25.510 --> 00:02:28.850
system didn't care about
what the time origin

00:02:28.850 --> 00:02:31.540
of the signal is.

00:02:31.540 --> 00:02:35.810
Linearity was a property related
to the fact that if we

00:02:35.810 --> 00:02:39.390
have a set of outputs
associated with a

00:02:39.390 --> 00:02:42.040
given set of inputs--

00:02:42.040 --> 00:02:46.910
as I've indicated here with the
inputs as phi_k and the

00:02:46.910 --> 00:02:53.160
outputs psi_k, then the property
of linearity states

00:02:53.160 --> 00:02:58.250
that if we have an input which
is a linear combination of

00:02:58.250 --> 00:03:04.470
those inputs, then the output is
a linear combination of the

00:03:04.470 --> 00:03:06.250
associated outputs.

00:03:06.250 --> 00:03:11.590
So that linear combination of
inputs generates, for a linear

00:03:11.590 --> 00:03:16.600
system, an output which is a
linear combination of the

00:03:16.600 --> 00:03:19.600
associated outputs.

00:03:19.600 --> 00:03:23.940
Now the question is, how can we
exploit the properties of

00:03:23.940 --> 00:03:27.530
linearity and time invariance?

00:03:27.530 --> 00:03:31.420
There's a basic strategy which
will flow more or less through

00:03:31.420 --> 00:03:33.720
most of this course.

00:03:33.720 --> 00:03:39.660
The strategy is to attempt to
decompose a signal, either

00:03:39.660 --> 00:03:43.590
continuous-time or
discrete-time, into a set of

00:03:43.590 --> 00:03:46.630
basic signals.

00:03:46.630 --> 00:03:50.410
I've indicated that here.

00:03:50.410 --> 00:03:56.000
And the question then is, what
basic signal should we pick?

00:03:56.000 --> 00:03:59.670
Well, the answer, kind of, is we
should pick a set of basic

00:03:59.670 --> 00:04:03.210
signals that provide a certain
degree of analytical

00:04:03.210 --> 00:04:04.180
convenience.

00:04:04.180 --> 00:04:08.200
So we choose a set of inputs
for the decomposition that

00:04:08.200 --> 00:04:13.810
provide outputs that we
can easily generate.

00:04:13.810 --> 00:04:20.279
Now, as we'll see, when we do
this, there are two classes of

00:04:20.279 --> 00:04:24.890
inputs that are particularly
suited to that strategy.

00:04:24.890 --> 00:04:31.170
One class is the set of delayed
impulses, namely

00:04:31.170 --> 00:04:35.300
decomposing a signal into a
linear combination of these.

00:04:35.300 --> 00:04:39.390
And as we'll see, that leads to
a representation for linear

00:04:39.390 --> 00:04:45.840
time-invariant systems, which is
referred to as convolution.

00:04:45.840 --> 00:04:50.650
The second is a decomposition
of inputs into complex

00:04:50.650 --> 00:04:52.380
exponentials--

00:04:52.380 --> 00:04:55.450
a linear combination of
complex exponentials--

00:04:55.450 --> 00:05:00.220
and that leads to a
representation of signals and

00:05:00.220 --> 00:05:04.045
systems through what we'll refer
to as Fourier analysis.

00:05:06.560 --> 00:05:10.290
Now, Fourier analysis will
be a topic for a

00:05:10.290 --> 00:05:12.030
set of later lectures.

00:05:12.030 --> 00:05:15.150
What I'd like to begin with is
the representation in terms of

00:05:15.150 --> 00:05:18.520
impulses and the associated
description of linear

00:05:18.520 --> 00:05:22.520
time-invariant systems
using convolution.

00:05:22.520 --> 00:05:27.040
So let's begin with a discussion
of discrete-time

00:05:27.040 --> 00:05:31.410
signals, and in particular the
issue of how discrete-time

00:05:31.410 --> 00:05:34.770
signals can be decomposed
as a linear

00:05:34.770 --> 00:05:39.740
combination of delayed impulses.

00:05:39.740 --> 00:05:43.560
Well, in fact, it's relatively
straightforward.

00:05:43.560 --> 00:05:49.140
What I've shown here is a
general sequence with values

00:05:49.140 --> 00:05:52.640
which I've indicated
at the top.

00:05:52.640 --> 00:05:57.100
And more or less as we did
when we talked about

00:05:57.100 --> 00:06:01.660
representing a unit step in
terms of impulses, we can

00:06:01.660 --> 00:06:08.170
think of this general sequence
as a sequence of impulses--

00:06:08.170 --> 00:06:14.060
delayed, namely, occurring at
the appropriate time instant,

00:06:14.060 --> 00:06:16.950
and with the appropriate
amplitude.

00:06:16.950 --> 00:06:21.950
So we can think of this general
sequence and an

00:06:21.950 --> 00:06:28.780
impulse occurring at n = 0 and
with a height of x[0], plus an

00:06:28.780 --> 00:06:31.960
impulse of height x[1]

00:06:31.960 --> 00:06:35.830
occurring at time n = 1,
and so that's x[1]

00:06:35.830 --> 00:06:40.850
delta[n-1], an impulse
at -1 with an

00:06:40.850 --> 00:06:42.310
amplitude of x[-1], etc.

00:06:45.030 --> 00:06:50.500
So if we continued to generate
a set of weighted, delayed

00:06:50.500 --> 00:06:55.600
unit samples like that, and if
we added all these together,

00:06:55.600 --> 00:07:00.120
then that will generate
the total sequence.

00:07:00.120 --> 00:07:04.610
Algebraically, then, what that
corresponds to is representing

00:07:04.610 --> 00:07:09.500
the sequence as a sum of
individual terms as I've

00:07:09.500 --> 00:07:16.490
indicated here or in terms of a
general sum, the sum of x[k]

00:07:16.490 --> 00:07:18.820
delta[n-k].

00:07:18.820 --> 00:07:19.950
So that's our strategy--

00:07:19.950 --> 00:07:25.400
the strategy is to decompose an
arbitrary sequence into a

00:07:25.400 --> 00:07:29.540
linear combination of weighted,
delayed impulses.

00:07:29.540 --> 00:07:34.150
And here again is the
representation, which we just

00:07:34.150 --> 00:07:37.160
finished generating.

00:07:37.160 --> 00:07:41.370
Now, why is this representation
useful?

00:07:41.370 --> 00:07:45.380
It's useful because we now have
a decomposition of the

00:07:45.380 --> 00:07:49.790
sequence as a linear combination
of basic

00:07:49.790 --> 00:07:53.080
sequences, namely the
delayed impulses.

00:07:53.080 --> 00:07:58.920
And if we are talking about a
linear system, the response to

00:07:58.920 --> 00:08:01.390
that linear combination
is a linear

00:08:01.390 --> 00:08:04.270
combination of the responses.

00:08:04.270 --> 00:08:10.830
So if we denote the response
to a delayed impulse as

00:08:10.830 --> 00:08:19.020
h_k[n], then the response to
this general input is what

00:08:19.020 --> 00:08:24.720
I've indicated here, where y[n],
of course, is the output

00:08:24.720 --> 00:08:27.900
due to the general input x[n].

00:08:27.900 --> 00:08:28.720
h_k[n]

00:08:28.720 --> 00:08:34.169
in is the output due to the
delayed impulse, and these are

00:08:34.169 --> 00:08:37.299
simply the coefficients
in the weighting.

00:08:40.169 --> 00:08:45.340
So for a linear system, we
have this representation.

00:08:45.340 --> 00:08:50.830
And if now, in addition, the
system is time-invariant, we

00:08:50.830 --> 00:08:54.810
can, in fact, relate the
outputs due to these

00:08:54.810 --> 00:08:57.240
individual delayed impulses.

00:08:57.240 --> 00:09:01.220
Specifically, if the system is
time-invariant, then the

00:09:01.220 --> 00:09:08.330
response to an impulse at time
k is exactly the same as the

00:09:08.330 --> 00:09:13.470
response to an impulse at time
0, shifted over to time k.

00:09:13.470 --> 00:09:16.890
Said another way, h_k[n]

00:09:16.890 --> 00:09:24.450
is simply h_0[n-k], where h_0 is
the response of the system

00:09:24.450 --> 00:09:27.140
to an impulse at n = 0.

00:09:27.140 --> 00:09:32.060
And it's generally useful to,
rather than carrying around

00:09:32.060 --> 00:09:36.800
h_0[n], just simply
define h_0[n]

00:09:36.800 --> 00:09:42.700
as h[n], which is the unit
sample or unit impulse

00:09:42.700 --> 00:09:45.070
response of the system.

00:09:45.070 --> 00:09:49.440
And so the consequence, then, is
for a linear time-invariant

00:09:49.440 --> 00:09:54.520
system, the output can
be expressed as

00:09:54.520 --> 00:09:58.510
this sum where h[n-k]

00:09:58.510 --> 00:10:03.600
is the response to an impulse
occurring at time n = k.

00:10:03.600 --> 00:10:10.780
And this is referred to as
the convolution sum.

00:10:10.780 --> 00:10:12.450
Now, we can--

00:10:12.450 --> 00:10:17.570
just to emphasize how we've gone
about this, let me show

00:10:17.570 --> 00:10:18.820
it from another perspective.

00:10:22.040 --> 00:10:28.080
We of course have taken the
sequence x[n], we have

00:10:28.080 --> 00:10:33.180
decomposed it as a linear
combination of these weighted,

00:10:33.180 --> 00:10:36.010
delayed impulses.

00:10:36.010 --> 00:10:39.400
When these are added together,
those correspond to the

00:10:39.400 --> 00:10:42.810
original sequence x[n].

00:10:42.810 --> 00:10:48.200
If this impulse, for example,
generates a

00:10:48.200 --> 00:10:51.990
response which is x[0]

00:10:51.990 --> 00:10:53.290
h[n], where h[n]

00:10:53.290 --> 00:10:58.750
is the response to a unit
impulse at n = 0, and the

00:10:58.750 --> 00:11:03.150
second one generates a delayed
weighted response, and the

00:11:03.150 --> 00:11:07.770
third one similarly, and we
generate these individual

00:11:07.770 --> 00:11:12.050
responses, these are all added
together, and it's that linear

00:11:12.050 --> 00:11:16.180
combination that forms
the final output.

00:11:16.180 --> 00:11:18.450
So that's really kind of the way
we're thinking about it.

00:11:18.450 --> 00:11:22.870
We have a general sequence,
we're thinking of each

00:11:22.870 --> 00:11:26.160
individual sample individually,
each one of

00:11:26.160 --> 00:11:29.890
those pops the system, and
because of linearity, the

00:11:29.890 --> 00:11:34.930
response is the sum of those
individual responses.

00:11:34.930 --> 00:11:38.720
That's what happens in discrete
time, and pretty much

00:11:38.720 --> 00:11:43.050
the same strategy works
in continuous time.

00:11:43.050 --> 00:11:51.380
In particular, we can begin in
continuous time with the

00:11:51.380 --> 00:11:57.600
notion of decomposing a
continuous-time signal into a

00:11:57.600 --> 00:12:02.060
succession of arbitrarily
narrow rectangles.

00:12:02.060 --> 00:12:06.670
And as the width of the
rectangles goes to 0, the

00:12:06.670 --> 00:12:09.080
approximation gets better.

00:12:09.080 --> 00:12:11.410
Essentially what's going to
happen is that each of those

00:12:11.410 --> 00:12:15.510
individual rectangles, as they
get narrower and narrower,

00:12:15.510 --> 00:12:18.770
correspond more and more
to an impulse.

00:12:18.770 --> 00:12:21.970
Let me show you what I mean.

00:12:21.970 --> 00:12:29.540
Here we have a continuous-time
signal, and I've approximated

00:12:29.540 --> 00:12:33.530
it by a staircase.

00:12:33.530 --> 00:12:39.970
So in essence I can think of
this as individual rectangles

00:12:39.970 --> 00:12:42.710
of heights associated with the
height of the continuous

00:12:42.710 --> 00:12:46.220
curve, and so I've indicated
that down below.

00:12:46.220 --> 00:12:50.120
Here, for example, is the
impulse corresponding to the

00:12:50.120 --> 00:12:56.110
rectangle between t = -2
Delta and t = -Delta.

00:12:56.110 --> 00:13:01.830
Here's the one from -Delta to 0,
and as we continue on down,

00:13:01.830 --> 00:13:06.410
we get impulses, or rather
rectangles, from successive

00:13:06.410 --> 00:13:08.810
parts of the wave form.

00:13:08.810 --> 00:13:14.270
Now let's look specifically at
the rectangle, for example,

00:13:14.270 --> 00:13:19.410
starting at 0 and ending at
Delta, and the amplitude of it

00:13:19.410 --> 00:13:20.660
is x(Delta).

00:13:24.730 --> 00:13:26.760
So what we have--

00:13:26.760 --> 00:13:32.040
actually, this should be x(0),
and so let me just

00:13:32.040 --> 00:13:33.480
correct that here.

00:13:33.480 --> 00:13:35.280
That's x(0).

00:13:35.280 --> 00:13:40.660
And so we have a rectangle
height x(0), and recall the

00:13:40.660 --> 00:13:46.740
function that I defined last
time as delta_Delta(t), which

00:13:46.740 --> 00:13:50.010
had height 1 / delta
and width delta.

00:13:50.010 --> 00:13:55.060
So multiplying finally by this
last little Delta, then, this

00:13:55.060 --> 00:13:58.580
is a representation
for the rectangle

00:13:58.580 --> 00:14:00.110
that I've shown there.

00:14:00.110 --> 00:14:03.010
Now there's a little bit of
algebra there to kind of track

00:14:03.010 --> 00:14:07.510
through, but what we're really
doing is just simply

00:14:07.510 --> 00:14:10.490
representing this in terms
of rectangles.

00:14:10.490 --> 00:14:15.390
What I want to do is describe
each rectangle as in terms of

00:14:15.390 --> 00:14:19.360
that function delta_Delta(t),
which in the limit, then,

00:14:19.360 --> 00:14:21.330
becomes an impulse.

00:14:21.330 --> 00:14:23.290
So let's track that through
a little further.

00:14:25.800 --> 00:14:29.490
When we have that linear
combination, then, we're

00:14:29.490 --> 00:14:34.300
saying that x(t) can be
represented by a sum as I

00:14:34.300 --> 00:14:42.180
indicate here, which I can then
write more generally in

00:14:42.180 --> 00:14:46.650
this form, just indicating that
this is an infinite sum.

00:14:46.650 --> 00:14:51.110
We now want to take the limit
as Delta goes to 0, and as

00:14:51.110 --> 00:14:56.110
Delta goes to 0, notice
that this term

00:14:56.110 --> 00:14:59.370
becomes arbitrarily narrow.

00:14:59.370 --> 00:15:02.820
This goes to our impulse
function, and this, of course,

00:15:02.820 --> 00:15:05.150
goes to x of tau.

00:15:05.150 --> 00:15:10.840
And in fact, in the limit, a
sum of this form is exactly

00:15:10.840 --> 00:15:13.270
the way an integral
is defined.

00:15:13.270 --> 00:15:17.040
So we have an expression
for y(t) in terms

00:15:17.040 --> 00:15:18.800
of an impulse function.

00:15:18.800 --> 00:15:22.460
There, I have to admit, is a
little bit of detail to kind

00:15:22.460 --> 00:15:26.700
of focus on at your leisure, but
this is the general flow

00:15:26.700 --> 00:15:28.300
of the strategy.

00:15:28.300 --> 00:15:32.500
So what we have now is an
integral that tells us that

00:15:32.500 --> 00:15:38.640
tells us how x(t) can be
described as a sum or linear

00:15:38.640 --> 00:15:43.120
combination involving
impulses.

00:15:43.120 --> 00:15:46.430
This bottom equation, by the
way, is often referred to as

00:15:46.430 --> 00:15:48.170
the sifting integral.

00:15:48.170 --> 00:15:52.130
In essence, what it says is that
if I take a time function

00:15:52.130 --> 00:15:56.720
x(t) and put it through that
integral, the impulse as it

00:15:56.720 --> 00:16:02.070
zips by generates x(t)
all over again.

00:16:02.070 --> 00:16:06.000
Now, at first glance, what it
could look like is that we've

00:16:06.000 --> 00:16:10.610
taken a time function x(t) and
proceeded to represent it in a

00:16:10.610 --> 00:16:14.780
very complicated way, in terms
of itself, and one could ask,

00:16:14.780 --> 00:16:16.720
why bother doing that?

00:16:16.720 --> 00:16:22.940
And the reason, going back to
what our strategy was, is that

00:16:22.940 --> 00:16:29.240
what we want to do is exploit
the property of linearity.

00:16:29.240 --> 00:16:34.630
So by describing a time
function as a linear

00:16:34.630 --> 00:16:39.370
combination of weighted, delayed
impulses, as in effect

00:16:39.370 --> 00:16:44.350
we've done through this
summation that corresponds to

00:16:44.350 --> 00:16:49.580
a decomposition in terms of
impulses, we can now exploit

00:16:49.580 --> 00:16:54.350
linearity, specifically
recognizing that the output of

00:16:54.350 --> 00:17:00.440
a linear system is the sum
of the responses to these

00:17:00.440 --> 00:17:02.120
individual inputs.

00:17:02.120 --> 00:17:09.750
So with h_kDelta(t)
corresponding to the response

00:17:09.750 --> 00:17:15.770
to delta_Delta(t-kDelta) and
the rest of this stuff, the

00:17:15.770 --> 00:17:18.700
x(kDelta) and this
little Delta are

00:17:18.700 --> 00:17:21.140
basically scale factors--

00:17:21.140 --> 00:17:24.839
for a linear system, then, if
the input is expressed in this

00:17:24.839 --> 00:17:29.610
form, the output is expressed in
this form, and again taking

00:17:29.610 --> 00:17:33.460
the limit as Delta goes to
0, by definition, this

00:17:33.460 --> 00:17:35.710
corresponds to an integral.

00:17:35.710 --> 00:17:40.380
It's the integral that I
indicate here with h_tau(t)

00:17:40.380 --> 00:17:47.500
corresponding to the impulse
response due to an impulse

00:17:47.500 --> 00:17:50.360
occurring at time tau.

00:17:50.360 --> 00:17:54.580
Now, again, we can do
the same thing.

00:17:54.580 --> 00:17:58.760
In particular, if the system
is time-invariant, then the

00:17:58.760 --> 00:18:02.920
response to each of these
delayed impulses is simply a

00:18:02.920 --> 00:18:07.870
delayed version of the impulse
response, and so we can relate

00:18:07.870 --> 00:18:10.160
these individual terms.

00:18:10.160 --> 00:18:13.500
And in particular, then, the
response to an impulse

00:18:13.500 --> 00:18:18.850
occurring at time t = tau is
simply the response to an

00:18:18.850 --> 00:18:23.020
impulse occurring at time 0
shifted over to the time

00:18:23.020 --> 00:18:24.840
origin tau.

00:18:24.840 --> 00:18:30.020
Again, as we did before, we'll
drop this subscript h_0, so

00:18:30.020 --> 00:18:37.090
h_0(t) we'll simply
define as h(t).

00:18:37.090 --> 00:18:42.110
What we're left with when we do
that is the description of

00:18:42.110 --> 00:18:46.690
a linear time-invariant system
through this integral, which

00:18:46.690 --> 00:18:53.240
tells us how the output is
related to the input and to

00:18:53.240 --> 00:18:54.990
the impulse response.

00:18:54.990 --> 00:18:58.910
Again, let's just quickly look
at this from another

00:18:58.910 --> 00:19:01.240
perspective as we did
in discrete time.

00:19:03.840 --> 00:19:07.740
Recall that what we've done
is to take the continuous

00:19:07.740 --> 00:19:14.510
function, decompose it in terms
of rectangles, and then

00:19:14.510 --> 00:19:19.970
each of these rectangles
generates its individual

00:19:19.970 --> 00:19:23.600
response, and then
these individual

00:19:23.600 --> 00:19:25.225
responses are added together.

00:19:27.930 --> 00:19:31.480
And as we go through that
process, of course, there's a

00:19:31.480 --> 00:19:37.260
process whereby we let the
approximation go to the

00:19:37.260 --> 00:19:40.920
representation of
a smooth curve.

00:19:40.920 --> 00:19:45.890
Now, again, I stress if there is
certainly a fair amount to

00:19:45.890 --> 00:19:50.050
kind of examine carefully there,
but it's important to

00:19:50.050 --> 00:19:53.980
also reflect on what we've done,
which is really pretty

00:19:53.980 --> 00:19:55.240
significant.

00:19:55.240 --> 00:19:58.790
What we've managed to accomplish
is to exploit the

00:19:58.790 --> 00:20:03.720
properties of linearity and time
invariance, so that the

00:20:03.720 --> 00:20:09.840
system could be represented in
terms only of its response to

00:20:09.840 --> 00:20:12.380
an impulse at time 0.

00:20:12.380 --> 00:20:14.410
So for a linear time-invariant
system--

00:20:14.410 --> 00:20:16.410
quite amazingly, actually--

00:20:16.410 --> 00:20:20.670
if you know its response to an
impulse at t = 0 or n = 0,

00:20:20.670 --> 00:20:24.490
depending on discrete or
continuous time, then in fact,

00:20:24.490 --> 00:20:27.380
through the convolution sum
in discrete time or the

00:20:27.380 --> 00:20:30.260
convolution integral in
continuous time, you can

00:20:30.260 --> 00:20:33.110
generate the response to
an arbitrary input.

00:20:36.130 --> 00:20:41.560
Let me just introduce a small
amount of notation.

00:20:41.560 --> 00:20:46.660
Again, reminding you of the
convolution sum in the

00:20:46.660 --> 00:20:51.080
discrete-time case, which looks
as I've indicated here--

00:20:51.080 --> 00:20:52.510
the sum of x[k]

00:20:52.510 --> 00:20:54.980
h[n-k]

00:20:54.980 --> 00:20:59.990
will have the requirement of
making such frequent reference

00:20:59.990 --> 00:21:04.190
to convolution that it's
convenient to notationally

00:21:04.190 --> 00:21:07.380
represent it as I have here
with an asterisk.

00:21:07.380 --> 00:21:09.350
So x[n]

00:21:09.350 --> 00:21:12.200
* h[n]

00:21:12.200 --> 00:21:15.060
means or denotes the
convolution of x[n]

00:21:15.060 --> 00:21:17.060
with h[n].

00:21:17.060 --> 00:21:21.590
And correspondingly in the
continuous-time case, we have

00:21:21.590 --> 00:21:26.230
the convolution integral, which
here is the sifting

00:21:26.230 --> 00:21:26.670
integral

00:21:26.670 --> 00:21:30.660
as we talked about, representing
x(t) in terms of

00:21:30.660 --> 00:21:34.800
itself as a linear combination
of delayed impulses.

00:21:34.800 --> 00:21:38.580
Here we have the convolution
integral, and again we'll use

00:21:38.580 --> 00:21:43.040
the asterisk to denote
convolution.

00:21:43.040 --> 00:21:46.950
Now, there's a lot about
convolution that we'll want to

00:21:46.950 --> 00:21:47.750
talk about.

00:21:47.750 --> 00:21:50.240
There are properties of
convolution which tell us

00:21:50.240 --> 00:21:53.540
about properties of linear
time-invariant systems.

00:21:53.540 --> 00:21:57.920
Also, it's important to focus
on the mechanics of

00:21:57.920 --> 00:21:59.370
implementing a convolution--

00:21:59.370 --> 00:22:02.690
in other words, understanding
and generating some fluency

00:22:02.690 --> 00:22:08.860
and insight into what these
particular sum and integral

00:22:08.860 --> 00:22:11.080
expressions mean.

00:22:11.080 --> 00:22:15.410
So let's first look at
discrete-time convolution and

00:22:15.410 --> 00:22:20.680
examine more specifically what
in essence the sum tells us to

00:22:20.680 --> 00:22:22.935
do in terms of manipulating
the sequences.

00:22:25.960 --> 00:22:35.040
So returning to the expression
for the convolution sum, as I

00:22:35.040 --> 00:22:39.960
show here, the sum of x[k]

00:22:39.960 --> 00:22:42.430
h[n-k]--

00:22:42.430 --> 00:22:47.080
let's focus in on an example
where we choose x[n]

00:22:47.080 --> 00:22:49.950
as a unit step and h[n]

00:22:49.950 --> 00:22:53.900
as a real exponential times
the a unit step.

00:22:53.900 --> 00:22:56.090
So the sequence x[n]

00:22:56.090 --> 00:23:00.950
is as I indicate here,
and the sequence h[n]

00:23:00.950 --> 00:23:05.760
is an exponential for positive
time and 0 for negative time.

00:23:05.760 --> 00:23:07.105
So we have x[n]

00:23:07.105 --> 00:23:12.840
and h[n], but now let's look
back at the equation and let

00:23:12.840 --> 00:23:16.960
me stress that what we
want is not x[n]

00:23:16.960 --> 00:23:18.340
and h[n]--

00:23:18.340 --> 00:23:21.440
we want x[k], because
we're going to sum

00:23:21.440 --> 00:23:24.660
over k, and not h[k]

00:23:24.660 --> 00:23:25.910
but h[n-k].

00:23:27.970 --> 00:23:33.970
So we have then from x[n],
it's straightforward to

00:23:33.970 --> 00:23:35.220
generate x[k].

00:23:35.220 --> 00:23:39.580
It's simply changing the
index of summation.

00:23:39.580 --> 00:23:42.310
And what's h[n-k]?

00:23:42.310 --> 00:23:44.740
Well what's h[-k]?

00:23:44.740 --> 00:23:46.100
h[-k]

00:23:46.100 --> 00:23:47.640
is h[k]

00:23:47.640 --> 00:23:49.120
flipped over.

00:23:49.120 --> 00:23:53.550
So if this is what h[k]

00:23:53.550 --> 00:24:00.140
looks like, then this
is what h[n-k]

00:24:00.140 --> 00:24:01.690
looks like.

00:24:01.690 --> 00:24:05.920
In essence, what the operation
of convolution or the

00:24:05.920 --> 00:24:11.390
mechanics of convolution tells
us to do is to take the

00:24:11.390 --> 00:24:16.710
sequence h[n-k],
which is h[-k]

00:24:16.710 --> 00:24:21.870
positioned with its origin at
k = n, and multiply this

00:24:21.870 --> 00:24:27.700
sequence by this sequence and
sum the product from k =

00:24:27.700 --> 00:24:29.780
-infinity to +infinity.

00:24:29.780 --> 00:24:38.080
So if we were to compute, for
example, the output at n = 0--

00:24:38.080 --> 00:24:43.000
as I positioned this sequence
here, this is at n = 0--

00:24:43.000 --> 00:24:46.820
I would take this and multiply
it by this and sum from

00:24:46.820 --> 00:24:49.020
-infinity to +infinity.

00:24:49.020 --> 00:24:52.900
Or, for n = 1, I would position
it here, for n = 2, I

00:24:52.900 --> 00:24:55.470
would position it here.

00:24:55.470 --> 00:24:58.780
Well, you can kind of see
what the idea is.

00:24:58.780 --> 00:25:02.770
Let's look at this a little more
dynamically and see, in

00:25:02.770 --> 00:25:07.180
fact, how one sequence slides
past the other, and how the

00:25:07.180 --> 00:25:08.590
output y[n]

00:25:08.590 --> 00:25:11.910
builds up to the
correct answer.

00:25:14.950 --> 00:25:18.100
So the input that we're
considering is a step input,

00:25:18.100 --> 00:25:22.680
which I show here, and the
impulse response that we will

00:25:22.680 --> 00:25:26.830
convolve this with is a
decaying exponential.

00:25:26.830 --> 00:25:31.340
Now, to form the convolution, we
want the product of x[k]--

00:25:31.340 --> 00:25:35.990
not with h[k], but with h[n-k],
corresponding to

00:25:35.990 --> 00:25:37.330
taking h[k]

00:25:37.330 --> 00:25:41.020
and reflecting it about the
origin and then shifting it

00:25:41.020 --> 00:25:42.130
appropriately.

00:25:42.130 --> 00:25:44.320
So here we see h[n-k]

00:25:44.320 --> 00:25:52.050
for n = 0, namely h[-k], and now
h[1-k], which we'll show

00:25:52.050 --> 00:25:57.670
next, is this shifted to
the right by one point.

00:25:57.670 --> 00:26:00.720
Here we have h[1-k]--

00:26:00.720 --> 00:26:07.420
shifting to the right by one
more point is h[2-k], and

00:26:07.420 --> 00:26:10.370
shifting again to the right
we'll have h[3-k].

00:26:12.880 --> 00:26:20.480
Now let's shift back to the left
until n is negative, and

00:26:20.480 --> 00:26:22.210
then we'll begin the
convolution.

00:26:22.210 --> 00:26:32.890
So here's n = 0, n = -1,
n = -2, and n = -3.

00:26:32.890 --> 00:26:36.530
Now, to form the convolution,
we want the product of x[k]

00:26:36.530 --> 00:26:38.470
with h[n-k]

00:26:38.470 --> 00:26:43.090
summed from -infinity
to +infinity.

00:26:43.090 --> 00:26:47.360
For n negative, that product is
0, and therefore the result

00:26:47.360 --> 00:26:49.440
of the convolution is 0.

00:26:49.440 --> 00:26:52.130
As we shift to the right,
we'll build up the

00:26:52.130 --> 00:26:55.510
convolution, and the result of
the convolution will be shown

00:26:55.510 --> 00:26:57.330
on the bottom trace.

00:26:57.330 --> 00:27:01.780
So we begin the process
with n negative, and

00:27:01.780 --> 00:27:03.730
here we have n = -1.

00:27:03.730 --> 00:27:09.210
At n = 0, we get our first
non-zero contribution.

00:27:09.210 --> 00:27:13.310
Now as we shift further to the
right corresponding to

00:27:13.310 --> 00:27:18.820
increasing n, we will accumulate
more and more terms

00:27:18.820 --> 00:27:22.960
in the sum, and the convolution
will build up.

00:27:22.960 --> 00:27:25.670
In particular for this example,
the result of the

00:27:25.670 --> 00:27:30.040
convolution increases
monotonically, asymptotically

00:27:30.040 --> 00:27:34.790
approaching a constant, and
that constant, in fact, is

00:27:34.790 --> 00:27:38.630
just simply the accumulation
of the values under the

00:27:38.630 --> 00:27:39.880
exponential.

00:27:48.780 --> 00:27:51.800
Now let's carry out the
convolution this time with an

00:27:51.800 --> 00:27:55.870
input which is a rectangular
pulse instead of a step input.

00:27:55.870 --> 00:27:58.510
Again, the same impulse
response, namely a decaying

00:27:58.510 --> 00:28:03.370
exponential, and so we want
to begin with h[n-k]

00:28:03.370 --> 00:28:06.750
and again with n negative
shown here.

00:28:06.750 --> 00:28:10.710
Again, with n negative, there
are no non-zero terms in the

00:28:10.710 --> 00:28:14.510
product, and so the convolution
for n negative

00:28:14.510 --> 00:28:17.390
will be 0 as it was in
the previous case.

00:28:17.390 --> 00:28:21.230
Again, on the bottom trace we'll
show the result of the

00:28:21.230 --> 00:28:25.470
convolution as the impulse
response slides along.

00:28:25.470 --> 00:28:30.040
At n = 0, we get our first
non-zero term.

00:28:30.040 --> 00:28:35.860
As n increases past 0, we will
begin to generate an output,

00:28:35.860 --> 00:28:39.350
basically the same as the output
that we generated with

00:28:39.350 --> 00:28:45.100
a step input, until the impulse
response reaches a

00:28:45.100 --> 00:28:50.280
point where as we slide further,
we slide outside the

00:28:50.280 --> 00:28:53.490
interval where the rectangle
is non-zero.

00:28:53.490 --> 00:28:57.690
So when we slide one point
further from what's shown

00:28:57.690 --> 00:29:03.370
here, the output will now decay,
corresponding to the

00:29:03.370 --> 00:29:09.100
fact that the impulse response
is sliding outside the

00:29:09.100 --> 00:29:12.790
interval in which the
input is non-zero.

00:29:12.790 --> 00:29:15.480
So, on the bottom trace we
now see the result of the

00:29:15.480 --> 00:29:16.730
convolution.

00:29:20.470 --> 00:29:21.010
OK.

00:29:21.010 --> 00:29:27.450
So what you've seen, then, is
an example of discrete-time

00:29:27.450 --> 00:29:29.010
convolution.

00:29:29.010 --> 00:29:33.470
Let's now look at an example
of continuous-time

00:29:33.470 --> 00:29:35.340
convolution.

00:29:35.340 --> 00:29:38.140
As you might expect,
continuous-time convolution

00:29:38.140 --> 00:29:42.030
operates in exactly
the same way.

00:29:42.030 --> 00:29:44.530
Continuous-time convolution--

00:29:44.530 --> 00:29:51.750
we have the expression again
y(t) is an integral with now

00:29:51.750 --> 00:29:55.270
x(tau) and h(t-tau).

00:29:55.270 --> 00:30:01.450
It has exactly the same kind of
form as we had previously

00:30:01.450 --> 00:30:05.190
for discrete-time
convolution--

00:30:05.190 --> 00:30:08.190
and in fact, the mechanics
of the continuous-time

00:30:08.190 --> 00:30:10.930
convolution are identical.

00:30:10.930 --> 00:30:16.440
So here is our example with x(t)
equal to a unit step and

00:30:16.440 --> 00:30:22.280
h(t) now a real exponential
times a unit step.

00:30:22.280 --> 00:30:28.330
I show here x(t), which is
the unit step function.

00:30:28.330 --> 00:30:34.590
Here we have h(t), which is an
exponential for positive time

00:30:34.590 --> 00:30:38.670
and 0 for negative time.

00:30:38.670 --> 00:30:43.960
Again, looking back at the
expression for convolution,

00:30:43.960 --> 00:30:48.770
it's not x(t) that we want,
it x(tau) that we want.

00:30:48.770 --> 00:30:54.480
And it's not h(t) or h(tau) that
we want, it's h(t-tau).

00:30:57.310 --> 00:31:01.880
We plan to multiply these
together and integrate over

00:31:01.880 --> 00:31:06.270
the variable tau, and that gives
us the output at any

00:31:06.270 --> 00:31:07.700
given time.

00:31:07.700 --> 00:31:12.260
If we want it at another time,
we change the value of t as an

00:31:12.260 --> 00:31:14.580
argument inside this integral.

00:31:14.580 --> 00:31:21.340
So here we have x(t), and here
we have h(t), which isn't

00:31:21.340 --> 00:31:23.210
quite what we wanted.

00:31:23.210 --> 00:31:26.430
Here we have x(tau), and that's
fine-- it's just x(t)

00:31:26.430 --> 00:31:29.410
with t relabeled as tau.

00:31:29.410 --> 00:31:33.800
Now, what is h(t-tau)?

00:31:33.800 --> 00:31:39.590
Well, here's h(tau), and
if we simply turn that

00:31:39.590 --> 00:31:43.820
over, here is h(t-tau).

00:31:43.820 --> 00:31:52.470
And h(t-tau) is positioned,
then, at tau equal to t.

00:31:52.470 --> 00:31:56.320
As we change the value of t that
change the position of

00:31:56.320 --> 00:32:03.020
this signal, now we multiply
these two together and

00:32:03.020 --> 00:32:08.970
integrate from -infinity to
+infinity with h(t-tau)

00:32:08.970 --> 00:32:11.370
positioned at the appropriate
value of t.

00:32:14.600 --> 00:32:18.700
Again, it's best really to see
this example and get the

00:32:18.700 --> 00:32:23.080
notion of the signal being
flipped and the two signals

00:32:23.080 --> 00:32:28.020
sliding past each other,
multiplying and integrating by

00:32:28.020 --> 00:32:31.260
looking at it dynamically
and observing how the

00:32:31.260 --> 00:32:33.970
answer builds up.

00:32:33.970 --> 00:32:38.300
Again, the input that we
consider is a step input.

00:32:38.300 --> 00:32:41.800
And again, we use an impulse
response which is a decaying

00:32:41.800 --> 00:32:44.250
exponential.

00:32:44.250 --> 00:32:48.840
To form the convolution, we want
the product of x(tau)--

00:32:48.840 --> 00:32:52.040
not with h(tau), but
with h(t-tau).

00:32:52.040 --> 00:32:56.890
So we want h(t) time-reversed,
and then shifted appropriately

00:32:56.890 --> 00:32:59.190
depending on the value of t.

00:32:59.190 --> 00:33:04.480
Let's first just look at
h(t-tau) for t positive

00:33:04.480 --> 00:33:09.510
corresponding to shifting
h(-tau) out to the right, and

00:33:09.510 --> 00:33:12.155
here we have t increasing.

00:33:15.810 --> 00:33:20.310
Here is t decreasing, and
we'll want to begin the

00:33:20.310 --> 00:33:25.430
convolution with t negative,
corresponding to shifting

00:33:25.430 --> 00:33:29.030
h(-tau) to the left.

00:33:29.030 --> 00:33:30.660
Now to form the convolution,
we want the

00:33:30.660 --> 00:33:32.290
product of these two.

00:33:32.290 --> 00:33:38.820
For t negative, there are no
non-zero contributions to the

00:33:38.820 --> 00:33:42.580
integral, and so the convolution
will be 0 for t

00:33:42.580 --> 00:33:44.090
less than 0.

00:33:44.090 --> 00:33:48.090
On the bottom trace, we show the
result of the convolution,

00:33:48.090 --> 00:33:55.030
here for t negative, and for t
less than 0, we will continue

00:33:55.030 --> 00:33:58.490
to have 0 in the convolution.

00:33:58.490 --> 00:34:04.910
Now as t increases past 0, we
begin to get some non-zero

00:34:04.910 --> 00:34:09.040
contribution in the product,
indicated by the fact that the

00:34:09.040 --> 00:34:09.989
convolution--

00:34:09.989 --> 00:34:11.270
the result of the
convolution--

00:34:11.270 --> 00:34:14.370
starts to build up.

00:34:14.370 --> 00:34:19.780
As t increases further, we
will get more and more

00:34:19.780 --> 00:34:23.540
non-zero contribution
in the integrand.

00:34:23.540 --> 00:34:28.270
So, the result of the
convolution will be a

00:34:28.270 --> 00:34:31.469
monotonically increasing
function for this particular

00:34:31.469 --> 00:34:36.100
example, which asymptotically
approaches a constant.

00:34:36.100 --> 00:34:40.320
That constant will be
proportional to the area under

00:34:40.320 --> 00:34:43.360
the impulse response, because
of the fact that we're

00:34:43.360 --> 00:34:45.090
convolving with a step input.

00:34:59.270 --> 00:35:02.160
Now let's carry out the
convolution with an input

00:35:02.160 --> 00:35:05.110
which is a rectangular pulse--

00:35:05.110 --> 00:35:08.420
again, an impulse response
which is an exponential.

00:35:08.420 --> 00:35:13.710
So to form the convolution, we
want x(tau) with h(t-tau)--

00:35:13.710 --> 00:35:18.010
h(t-tau) shown here
for t negative.

00:35:18.010 --> 00:35:21.880
To form the convolution, we
take the integral of the

00:35:21.880 --> 00:35:25.920
product of these two, which
again will be 0

00:35:25.920 --> 00:35:28.360
for t less than 0.

00:35:28.360 --> 00:35:31.360
The bottom trace shows the
result of the convolution

00:35:31.360 --> 00:35:36.630
here, shown as 0, and it will
continue to be 0 until t

00:35:36.630 --> 00:35:40.990
becomes positive, at which
point we build up some

00:35:40.990 --> 00:35:47.040
non-zero term in
the integrand.

00:35:47.040 --> 00:35:53.540
Now as we slide further, until
the impulse response shifts

00:35:53.540 --> 00:35:58.870
outside the interval in which
the pulse is non-zero, the

00:35:58.870 --> 00:36:00.670
output will build up.

00:36:00.670 --> 00:36:05.530
But here we've now begun to
leave that interval, and so

00:36:05.530 --> 00:36:09.700
the output will start to
decay exponentially.

00:36:09.700 --> 00:36:13.680
As the impulse response slides
further and further

00:36:13.680 --> 00:36:20.410
corresponding to increasing t,
then the output will decay

00:36:20.410 --> 00:36:24.980
exponentially, representing the
fact that there is less

00:36:24.980 --> 00:36:31.200
and less area in the product
of x(tau) and h(t-tau).

00:36:34.580 --> 00:36:37.680
Asymptotically, this output
will then approach 0.

00:36:40.830 --> 00:36:41.140
OK.

00:36:41.140 --> 00:36:45.360
So you've seen convolution,
you've seen the derivation of

00:36:45.360 --> 00:36:49.120
convolution, and kind of the
graphical representation of

00:36:49.120 --> 00:36:50.820
convolution.

00:36:50.820 --> 00:36:56.880
Finally, let's work again with
these two examples, and let's

00:36:56.880 --> 00:37:00.870
go through those two examples
analytically so that we

00:37:00.870 --> 00:37:05.980
finally see how, analytically,
the result develops for those

00:37:05.980 --> 00:37:07.230
same examples.

00:37:10.450 --> 00:37:13.400
Well, we have first the
discrete-time case, and let's

00:37:13.400 --> 00:37:16.960
take our discrete-time
example.

00:37:16.960 --> 00:37:23.490
In general, the convolution sum
is as I've indicated here.

00:37:23.490 --> 00:37:27.860
This is just our expression
from before, which is the

00:37:27.860 --> 00:37:31.140
convolution sum.

00:37:31.140 --> 00:37:33.080
If we take our two examples--

00:37:33.080 --> 00:37:39.760
the example of an input which is
a unit step, and an impulse

00:37:39.760 --> 00:37:44.220
response, which is a real
exponential multiplied by a

00:37:44.220 --> 00:37:46.110
unit step--

00:37:46.110 --> 00:37:50.990
we have then replacing x[k]

00:37:50.990 --> 00:37:56.230
by what we know the input
to be, and h[n-k]

00:37:56.230 --> 00:38:00.700
by what we know the impulse
response to be, the output is

00:38:00.700 --> 00:38:02.290
the expression that
we have here.

00:38:05.020 --> 00:38:07.240
Now, in this expression--

00:38:07.240 --> 00:38:11.430
and you'll see this very
generally and with some more

00:38:11.430 --> 00:38:17.210
complicated examples when
you look at the text--

00:38:17.210 --> 00:38:22.720
as you go to evaluate these
expressions, generally what

00:38:22.720 --> 00:38:26.050
happens is that the signals
have different analytical

00:38:26.050 --> 00:38:28.380
forms in different regions.

00:38:28.380 --> 00:38:31.100
That's, in fact, what
we have here.

00:38:31.100 --> 00:38:36.670
In particular, let's look at the
sum, and what we observe

00:38:36.670 --> 00:38:42.660
first of all is that the limits
on this sum are going

00:38:42.660 --> 00:38:47.200
to be modified, depending
on where this unit

00:38:47.200 --> 00:38:50.390
step is 0 and non-zero.

00:38:50.390 --> 00:38:54.820
In particular, if we first
consider what will turn out to

00:38:54.820 --> 00:38:55.980
be the simple case--

00:38:55.980 --> 00:38:59.030
namely, n less than 0--

00:38:59.030 --> 00:39:08.790
for n less than 0, this
unit step is 0 for k

00:39:08.790 --> 00:39:10.640
greater than n.

00:39:10.640 --> 00:39:17.460
With n less than 0, that means
that this unit step never is

00:39:17.460 --> 00:39:21.480
non-zero for k positive.

00:39:21.480 --> 00:39:27.360
On the other hand, this unit
step is never non-zero or

00:39:27.360 --> 00:39:31.350
always 0 for k negative.

00:39:31.350 --> 00:39:34.480
Let me just stress that by
looking at the particular

00:39:34.480 --> 00:39:40.840
graphs, here is the
unit step u[k].

00:39:40.840 --> 00:39:48.420
Here is the unit step u[n-k],
and for n less than 0, so that

00:39:48.420 --> 00:39:52.550
this point comes before this
point, the product of these

00:39:52.550 --> 00:39:54.960
two is equal to 0.

00:39:54.960 --> 00:39:58.730
That means there is no overlap
between these two terms, and

00:39:58.730 --> 00:40:03.380
so it says that y[n],
the output, is 0

00:40:03.380 --> 00:40:05.940
for n less than 0.

00:40:05.940 --> 00:40:08.980
Well, that was an easy one.

00:40:08.980 --> 00:40:13.320
For n greater than 0, it's not
quite as straightforward as

00:40:13.320 --> 00:40:15.520
coming out with the answer 0.

00:40:15.520 --> 00:40:19.270
So now let's look at what
happens when the two unit

00:40:19.270 --> 00:40:25.430
steps overlap, and this would
correspond to what I've

00:40:25.430 --> 00:40:30.470
labeled here as interval 2,
namely for n greater than 0.

00:40:30.470 --> 00:40:36.840
If we just look back at the
summation that we had, the

00:40:36.840 --> 00:40:44.430
summation now corresponds to
this unit step and this unit

00:40:44.430 --> 00:40:48.260
step, having some overlap.

00:40:48.260 --> 00:40:53.960
So for interval 2, corresponding
to n greater

00:40:53.960 --> 00:41:00.150
than 0, we have u[k],
the unit step.

00:41:00.150 --> 00:41:05.980
We have u[n-k], which is a unit
step going backward in

00:41:05.980 --> 00:41:13.870
time, but which extends for
positive values of n.

00:41:13.870 --> 00:41:17.970
If we think about multiplying
these two together, we will

00:41:17.970 --> 00:41:24.320
get in the product unity
for what values of k?

00:41:24.320 --> 00:41:27.900
Well, for k starting at 0
corresponding to one of the

00:41:27.900 --> 00:41:31.320
unit steps and ending at
n corresponding to

00:41:31.320 --> 00:41:33.270
the other unit step.

00:41:33.270 --> 00:41:39.242
So we have an overlap between
these for k equal to 0, et

00:41:39.242 --> 00:41:41.630
cetera, up through
the value n.

00:41:44.630 --> 00:41:49.990
Now, that means that in terms
of the original sum, we can

00:41:49.990 --> 00:41:53.170
get rid of the unit steps
involved by simply changing

00:41:53.170 --> 00:41:56.210
the limits on the sum.

00:41:56.210 --> 00:42:02.790
The limits now are from 0 to
n, of the term alpha^(n-k).

00:42:05.680 --> 00:42:07.250
We had before a u[k]

00:42:07.250 --> 00:42:11.360
and u[n-k], and that disappeared
because we dealt

00:42:11.360 --> 00:42:14.740
with that simply by modifying
the limits.

00:42:14.740 --> 00:42:19.590
We now pull out the term
alpha^n, because the summation

00:42:19.590 --> 00:42:24.350
is on k, not on n, so
we can simply pull

00:42:24.350 --> 00:42:25.750
that term of the sum.

00:42:29.190 --> 00:42:33.810
We now have alpha^(-k), which
we can rewrite as

00:42:33.810 --> 00:42:36.480
(alpha^(-1))^k.

00:42:36.480 --> 00:42:40.100
The upshot of all of
this is that y[n]

00:42:40.100 --> 00:42:45.600
now we can reexpress as alpha^n,
the sum from 0 to n

00:42:45.600 --> 00:42:46.850
of (alpha^(-1)^k.

00:42:49.460 --> 00:42:54.850
The question is, how do
we evaluate that?

00:42:54.850 --> 00:42:58.960
It essentially corresponds to a
finite number of terms in a

00:42:58.960 --> 00:43:01.060
geometric series.

00:43:01.060 --> 00:43:05.140
That, by the way, is a summation
that will recur over

00:43:05.140 --> 00:43:08.900
and over and over and over
again, and it's one that you

00:43:08.900 --> 00:43:11.870
should write down, write on your
back pocket, write on the

00:43:11.870 --> 00:43:15.650
palm of your hand, or whatever
it takes to remember it.

00:43:15.650 --> 00:43:20.700
What you'll see is it that
will recur more or less

00:43:20.700 --> 00:43:24.970
throughout the course, and so
it's one worth remembering.

00:43:24.970 --> 00:43:31.520
In particular, what the sum of a
geometric series is, is what

00:43:31.520 --> 00:43:32.950
I've indicated here.

00:43:32.950 --> 00:43:35.930
We have the sum from
0 to r, of beta^k.

00:43:38.830 --> 00:43:42.430
It's 1 - beta^(r+1)--

00:43:42.430 --> 00:43:48.460
this is one more than the upper
limit on the summation--

00:43:48.460 --> 00:43:51.640
and in the denominator
is 1 - beta.

00:43:51.640 --> 00:43:55.100
So, this equation
is important.

00:43:55.100 --> 00:43:57.720
There's no point in attempting
to derive it.

00:43:57.720 --> 00:44:03.460
However you get to it, it's
important to retain it.

00:44:03.460 --> 00:44:08.595
We can now use that summation
in the expression

00:44:08.595 --> 00:44:11.170
that we just developed.

00:44:11.170 --> 00:44:16.930
So let's proceed to evaluate
that sum in closed form.

00:44:16.930 --> 00:44:21.520
We now go back to the expression
that we just

00:44:21.520 --> 00:44:22.910
worked out-- y[n]

00:44:22.910 --> 00:44:27.150
is alpha^n, the sum from
0 to n, (alpha^(-1))^k.

00:44:31.950 --> 00:44:35.280
This plays the role of beta
in the term that I just--

00:44:35.280 --> 00:44:39.120
in the expression then
I just presented.

00:44:39.120 --> 00:44:45.170
So, using that result, we can
rewrite this summation as I

00:44:45.170 --> 00:44:46.420
indicate here.

00:44:49.000 --> 00:44:52.550
The final result that we end up
with after a certain amount

00:44:52.550 --> 00:44:55.180
of algebra is y[n]

00:44:55.180 --> 00:45:02.230
equal to (1 - alpha^(n+1))
/ (1 - alpha).

00:45:02.230 --> 00:45:09.560
Let me just kind of indicate
with a few dots here that

00:45:09.560 --> 00:45:13.970
there is a certain amount of
algebra required in going from

00:45:13.970 --> 00:45:18.470
this step to this step, and I'd
like to leave you with the

00:45:18.470 --> 00:45:20.740
fun and opportunity of doing
that at your leisure.

00:45:23.860 --> 00:45:28.770
The expression we have
now for y[n], is y[n]

00:45:28.770 --> 00:45:33.560
= (1 - alpha^(n+1))
/ (1 - alpha).

00:45:33.560 --> 00:45:35.900
That's for n greater than 0.

00:45:35.900 --> 00:45:37.980
We had found out previously
there it was 0

00:45:37.980 --> 00:45:40.070
for n less than 0.

00:45:40.070 --> 00:45:45.000
Finally, if we were to plot
this, what we would get is the

00:45:45.000 --> 00:45:48.310
graph that I indicate here.

00:45:48.310 --> 00:45:53.350
The first non-zero value occurs
at n = 0, and it has a

00:45:53.350 --> 00:45:59.750
height of 1, and then the next
non-zero value at 1, and this

00:45:59.750 --> 00:46:05.490
has a height of 1 + alpha, and
this is 1 + alpha + alpha^2.

00:46:08.760 --> 00:46:13.960
The sequence continues on like
that and asymptotically

00:46:13.960 --> 00:46:17.980
approaches, as n goes to
infinity, asymptotically

00:46:17.980 --> 00:46:22.630
approaches 1 / (1 - alpha),
which is consistent with the

00:46:22.630 --> 00:46:27.780
algebraic expression that we
have, that we developed, and

00:46:27.780 --> 00:46:32.370
obviously of course is also
consistent with the movie.

00:46:32.370 --> 00:46:35.760
That's our discrete-time
example, which we kind of went

00:46:35.760 --> 00:46:39.720
through graphically with the
transparencies, and we went

00:46:39.720 --> 00:46:41.870
through graphically with the
movie, and now we've gone

00:46:41.870 --> 00:46:43.500
through analytically.

00:46:43.500 --> 00:46:48.690
Now let's look analytically at
the continuous-time example,

00:46:48.690 --> 00:46:52.090
which pretty much flows
in the same way as

00:46:52.090 --> 00:46:55.010
we've just gone through.

00:46:55.010 --> 00:46:59.820
Again, we have the convolution
integral, which is the

00:46:59.820 --> 00:47:02.275
integral indicated at the top.

00:47:05.070 --> 00:47:11.250
Our example, you recall, was
with x(t) as a unit step, and

00:47:11.250 --> 00:47:15.850
h(t) as an exponential
times a unit step.

00:47:15.850 --> 00:47:20.830
So when we substitute those in,
this then corresponds to

00:47:20.830 --> 00:47:24.730
x(t) and this corresponds
to h(t-tau).

00:47:27.600 --> 00:47:33.230
Again, we have the same issue
more or less, which is that

00:47:33.230 --> 00:47:36.690
inside that integral, there
are two steps, one of them

00:47:36.690 --> 00:47:39.480
going forward in time and one
of them going backward in

00:47:39.480 --> 00:47:44.340
time, and we need to examine
when they overlap and when

00:47:44.340 --> 00:47:44.810
they don't.

00:47:44.810 --> 00:47:48.310
When they don't overlap, the
product, of course, is 0, and

00:47:48.310 --> 00:47:50.920
there's no point doing any
integration because the

00:47:50.920 --> 00:47:52.720
integrand is 0.

00:47:52.720 --> 00:47:58.160
So if we track it through, we
have again Interval 1, which

00:47:58.160 --> 00:48:00.300
is t less than 0.

00:48:00.300 --> 00:48:06.940
For t less than 0, this unit
step, which only begins at tau

00:48:06.940 --> 00:48:13.990
= 0, and this unit step which is
0, by the time tau gets up

00:48:13.990 --> 00:48:16.170
to t and beyond.

00:48:16.170 --> 00:48:22.860
For t less than 0, there's no
overlap between the unit step

00:48:22.860 --> 00:48:25.040
going forward in time
and the unit step

00:48:25.040 --> 00:48:27.210
going backward in time.

00:48:27.210 --> 00:48:31.940
Consequently, the integrand is
equal to 0, and consequently,

00:48:31.940 --> 00:48:33.450
the output is equal to 0.

00:48:40.190 --> 00:48:45.520
We can likewise look at the
interval where the two unit

00:48:45.520 --> 00:48:48.070
steps do overlap.

00:48:48.070 --> 00:48:51.380
In that case what happens again
is that the overlap, in

00:48:51.380 --> 00:48:55.940
essence of the unit step, tells
us, gives us a range on

00:48:55.940 --> 00:48:59.320
the integration--

00:48:59.320 --> 00:49:03.600
in particular, the two steps
overlap when t is greater than

00:49:03.600 --> 00:49:10.840
0 from tau = 0 to tau = t.

00:49:10.840 --> 00:49:15.140
For Interval 2, for
t greater than 0--

00:49:15.140 --> 00:49:19.370
again, of course, we have
this expression.

00:49:19.370 --> 00:49:25.200
This product of this unit step
and this unit step is equal to

00:49:25.200 --> 00:49:34.310
1 in this range, and so that
allows us, then, to change the

00:49:34.310 --> 00:49:36.800
limits on the integral--

00:49:36.800 --> 00:49:40.290
instead of from -infinity to
+infinity, we know that the

00:49:40.290 --> 00:49:45.590
integrand is non-zero only
over this range.

00:49:45.590 --> 00:49:48.990
Looking at this integral, we
can now pull out the term

00:49:48.990 --> 00:49:55.240
which corresponds to e^-at, just
as we pulled out a term

00:49:55.240 --> 00:49:56.725
in the discrete-time case.

00:49:59.310 --> 00:50:05.190
We notice in the integral that
we have e^(-a*-tau), so that

00:50:05.190 --> 00:50:09.740
gives us the integral from
0 to t of e^(a*tau).

00:50:09.740 --> 00:50:13.600
If we perform that integration,
we end up with

00:50:13.600 --> 00:50:15.220
this expression.

00:50:15.220 --> 00:50:22.500
Finally, multiplying this by
e^-at, we have for y(t), for t

00:50:22.500 --> 00:50:28.270
greater than 0, the algebraic
expression that I've indicated

00:50:28.270 --> 00:50:29.520
on the bottom.

00:50:33.540 --> 00:50:36.500
So we had worked out t
less than 0, and we

00:50:36.500 --> 00:50:38.170
come out with 0.

00:50:38.170 --> 00:50:43.630
We work out t greater than 0,
and we come out with this

00:50:43.630 --> 00:50:44.880
algebraic expression.

00:50:47.250 --> 00:50:50.560
If we plot this algebraic
expression as a function of

00:50:50.560 --> 00:50:54.690
time, we find that what it
corresponds to is an

00:50:54.690 --> 00:51:00.210
exponential behavior starting
at zero and exponentially

00:51:00.210 --> 00:51:04.800
heading asymptotically toward
the value 1 / a.

00:51:09.980 --> 00:51:12.430
We've gone through these
examples several ways, and one

00:51:12.430 --> 00:51:14.470
is analytically.

00:51:14.470 --> 00:51:19.780
In order to develop a feel and
fluency for convolution, it's

00:51:19.780 --> 00:51:24.000
absolutely essential to work
through a variety of examples,

00:51:24.000 --> 00:51:27.410
both understanding them
graphically and understanding

00:51:27.410 --> 00:51:31.790
them as we did here
analytically.

00:51:31.790 --> 00:51:34.860
You'll have an opportunity to
do that through the problems

00:51:34.860 --> 00:51:38.950
that I've suggested in the
video course manual.

00:51:38.950 --> 00:51:43.980
In the next lecture, what we'll
turn to are some general

00:51:43.980 --> 00:51:48.210
properties of convolution, and
show how this rather amazing

00:51:48.210 --> 00:51:52.310
representation of linear
time-invariant systems in fact

00:51:52.310 --> 00:51:55.580
leads to a variety of
properties of linear

00:51:55.580 --> 00:51:57.620
time-invariant systems.

00:51:57.620 --> 00:52:02.690
We'll find that convolution is
fairly rich in its properties,

00:52:02.690 --> 00:52:09.180
and what this leads to are some
very nice and desirable

00:52:09.180 --> 00:52:12.680
and exploitable properties of
linear time-invariant systems.

00:52:12.680 --> 00:52:13.930
Thank you.