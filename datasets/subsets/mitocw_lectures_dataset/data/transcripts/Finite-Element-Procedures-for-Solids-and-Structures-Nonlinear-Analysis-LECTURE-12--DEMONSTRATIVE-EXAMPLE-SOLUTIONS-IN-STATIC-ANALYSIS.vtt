WEBVTT

00:00:00.000 --> 00:00:02.060
NARRATOR: The following content
is provided under a

00:00:02.060 --> 00:00:03.880
Creative Commons license.

00:00:03.880 --> 00:00:06.920
Your support will help MIT
OpenCourseWare continue to

00:00:06.920 --> 00:00:10.570
offer high quality educational
resources for free.

00:00:10.570 --> 00:00:13.470
To make a donation, or view
additional materials from

00:00:13.470 --> 00:00:18.825
hundreds of MIT courses, visit
MIT OpenCourseWare at

00:00:18.825 --> 00:00:21.341
ocw.mit.edu.

00:00:21.341 --> 00:00:23.370
PROFESSOR: Ladies and gentlemen,
welcome to this

00:00:23.370 --> 00:00:25.980
lecture on nonlinear finite
element analysis of solids and

00:00:25.980 --> 00:00:27.420
structures.

00:00:27.420 --> 00:00:29.120
In this lecture I'd like
to discuss with you

00:00:29.120 --> 00:00:31.310
some example solutions.

00:00:31.310 --> 00:00:34.310
In the last lectures, we
discussed quite a bit of

00:00:34.310 --> 00:00:37.330
theory related to finite element
formulations and

00:00:37.330 --> 00:00:40.640
numerical algorithms, and I
thought that you might like

00:00:40.640 --> 00:00:42.900
now to share with me
some experiences

00:00:42.900 --> 00:00:45.090
regarding example solutions.

00:00:45.090 --> 00:00:49.550
The examples that I'd like to
discuss with you are first,

00:00:49.550 --> 00:00:53.720
the analysis of a truss arch,
the snap-through analysis of a

00:00:53.720 --> 00:00:55.470
truss arch.

00:00:55.470 --> 00:01:00.920
Then the collapse analysis of
an elasto-plastic cylinder.

00:01:00.920 --> 00:01:05.470
Then the large displacement
solution of a spherical shell.

00:01:05.470 --> 00:01:08.770
Then we want to look at the
analysis of a cantilever, the

00:01:08.770 --> 00:01:11.850
large displacement analysis
of a cantilever when that

00:01:11.850 --> 00:01:14.370
structure is subjected
to pressure loading.

00:01:14.370 --> 00:01:17.780
Once deformation independent
pressure loading, and once

00:01:17.780 --> 00:01:20.280
deformation dependent loading.

00:01:20.280 --> 00:01:24.740
And then we would like to look
at the analysis of a

00:01:24.740 --> 00:01:27.440
diamond-shaped frame.

00:01:27.440 --> 00:01:30.330
And finally, I'd like to discuss
with you the failure

00:01:30.330 --> 00:01:34.670
and repair of a beam/cable
structure.

00:01:34.670 --> 00:01:38.690
So let me know walk over here to
some view graphs which give

00:01:38.690 --> 00:01:42.840
us the information regarding
all the analyses.

00:01:42.840 --> 00:01:46.540
The first example you're looking
at is a simple truss

00:01:46.540 --> 00:01:50.090
structure which is shown
here that is

00:01:50.090 --> 00:01:52.480
subjected to a load r here.

00:01:52.480 --> 00:01:56.350
Notice this is a two degree
of freedom system only.

00:01:56.350 --> 00:02:00.780
Actually, if you use symmetry
conditions you would have a

00:02:00.780 --> 00:02:02.380
one degree of freedom system.

00:02:02.380 --> 00:02:05.332
Notice the dimension
l is equal to 10.

00:02:05.332 --> 00:02:09.570
k, the stiffness, ea over
l, is given here.

00:02:09.570 --> 00:02:12.880
You want to perform a
post-buckling analysis of the

00:02:12.880 --> 00:02:15.500
structure using the automatic
load step incrementation

00:02:15.500 --> 00:02:19.420
algorithm, and then perform a
linearized buckling analysis.

00:02:19.420 --> 00:02:23.970
Notice that the two solution
algorithms that we are using

00:02:23.970 --> 00:02:26.560
to perform these two analyses
were discussed in

00:02:26.560 --> 00:02:27.790
the previous lecture.

00:02:27.790 --> 00:02:32.410
I assume in this lecture that
you're quite familiar with

00:02:32.410 --> 00:02:35.640
what I have been discussing,
particularly in the previous

00:02:35.640 --> 00:02:38.290
two lectures.

00:02:38.290 --> 00:02:41.080
Let us start then with the
post-buckling analysis.

00:02:41.080 --> 00:02:45.200
Analytical solution to this
problem is given here, and

00:02:45.200 --> 00:02:48.020
actually, this solution is also
given in the textbook.

00:02:48.020 --> 00:02:51.680
So please refer to the textbook
for the derivation of

00:02:51.680 --> 00:02:53.150
this equation.

00:02:53.150 --> 00:02:57.572
The response can be plotted, and
here you see is a plot of

00:02:57.572 --> 00:03:01.860
the load r as a function of
the displacement data.

00:03:01.860 --> 00:03:05.890
Notice this, of course, is a
critical point, a limit point.

00:03:05.890 --> 00:03:09.465
And the difficulty particularly
is to march up

00:03:09.465 --> 00:03:12.610
here the solution algorithms,
march across that limit point,

00:03:12.610 --> 00:03:15.620
and then down here, and
further up here.

00:03:15.620 --> 00:03:18.350
The automatic load step
incrementation procedure that

00:03:18.350 --> 00:03:27.560
we discussed was employed with
this starting displacement.

00:03:27.560 --> 00:03:31.950
One data is, of course, equal to
1u, and we set it equal to

00:03:31.950 --> 00:03:37.030
plus 0.1, and the solution
obtained is given here.

00:03:37.030 --> 00:03:39.770
Notice this is a finite element
solution, which of

00:03:39.770 --> 00:03:41.930
course is very close to the
analytical solution.

00:03:44.970 --> 00:03:48.970
The solution details for load
step seven are given in this

00:03:48.970 --> 00:03:50.320
table here.

00:03:50.320 --> 00:03:53.440
Let's look at this table
now a bit closer.

00:03:53.440 --> 00:03:56.010
At the beginning of that load
step we have for the

00:03:56.010 --> 00:04:02.830
displacement, this value, and
for the load, that value.

00:04:02.830 --> 00:04:07.470
As we iterate, i, of
course, increases.

00:04:07.470 --> 00:04:12.360
We obtain this solution for
the displacement, this

00:04:12.360 --> 00:04:18.839
solution here for the load, and
these are here, the actual

00:04:18.839 --> 00:04:23.440
load applied, corresponding to
t plus delta t lambda i, in

00:04:23.440 --> 00:04:24.850
other words.

00:04:24.850 --> 00:04:27.755
These are the incremental
displacements, and these are

00:04:27.755 --> 00:04:29.700
the incremental load.

00:04:29.700 --> 00:04:33.850
Now, as we discussed in the
previous lecture, in the

00:04:33.850 --> 00:04:39.840
algorithm using the constant
arc length, we see that the

00:04:39.840 --> 00:04:42.940
displacement here increases.

00:04:42.940 --> 00:04:45.690
The total displacement
increases, of course.

00:04:45.690 --> 00:04:51.640
The total load here actually
decreases.

00:04:51.640 --> 00:04:55.010
The incremental displacement
for this step, as

00:04:55.010 --> 00:04:57.250
you can see, increases.

00:04:57.250 --> 00:05:00.840
The incremental load
decreases.

00:05:00.840 --> 00:05:04.650
And that gives us, of course,
this behavior that we talked

00:05:04.650 --> 00:05:07.440
about, namely that the
displacement and load

00:05:07.440 --> 00:05:10.140
increments lie on this arc.

00:05:10.140 --> 00:05:14.300
That's why the constant
arc length algorithm.

00:05:14.300 --> 00:05:18.060
Pictorially, for this load step
we can see the following.

00:05:18.060 --> 00:05:22.260
Notice here is our equilibrium
configuration at which we are

00:05:22.260 --> 00:05:24.480
starting with iteration.

00:05:24.480 --> 00:05:28.300
Notice the final load increment
that we want to

00:05:28.300 --> 00:05:31.620
obtain is given by lambda r.

00:05:31.620 --> 00:05:35.240
Notice the final displacement
increment that we want to

00:05:35.240 --> 00:05:36.970
obtain is u.

00:05:36.970 --> 00:05:39.820
And we're iterating towards
this u, and towards that

00:05:39.820 --> 00:05:44.830
lambda r, as shown
further here.

00:05:44.830 --> 00:05:48.460
In the first iteration
we get lambda 1 of r,

00:05:48.460 --> 00:05:51.920
and lambda and u1.

00:05:51.920 --> 00:05:54.210
That gives us this point.

00:05:54.210 --> 00:05:57.490
In the second iteration
we get that point.

00:05:57.490 --> 00:05:59.870
In this third iteration
we get that point.

00:05:59.870 --> 00:06:04.680
And after the completion of the
iteration, at convergence

00:06:04.680 --> 00:06:06.310
we end up on that point.

00:06:06.310 --> 00:06:12.040
Notice that if you take this
point here and connect it with

00:06:12.040 --> 00:06:16.040
the iteration i point, you would
get an arc around here.

00:06:16.040 --> 00:06:20.280
And that is, of course, a
constant arc length algorithm.

00:06:20.280 --> 00:06:23.490
Also please, I should point out
here that we have broken

00:06:23.490 --> 00:06:26.860
the scale as shown down here.

00:06:26.860 --> 00:06:28.930
So we are starting here
already with 0.7

00:06:28.930 --> 00:06:33.070
and here with 13.000.

00:06:33.070 --> 00:06:37.030
The solution details for load
step here, load step eight,

00:06:37.030 --> 00:06:38.860
are as follows.

00:06:38.860 --> 00:06:42.610
We used, for this particular
load step, the increment of

00:06:42.610 --> 00:06:45.070
external work algorithm.

00:06:45.070 --> 00:06:47.480
The modified Newton iteration,
as well.

00:06:47.480 --> 00:06:50.710
And these were the starting
values now.

00:06:50.710 --> 00:06:53.930
And notice that we have
immediate convergence.

00:06:53.930 --> 00:06:56.660
I pointed out in the previous
lecture that for a single

00:06:56.660 --> 00:07:00.650
degree of freedom with the
constant increment of external

00:07:00.650 --> 00:07:04.660
work algorithm, we will
have convergence

00:07:04.660 --> 00:07:06.520
after the second iteration.

00:07:06.520 --> 00:07:12.100
In other words, the effective
delta u2 is going to be 0.

00:07:12.100 --> 00:07:18.240
And that is shown right here in
the table, and also in this

00:07:18.240 --> 00:07:19.570
picture here.

00:07:19.570 --> 00:07:23.630
Notice here is load
step seven.

00:07:23.630 --> 00:07:29.700
The equilibrium point at which
we are starting off now, we

00:07:29.700 --> 00:07:34.090
want to of course walk
along this red curve.

00:07:34.090 --> 00:07:38.890
Notice in the first iteration we
come to this point c here.

00:07:38.890 --> 00:07:40.410
i is equal to 1.

00:07:40.410 --> 00:07:44.560
And then immediately we shoot
down in the second iteration

00:07:44.560 --> 00:07:47.990
to the actual red curve.

00:07:47.990 --> 00:07:53.750
So we immediately converge, as
pointed out in the earlier

00:07:53.750 --> 00:07:56.300
lecture, and on the
earlier u graph.

00:07:56.300 --> 00:08:02.490
The u displacement is equal to
u of 1 because delta u2 is

00:08:02.490 --> 00:08:03.740
equal to zero.

00:08:06.710 --> 00:08:09.970
Let us now go and perform
linearized buckling analysis

00:08:09.970 --> 00:08:13.420
for the same problem to estimate
the collapse load for

00:08:13.420 --> 00:08:14.610
the truss arch.

00:08:14.610 --> 00:08:18.060
We talked about the algorithm
that we're using for this

00:08:18.060 --> 00:08:21.320
linearized buckling analysis
in the previous lecture.

00:08:21.320 --> 00:08:24.830
Here we have the actual load
displacement curve.

00:08:24.830 --> 00:08:29.160
This is the collapse load that
we would like to estimate in

00:08:29.160 --> 00:08:31.720
our linearized buckling
analysis.

00:08:31.720 --> 00:08:38.150
Now, if we use delta t of r
1,000, our predictive collapse

00:08:38.150 --> 00:08:42.120
load is 25,600.

00:08:42.120 --> 00:08:46.130
Of course, our starting value,
our t minus data

00:08:46.130 --> 00:08:49.580
tk is equal to 0k.

00:08:49.580 --> 00:08:51.920
I'm now referring, in other
words, to the view graph that

00:08:51.920 --> 00:08:55.030
we saw in the earlier lecture,
and the t minus delta t of k

00:08:55.030 --> 00:08:58.120
there is equal to 0k.

00:08:58.120 --> 00:09:03.890
The delta, the t of k is equal
to data t of k now.

00:09:03.890 --> 00:09:08.590
And delta t of r corresponding
to delta t of k

00:09:08.590 --> 00:09:10.290
is given right here.

00:09:10.290 --> 00:09:14.520
Notice that this number is much
larger than the number

00:09:14.520 --> 00:09:16.170
that we want to estimate.

00:09:16.170 --> 00:09:19.690
The reason being that the
pre-buckling displacements are

00:09:19.690 --> 00:09:21.710
not small in this
particular case.

00:09:21.710 --> 00:09:24.640
And I pointed out in the earlier
lecture that that is

00:09:24.640 --> 00:09:28.180
really necessary, the necessary
condition to obtain

00:09:28.180 --> 00:09:31.150
good results, acceptable
results, in a linearized

00:09:31.150 --> 00:09:32.960
buckling analysis.

00:09:32.960 --> 00:09:34.910
It is not the case here,
and that's why we are

00:09:34.910 --> 00:09:38.540
overestimating the buckling
load, the collapse load, by

00:09:38.540 --> 00:09:40.190
quite a bit.

00:09:40.190 --> 00:09:45.196
If we, however, increase our
delta t value such delta t of

00:09:45.196 --> 00:09:52.600
r is 10,000, then you would
see that our predictive

00:09:52.600 --> 00:09:58.940
collapse load is decreasing, and
gets closer to the value

00:09:58.940 --> 00:10:00.850
that we want to obtain.

00:10:00.850 --> 00:10:05.180
As we increase our delta t of
r value, and that means of

00:10:05.180 --> 00:10:07.930
course that we are getting
closer and closer to the

00:10:07.930 --> 00:10:12.480
collapse load by this value
here, we find that we are

00:10:12.480 --> 00:10:16.010
getting, in our prediction for
the linearized buckling load,

00:10:16.010 --> 00:10:20.530
closer and closer to the value
that we want to obtain.

00:10:20.530 --> 00:10:22.210
These values here, by
the way, have been

00:10:22.210 --> 00:10:24.360
given to three digits.

00:10:24.360 --> 00:10:27.670
You notice that 15,000 certainly
is very close to

00:10:27.670 --> 00:10:32.550
this value, but notice that the
delta t of r value is very

00:10:32.550 --> 00:10:35.420
close to the buckling
load itself, to the

00:10:35.420 --> 00:10:37.560
collapse load itself.

00:10:37.560 --> 00:10:40.670
This is something
to keep in mind.

00:10:40.670 --> 00:10:44.320
The basic conclusion here
is that the pre-bucking

00:10:44.320 --> 00:10:49.090
displacements should be small in
the analysis in order to be

00:10:49.090 --> 00:10:52.785
able to obtain good results.

00:10:52.785 --> 00:10:55.890
By good I mean that the
linearized buckling load will

00:10:55.890 --> 00:10:57.400
be close to the actual

00:10:57.400 --> 00:11:00.120
collapse load of the structure.

00:11:00.120 --> 00:11:03.860
Let's look at an extension
off this example.

00:11:03.860 --> 00:11:06.510
And that extension is given
on this view graph.

00:11:06.510 --> 00:11:10.340
Here we have still our truss
structure, but now we

00:11:10.340 --> 00:11:12.780
introduce here this spring.

00:11:12.780 --> 00:11:14.720
Let's called that
spring k star.

00:11:14.720 --> 00:11:17.670
And this is the value that
we give to that spring.

00:11:17.670 --> 00:11:20.920
If we trace out the load
displacement response, that

00:11:20.920 --> 00:11:23.950
load displacement response
is shown here.

00:11:23.950 --> 00:11:24.890
Load vertically.

00:11:24.890 --> 00:11:26.770
Displacement horizontally.

00:11:26.770 --> 00:11:30.380
And we notice that our stiffness
matrix is always

00:11:30.380 --> 00:11:33.680
positive definite in
all of this region.

00:11:33.680 --> 00:11:38.730
So we don't really have a
singular matrix, and we don't

00:11:38.730 --> 00:11:43.700
have what we might call
a true collapse load.

00:11:43.700 --> 00:11:46.660
The structure is stable
in some sense.

00:11:46.660 --> 00:11:50.140
Of course when we talk about a
stable structure, we really

00:11:50.140 --> 00:11:53.750
have to also define what
we mean by stability.

00:11:53.750 --> 00:11:57.210
In a practical analysis you
might say, well, this

00:11:57.210 --> 00:12:02.030
displacement is just too much,
and therefore I already

00:12:02.030 --> 00:12:04.890
consider this structure
to be unstable at

00:12:04.890 --> 00:12:06.920
this particular location.

00:12:06.920 --> 00:12:08.730
You might want to say
that, depending

00:12:08.730 --> 00:12:10.800
on your design criteria.

00:12:10.800 --> 00:12:14.820
However, one thing to keep
in mind is that, in this

00:12:14.820 --> 00:12:17.490
particular example,
we do not have a

00:12:17.490 --> 00:12:19.030
single stiffness matrix.

00:12:19.030 --> 00:12:24.770
The matrix stays positive all
the way as we march up on that

00:12:24.770 --> 00:12:27.060
load displacement response.

00:12:27.060 --> 00:12:29.950
Let's perform a linearized
buckling analysis of this

00:12:29.950 --> 00:12:31.190
structure now.

00:12:31.190 --> 00:12:35.280
And when we take delta t
of r equal to 10,000--

00:12:35.280 --> 00:12:39.130
in other words, down here,
our delta t of r--

00:12:39.130 --> 00:12:44.790
we get tau r as a collapse
load, 60,700.

00:12:44.790 --> 00:12:52.350
And if you take delta t of r
40,000, we get tau r 44,100.

00:12:52.350 --> 00:12:57.670
Notice that this is predicted
by the computer program.

00:12:57.670 --> 00:13:03.530
However, we also know that there
is no true collapse load

00:13:03.530 --> 00:13:07.630
in the sense of obtaining a
single stiffness matrix.

00:13:07.630 --> 00:13:11.930
So, here we learn something
more from this example.

00:13:11.930 --> 00:13:15.940
Namely that, in the linearized
buckling analysis we may

00:13:15.940 --> 00:13:21.850
predict the collapse load, but
there may not actually be a

00:13:21.850 --> 00:13:26.130
collapse load in the structure
response corresponding to a

00:13:26.130 --> 00:13:28.580
single stiffness matrix.

00:13:28.580 --> 00:13:31.640
Whether you really want to
accept this here as a collapse

00:13:31.640 --> 00:13:36.850
load depends on your
design criteria.

00:13:36.850 --> 00:13:40.430
Let's now look at another
example, the second example.

00:13:40.430 --> 00:13:49.340
And in this example we want to
consider the analysis of a

00:13:49.340 --> 00:13:53.630
cylinder that can undergo
enough elasto-plastic

00:13:53.630 --> 00:13:55.260
conditions.

00:13:55.260 --> 00:13:58.490
The material data of the
cylinder are given here.

00:13:58.490 --> 00:14:02.190
The geometric data of the
cylinder are given here.

00:14:02.190 --> 00:14:05.420
Our goal is to determine the
limit load of the cylinder.

00:14:08.210 --> 00:14:12.490
The finite element method we're
using here is shown on

00:14:12.490 --> 00:14:14.160
this view graph.

00:14:14.160 --> 00:14:16.550
Notice we have 8-node
elements here.

00:14:16.550 --> 00:14:19.350
Four 8-node elements.

00:14:19.350 --> 00:14:24.370
And in fact, if we look closely
at the response of the

00:14:24.370 --> 00:14:29.980
cylinder, we can identify that
these middle nodes really are

00:14:29.980 --> 00:14:34.300
not necessary, because the
response in the cylinder--

00:14:34.300 --> 00:14:36.880
We assume the cylinder to
be infinitely long.

00:14:36.880 --> 00:14:39.500
For that reason we have
introduced plane strain

00:14:39.500 --> 00:14:41.980
conditions.

00:14:41.980 --> 00:14:46.070
The response of the cylinder is
such that the same stress

00:14:46.070 --> 00:14:48.710
condition is obtained
throughout the

00:14:48.710 --> 00:14:50.075
lengths of the cylinder.

00:14:50.075 --> 00:14:52.690
There is no variation in
stresses along the length of

00:14:52.690 --> 00:14:53.440
the cylinder.

00:14:53.440 --> 00:14:56.360
And for that reason we could
actually have analyzed the

00:14:56.360 --> 00:14:58.390
structure with 6-noded
elements.

00:14:58.390 --> 00:15:00.140
In other words, we could
have dispensed

00:15:00.140 --> 00:15:01.570
with these nodes here.

00:15:04.370 --> 00:15:08.030
The internal pressure is
shown here to which

00:15:08.030 --> 00:15:09.490
the cylinder is subjected.

00:15:09.490 --> 00:15:13.500
And once again we want to
predict the ultimate load of

00:15:13.500 --> 00:15:16.290
this cylinder.

00:15:16.290 --> 00:15:19.260
Since the displacements are
small, we use here an MNO

00:15:19.260 --> 00:15:22.030
formulation.

00:15:22.030 --> 00:15:26.150
In this load displacement, the
response calculation, if we

00:15:26.150 --> 00:15:30.340
don't use the automatic load
step incrementation- the one

00:15:30.340 --> 00:15:32.880
that we discussed in the
previous lecture--

00:15:32.880 --> 00:15:40.600
the analyst has to prescribe a
load level, or a load curve,

00:15:40.600 --> 00:15:42.210
prior to the analysis.

00:15:42.210 --> 00:15:45.290
And here we have chosen
this load curve.

00:15:45.290 --> 00:15:48.920
Notice time is plotted
along this axis.

00:15:48.920 --> 00:15:51.380
Pressure is plotted
along this axis.

00:15:51.380 --> 00:15:55.710
And notice also that the elastic
limit load is 7.42.

00:15:55.710 --> 00:15:58.530
Therefore this kink here
is just above the

00:15:58.530 --> 00:15:59.910
elastic limit load.

00:15:59.910 --> 00:16:02.960
There's very little point in
using a lot of steps here,

00:16:02.960 --> 00:16:07.560
because we know that an MNO
formulation will reduce to a

00:16:07.560 --> 00:16:13.185
linear analysis until the
heave point is reached.

00:16:13.185 --> 00:16:15.860
Or the elastic limit
load is reached.

00:16:15.860 --> 00:16:19.510
So, we can go basically in one
step right up to the elastic

00:16:19.510 --> 00:16:23.450
limit load, and then we take a
series of steps to trace out

00:16:23.450 --> 00:16:26.345
the nonlinear response beyond
the elastic limit load.

00:16:29.330 --> 00:16:34.720
The purpose of the analysis was
really to compare various

00:16:34.720 --> 00:16:36.300
solution algorithms--

00:16:36.300 --> 00:16:39.260
the full Newton method with line
searches, the full Newton

00:16:39.260 --> 00:16:43.530
method without line searches,
the BFGS method, the modified

00:16:43.530 --> 00:16:46.420
Newton method with line
searches, the modified Newton

00:16:46.420 --> 00:16:49.840
method without line searches,
and the initial stress method.

00:16:49.840 --> 00:16:53.080
Now please recall that all
of these techniques were

00:16:53.080 --> 00:16:56.530
discussed in the previous
lecture, and I'd like to refer

00:16:56.530 --> 00:17:00.460
you back to that lecture to read
up on this material if

00:17:00.460 --> 00:17:04.280
you're not very familiar
with what I mean here.

00:17:04.280 --> 00:17:08.894
The convergence criteria that we
are using for the solution

00:17:08.894 --> 00:17:10.819
are given on this view graph.

00:17:10.819 --> 00:17:15.200
Notice here our ETOL,
and here our RTOL.

00:17:15.200 --> 00:17:21.650
We saw these formulas in the
previous lectures, and I don't

00:17:21.650 --> 00:17:24.230
want to go now through
these formulas again.

00:17:24.230 --> 00:17:28.470
The only point that I should
mention here is that this is a

00:17:28.470 --> 00:17:29.940
value you have to select.

00:17:29.940 --> 00:17:32.210
That is a value that
you have to select.

00:17:32.210 --> 00:17:35.040
In the computer program that
we are using, the ADINA

00:17:35.040 --> 00:17:38.530
program, of course, at default
values, which are really

00:17:38.530 --> 00:17:41.330
working quite well over a
large range of nonlinear

00:17:41.330 --> 00:17:46.200
problems, and those, of
course, are used very

00:17:46.200 --> 00:17:47.450
frequently.

00:17:47.450 --> 00:17:49.560
The RNORM here you
have to select.

00:17:49.560 --> 00:17:53.320
And this is a reasonable number
when you compare it

00:17:53.320 --> 00:17:57.960
with the total load applied
to the cylinder.

00:17:57.960 --> 00:18:01.330
Notice that we're looking here
at one radian of the cylinder.

00:18:01.330 --> 00:18:02.670
It's an axisymmetric analysis.

00:18:05.310 --> 00:18:09.510
When these procedures are
used to calculate the

00:18:09.510 --> 00:18:14.650
force-deflection curve, we find
that for p equal to 14,

00:18:14.650 --> 00:18:18.020
none of these procedures
converges.

00:18:18.020 --> 00:18:23.870
The response is shown here that
is calculated up to p

00:18:23.870 --> 00:18:27.120
equals 13.5.

00:18:27.120 --> 00:18:30.240
Of course, we have here drawn
a smooth curve through the

00:18:30.240 --> 00:18:34.620
discrete solution points that
have been obtained.

00:18:34.620 --> 00:18:38.610
If we compare now the different
solution techniques

00:18:38.610 --> 00:18:42.150
in terms of their cost
effectiveness, we find that

00:18:42.150 --> 00:18:47.150
normalizing to the full Newton
method solution time, we find

00:18:47.150 --> 00:18:51.080
that the full Newton method with
line searches takes 1.2

00:18:51.080 --> 00:18:55.620
times the time that is used
in the full Newton method.

00:18:55.620 --> 00:18:58.460
The BFGS method has here 0.9.

00:18:58.460 --> 00:19:02.420
The modified Newton method
with line searches 1.1.

00:19:02.420 --> 00:19:04.820
The modified Newton
method 1.1.

00:19:04.820 --> 00:19:07.450
And the initial stress
method 2.2.

00:19:07.450 --> 00:19:12.810
Showing that the BFGS is just a
tiny bit more effective than

00:19:12.810 --> 00:19:15.690
the full Newton method, hardly
worthwhile mentioning.

00:19:15.690 --> 00:19:19.490
But we also see that the initial
stress method is twice

00:19:19.490 --> 00:19:25.160
as expensive as virtually all
of the other methods.

00:19:25.160 --> 00:19:28.770
Once again please refer back
to the previous lecture in

00:19:28.770 --> 00:19:31.120
which I have been discussing
these various solution

00:19:31.120 --> 00:19:33.050
techniques.

00:19:33.050 --> 00:19:37.650
If we use the automatic load
step instrumentation we do not

00:19:37.650 --> 00:19:41.420
need to specify a load
function anymore.

00:19:41.420 --> 00:19:43.130
We discussed that earlier.

00:19:43.130 --> 00:19:46.050
And the softening in the
force-deflection curve is

00:19:46.050 --> 00:19:49.531
automatically taken
into account.

00:19:49.531 --> 00:19:55.400
With this technique, these are
the tolerances that we used.

00:19:55.400 --> 00:19:58.070
Default tolerances
in ADINA here.

00:19:58.070 --> 00:20:00.760
And this is the same RNORM
value that we used in the

00:20:00.760 --> 00:20:02.790
earlier analysis.

00:20:02.790 --> 00:20:08.240
Now the displacement response
is calculated as shown here.

00:20:08.240 --> 00:20:14.770
The p versus displacement
curve follows this path.

00:20:14.770 --> 00:20:17.210
And notice that the computed
limit load is

00:20:17.210 --> 00:20:20.560
really p equals 13.8.

00:20:20.560 --> 00:20:26.370
In the earlier analysis we
could not go beyond 13.5.

00:20:26.370 --> 00:20:29.650
In other words, for a value of
p equals 14 we did not reach

00:20:29.650 --> 00:20:30.630
convergence.

00:20:30.630 --> 00:20:32.510
We did not reach convergence
because the

00:20:32.510 --> 00:20:35.360
limit load is 13.8.

00:20:35.360 --> 00:20:37.580
And this is the difficulty
that I referred to at the

00:20:37.580 --> 00:20:39.710
start of last lecture.

00:20:39.710 --> 00:20:42.120
You see, if you use the earlier
solution algorithms,

00:20:42.120 --> 00:20:46.430
you have to very slowly this
restarting, or a very

00:20:46.430 --> 00:20:50.330
judicious choice of a load
function, get yourself closer

00:20:50.330 --> 00:20:52.170
and closer to the limit load.

00:20:52.170 --> 00:20:54.730
And that can be time
consuming.

00:20:54.730 --> 00:20:59.810
That means it also consumes
quite a bit of cost.

00:20:59.810 --> 00:21:02.700
Computer cost as well as
cost of your time.

00:21:02.700 --> 00:21:04.980
And therefore, it is so much
more convenient to use an

00:21:04.980 --> 00:21:08.460
automatic solution algorithm,
that means you don't need to

00:21:08.460 --> 00:21:12.160
specify a load function, that's
simply marches up here

00:21:12.160 --> 00:21:19.650
and gives you is the actual
collapse load quite easily, as

00:21:19.650 --> 00:21:21.400
shown here.

00:21:21.400 --> 00:21:24.510
Notice an interesting point is
that we actually march along

00:21:24.510 --> 00:21:31.390
this plateau when we use this
automatic solution algorithm.

00:21:31.390 --> 00:21:34.350
Let's look now at the
next example.

00:21:34.350 --> 00:21:40.600
And this pertains to the
solution of a spherical shell.

00:21:40.600 --> 00:21:44.760
Here we have a plan
view of the shell.

00:21:44.760 --> 00:21:46.800
The edges are clamped.

00:21:46.800 --> 00:21:48.810
And here we have a side
view of the shell.

00:21:48.810 --> 00:21:53.510
The shell is subjected to a
concentrated load at its apex.

00:21:53.510 --> 00:21:58.580
And we will increase that load,
as shown later on, to a

00:21:58.580 --> 00:22:04.850
very large value, so that this
shell, schematically shown

00:22:04.850 --> 00:22:08.720
here once again, will undergo
large displacements here.

00:22:08.720 --> 00:22:12.780
In fact, this point here will
move, as my pointer shows

00:22:12.780 --> 00:22:17.460
here, all the way down
to this level.

00:22:17.460 --> 00:22:20.040
Notice that this
distance here--

00:22:22.820 --> 00:22:24.660
and let me show it a
little bit clearer

00:22:24.660 --> 00:22:27.580
here on the view graph--

00:22:27.580 --> 00:22:32.430
is equal to .0859 inches.

00:22:32.430 --> 00:22:35.860
Here you see the other geometric
data of the shell,

00:22:35.860 --> 00:22:38.150
and here you see the
material data.

00:22:38.150 --> 00:22:43.480
We perform an axisymmetric
analysis of this shell.

00:22:43.480 --> 00:22:47.440
The finite element mesh is
shown in this view graph.

00:22:47.440 --> 00:22:54.740
Here we have the original mesh
subjected to the load.

00:22:54.740 --> 00:22:57.320
Notice that since we're looking
at an axisymmetric

00:22:57.320 --> 00:23:02.360
analysis, and since we are using
ADINA, we apply here a

00:23:02.360 --> 00:23:06.580
load of p, the total load
divided by 2 pi, because we

00:23:06.580 --> 00:23:09.980
only look at one radian of
the total structure.

00:23:09.980 --> 00:23:13.110
This 2 pi comes from the fact
that we are only analyzing one

00:23:13.110 --> 00:23:15.150
radian of the structure.

00:23:15.150 --> 00:23:19.010
The deformed configuration for
p equal 200 pounds is shown

00:23:19.010 --> 00:23:20.260
here in red.

00:23:23.180 --> 00:23:27.650
Notice we undergo large
displacements here, and that

00:23:27.650 --> 00:23:32.340
is also shown on the next view
graph, which gives the force

00:23:32.340 --> 00:23:37.640
deflection curve obtained with
this finite element mesh.

00:23:37.640 --> 00:23:39.850
And that force deflection
curve is shown here.

00:23:43.510 --> 00:23:46.550
The linear analysis would
predict this response.

00:23:46.550 --> 00:23:49.220
Of course, way off the actual
response when the

00:23:49.220 --> 00:23:53.100
displacements become large.

00:23:53.100 --> 00:24:00.520
For this problem, the maximum
load is 100 pounds, and we can

00:24:00.520 --> 00:24:04.180
apply that maximum load in one
load step, or in a sequence of

00:24:04.180 --> 00:24:05.180
load steps.

00:24:05.180 --> 00:24:10.300
If we apply the full load in 10
equal steps, we find that

00:24:10.300 --> 00:24:11.980
the full Newton method
with line

00:24:11.980 --> 00:24:15.670
searchers works very nicely.

00:24:15.670 --> 00:24:17.950
The full Newton without line
searches, in fact, is even

00:24:17.950 --> 00:24:20.490
more effective.

00:24:20.490 --> 00:24:24.340
Notice the BFGS method, the
modified Newton method with

00:24:24.340 --> 00:24:26.490
line searches and without
line searches.

00:24:26.490 --> 00:24:30.350
These three methods
did not work.

00:24:30.350 --> 00:24:34.700
Of course, 10 steps to full
load with these very large

00:24:34.700 --> 00:24:39.570
displacements means really
using a very coarse load

00:24:39.570 --> 00:24:43.090
incrementation, or using, in
other words, a very small

00:24:43.090 --> 00:24:44.640
number of load steps.

00:24:44.640 --> 00:24:47.210
These were 10 equal load steps,
I should also say.

00:24:51.050 --> 00:24:55.600
If we apply the full load in 50
equal steps, we find that

00:24:55.600 --> 00:24:57.490
the full Newton method
with line searches

00:24:57.490 --> 00:24:59.990
is still most effective.

00:24:59.990 --> 00:25:05.420
And these four methods
here converge.

00:25:05.420 --> 00:25:10.240
They are not quite as effective
as the full Newton

00:25:10.240 --> 00:25:13.190
method, but the modified Newton
method without line

00:25:13.190 --> 00:25:15.520
searches does not
even converge.

00:25:15.520 --> 00:25:20.260
You would have to use many
more steps to make the

00:25:20.260 --> 00:25:25.110
modified Newton method without
line searches also converge.

00:25:25.110 --> 00:25:29.360
Here, the BFGS method compares
quite favorably with these

00:25:29.360 --> 00:25:31.340
methods here.

00:25:31.340 --> 00:25:35.350
The convergence criteria
employed for this problem are

00:25:35.350 --> 00:25:38.000
shown here.

00:25:38.000 --> 00:25:42.860
Notice ETOL is given here
as 0.001 default

00:25:42.860 --> 00:25:44.260
in the ADINA program.

00:25:44.260 --> 00:25:46.610
We used a maximum number of
iterations that we're

00:25:46.610 --> 00:25:48.940
permitted, which
is very large.

00:25:48.940 --> 00:25:52.180
Very large in this
particular case.

00:25:52.180 --> 00:25:55.400
We, of course, may also perform
the analysis using the

00:25:55.400 --> 00:25:58.790
automatic load stepping
algorithm.

00:25:58.790 --> 00:26:05.460
Here we use as this tolerance
ETOL, and RTOL this tolerance.

00:26:05.460 --> 00:26:07.070
Our norm is shown here.

00:26:07.070 --> 00:26:09.740
These are once again
default tolerances

00:26:09.740 --> 00:26:12.510
in the ADINA program.

00:26:12.510 --> 00:26:18.080
The response that we calculate
is shown on this view graph.

00:26:18.080 --> 00:26:19.850
Here, the applied
load once again.

00:26:19.850 --> 00:26:21.830
Displacement at the apex.

00:26:21.830 --> 00:26:24.800
And this is the response
calculated.

00:26:24.800 --> 00:26:33.140
Using as the initial
displacement 0.001 inches.

00:26:33.140 --> 00:26:35.090
You get the solid curve.

00:26:35.090 --> 00:26:38.390
And using as initial
displacement 0.01 inches, we

00:26:38.390 --> 00:26:41.560
get these points here.

00:26:41.560 --> 00:26:46.020
Notice, or recall please, that
when we use the automatic load

00:26:46.020 --> 00:26:51.130
stepping algorithm, we start
off that algorithm by

00:26:51.130 --> 00:26:54.270
specifying the displacement
for the first

00:26:54.270 --> 00:26:55.930
load step at one node.

00:26:55.930 --> 00:26:58.700
And these are the values that
I'm talking about here.

00:27:01.870 --> 00:27:05.490
As a next example, I'd like to
look with you at the analysis

00:27:05.490 --> 00:27:08.080
of the cantilever under
pressure loading.

00:27:08.080 --> 00:27:10.920
Here we have the cantilever.

00:27:10.920 --> 00:27:14.070
This is the pressure
loading applied.

00:27:14.070 --> 00:27:17.100
Notice it's quite a long
cantilever, when

00:27:17.100 --> 00:27:20.390
measured on the gaps.

00:27:20.390 --> 00:27:22.400
Here are the material data.

00:27:22.400 --> 00:27:28.830
We analyze this problem using
plane strain situation, and we

00:27:28.830 --> 00:27:32.860
want to perform the analysis for
p equal to 1 megapascal.

00:27:36.280 --> 00:27:41.390
The interesting point here is
to perform the analysis once

00:27:41.390 --> 00:27:45.880
with a deformation-independent
loading, p the vertical and

00:27:45.880 --> 00:27:50.820
remaining vertical, throughout
the whole analysis, and once

00:27:50.820 --> 00:27:53.790
with a deformation-dependent
loading assumption, in which

00:27:53.790 --> 00:27:58.390
the pressure loading remains
perpendicular to the

00:27:58.390 --> 00:27:59.955
mid-surface of the cantilever.

00:28:02.660 --> 00:28:05.390
I think you can appreciate
that if you have this

00:28:05.390 --> 00:28:10.110
situation, the deformations
will be larger.

00:28:10.110 --> 00:28:15.370
Well, we performed both of these
analyses, and once again

00:28:15.370 --> 00:28:20.540
the purpose here was really to
contrast the assumption of

00:28:20.540 --> 00:28:23.865
deformation-independent loading
with the assumption of

00:28:23.865 --> 00:28:26.760
deformation-dependent loading.

00:28:26.760 --> 00:28:30.280
The finite element model that
we used consisted of 25

00:28:30.280 --> 00:28:33.730
two-dimensional 8-node elements,
one layer through

00:28:33.730 --> 00:28:36.730
the thickness, and they
were evenly spaced.

00:28:36.730 --> 00:28:38.620
And here we list the
solution details.

00:28:38.620 --> 00:28:43.200
We used the full Newton method
without line searches.

00:28:43.200 --> 00:28:46.550
And the convergence tolerance
is shown here.

00:28:46.550 --> 00:28:51.150
I should also add that we used
10 steps for the total load

00:28:51.150 --> 00:28:52.430
that we wanted to reach.

00:28:52.430 --> 00:28:54.960
10 equal steps.

00:28:54.960 --> 00:28:58.950
The force deflection curve is
shown on this view graph.

00:28:58.950 --> 00:29:03.540
For small deflections, down
here, there's basically no

00:29:03.540 --> 00:29:07.155
difference with respect
to the assumption of

00:29:07.155 --> 00:29:08.760
deformation-dependent
loading or

00:29:08.760 --> 00:29:10.500
deformation-independent loading.

00:29:10.500 --> 00:29:15.360
However, as the displacements
become larger, the two curves

00:29:15.360 --> 00:29:18.995
part from each other and,
as expected, the

00:29:18.995 --> 00:29:23.200
deformation-dependent loading
gives larger displacements.

00:29:25.790 --> 00:29:29.400
I should add here, if you look
back at what we discussed in

00:29:29.400 --> 00:29:34.890
our earlier lectures, I should
add that regarding the

00:29:34.890 --> 00:29:39.030
solution for the
deformation-dependent loading

00:29:39.030 --> 00:29:44.790
case, we used a stiffness matrix
that is symmetric.

00:29:44.790 --> 00:29:47.130
The same stiffness matrix, as a
matter of fact, that we are

00:29:47.130 --> 00:29:50.860
usually using when
we are analyzing

00:29:50.860 --> 00:29:52.770
deformation-independent
loading.

00:29:52.770 --> 00:29:57.160
The deformation dependency of
the loading was only taken

00:29:57.160 --> 00:30:00.925
into account by updating the
right hand side load vector t

00:30:00.925 --> 00:30:02.840
plus delta t of r.

00:30:02.840 --> 00:30:07.145
In our earlier discussions, we
very largely assumed that t

00:30:07.145 --> 00:30:10.760
plus delta t of r is constant,
and prescribed by the analyst.

00:30:10.760 --> 00:30:14.410
But I also pointed out in the
earlier lectures that, if we

00:30:14.410 --> 00:30:17.485
have deformation-dependent
loading, you would have a t

00:30:17.485 --> 00:30:21.720
plus delta t of r, superscript
i minus one, where that i

00:30:21.720 --> 00:30:27.560
minus 1 then refers to the
configuration corresponding to

00:30:27.560 --> 00:30:31.620
the i at the end of i minus
first iteration.

00:30:31.620 --> 00:30:34.790
So, in this particular solution,
when we dealt with

00:30:34.790 --> 00:30:38.880
the deformation-dependent
loading, we kept this as the

00:30:38.880 --> 00:30:39.890
matrix difference
[UNINTELLIGIBLE]

00:30:39.890 --> 00:30:43.580
on the left hand side, but we
updated the load vector t plus

00:30:43.580 --> 00:30:46.850
delta t of r in the notation
that we used in our earlier

00:30:46.850 --> 00:30:51.250
lectures for the configuration,
and for the

00:30:51.250 --> 00:30:54.760
iteration, that we actually
are dealing with.

00:30:54.760 --> 00:31:01.060
And when we did so, we found
that to obtain this total

00:31:01.060 --> 00:31:05.640
curve here, to obtain this total
curve, we needed about

00:31:05.640 --> 00:31:12.880
20% more solution time than for
attaining this curve here.

00:31:12.880 --> 00:31:16.830
So, taking into account the
deformation-dependency of the

00:31:16.830 --> 00:31:20.840
loading in this particular
example just meant 20% more

00:31:20.840 --> 00:31:24.510
solution time with the
computer program.

00:31:24.510 --> 00:31:29.240
Here on the next view graph now,
we show pictorially how

00:31:29.240 --> 00:31:31.090
the cantilever has deformed.

00:31:31.090 --> 00:31:33.350
Here is the original mesh.

00:31:33.350 --> 00:31:36.870
And here is the deformed
mesh when we use the

00:31:36.870 --> 00:31:39.630
deformation-independent loading
assumption, and here

00:31:39.630 --> 00:31:42.880
is the deformed mesh when we
use a deformation-dependent

00:31:42.880 --> 00:31:44.040
loading assumption.

00:31:44.040 --> 00:31:47.650
Notice, of course, that the
deformations are larger when

00:31:47.650 --> 00:31:50.460
we have assumed that
the loading

00:31:50.460 --> 00:31:53.180
is deformation dependent.

00:31:53.180 --> 00:31:55.800
Let us now look at
the next example.

00:31:55.800 --> 00:31:58.965
And in this example
we consider a

00:31:58.965 --> 00:32:00.810
diamond-shaped frame.

00:32:00.810 --> 00:32:03.260
That frame is shown here.

00:32:03.260 --> 00:32:08.810
Notice we have a frictionless
hinge up there and down here.

00:32:08.810 --> 00:32:12.690
We have a rigid weld
here and over here.

00:32:12.690 --> 00:32:16.100
Notice that the frame is pushed
down with a load p

00:32:16.100 --> 00:32:19.510
here, and is pushed up here.

00:32:19.510 --> 00:32:23.040
Of course, as deformations of
the frame would be symmetric

00:32:23.040 --> 00:32:27.610
about this line here, notice
that the beam cross section is

00:32:27.610 --> 00:32:30.570
one inch by one inch, and
here are the material

00:32:30.570 --> 00:32:32.310
data for the beam.

00:32:32.310 --> 00:32:35.240
An elastic large displacement
analysis is

00:32:35.240 --> 00:32:37.440
what we want to perform.

00:32:37.440 --> 00:32:40.530
We use twenty 3-node isobeam
elements to model

00:32:40.530 --> 00:32:42.540
the complete frame.

00:32:42.540 --> 00:32:45.880
We will talk about the
isoparametic, or isobeam

00:32:45.880 --> 00:32:49.470
elements later on in
a later lecture.

00:32:49.470 --> 00:32:53.400
Notice this is here 15 inches,
and so is that.

00:32:53.400 --> 00:32:55.100
The deformations will
be very large.

00:32:55.100 --> 00:32:59.360
In fact, this node here will
go across all the way up to

00:32:59.360 --> 00:33:02.000
here, and that node
we go across all

00:33:02.000 --> 00:33:05.070
the way down to here.

00:33:05.070 --> 00:33:09.820
The displacement of the top
hinge of the frame is shown on

00:33:09.820 --> 00:33:11.610
this view graph.

00:33:11.610 --> 00:33:15.190
Notice here we are plotting the
load p vertically up, and

00:33:15.190 --> 00:33:18.080
the displacement of the top
hinge horizontally.

00:33:18.080 --> 00:33:22.100
Notice as the displacements are
very large, you're going

00:33:22.100 --> 00:33:26.870
up to almost 25 inches here.

00:33:26.870 --> 00:33:30.970
Notice that for this solution,
we used a load increment of

00:33:30.970 --> 00:33:33.400
250 pounds.

00:33:33.400 --> 00:33:40.160
So we used 80 steps to come from
zero to 20,000 pounds.

00:33:40.160 --> 00:33:43.100
Notice this, of course, is a
very large number of steps.

00:33:43.100 --> 00:33:47.240
You would have used another
80 steps here and so on.

00:33:47.240 --> 00:33:50.700
We wanted to use a small load
incrementation because we

00:33:50.700 --> 00:33:54.980
wanted to obtain many solution
points along this curve to be

00:33:54.980 --> 00:33:59.970
able to produce an animation
of the frame response.

00:33:59.970 --> 00:34:03.660
And I'd like to now share
with you this animation.

00:34:03.660 --> 00:34:05.860
We'd like to look at
the animation.

00:34:05.860 --> 00:34:10.500
And I'd like to really look
at the animation twice.

00:34:10.500 --> 00:34:13.210
First we will look at the
animation of the frame

00:34:13.210 --> 00:34:18.770
response in very large
deformations, very fast.

00:34:18.770 --> 00:34:23.120
And then we want to look at the
same animation, but in a

00:34:23.120 --> 00:34:25.750
slower movement, so that
I can also talk a

00:34:25.750 --> 00:34:27.070
little bit about it.

00:34:27.070 --> 00:34:30.780
Because the fast version is
going so fast that I can't

00:34:30.780 --> 00:34:32.250
really say very much.

00:34:32.250 --> 00:34:33.690
So let's now look at
this animation.

00:34:36.389 --> 00:34:38.280
Here we see the frame
is discretized

00:34:38.280 --> 00:34:40.460
by the isobeam elements.

00:34:40.460 --> 00:34:43.606
The two thick arrows show
the load application.

00:34:43.606 --> 00:34:48.139
Here you see how the frame go
through the last deformations.

00:34:48.139 --> 00:34:50.520
Let's now look at the same
animation again with a

00:34:50.520 --> 00:34:53.429
somewhat longer time scale.

00:34:53.429 --> 00:34:56.120
We perform, of course,
a static analysis.

00:34:56.120 --> 00:34:58.930
The time code above the
picture of the frame

00:34:58.930 --> 00:35:00.510
gives the load step.

00:35:00.510 --> 00:35:03.296
You also see the load applied
for each step.

00:35:03.296 --> 00:35:06.840
Here you see once again how
the frame deforms when

00:35:06.840 --> 00:35:09.480
subjected to the loads.

00:35:09.480 --> 00:35:12.770
Certainly the frame undergoes
very large displacements, and

00:35:12.770 --> 00:35:15.770
for the higher load levels the
analysis represents only a

00:35:15.770 --> 00:35:17.690
numerical experiment.

00:35:17.690 --> 00:35:19.120
But surely an interesting one.

00:35:27.940 --> 00:35:32.550
This completes our discussion of
the frame analysis example,

00:35:32.550 --> 00:35:36.800
and I would like now to look
with you at the last example

00:35:36.800 --> 00:35:40.200
in this lecture, namely the
analysis of the failure and

00:35:40.200 --> 00:35:43.190
repair of a beam cable
structure.

00:35:43.190 --> 00:35:47.930
For this analysis, we use one
option in the ADINA program

00:35:47.930 --> 00:35:52.240
that is quite valuable, namely
is the option of element birth

00:35:52.240 --> 00:35:54.590
and element death.

00:35:54.590 --> 00:36:00.210
What this means is that we can
assign certain elements that

00:36:00.210 --> 00:36:05.080
are born in the analysis as
this step by step solution

00:36:05.080 --> 00:36:09.280
proceeds, and we can assign to
certain element, so to say,

00:36:09.280 --> 00:36:10.350
their deaths.

00:36:10.350 --> 00:36:12.980
They are disappearing at
a particular time.

00:36:12.980 --> 00:36:16.610
This kind of analysis option
is very useful to simulate,

00:36:16.610 --> 00:36:20.310
for example, construction
processes and repairs of

00:36:20.310 --> 00:36:21.250
structures.

00:36:21.250 --> 00:36:25.130
As well known, structures can,
of course, collapse during the

00:36:25.130 --> 00:36:28.860
repair, or even during their
construction sequence.

00:36:28.860 --> 00:36:32.070
And therefore it can be
important to actually simulate

00:36:32.070 --> 00:36:34.410
this sequence of construction,
or the repair of the office

00:36:34.410 --> 00:36:39.380
structure, also on the computer,
to find out the

00:36:39.380 --> 00:36:42.090
particular construction sequence
or repair of a

00:36:42.090 --> 00:36:47.230
structure that one wants
to proceed with.

00:36:47.230 --> 00:36:52.950
Here we have a simple cable
beam structure.

00:36:52.950 --> 00:36:57.380
This is a cantilever beam
subjected to gravity loading,

00:36:57.380 --> 00:37:03.035
and here the cable is hinged at
this end of the beam and up

00:37:03.035 --> 00:37:07.030
there so as to support
the beam.

00:37:07.030 --> 00:37:10.770
Notice the material data for the
cable are given here, and

00:37:10.770 --> 00:37:13.050
there's no pretension
in the cable.

00:37:13.050 --> 00:37:16.210
The beam itself has these
material data.

00:37:16.210 --> 00:37:19.840
So we model the elasto-plastic
response of the beam.

00:37:19.840 --> 00:37:22.650
Here is the mass density
of to beam.

00:37:22.650 --> 00:37:26.360
The cross section is
shown over here.

00:37:26.360 --> 00:37:30.280
In this analysis, we simulate
the failure and repair of the

00:37:30.280 --> 00:37:33.100
cable in the following way.

00:37:33.100 --> 00:37:38.730
In load step one, the beams sags
under its weight, but is

00:37:38.730 --> 00:37:39.980
supported by the cable.

00:37:42.600 --> 00:37:46.960
From load step one to
two the cable snaps.

00:37:46.960 --> 00:37:49.830
In other words, for example,
if delta t is equal to 1.

00:37:49.830 --> 00:37:53.330
The time step delta t that we
talked about in the earlier

00:37:53.330 --> 00:37:58.430
lectures is equal to 1, then
at 1 this would be the load

00:37:58.430 --> 00:38:07.300
condition, and at time 1.5, the
cable would snap, so that

00:38:07.300 --> 00:38:11.920
at time 2 at the end of the
second load step, the cable is

00:38:11.920 --> 00:38:15.640
not anymore in the finite
element system, and

00:38:15.640 --> 00:38:18.060
the beam now sags.

00:38:18.060 --> 00:38:22.880
It undergoes plastic flow
at the built-in end.

00:38:22.880 --> 00:38:26.630
Now, in the next steps, two
to four, the new cable is

00:38:26.630 --> 00:38:30.830
installed and is tensioned
until the tip of the beam

00:38:30.830 --> 00:38:35.540
returns to its original
location, namely the location

00:38:35.540 --> 00:38:39.500
that it had taken at the
end of load step one.

00:38:39.500 --> 00:38:43.190
This is quite easily simulated
with this element birth and

00:38:43.190 --> 00:38:48.050
death option available in the
computer program you're using.

00:38:48.050 --> 00:38:52.430
Notice one element dies, namely
the cable element dies

00:38:52.430 --> 00:38:59.950
at time 1.5, say, and then at
2.5 the cable is again there,

00:38:59.950 --> 00:39:04.070
and at time 3 and at time
4 we see that the

00:39:04.070 --> 00:39:07.630
cable has been tensioned.

00:39:07.630 --> 00:39:10.450
Here's the finite
element model.

00:39:10.450 --> 00:39:15.900
We used two truss elements
here to model the cable.

00:39:15.900 --> 00:39:20.020
And we used five 2-node
Hermitian beam elements to

00:39:20.020 --> 00:39:22.470
model the beam.

00:39:22.470 --> 00:39:25.500
Notice for the beam element,
we use five Newton-Cotes

00:39:25.500 --> 00:39:29.210
integration points in the r
direction, three Newton-Cotes

00:39:29.210 --> 00:39:32.250
integration points in
the s direction.

00:39:32.250 --> 00:39:36.330
In load step one, the active
truss is number one.

00:39:36.330 --> 00:39:38.390
It's there.

00:39:38.390 --> 00:39:45.710
At the end of load step two,
no truss element is there,

00:39:45.710 --> 00:39:51.350
because remember, between load
step one and load step two, at

00:39:51.350 --> 00:39:58.990
time 1.5, if delta t is equal to
1, this one cable, this one

00:39:58.990 --> 00:40:01.285
truss element disappears.

00:40:01.285 --> 00:40:03.760
It dies, so to say.

00:40:03.760 --> 00:40:07.780
And then there is no more truss
connecting this point to

00:40:07.780 --> 00:40:11.190
that point at the end
of load step two.

00:40:11.190 --> 00:40:12.940
At time two.

00:40:12.940 --> 00:40:19.650
Now, in the next load step a
new truss element is born.

00:40:19.650 --> 00:40:21.680
Truss number two.

00:40:21.680 --> 00:40:25.770
It might be born, for example,
at a specific time 2.5, if

00:40:25.770 --> 00:40:28.600
delta t is equal to 1.

00:40:28.600 --> 00:40:30.450
And now the truss
is in position.

00:40:30.450 --> 00:40:31.890
It has been born.

00:40:31.890 --> 00:40:35.290
And we are tensioning it
from load step three

00:40:35.290 --> 00:40:36.540
to load step four.

00:40:39.660 --> 00:40:43.210
In the solution we use the UL
formulation for the truss

00:40:43.210 --> 00:40:45.790
elements and the
beam elements.

00:40:45.790 --> 00:40:48.680
The convergence tolerances
are listed here.

00:40:48.680 --> 00:40:51.850
Notice that because we have
rotational degrees of freedom

00:40:51.850 --> 00:40:56.710
for the beam, we also use a
tolerance RMNORM the way I

00:40:56.710 --> 00:41:00.090
describe it in the earlier
lecture when we talked about

00:41:00.090 --> 00:41:02.490
convergence tolerances.

00:41:02.490 --> 00:41:05.890
Let us now look at the
solution algorithm

00:41:05.890 --> 00:41:07.910
performances.

00:41:07.910 --> 00:41:12.330
If we use a full Newton method
with line searches all load

00:41:12.330 --> 00:41:15.070
steps are successfully
calculated.

00:41:15.070 --> 00:41:18.396
The normalized solution
time, say, is one.

00:41:18.396 --> 00:41:24.600
The full Newton method without
line searches did not work.

00:41:24.600 --> 00:41:26.080
We could not use
the full Newton

00:41:26.080 --> 00:41:28.660
method for this problem.

00:41:28.660 --> 00:41:33.300
The BFGS method in this
particular case worked quite

00:41:33.300 --> 00:41:35.630
nicely, but it needed
more time.

00:41:35.630 --> 00:41:38.570
Two and a half times the amount
of time that the full

00:41:38.570 --> 00:41:41.640
Newton method required
with line searches.

00:41:41.640 --> 00:41:46.320
Of course, the BFGS method
always has line searches.

00:41:46.320 --> 00:41:49.280
And if you use the modified
Newton method, with or without

00:41:49.280 --> 00:41:52.260
line searches, we did not
converge in load step two.

00:41:55.600 --> 00:41:58.540
So, this shows that really the
full Newton method with line

00:41:58.540 --> 00:42:02.630
searches is very powerful, and
in this particular case it is

00:42:02.630 --> 00:42:04.460
even the cheapest.

00:42:04.460 --> 00:42:08.730
The BFGS method did also
quite well, but is

00:42:08.730 --> 00:42:11.530
quite a bit more expensive.

00:42:11.530 --> 00:42:13.530
The results in all of
this analysis are

00:42:13.530 --> 00:42:15.390
listed in this table.

00:42:15.390 --> 00:42:18.650
Load step one, the displacement
at the tip of the

00:42:18.650 --> 00:42:20.540
cantilever is shown here.

00:42:20.540 --> 00:42:22.100
The stress in the cable.

00:42:22.100 --> 00:42:24.560
And the moment at the
built-in end.

00:42:24.560 --> 00:42:28.340
Load step two, this is
the tip displacement.

00:42:28.340 --> 00:42:31.020
Please see the very large
increment in the tip

00:42:31.020 --> 00:42:34.100
displacement, because
the cable is gone.

00:42:34.100 --> 00:42:36.130
There is no more cable.

00:42:36.130 --> 00:42:40.800
And the moment at the built-in
end has also increased a lot.

00:42:40.800 --> 00:42:45.350
Now we have installed the repair
cable, so to say, and

00:42:45.350 --> 00:42:49.540
in load step three we have
reduced the tip displacement

00:42:49.540 --> 00:42:54.540
from 0.63 0.31 meters.

00:42:54.540 --> 00:42:56.380
The stress in the cable
is given here.

00:42:56.380 --> 00:42:58.920
And the moment at the built-in
end is given here.

00:42:58.920 --> 00:43:01.890
And in the final load step,
we've tightened the cable

00:43:01.890 --> 00:43:05.160
enough to get back to the
displacement that the

00:43:05.160 --> 00:43:09.490
cantilever had at its
tip originally.

00:43:09.490 --> 00:43:10.990
Same numbers here.

00:43:10.990 --> 00:43:13.030
And the stress in the
cable is given here.

00:43:13.030 --> 00:43:14.860
And the moment at the
built-in end of the

00:43:14.860 --> 00:43:17.130
cantilever is given here.

00:43:17.130 --> 00:43:20.340
The last view graph here shows
the deformations of the

00:43:20.340 --> 00:43:22.570
structure pictorially.

00:43:22.570 --> 00:43:27.020
Here you see the deformations
at load step one--

00:43:27.020 --> 00:43:29.870
here the beam, here the cable.

00:43:29.870 --> 00:43:32.250
Notice that these displacements
are magnified by

00:43:32.250 --> 00:43:34.710
a factor of 10.

00:43:34.710 --> 00:43:39.740
These are the deformations
of the beam at the end

00:43:39.740 --> 00:43:40.790
of load step two.

00:43:40.790 --> 00:43:44.180
Notice there is no cable here,
and also these deformations

00:43:44.180 --> 00:43:45.810
have not been magnified.

00:43:45.810 --> 00:43:48.130
Very large deformations.

00:43:48.130 --> 00:43:52.950
Load step three, at the end of
load step three, we see the

00:43:52.950 --> 00:43:56.180
cable here, the new cable
that has been installed.

00:43:56.180 --> 00:43:59.630
And we see also that the tip
displacement of the cantilever

00:43:59.630 --> 00:44:04.510
has been reduced by tightening
that new cable already up.

00:44:04.510 --> 00:44:08.370
Now, at the end of load step
four, the displacement at the

00:44:08.370 --> 00:44:12.330
tip of the cantilever are the
same displacement as we have

00:44:12.330 --> 00:44:15.710
measured at the end
of load step one.

00:44:15.710 --> 00:44:18.550
Here again we have magnified
the displacements

00:44:18.550 --> 00:44:22.180
by a factor of 10.

00:44:22.180 --> 00:44:25.190
This then brings us to the
end of this example.

00:44:25.190 --> 00:44:27.220
I wanted to show you this
example really as a

00:44:27.220 --> 00:44:31.490
demonstrative example to
indicate to you how this

00:44:31.490 --> 00:44:35.800
element birth and death option
can be used quite effectively

00:44:35.800 --> 00:44:39.290
to simulate repairs
of structures.

00:44:39.290 --> 00:44:43.720
In actual analysis you, of
course, might want to use a

00:44:43.720 --> 00:44:47.180
finer finite element
discretization and also a

00:44:47.180 --> 00:44:51.110
finer integration scheme to
pick up the spread of

00:44:51.110 --> 00:44:53.490
plasticity more accurately.

00:44:53.490 --> 00:44:57.460
However, this example as a
demonstrative example really

00:44:57.460 --> 00:45:01.370
shows to us how we can use this
element birth and death

00:45:01.370 --> 00:45:04.620
option to simulate such
processes as repairs of

00:45:04.620 --> 00:45:05.260
structures.

00:45:05.260 --> 00:45:09.100
And I think you can easily
visualize how this element

00:45:09.100 --> 00:45:11.820
birth and death option can
also be used to simulate

00:45:11.820 --> 00:45:14.760
construction sequences
of structures.

00:45:14.760 --> 00:45:16.700
This then brings me to the
end of this lecture.

00:45:16.700 --> 00:45:18.280
Thank you very much for
your attention.