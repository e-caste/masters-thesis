WEBVTT

00:00:01.130 --> 00:00:03.470
The following content is
provided under a Creative

00:00:03.470 --> 00:00:04.860
Commons license.

00:00:04.860 --> 00:00:07.070
Your support will help
MIT OpenCourseWare

00:00:07.070 --> 00:00:11.160
continue to offer high-quality
educational resources for free.

00:00:11.160 --> 00:00:13.730
To make a donation or to
view additional materials

00:00:13.730 --> 00:00:17.690
from hundreds of MIT courses,
visit MIT OpenCourseWare

00:00:17.690 --> 00:00:18.570
at ocw@mit.edu.

00:00:21.860 --> 00:00:26.200
GABRIEL SANCHEZ-MARTINEZ: I'll
start today with an animation.

00:00:26.200 --> 00:00:28.670
I think most of
you have seen this.

00:00:28.670 --> 00:00:32.140
Raise your hand if you haven't.

00:00:32.140 --> 00:00:33.641
So some of you have not.

00:00:33.641 --> 00:00:34.140
OK.

00:00:34.140 --> 00:00:37.020
So I'm going to just play it.

00:00:37.020 --> 00:00:38.850
This is London.

00:00:38.850 --> 00:00:41.650
And you're going to
see different colors.

00:00:47.880 --> 00:00:52.170
There's a legend right here
on this corner, lower left.

00:00:52.170 --> 00:00:58.790
And blue stands
for some cardholder

00:00:58.790 --> 00:01:05.990
in the London system that
has not yet been [AUDIO OUT]

00:01:05.990 --> 00:01:09.500
or it's after the last
time that person was seen.

00:01:09.500 --> 00:01:15.270
So it's a proxy for
home, essentially.

00:01:15.270 --> 00:01:19.620
Bright green is going to
be a proxy for travel.

00:01:19.620 --> 00:01:23.700
Not a proxy, it's going to mean
that this card is currently

00:01:23.700 --> 00:01:29.400
in the TFL system in a bus
ride or in a train somewhere.

00:01:29.400 --> 00:01:39.570
And then red will show anything
between trips that day.

00:01:39.570 --> 00:01:41.280
So that's a proxy for work.

00:01:41.280 --> 00:01:43.260
Or it could be a
proxy for shopping,

00:01:43.260 --> 00:01:48.870
or restaurants, or
anything between travel.

00:01:48.870 --> 00:01:51.500
So after the last
trip is completed,

00:01:51.500 --> 00:01:53.500
and before the last trip ends.

00:01:53.500 --> 00:01:55.500
So I'm just going to play this.

00:01:55.500 --> 00:01:59.001
And hopefully this will
motivate the discussion,

00:01:59.001 --> 00:02:00.000
the rest of the lecture.

00:02:00.000 --> 00:02:04.030
So you can see the
time at the bottom.

00:02:04.030 --> 00:02:06.020
Sorry.

00:02:06.020 --> 00:02:11.310
So you see the morning rush, and
then people starting to work,

00:02:11.310 --> 00:02:12.630
so it turns red.

00:02:12.630 --> 00:02:17.442
That means most people
are between trips.

00:02:17.442 --> 00:02:18.900
You see a lot of
buzz in the middle

00:02:18.900 --> 00:02:21.530
of the city, middle of the day.

00:02:21.530 --> 00:02:23.400
And then as we approach
the afternoon peak,

00:02:23.400 --> 00:02:27.160
you start seeing
more green activity,

00:02:27.160 --> 00:02:28.750
starting from the
center, going out.

00:02:32.210 --> 00:02:34.580
And then some blue as
people reach their homes

00:02:34.580 --> 00:02:37.280
and won't travel again that day.

00:02:37.280 --> 00:02:42.470
Still a lot of activity in
some centers, especially

00:02:42.470 --> 00:02:45.980
in the center of London,
a lot of travel still.

00:02:45.980 --> 00:02:48.590
And then past midnight,
you sort of see Soho,

00:02:48.590 --> 00:02:51.670
so you know where to
hang out in London.

00:02:51.670 --> 00:02:53.370
OK?

00:02:53.370 --> 00:02:54.200
OK.

00:02:54.200 --> 00:03:01.440
So before we continue, any
questions about that video?

00:03:01.440 --> 00:03:05.380
AUDIENCE: Yeah, it seemed
to me that some of the dots

00:03:05.380 --> 00:03:07.954
were actually not
moving along the lines.

00:03:07.954 --> 00:03:08.746
Is that deliberate?

00:03:08.746 --> 00:03:10.162
GABRIEL SANCHEZ-MARTINEZ:
So yeah.

00:03:10.162 --> 00:03:10.805
In this video--

00:03:10.805 --> 00:03:11.440
AUDIENCE: [INAUDIBLE]

00:03:11.440 --> 00:03:12.706
GABRIEL SANCHEZ-MARTINEZ:
--there are multiple ways--

00:03:12.706 --> 00:03:13.400
AUDIENCE: --magnitude?

00:03:13.400 --> 00:03:13.870
GABRIEL SANCHEZ-MARTINEZ: Yeah.

00:03:13.870 --> 00:03:16.780
So there are multiple ways of
generating this visualization.

00:03:16.780 --> 00:03:21.930
And the one that my
colleague used to make this--

00:03:21.930 --> 00:03:23.590
and by the way,
this video was made

00:03:23.590 --> 00:03:25.720
by my colleague, Jay Gordon.

00:03:25.720 --> 00:03:28.750
You'll see in the last slide,
the references to his papers

00:03:28.750 --> 00:03:31.780
and to the website with
a link to the video.

00:03:31.780 --> 00:03:36.560
So yeah, for each stage--

00:03:36.560 --> 00:03:38.410
and we'll talk about
what the stage is.

00:03:38.410 --> 00:03:41.710
For each of these
trips, for now, you

00:03:41.710 --> 00:03:44.410
could do it a straight line or
you could really interpolate

00:03:44.410 --> 00:03:46.300
geographically along the line.

00:03:46.300 --> 00:03:50.820
And in some aspects,
the straight line one

00:03:50.820 --> 00:03:53.510
is showing isochromes almost.

00:03:53.510 --> 00:03:59.170
So it's easier to understand,
visually, the OD pairs

00:03:59.170 --> 00:04:01.160
when you do it that way.

00:04:01.160 --> 00:04:02.200
But both have value.

00:04:02.200 --> 00:04:04.780
And you could look
at it both ways.

00:04:04.780 --> 00:04:08.045
Any other questions about
this animation visualization?

00:04:12.590 --> 00:04:13.090
OK.

00:04:13.090 --> 00:04:14.420
AUDIENCE: [INAUDIBLE]

00:04:14.420 --> 00:04:15.711
GABRIEL SANCHEZ-MARTINEZ: Yeah.

00:04:15.711 --> 00:04:18.829
Let's talk about
how we made that.

00:04:18.829 --> 00:04:23.060
And so what goes into
creating this visualization,

00:04:23.060 --> 00:04:25.570
and what data was used for it.

00:04:25.570 --> 00:04:29.750
So today's lecture is on
origin destination and transfer

00:04:29.750 --> 00:04:31.220
inference.

00:04:31.220 --> 00:04:35.210
We abbreviate that ODX, O for
origin, D for destination,

00:04:35.210 --> 00:04:39.950
X being more graphical, two
lines crossing in the middle.

00:04:39.950 --> 00:04:43.280
So your opportunity to
transfer or interchange.

00:04:43.280 --> 00:04:46.550
And if we use the British
term for transfers,

00:04:46.550 --> 00:04:47.900
that would be interchange.

00:04:47.900 --> 00:04:52.344
So what's common in
all of these methods

00:04:52.344 --> 00:04:54.260
is that we're going to
be basing these methods

00:04:54.260 --> 00:04:56.690
on automatically-collected data.

00:04:56.690 --> 00:04:58.400
So we're going to
be using AFC, AVL,

00:04:58.400 --> 00:05:00.410
APC, instead of manual surveys.

00:05:00.410 --> 00:05:03.710
There are ways of estimating
origin destination matrices

00:05:03.710 --> 00:05:07.130
in the traditional way,
with manual surveys.

00:05:07.130 --> 00:05:10.910
You go out, and you distribute
colored cards and collect them,

00:05:10.910 --> 00:05:12.950
and you can do this.

00:05:12.950 --> 00:05:17.360
So a little bit about that
when we talk about surveys

00:05:17.360 --> 00:05:18.350
and survey planning.

00:05:22.509 --> 00:05:24.800
Some of these methods can be
used to infer destinations

00:05:24.800 --> 00:05:26.060
in open systems.

00:05:26.060 --> 00:05:29.240
So open systems are
like the bus and rail,

00:05:29.240 --> 00:05:34.760
here in Boston, where you tap
in, but you don't tap out.

00:05:34.760 --> 00:05:39.350
If you look at the rail system
in London or in Washington DC,

00:05:39.350 --> 00:05:42.830
that's a closed system,
where you tap in and tap out.

00:05:42.830 --> 00:05:44.870
And therefore, the
OD pair for each trip

00:05:44.870 --> 00:05:48.050
is given in that
part of the system.

00:05:48.050 --> 00:05:49.730
It also infers transfers.

00:05:49.730 --> 00:05:53.630
So we'll talk about
why this is important.

00:05:53.630 --> 00:05:55.190
One of the caveats
of these methods

00:05:55.190 --> 00:05:58.395
is that they only look at the
current public transportation

00:05:58.395 --> 00:05:59.250
demand.

00:05:59.250 --> 00:06:04.550
So if you want a model of all of
the demand that could be there,

00:06:04.550 --> 00:06:08.400
the latent demand included,
this does not look at that.

00:06:08.400 --> 00:06:10.450
So just be aware.

00:06:10.450 --> 00:06:15.860
And also, specifically, one
of the models we will look at,

00:06:15.860 --> 00:06:18.650
it can't infer destinations
for every transaction.

00:06:18.650 --> 00:06:19.910
Some of that makes sense.

00:06:19.910 --> 00:06:22.480
If you see a card
only one time a day,

00:06:22.480 --> 00:06:25.640
then you don't necessarily
have information

00:06:25.640 --> 00:06:28.520
to infer destination
or transfers.

00:06:28.520 --> 00:06:30.560
That also happens with
cash transactions,

00:06:30.560 --> 00:06:35.000
which cannot be tracked
using a smart card.

00:06:35.000 --> 00:06:35.940
There's fare evasion.

00:06:35.940 --> 00:06:37.470
So some people might
jump into a bus

00:06:37.470 --> 00:06:40.220
and not interact
with the fare system,

00:06:40.220 --> 00:06:43.100
so we can't capture
that directly.

00:06:43.100 --> 00:06:44.810
And then there's
trips on other modes.

00:06:44.810 --> 00:06:49.400
So part of the logic applying
to destinations and transfers

00:06:49.400 --> 00:06:54.576
will, essentially, assume that
the people are mostly traveling

00:06:54.576 --> 00:06:55.700
with public transportation.

00:06:55.700 --> 00:06:57.950
And they're not going to
take Uber or a long bike ride

00:06:57.950 --> 00:06:58.670
in between.

00:06:58.670 --> 00:07:02.210
So we will look at
that more in detail.

00:07:02.210 --> 00:07:05.390
Most of these methods have
been validated with surveys,

00:07:05.390 --> 00:07:06.920
with good results.

00:07:06.920 --> 00:07:09.560
And they need to be scaled
up because they don't

00:07:09.560 --> 00:07:11.414
make inferences for every card.

00:07:11.414 --> 00:07:13.580
If you want the full demand,
you need to scale it up

00:07:13.580 --> 00:07:14.540
to the full demand.

00:07:14.540 --> 00:07:16.160
We'll talk about scaling.

00:07:16.160 --> 00:07:16.730
Questions?

00:07:16.730 --> 00:07:20.698
AUDIENCE: [INAUDIBLE] but
with London, fare evasion,

00:07:20.698 --> 00:07:24.666
that's not a big problem, right?

00:07:24.666 --> 00:07:25.465
Or is--

00:07:25.465 --> 00:07:27.090
GABRIEL SANCHEZ-MARTINEZ:
I don't know.

00:07:27.090 --> 00:07:27.631
I don't know.

00:07:27.631 --> 00:07:28.465
AUDIENCE: All right.

00:07:28.465 --> 00:07:29.839
GABRIEL
SANCHEZ-MARTINEZ: I don't

00:07:29.839 --> 00:07:31.320
have information about that.

00:07:33.850 --> 00:07:35.880
So it could be fare
evasion, or it could be--

00:07:35.880 --> 00:07:38.610
you might have a pass
and hop onto the bus,

00:07:38.610 --> 00:07:40.860
and technically, it
wouldn't be fare evasion.

00:07:40.860 --> 00:07:44.070
But it is non-interaction,
so that would still

00:07:44.070 --> 00:07:46.799
be counted here as fare evasion.

00:07:46.799 --> 00:07:48.840
AUDIENCE: The more open
a system, the more people

00:07:48.840 --> 00:07:50.400
will manage to evade.

00:07:50.400 --> 00:07:53.420
So I saw a number, then,
the Boston commuter rail,

00:07:53.420 --> 00:07:54.660
they estimate 14%.

00:07:54.660 --> 00:07:55.000
GABRIEL SANCHEZ-MARTINEZ: Yeah.

00:07:55.000 --> 00:07:56.310
AUDIENCE: Yeah, that
number's a lie, but yes.

00:07:56.310 --> 00:07:56.850
GABRIEL SANCHEZ-MARTINEZ:
But that's--

00:07:56.850 --> 00:07:57.945
AUDIENCE: --a lot or--

00:07:57.945 --> 00:08:00.510
AUDIENCE: Yeah, 70% of people
pay with a pass, so it's--

00:08:00.510 --> 00:08:01.843
GABRIEL SANCHEZ-MARTINEZ: Right.

00:08:01.843 --> 00:08:05.670
So there, they are using
fare evasion more overtly.

00:08:05.670 --> 00:08:07.770
It is high, though, because
the train attendants

00:08:07.770 --> 00:08:10.560
don't manage to collect
tickets from everyone.

00:08:10.560 --> 00:08:12.859
And there are ways to
game the system, where

00:08:12.859 --> 00:08:15.150
you can activate a ticket
only if the fare inspector is

00:08:15.150 --> 00:08:15.990
approaching you.

00:08:15.990 --> 00:08:18.420
So that's a flaw in the system.

00:08:18.420 --> 00:08:19.650
AUDIENCE: [INAUDIBLE]

00:08:19.650 --> 00:08:21.840
GABRIEL SANCHEZ-MARTINEZ: Yeah.

00:08:21.840 --> 00:08:26.670
So more generally, when we talk
about data collection systems--

00:08:26.670 --> 00:08:29.932
we've seen the key
ones, AVL, AFC, APC.

00:08:29.932 --> 00:08:31.890
I think we're all familiar
with how these look.

00:08:31.890 --> 00:08:35.039
Does anybody have questions on
any of these systems right now?

00:08:35.039 --> 00:08:37.262
You were looking at some
data in your homework.

00:08:37.262 --> 00:08:38.220
Do you have a question?

00:08:38.220 --> 00:08:38.761
AUDIENCE: No.

00:08:38.761 --> 00:08:40.559
GABRIEL SANCHEZ-MARTINEZ: OK.

00:08:40.559 --> 00:08:42.780
So they can be used
for many things.

00:08:42.780 --> 00:08:46.510
And so if you look
at supply and demand,

00:08:46.510 --> 00:08:49.350
they both produce
automatically-collected data.

00:08:49.350 --> 00:08:52.380
So on the demand side, we
have the fare transactions

00:08:52.380 --> 00:08:54.360
of the AFC system.

00:08:54.360 --> 00:08:56.490
On the supply side,
you have the vehicle

00:08:56.490 --> 00:08:58.780
tracking with AVL system.

00:08:58.780 --> 00:09:00.060
You have APC as well.

00:09:00.060 --> 00:09:05.370
So they can be sent to some
server or data warehouse

00:09:05.370 --> 00:09:06.820
and used for many things.

00:09:06.820 --> 00:09:09.120
It could be used for
offline functions.

00:09:09.120 --> 00:09:11.340
So performance
measurement is one example

00:09:11.340 --> 00:09:14.290
of that, where you want
to measure reliability,

00:09:14.290 --> 00:09:16.050
running times, et cetera.

00:09:16.050 --> 00:09:18.510
It could be used for service
and operations planning.

00:09:18.510 --> 00:09:20.610
And then it can also
be used in real-time.

00:09:20.610 --> 00:09:22.440
So you could use some
of this information

00:09:22.440 --> 00:09:24.960
to generate customer
information, which feeds back

00:09:24.960 --> 00:09:25.650
to demand.

00:09:25.650 --> 00:09:28.140
You could send alerts
saying the trains are

00:09:28.140 --> 00:09:29.640
being delayed right now.

00:09:29.640 --> 00:09:31.170
Expect a longer wait.

00:09:31.170 --> 00:09:33.510
And that could, in
fact, influence demand.

00:09:33.510 --> 00:09:38.580
It could make some people
not take a particular trip

00:09:38.580 --> 00:09:41.670
or wait if they get
it on their phone.

00:09:41.670 --> 00:09:44.610
And then on the supply
side, the information

00:09:44.610 --> 00:09:46.870
can be used to control service.

00:09:46.870 --> 00:09:48.990
So you might actually
affect supply

00:09:48.990 --> 00:09:51.090
by changing the departure times.

00:09:51.090 --> 00:09:53.009
And that would affect
the data that is being

00:09:53.009 --> 00:09:54.300
generated from the supply side.

00:09:54.300 --> 00:09:55.740
So there's a feedback loop.

00:09:55.740 --> 00:10:00.060
In this lecture, we
will focus on only one

00:10:00.060 --> 00:10:01.980
aspect of this
framework, and that

00:10:01.980 --> 00:10:03.870
is origin destination matrices.

00:10:03.870 --> 00:10:05.820
Origin destination
matrices [AUDIO OUT]

00:10:05.820 --> 00:10:07.710
one of the key inputs
to service planning.

00:10:07.710 --> 00:10:11.520
They are the key demand
input to service planning.

00:10:11.520 --> 00:10:14.560
You need them to figure out
where people want to go.

00:10:14.560 --> 00:10:17.970
And it's just the
data that expresses

00:10:17.970 --> 00:10:19.170
where people want to go.

00:10:19.170 --> 00:10:22.560
And you should try
to design your system

00:10:22.560 --> 00:10:24.180
to match that demand.

00:10:24.180 --> 00:10:29.250
So it used to be that we
had to use manual surveys.

00:10:29.250 --> 00:10:31.240
They were expensive.

00:10:31.240 --> 00:10:35.630
They didn't cover all the
times or places very well.

00:10:35.630 --> 00:10:37.250
And now, with all
these automated data

00:10:37.250 --> 00:10:40.340
collection systems, we can infer
some of the origin destination

00:10:40.340 --> 00:10:42.060
matrices from the data.

00:10:42.060 --> 00:10:43.850
And that's what we
want to understand.

00:10:43.850 --> 00:10:45.050
How does it happen?

00:10:45.050 --> 00:10:46.440
What can we do?

00:10:46.440 --> 00:10:47.250
How can we do it?

00:10:47.250 --> 00:10:52.410
So OD matrix estimation can
happen at different levels.

00:10:52.410 --> 00:10:54.950
One way of looking at it
is to think about route

00:10:54.950 --> 00:10:56.950
level versus network level.

00:10:56.950 --> 00:10:59.600
So route level, we're
talking about one bus line.

00:10:59.600 --> 00:11:03.320
And we want to look up the
trips made in the one bus line

00:11:03.320 --> 00:11:05.960
and understand where
people get on and off.

00:11:05.960 --> 00:11:06.930
That's route level.

00:11:06.930 --> 00:11:10.410
So if you have two routes
here, route one, route two,

00:11:10.410 --> 00:11:12.920
we might notice or
estimate that a person

00:11:12.920 --> 00:11:17.340
boards here and alights here.

00:11:17.340 --> 00:11:19.400
Some of the people
doing that OD pair

00:11:19.400 --> 00:11:21.806
may, in fact,
continue on route two.

00:11:21.806 --> 00:11:23.180
They might transfer
to route two.

00:11:23.180 --> 00:11:25.940
So what's the drawback?

00:11:25.940 --> 00:11:28.850
Or why would it be
important to know

00:11:28.850 --> 00:11:32.210
the transfer to route two and
the destination on route two?

00:11:38.135 --> 00:11:39.010
AUDIENCE: [INAUDIBLE]

00:11:39.010 --> 00:11:39.940
GABRIEL SANCHEZ-MARTINEZ:
Or is it irrelevant?

00:11:39.940 --> 00:11:40.990
Is it just cool?

00:11:40.990 --> 00:11:42.104
Or--

00:11:42.104 --> 00:11:44.840
AUDIENCE: Maybe the
destination of the route two

00:11:44.840 --> 00:11:50.260
is the real destination
of the person's trips

00:11:50.260 --> 00:11:53.610
because if he goes
to work, for example,

00:11:53.610 --> 00:11:55.917
the work will be at the
end of the route two.

00:11:55.917 --> 00:11:57.250
GABRIEL SANCHEZ-MARTINEZ: Right.

00:11:57.250 --> 00:11:59.680
So the real destination, the
place where the person actually

00:11:59.680 --> 00:12:02.138
wants to go, might be on the
destination route two, and not

00:12:02.138 --> 00:12:05.020
on the destination at route one.

00:12:05.020 --> 00:12:06.580
So this might be--

00:12:06.580 --> 00:12:13.120
the only reason why the
person is alighting there

00:12:13.120 --> 00:12:14.920
is because that's
the only way-- that's

00:12:14.920 --> 00:12:17.140
sort of a function of the
network of the supply you

00:12:17.140 --> 00:12:17.710
provide.

00:12:17.710 --> 00:12:21.210
So if there were a direct
route from the first origin

00:12:21.210 --> 00:12:23.920
to the last destination,
perhaps they would prefer that.

00:12:23.920 --> 00:12:25.870
And for service
planning, you want

00:12:25.870 --> 00:12:27.700
to know what people want to do.

00:12:27.700 --> 00:12:29.560
That's what demand is.

00:12:29.560 --> 00:12:32.560
So we want network level.

00:12:32.560 --> 00:12:35.620
So we go from unlinked
trips to linked trips.

00:12:35.620 --> 00:12:37.270
That's part of
what we want to do.

00:12:37.270 --> 00:12:40.330
At the network level, we
are looking at all the buses

00:12:40.330 --> 00:12:42.220
and the rail system.

00:12:42.220 --> 00:12:45.220
So again, that's
what we want to do.

00:12:45.220 --> 00:12:48.050
We'll look at both kinds
of OD matrix estimation

00:12:48.050 --> 00:12:49.220
in this lecture.

00:12:49.220 --> 00:12:51.820
Let's start with one
of the simpler cases.

00:12:51.820 --> 00:12:56.830
Consider a bus having
APC and only APC.

00:12:56.830 --> 00:12:59.586
So APC data looks like this.

00:12:59.586 --> 00:13:01.210
You have timestamps,
you have a bus ID,

00:13:01.210 --> 00:13:03.820
you have a route ID, a
trip ID, some information

00:13:03.820 --> 00:13:06.210
about direction,
perhaps, and then

00:13:06.210 --> 00:13:08.950
counts at each stop of
how many people get on

00:13:08.950 --> 00:13:12.190
and how many people get off,
boardings and alightings.

00:13:12.190 --> 00:13:14.320
And, of course, a stop
ID, or a stop name,

00:13:14.320 --> 00:13:15.370
or something like that.

00:13:15.370 --> 00:13:21.250
So you can aggregate that across
trips or do it at a trip level,

00:13:21.250 --> 00:13:23.890
and count how many people
get on at each stop,

00:13:23.890 --> 00:13:25.960
and how many people
get off at each stop.

00:13:25.960 --> 00:13:29.680
These are called control totals
in the context of scaling.

00:13:29.680 --> 00:13:34.510
So you might be aggregating
across days, for example,

00:13:34.510 --> 00:13:36.790
for a 30-minute
period, and count

00:13:36.790 --> 00:13:39.340
how many people are
getting on at each stop

00:13:39.340 --> 00:13:41.200
and getting off at each stop.

00:13:41.200 --> 00:13:45.040
And then what we
want to estimate,

00:13:45.040 --> 00:13:47.470
knowing how many people get
on and off at each stop,

00:13:47.470 --> 00:13:49.330
is the origin
destination matrix.

00:13:49.330 --> 00:13:52.540
That is the cells
inside of this matrix

00:13:52.540 --> 00:13:56.980
saying how many people get on at
stop one and off at stop three.

00:13:56.980 --> 00:13:58.780
We're showing here, 10.

00:13:58.780 --> 00:14:01.990
Now you may notice that
the matrix here, it doesn't

00:14:01.990 --> 00:14:06.460
necessarily match the totals.

00:14:06.460 --> 00:14:11.270
So here we have 35 and
237, and the target is 40.

00:14:11.270 --> 00:14:13.780
So we have to scale
it up a little bit.

00:14:13.780 --> 00:14:16.240
Here, we have 30 people
getting off at stop two,

00:14:16.240 --> 00:14:17.821
and we only have 25.

00:14:17.821 --> 00:14:18.820
So that number is wrong.

00:14:18.820 --> 00:14:20.060
We need to scale up.

00:14:20.060 --> 00:14:21.670
So what we're going
to look at now

00:14:21.670 --> 00:14:25.480
is a procedure called iterative
proportional fitting that

00:14:25.480 --> 00:14:29.260
estimates, given some control
totals, what the origin

00:14:29.260 --> 00:14:32.050
destination matrix is.

00:14:32.050 --> 00:14:35.320
This is known as biproportional
fitting or matrix scaling

00:14:35.320 --> 00:14:36.790
as well.

00:14:36.790 --> 00:14:41.980
And we start with some initial
matrix or some seed matrix

00:14:41.980 --> 00:14:43.720
here in the center.

00:14:43.720 --> 00:14:45.910
The value of that seed
matrix is important.

00:14:45.910 --> 00:14:47.530
It affects the solution.

00:14:47.530 --> 00:14:49.930
So having an
accurate seed matrix

00:14:49.930 --> 00:14:52.480
improves the accuracy
of the final estimate.

00:14:52.480 --> 00:14:54.790
If you don't have
an idea, then you

00:14:54.790 --> 00:14:59.110
could certainly initialize
that seed matrix with all ones,

00:14:59.110 --> 00:15:00.850
and it will produce an output.

00:15:00.850 --> 00:15:03.430
But it may not be the best
output or the most accurate

00:15:03.430 --> 00:15:04.750
result.

00:15:04.750 --> 00:15:10.890
So it has been shown that
if all the values provided

00:15:10.890 --> 00:15:13.870
in the matrix are
strictly positive--

00:15:13.870 --> 00:15:18.750
and here I am excluding what
we call structural zeros, so

00:15:18.750 --> 00:15:23.880
all the cells in which people
could actually be traveling.

00:15:23.880 --> 00:15:44.460
Here we are showing a route
with four stops, A, B, C, D.

00:15:44.460 --> 00:15:47.130
And we have a matrix
showing how many people go

00:15:47.130 --> 00:15:50.790
from A to B, from A to C, from A
to D, from B to C, from B to C,

00:15:50.790 --> 00:15:52.230
and from C to D.

00:15:52.230 --> 00:15:55.590
Those are the only
possible OD pairs.

00:15:55.590 --> 00:15:58.230
Nobody is going to go from A to
A because that's the same stop,

00:15:58.230 --> 00:15:59.640
so that's not a valid trip.

00:15:59.640 --> 00:16:01.540
And we're only looking
at one direction,

00:16:01.540 --> 00:16:03.540
so anything below
that diagonal would

00:16:03.540 --> 00:16:05.910
be in the opposite direction.

00:16:05.910 --> 00:16:07.740
And we're not including
it in this example.

00:16:10.620 --> 00:16:14.220
So what we want to do is start
off with adding up each row,

00:16:14.220 --> 00:16:16.987
adding up each column, so
we have total alightings

00:16:16.987 --> 00:16:17.820
and total boardings.

00:16:17.820 --> 00:16:21.150
I want them to match boardings,
and match target alightings,

00:16:21.150 --> 00:16:22.770
or the control totals.

00:16:22.770 --> 00:16:23.768
Questions?

00:16:23.768 --> 00:16:25.720
AUDIENCE: What are the
control totals again?

00:16:28.125 --> 00:16:29.500
GABRIEL
SANCHEZ-MARTINEZ: They're

00:16:29.500 --> 00:16:32.050
counts of boardings and counts
of alightings at each stop.

00:16:32.050 --> 00:16:35.670
And they can, in this
example, come from APC.

00:16:35.670 --> 00:16:39.080
AUDIENCE: That's
what come from APC.

00:16:39.080 --> 00:16:41.930
GABRIEL SANCHEZ-MARTINEZ:
So what we do, the algorithm

00:16:41.930 --> 00:16:43.880
for iterative
proportional fitting,

00:16:43.880 --> 00:16:47.240
it calculates a scaling
factor for each row.

00:16:47.240 --> 00:16:48.800
We start with rows.

00:16:48.800 --> 00:16:53.420
And we say, well we need
to scale up everything

00:16:53.420 --> 00:16:58.010
on the first row by 40 over
3, so that that number adds up

00:16:58.010 --> 00:16:59.660
to 40.

00:16:59.660 --> 00:17:02.660
And you calculate the
scaling factor for each row

00:17:02.660 --> 00:17:06.270
and apply it to the
cells in the matrix.

00:17:06.270 --> 00:17:11.920
And of course, the sum
of cells column-wise

00:17:11.920 --> 00:17:14.079
is not going to add up
to the target alightings.

00:17:14.079 --> 00:17:17.710
So the second step is to
apply the same procedure

00:17:17.710 --> 00:17:19.390
on the columns.

00:17:19.390 --> 00:17:21.160
And now we realize,
well, we need

00:17:21.160 --> 00:17:24.730
to apply a scaling
factor of 30 over 13.3

00:17:24.730 --> 00:17:27.280
to get B to add up to 30.

00:17:27.280 --> 00:17:30.440
And you do the same
for each column.

00:17:30.440 --> 00:17:34.160
And now the columns
sum up perfectly,

00:17:34.160 --> 00:17:36.120
but the rows don't anymore.

00:17:36.120 --> 00:17:38.060
So now we go back and
repeat the process.

00:17:38.060 --> 00:17:40.835
And we go to the
rows and the columns.

00:17:43.850 --> 00:17:47.210
I've put it in all the
slides so you can actually

00:17:47.210 --> 00:17:51.200
repeat this in your spreadsheet
program, if you want.

00:17:51.200 --> 00:17:57.400
It has been shown that if
all the non-structural values

00:17:57.400 --> 00:18:00.310
of the cells in that
matrix are not zero,

00:18:00.310 --> 00:18:04.000
and then they are positive,
then it will converge.

00:18:04.000 --> 00:18:06.850
And it will converge to the
maximum likelihood estimate,

00:18:06.850 --> 00:18:10.390
of the best possible
estimate, given your seed

00:18:10.390 --> 00:18:13.160
and given your control totals.

00:18:13.160 --> 00:18:16.450
So you can apply
this if you ever

00:18:16.450 --> 00:18:18.640
have a situation where
you have control totals,

00:18:18.640 --> 00:18:20.650
but not the origin
destination matrix.

00:18:20.650 --> 00:18:22.270
And that's one example
of-- that would

00:18:22.270 --> 00:18:25.790
be having APC and nothing else.

00:18:25.790 --> 00:18:28.110
Any questions on this method?

00:18:28.110 --> 00:18:30.110
We're to see it again in
a different application

00:18:30.110 --> 00:18:31.480
later in this lecture.

00:18:31.480 --> 00:18:35.360
AUDIENCE: Is it guaranteed to
converge to the correct value?

00:18:35.360 --> 00:18:39.200
GABRIEL SANCHEZ-MARTINEZ:
Well, what is correct?

00:18:39.200 --> 00:18:41.900
It may not be the
truth, if that's

00:18:41.900 --> 00:18:43.700
what you mean by correct.

00:18:43.700 --> 00:18:46.610
So it's the best
estimate of the truth,

00:18:46.610 --> 00:18:48.126
given the information provided.

00:18:48.126 --> 00:18:49.959
AUDIENCE: How might it
converge to something

00:18:49.959 --> 00:18:51.590
that isn't correct?

00:18:51.590 --> 00:18:54.460
GABRIEL SANCHEZ-MARTINEZ: Your
seed matrix might be wrong.

00:18:54.460 --> 00:18:58.330
Or there might be aggregation
errors, for example.

00:18:58.330 --> 00:19:00.820
So if you start with all
ones, that's clearly not true.

00:19:00.820 --> 00:19:02.444
And this is the best
possible estimate,

00:19:02.444 --> 00:19:04.780
given your starting assumption
that all of the pairs

00:19:04.780 --> 00:19:10.090
are equally likely, and then
adjusting from there, right?

00:19:10.090 --> 00:19:12.800
And then I mentioned
structural zeros.

00:19:12.800 --> 00:19:17.080
So if you have a
non-structural zero,

00:19:17.080 --> 00:19:21.790
say that with
onboard survey, you

00:19:21.790 --> 00:19:25.090
collected OD demand only
for a couple of trips

00:19:25.090 --> 00:19:27.290
and used that to
seed the matrix.

00:19:27.290 --> 00:19:29.290
And let's say that first
some of these OD pairs,

00:19:29.290 --> 00:19:32.815
you didn't observe a single
person taking that trip.

00:19:32.815 --> 00:19:35.460
So you say, well, in
the seed, I have a zero,

00:19:35.460 --> 00:19:39.400
but that's a non-structural
zero because--

00:19:39.400 --> 00:19:40.790
it is a structural zero, rather.

00:19:40.790 --> 00:19:45.540
So this value, some people
might be taking the OD pair.

00:19:45.540 --> 00:19:47.140
And if you seed it
a zero, then you

00:19:47.140 --> 00:19:49.750
can't scale it up above zero.

00:19:49.750 --> 00:19:54.970
So in this case, you would
not converge necessarily.

00:19:54.970 --> 00:19:56.470
And you certainly
would not converge

00:19:56.470 --> 00:19:59.170
to the maximum
likelihood estimate.

00:19:59.170 --> 00:20:01.347
OK?

00:20:01.347 --> 00:20:03.930
AUDIENCE: I was going to ask how
you get a better seed matrix,

00:20:03.930 --> 00:20:04.200
but you--

00:20:04.200 --> 00:20:06.033
GABRIEL SANCHEZ-MARTINEZ:
So with any kind--

00:20:06.033 --> 00:20:10.440
we'll talk about
other methods for ODX,

00:20:10.440 --> 00:20:13.470
so for estimating origin
destination matrices.

00:20:13.470 --> 00:20:15.930
Manual surveys is one example.

00:20:15.930 --> 00:20:20.130
Any knowledge that you have
about what OD pairs are busiest

00:20:20.130 --> 00:20:21.400
should help.

00:20:21.400 --> 00:20:25.280
So you could do on-off counts
with the traditional way

00:20:25.280 --> 00:20:28.940
if the only thing
you have is this.

00:20:28.940 --> 00:20:32.035
And we've talked about
surveys extensively.

00:20:32.035 --> 00:20:33.466
AUDIENCE: So just
to [INAUDIBLE],,

00:20:33.466 --> 00:20:35.660
APC is the target
boarding [INAUDIBLE]..

00:20:35.660 --> 00:20:36.951
GABRIEL SANCHEZ-MARTINEZ: Yeah.

00:20:36.951 --> 00:20:38.550
So over some number of trips--

00:20:38.550 --> 00:20:40.290
and this is a toy
example, clearly.

00:20:40.290 --> 00:20:42.960
Over some number of
trips, you counted

00:20:42.960 --> 00:20:46.440
40 people boarding
at A, and 30 people

00:20:46.440 --> 00:20:48.690
alighting at B, and so forth.

00:20:48.690 --> 00:20:51.360
So you want the
cells to match that.

00:20:51.360 --> 00:20:53.020
OK?

00:20:53.020 --> 00:20:54.730
So you could do this
in Excel, or you

00:20:54.730 --> 00:20:58.910
could write your own
little function to do this.

00:20:58.910 --> 00:21:01.680
It amplifies errors
in the seed matrix.

00:21:01.680 --> 00:21:03.200
You're scaling
up, so if you have

00:21:03.200 --> 00:21:05.690
errors in your seed matrix,
they will be scaled up too.

00:21:05.690 --> 00:21:07.550
Just be aware of that.

00:21:07.550 --> 00:21:10.610
So what about if
we don't have APC?

00:21:10.610 --> 00:21:13.700
What if we only
have a AFC and AVL?

00:21:13.700 --> 00:21:15.470
So now we don't
have control tools.

00:21:15.470 --> 00:21:19.040
AFC might give you boardings,
but not alightings.

00:21:19.040 --> 00:21:21.980
So what are the ways of
scaling up with that?

00:21:21.980 --> 00:21:25.480
You have different systems,
and it depends on the system.

00:21:25.480 --> 00:21:29.360
So if you look at TFL in London,
we said AFC there is closed,

00:21:29.360 --> 00:21:32.540
so the origin station pairs
are given by the rail system

00:21:32.540 --> 00:21:34.670
because people have
to tap in and tap out.

00:21:34.670 --> 00:21:36.350
On bus, however,
people only tap in.

00:21:36.350 --> 00:21:39.350
So there, you would have to
apply this inference method.

00:21:39.350 --> 00:21:42.090
Here in the MBTA, both
bus and rail are open.

00:21:42.090 --> 00:21:42.590
You tap in.

00:21:42.590 --> 00:21:43.339
You don't tap out.

00:21:43.339 --> 00:21:47.840
So we have to infer
destinations in rail and in bus.

00:21:47.840 --> 00:21:49.910
And then in some more
advanced systems,

00:21:49.910 --> 00:21:52.860
a lot of information, including
transfer information, is given.

00:21:52.860 --> 00:21:54.497
Seoul is one example of that.

00:21:54.497 --> 00:21:55.830
AUDIENCE: How is that different?

00:21:55.830 --> 00:21:56.430
They--

00:21:56.430 --> 00:21:57.020
AUDIENCE: They tap
in [INAUDIBLE]..

00:21:57.020 --> 00:21:58.978
GABRIEL SANCHEZ-MARTINEZ:
They tap in between--

00:21:58.978 --> 00:21:59.630
yeah.

00:21:59.630 --> 00:22:05.142
So that there's an
interchange tap.

00:22:05.142 --> 00:22:07.225
AUDIENCE: They actually
have to tap out to leave--

00:22:07.225 --> 00:22:08.933
GABRIEL SANCHEZ-MARTINEZ:
And by the way,

00:22:08.933 --> 00:22:10.940
in some parts of London's
network, that is true.

00:22:10.940 --> 00:22:16.370
You tap to prove that
you were transferring.

00:22:16.370 --> 00:22:19.540
There might be a fare
advantage to doing that.

00:22:19.540 --> 00:22:22.840
So control totals.

00:22:22.840 --> 00:22:27.970
So here in Boston, with the MBTA
buses, some portion of buses

00:22:27.970 --> 00:22:30.110
have APC, but not all of them.

00:22:30.110 --> 00:22:32.650
So you could use the
first method applied

00:22:32.650 --> 00:22:34.870
to only a fraction of
vehicles and then scale up

00:22:34.870 --> 00:22:35.710
to all vehicles.

00:22:35.710 --> 00:22:38.210
That's one possibility.

00:22:38.210 --> 00:22:41.890
Or you need something else.

00:22:41.890 --> 00:22:46.990
In London, they don't have
APC, at least not widespread.

00:22:46.990 --> 00:22:49.550
And they do have the
ticketing machine.

00:22:49.550 --> 00:22:51.490
So in theory,
drivers are supposed

00:22:51.490 --> 00:22:56.050
to push a button if somebody
boards, and they don't tap.

00:22:56.050 --> 00:22:58.360
Do they actually do it?

00:22:58.360 --> 00:23:01.120
Not clear to what
extent the drivers

00:23:01.120 --> 00:23:03.370
comply with that instruction.

00:23:03.370 --> 00:23:07.800
And then gates and rail gates.

00:23:07.800 --> 00:23:11.460
So tapping in or out of
the subway system there,

00:23:11.460 --> 00:23:12.240
there's a counter.

00:23:12.240 --> 00:23:13.740
So it counts people
passing through.

00:23:13.740 --> 00:23:20.490
So if somebody goes in through
a gate and out some other place,

00:23:20.490 --> 00:23:22.690
and we don't know
exactly what they did,

00:23:22.690 --> 00:23:28.530
the total number of people
at each node in the system

00:23:28.530 --> 00:23:29.220
can be counted.

00:23:29.220 --> 00:23:31.270
And we can use that
information to scale up.

00:23:31.270 --> 00:23:34.170
So we'll talk about that later.

00:23:34.170 --> 00:23:36.190
So it depends on the context.

00:23:36.190 --> 00:23:38.670
Let's start with origin
inference, the first letter

00:23:38.670 --> 00:23:41.110
in ODX is origin inference.

00:23:41.110 --> 00:23:46.260
So we're looking at a bus,
which has one stop and then

00:23:46.260 --> 00:23:47.400
another stop.

00:23:47.400 --> 00:23:52.410
And if we match the AFC
transaction times to the AVL

00:23:52.410 --> 00:23:57.150
stop visit times, we can put
them on the same timeline

00:23:57.150 --> 00:24:00.060
and realize, well,
there was a tap

00:24:00.060 --> 00:24:04.260
right after that AVL system said
that the bus left that stop.

00:24:04.260 --> 00:24:06.690
It's very close,
however, to that stop.

00:24:06.690 --> 00:24:09.150
So let's assume that the tap--

00:24:09.150 --> 00:24:11.250
maybe the bus pulled
out and started moving,

00:24:11.250 --> 00:24:13.410
and the person was
finding the card.

00:24:13.410 --> 00:24:16.380
But you still tap-- it
if it's close enough,

00:24:16.380 --> 00:24:18.864
let's assign it to that stop.

00:24:18.864 --> 00:24:20.280
AUDIENCE: Just a
second, are there

00:24:20.280 --> 00:24:25.227
systems where the AFC is
connected to the AVL directly?

00:24:25.227 --> 00:24:26.060
[INTERPOSING VOICES]

00:24:26.060 --> 00:24:26.780
GABRIEL SANCHEZ-MARTINEZ:
Are there systems

00:24:26.780 --> 00:24:28.250
where the AFC
connected to the AVL?

00:24:28.250 --> 00:24:28.749
Yes.

00:24:28.749 --> 00:24:30.057
In London, they do that now.

00:24:30.057 --> 00:24:30.890
[INTERPOSING VOICES]

00:24:30.890 --> 00:24:32.690
GABRIEL SANCHEZ-MARTINEZ:
They didn't when we started

00:24:32.690 --> 00:24:33.800
with this, but they do it now.

00:24:33.800 --> 00:24:34.610
AUDIENCE: Because I
know from the process

00:24:34.610 --> 00:24:37.070
that you and Neema
wrote for Chicago, where

00:24:37.070 --> 00:24:42.600
you had to connect the AFC to
the AVL, it was a headache.

00:24:42.600 --> 00:24:45.962
But it seems to me like
it shouldn't be that way.

00:24:45.962 --> 00:24:48.295
GABRIEL SANCHEZ-MARTINEZ:
Well, remember these systems--

00:24:48.295 --> 00:24:50.680
AUDIENCE: It should have
an AV feeder into AFC.

00:24:50.680 --> 00:24:53.180
GABRIEL SANCHEZ-MARTINEZ: So
it's starting to move that way,

00:24:53.180 --> 00:24:56.900
but none of these systems
were put in to capture data.

00:24:56.900 --> 00:24:57.910
None of them.

00:24:57.910 --> 00:24:59.900
APC is the only one, actually.

00:24:59.900 --> 00:25:02.450
So APC was put in to
collect data and not

00:25:02.450 --> 00:25:06.150
have to do all these surveys
because that's expensive.

00:25:06.150 --> 00:25:11.210
But AFC was put in to
collect fares, and avoid

00:25:11.210 --> 00:25:17.510
theft of fare revenue, and
simplify the duties of drivers,

00:25:17.510 --> 00:25:18.480
improve safety.

00:25:18.480 --> 00:25:21.680
So there are many
advantages to it.

00:25:21.680 --> 00:25:23.940
Smart cards have the
advantage of having passes

00:25:23.940 --> 00:25:28.180
and all these things, so many
advantages to an AFC system.

00:25:28.180 --> 00:25:30.410
AVL was for safety.

00:25:30.410 --> 00:25:32.885
If there was an
emergency on the bus,

00:25:32.885 --> 00:25:34.760
the driver could hit a
button, and the police

00:25:34.760 --> 00:25:36.440
and the ambulances
could be dispatched

00:25:36.440 --> 00:25:38.990
to the location of the bus.

00:25:38.990 --> 00:25:41.780
That's why it was started.

00:25:41.780 --> 00:25:46.220
Later on, it started being
used for management as well.

00:25:46.220 --> 00:25:49.560
Data collection of how many
miles of service you provided,

00:25:49.560 --> 00:25:52.900
which is a requirement
for the NDT reporting.

00:25:52.900 --> 00:25:54.470
So aggregate level reporting.

00:25:54.470 --> 00:25:57.830
But none of these systems
were put in thinking,

00:25:57.830 --> 00:25:59.870
oh, we're going to
estimate origin destination

00:25:59.870 --> 00:26:00.960
matrices with them.

00:26:00.960 --> 00:26:03.600
So that's something that
has come after the fact.

00:26:03.600 --> 00:26:06.590
Now that people are
thinking about that, yes.

00:26:06.590 --> 00:26:09.350
We start seeing, can we
hook up these two systems,

00:26:09.350 --> 00:26:11.450
which might be from
different vendors,

00:26:11.450 --> 00:26:14.780
and make them talk
to each other?

00:26:14.780 --> 00:26:18.120
So London does that now.

00:26:18.120 --> 00:26:22.290
So if you see some tap that
is very far away, in time,

00:26:22.290 --> 00:26:26.075
from any stop, you might not
be able to infer the origin.

00:26:26.075 --> 00:26:32.040
If it's close or between the
reported arrival and departure,

00:26:32.040 --> 00:26:34.530
we match that transaction
to that origin.

00:26:34.530 --> 00:26:35.670
Simple, right?

00:26:35.670 --> 00:26:39.410
So in London, we did that.

00:26:39.410 --> 00:26:42.360
This is Jay Gordon's
thesis, which is

00:26:42.360 --> 00:26:44.910
referenced in the last slide.

00:26:44.910 --> 00:26:46.950
Looking at 10 weekdays.

00:26:46.950 --> 00:26:49.650
Oyster is the AFC
system in London.

00:26:49.650 --> 00:26:52.150
And so 96% of boarding
locations were

00:26:52.150 --> 00:26:54.150
inferred within plus
or minus five minutes.

00:26:54.150 --> 00:26:56.910
And that was one of the
thresholds they looked at.

00:26:56.910 --> 00:27:00.840
28% were exactly between the
reported arrival and departure.

00:27:00.840 --> 00:27:04.530
So some tolerance
before the arrival

00:27:04.530 --> 00:27:07.260
and after the departure
from each stop

00:27:07.260 --> 00:27:11.880
was needed to infer a
large portion of these.

00:27:11.880 --> 00:27:13.320
All right?

00:27:13.320 --> 00:27:13.820
Simple.

00:27:16.360 --> 00:27:18.140
Destinations, that's
the next step.

00:27:18.140 --> 00:27:19.570
So we have origins.

00:27:19.570 --> 00:27:22.420
It's a rail system, you tap in.

00:27:22.420 --> 00:27:24.910
It just tells you
I'm gate number blah,

00:27:24.910 --> 00:27:26.590
and that is at some station.

00:27:26.590 --> 00:27:30.010
If it's a bus, you can join
AVL with AFC, and you get it.

00:27:30.010 --> 00:27:31.550
Now let's look at destinations.

00:27:31.550 --> 00:27:35.892
So there are different methods
for inferring destinations.

00:27:35.892 --> 00:27:38.030
[AUDIO OUT] AFC and AVL.

00:27:38.030 --> 00:27:40.820
And one of the simplest methods,
or the family of methods,

00:27:40.820 --> 00:27:45.270
is the closest stop assumption.

00:27:45.270 --> 00:27:47.780
So what are the key assumptions?

00:27:47.780 --> 00:27:52.610
We start by saying that the
destination of each trip

00:27:52.610 --> 00:27:56.070
segment is close to the origin
of the following trip segment.

00:27:56.070 --> 00:27:59.330
So in other words, that is
true, physically, right?

00:27:59.330 --> 00:28:01.920
You have to move
somehow through space.

00:28:01.920 --> 00:28:05.870
So we, further, now assume
that that movement is happening

00:28:05.870 --> 00:28:08.090
mostly through the public
transportation network,

00:28:08.090 --> 00:28:10.310
and that no trips on other
modes are being made.

00:28:13.010 --> 00:28:17.270
So if you go from home
to work in the morning,

00:28:17.270 --> 00:28:21.030
and you have to then--

00:28:21.030 --> 00:28:23.390
say that you work, and then
at the end of the workday,

00:28:23.390 --> 00:28:25.500
you go back home.

00:28:25.500 --> 00:28:28.190
We see that your next
origin is the stop

00:28:28.190 --> 00:28:30.660
across the street from where
you got off, hopefully.

00:28:30.660 --> 00:28:36.080
So we'll look at which stop was
closest on the trip you boarded

00:28:36.080 --> 00:28:37.940
to the next origin.

00:28:37.940 --> 00:28:40.700
And we'll infer that
is the destination.

00:28:40.700 --> 00:28:41.996
If it's a rail system--

00:28:41.996 --> 00:28:43.370
that's what we
show here in blue.

00:28:43.370 --> 00:28:45.800
So we have an origin
on this bus line.

00:28:45.800 --> 00:28:47.840
We want to infer which
of the downstream stops

00:28:47.840 --> 00:28:49.004
is a destination.

00:28:49.004 --> 00:28:50.420
And then we look
at the next trip,

00:28:50.420 --> 00:28:53.120
and the next trip
started at T, the target.

00:28:53.120 --> 00:28:55.940
And we want to get as close
as possible to the target.

00:28:55.940 --> 00:28:57.680
So we'll say that
the destination

00:28:57.680 --> 00:29:02.660
is D, if the distance between
the D and T is small enough.

00:29:02.660 --> 00:29:04.520
Because if it's
three kilometers,

00:29:04.520 --> 00:29:06.140
we might say we have no clue.

00:29:06.140 --> 00:29:08.784
This person may have moved
with a different mode.

00:29:08.784 --> 00:29:10.700
And therefore, this
assumption of closest stop

00:29:10.700 --> 00:29:12.720
may not apply in that case.

00:29:12.720 --> 00:29:15.440
So in those few
cases, we won't make

00:29:15.440 --> 00:29:16.910
an inference of destination.

00:29:16.910 --> 00:29:20.150
If it's rail, so two
rail lines, and you

00:29:20.150 --> 00:29:24.770
may be able to change between
lines behind the gate,

00:29:24.770 --> 00:29:30.920
then closest stop
is the same station

00:29:30.920 --> 00:29:36.680
that you next enter
because that's the closest.

00:29:36.680 --> 00:29:42.080
So if it's a bus-- so you may
have boarded the Red Line here

00:29:42.080 --> 00:29:45.810
and somehow gotten
to the Blue Line.

00:29:45.810 --> 00:29:47.900
We don't know that
yet, but we observe

00:29:47.900 --> 00:29:50.160
that the next tap
is at a bus, then

00:29:50.160 --> 00:29:52.220
we find which station
on the rail network

00:29:52.220 --> 00:29:54.230
is closest to that bus stop.

00:29:54.230 --> 00:29:55.850
And that's the inference.

00:29:55.850 --> 00:29:57.170
That's destination.

00:29:57.170 --> 00:30:02.350
So this is the simplest method
for destination inference.

00:30:02.350 --> 00:30:05.630
Any questions with
the closest stop rule

00:30:05.630 --> 00:30:07.100
and that inference method?

00:30:09.780 --> 00:30:14.690
Here's an example of one
card with four trips.

00:30:14.690 --> 00:30:17.040
It's a time-space
diagram of sorts.

00:30:17.040 --> 00:30:19.430
So we start the day
here in the morning,

00:30:19.430 --> 00:30:24.230
and we maybe observe a
boarding at this line.

00:30:24.230 --> 00:30:28.235
This person, in reality,
transferred to the second trip.

00:30:28.235 --> 00:30:32.090
So we don't know that
at first, but we do see

00:30:32.090 --> 00:30:34.490
the origin and the second trip.

00:30:34.490 --> 00:30:38.090
So we find which of these stops
was closest to that origin

00:30:38.090 --> 00:30:40.880
and, we say that's destination.

00:30:40.880 --> 00:30:44.960
And likewise, from the
trip leading to work,

00:30:44.960 --> 00:30:47.300
and from the trip returning
from work-- work, school,

00:30:47.300 --> 00:30:48.950
whatever it is--

00:30:48.950 --> 00:30:52.340
we find the closest one, and
we say that's destination.

00:30:52.340 --> 00:30:53.780
And we just keep doing that.

00:30:53.780 --> 00:30:56.840
What happens at
the end of the day?

00:30:56.840 --> 00:31:00.260
There's no next one, right?

00:31:00.260 --> 00:31:01.760
So what do we do?

00:31:01.760 --> 00:31:03.480
AUDIENCE: If a
person gets on a bus

00:31:03.480 --> 00:31:10.540
that does go to where they
started, if the last bus--

00:31:10.540 --> 00:31:11.980
let's talk about
bus for a second.

00:31:11.980 --> 00:31:13.605
If it leads back to
where they started,

00:31:13.605 --> 00:31:15.260
then we can assume that they--

00:31:15.260 --> 00:31:15.620
GABRIEL SANCHEZ-MARTINEZ: Right.

00:31:15.620 --> 00:31:16.977
So that's the key assumption.

00:31:16.977 --> 00:31:18.560
They key assumption
is that the person

00:31:18.560 --> 00:31:21.830
returns to the first
place seen that day.

00:31:21.830 --> 00:31:24.320
Another option is to
look at the AFC system

00:31:24.320 --> 00:31:28.430
and see what is the next
place of origin the next day,

00:31:28.430 --> 00:31:29.870
if you have that information.

00:31:29.870 --> 00:31:31.510
Both things are possible.

00:31:31.510 --> 00:31:32.570
OK?

00:31:32.570 --> 00:31:34.800
AUDIENCE: But if they get
on the last bus of the day,

00:31:34.800 --> 00:31:35.675
does not [INAUDIBLE].

00:31:35.675 --> 00:31:37.300
GABRIEL SANCHEZ-MARTINEZ:
Well then you

00:31:37.300 --> 00:31:38.360
can't make an inference.

00:31:38.360 --> 00:31:40.410
So if they get on--
the question was,

00:31:40.410 --> 00:31:43.800
what happens if they
get on, say, a bus.

00:31:43.800 --> 00:31:46.520
And none of the downstream
stops of the origin

00:31:46.520 --> 00:31:49.610
get close to the first
origin of that day

00:31:49.610 --> 00:31:53.660
or the first origin
of the next day,

00:31:53.660 --> 00:31:56.430
then we can't make an inference.

00:31:56.430 --> 00:32:01.680
So we leave that destination
uninferred for now.

00:32:01.680 --> 00:32:02.300
All right?

00:32:02.300 --> 00:32:04.970
So there are some tests.

00:32:04.970 --> 00:32:06.230
We talked about distance.

00:32:06.230 --> 00:32:08.540
Time is another one.

00:32:08.540 --> 00:32:11.720
So there's different
ways of looking at this.

00:32:11.720 --> 00:32:14.630
In London, when Jay
Gordon did this,

00:32:14.630 --> 00:32:18.200
he got an entrance
rate of about 75%.

00:32:18.200 --> 00:32:22.520
Here's a distribution
of speed between station

00:32:22.520 --> 00:32:26.880
exit and inferred bus alighting
or subsequent station entry.

00:32:26.880 --> 00:32:30.290
So very slow speeds here.

00:32:30.290 --> 00:32:33.420
This goes up way
higher than 800.

00:32:33.420 --> 00:32:34.460
What does that show?

00:32:37.640 --> 00:32:41.000
This is meters per hour, so
if you move zero or, say,

00:32:41.000 --> 00:32:45.445
one meter per hour,
what does that imply?

00:32:45.445 --> 00:32:48.022
AUDIENCE: Someone
was taking a bus?

00:32:48.022 --> 00:32:49.980
GABRIEL SANCHEZ-MARTINEZ:
Who are those people?

00:32:52.866 --> 00:32:53.828
Emily?

00:32:53.828 --> 00:33:04.680
AUDIENCE: People who get off
at, say, a tube stop and then

00:33:04.680 --> 00:33:05.370
go to work--

00:33:05.370 --> 00:33:06.450
GABRIEL SANCHEZ-MARTINEZ:
Go to work for eight hours.

00:33:06.450 --> 00:33:06.780
AUDIENCE: --for eight hours.

00:33:06.780 --> 00:33:07.080
And then--

00:33:07.080 --> 00:33:07.260
[INTERPOSING VOICES]

00:33:07.260 --> 00:33:09.260
GABRIEL SANCHEZ-MARTINEZ:
And then next boarding

00:33:09.260 --> 00:33:11.340
is right across the
street, 8 hours later.

00:33:11.340 --> 00:33:13.860
So those are people
who are between trips.

00:33:13.860 --> 00:33:18.000
And then to the right,
here, we have something sort

00:33:18.000 --> 00:33:23.100
of bell-shaped, with some
distribution, quite wide.

00:33:23.100 --> 00:33:25.770
These are in the range
of walking speeds.

00:33:25.770 --> 00:33:33.650
So it checks with what we
know, and what we infer.

00:33:33.650 --> 00:33:35.190
Here is a distribution
of distance

00:33:35.190 --> 00:33:37.180
between subsequent
tap and closest

00:33:37.180 --> 00:33:39.360
stop on the current route.

00:33:39.360 --> 00:33:43.080
So how far away that
you walk to the target

00:33:43.080 --> 00:33:45.180
from your destination,
in other words.

00:33:45.180 --> 00:33:48.680
And there's a cutoff.

00:33:48.680 --> 00:33:52.830
If this were too far, we would
not want to make an inference.

00:33:52.830 --> 00:33:57.640
But you can see that most people
have quite short distances.

00:33:57.640 --> 00:33:59.050
So that's good.

00:33:59.050 --> 00:34:04.830
That means that our inference
is more likely to be true.

00:34:04.830 --> 00:34:05.640
OK?

00:34:05.640 --> 00:34:07.900
And you have some details here.

00:34:07.900 --> 00:34:10.870
So in the case of London,
there was a comparison

00:34:10.870 --> 00:34:14.830
of the origins and destinations
produced by this algorithm,

00:34:14.830 --> 00:34:18.219
with the bus OD survey,
which is a manual survey.

00:34:18.219 --> 00:34:21.010
And it compared favorably.

00:34:21.010 --> 00:34:24.760
One thing with BODS, of
course, it had the biases

00:34:24.760 --> 00:34:26.800
that a manual survey has.

00:34:26.800 --> 00:34:29.881
So it seems that BODS
underestimated ridership

00:34:29.881 --> 00:34:32.380
during the peak periods, where
it was maybe harder to count.

00:34:36.070 --> 00:34:39.310
Sometimes the BODS
return rates were low.

00:34:39.310 --> 00:34:42.670
We saw some of the reasons
for biases in manual surveys.

00:34:42.670 --> 00:34:45.280
If it's a very full
bus, people are

00:34:45.280 --> 00:34:46.900
less likely to return a survey.

00:34:46.900 --> 00:34:50.500
Or if you are a person who is
getting off at the next stop,

00:34:50.500 --> 00:34:52.610
you are less likely
to answer the survey.

00:34:52.610 --> 00:34:56.830
So BODS was, of course,
subject to those biases.

00:34:56.830 --> 00:35:01.160
And essentially, the people
who were doing this validation

00:35:01.160 --> 00:35:02.900
were happy with the
inference method.

00:35:05.730 --> 00:35:10.950
Now what happens in
rail in Boston, say?

00:35:10.950 --> 00:35:12.130
It's an open system.

00:35:12.130 --> 00:35:16.560
So you can apply the
nearest node method.

00:35:20.300 --> 00:35:23.750
But you have a complication
in Boston, the Green Line.

00:35:23.750 --> 00:35:25.675
So the Green Line is--

00:35:25.675 --> 00:35:27.800
if you take it in the
branches, you board, and then

00:35:27.800 --> 00:35:29.550
you tap into the vehicle.

00:35:29.550 --> 00:35:32.780
So it looks like a bus
from the fare standpoint.

00:35:32.780 --> 00:35:37.430
And then you could end up
anywhere on the rail network.

00:35:37.430 --> 00:35:39.980
So it's a little harder
to make an inference

00:35:39.980 --> 00:35:45.971
of where you get off in that
case, especially going back.

00:35:45.971 --> 00:35:51.020
Going back to the
branch, it's not clear.

00:35:51.020 --> 00:35:55.300
Besides that, there
are some other reasons

00:35:55.300 --> 00:35:58.550
to try more sophisticated
destination entrance methods.

00:35:58.550 --> 00:36:03.550
We know that it may not always
be the case that the nearest

00:36:03.550 --> 00:36:07.420
station in the rail system is
actually the alighting station.

00:36:07.420 --> 00:36:10.420
There are some cases where
you wouldn't take an extra 15

00:36:10.420 --> 00:36:12.630
minutes to get a
little bit closer.

00:36:12.630 --> 00:36:14.560
And you are willing
to walk and make

00:36:14.560 --> 00:36:16.900
a compromise between those two.

00:36:16.900 --> 00:36:22.000
So the minimum cost path
method is an improvement

00:36:22.000 --> 00:36:25.040
over the closest stop method.

00:36:25.040 --> 00:36:26.800
What we do there is
we look at-- here's

00:36:26.800 --> 00:36:30.490
the origin tap location,
the entry to the system.

00:36:30.490 --> 00:36:36.010
And we, essentially,
explore using a minimum cost

00:36:36.010 --> 00:36:38.710
formulation, a dynamic
programming approach.

00:36:38.710 --> 00:36:41.680
All the feasible
paths that the person

00:36:41.680 --> 00:36:45.880
could take to their next
tap location, the target.

00:36:45.880 --> 00:36:50.620
And that includes walking links
from any possible exit station.

00:36:50.620 --> 00:36:55.990
So we then use a
generalized cost equation

00:36:55.990 --> 00:36:59.740
to assign a cost to
each of these paths,

00:36:59.740 --> 00:37:03.050
with relative disutility
weights on each component.

00:37:03.050 --> 00:37:05.170
So waiting is more
than vehicle time.

00:37:05.170 --> 00:37:09.010
Walking is more
than waiting time.

00:37:09.010 --> 00:37:11.020
We've seen these
equations before.

00:37:11.020 --> 00:37:14.650
And now we have a
list of paths, and we

00:37:14.650 --> 00:37:16.840
assume that the person
took the one that

00:37:16.840 --> 00:37:19.330
minimized their disutility.

00:37:19.330 --> 00:37:21.310
Their combined,
generalized disutility--

00:37:21.310 --> 00:37:23.920
avoiding walking,
in-vehicle time transfers,

00:37:23.920 --> 00:37:25.670
all those things.

00:37:25.670 --> 00:37:29.020
So in this case,
perhaps the person

00:37:29.020 --> 00:37:31.750
prefers to get off
of the Red Line

00:37:31.750 --> 00:37:35.860
and walk to the next location.

00:37:35.860 --> 00:37:38.620
You could think of
this as the Red Line

00:37:38.620 --> 00:37:41.620
from Kendall to Park Street.

00:37:41.620 --> 00:37:44.890
And then the next entry
is at, say, a bus stop

00:37:44.890 --> 00:37:46.870
close to Boylston Street.

00:37:46.870 --> 00:37:50.310
You could transfer to the Green
Line and take it one stop,

00:37:50.310 --> 00:37:52.650
or you might decide
it's a nice walk.

00:37:52.650 --> 00:37:53.940
I'm going to walk.

00:37:53.940 --> 00:37:56.900
I'm not going to wait
for the Green Line.

00:37:56.900 --> 00:37:59.970
And then some possible
paths take you

00:37:59.970 --> 00:38:04.470
way far from your next
location, so they are pruned.

00:38:04.470 --> 00:38:06.810
They're not included.

00:38:06.810 --> 00:38:11.600
So what happens if we
compare the two methods?

00:38:11.600 --> 00:38:15.530
What's your intuition?

00:38:15.530 --> 00:38:18.050
Or what do you think
happens if we compare

00:38:18.050 --> 00:38:22.600
the results of nearest node with
this more sophisticated method?

00:38:26.186 --> 00:38:30.427
What percentage of
destinations do you

00:38:30.427 --> 00:38:32.260
think will be inferred
at a different place?

00:38:35.417 --> 00:38:36.710
Is it close to 5?

00:38:36.710 --> 00:38:37.850
Close to 50?

00:38:37.850 --> 00:38:39.285
Close to 25?

00:38:42.280 --> 00:38:43.426
10%?

00:38:43.426 --> 00:38:44.920
AUDIENCE: 5%.

00:38:44.920 --> 00:38:46.752
GABRIEL SANCHEZ-MARTINEZ: 5%?

00:38:46.752 --> 00:38:49.210
AUDIENCE: What percent of the
destinations will be inferred

00:38:49.210 --> 00:38:49.810
or will not be inferred?

00:38:49.810 --> 00:38:51.921
GABRIEL SANCHEZ-MARTINEZ:
Will be inferred differently.

00:38:51.921 --> 00:38:53.875
AUDIENCE: Oh, will be
inferred differently.

00:38:56.785 --> 00:38:57.449
5%.

00:38:57.449 --> 00:38:58.740
GABRIEL SANCHEZ-MARTINEZ: Five?

00:38:58.740 --> 00:38:59.240
OK.

00:38:59.240 --> 00:39:01.860
So that's actually close.

00:39:01.860 --> 00:39:05.210
I actually don't think I wrote
the results, which is good.

00:39:05.210 --> 00:39:08.445
So let's look at two examples.

00:39:08.445 --> 00:39:10.710
It is close to 5%, in fact.

00:39:10.710 --> 00:39:13.960
Some of the differences
in the Boston network

00:39:13.960 --> 00:39:16.810
are clear improvements
in the accuracy.

00:39:16.810 --> 00:39:18.670
I'll give you one
example of that.

00:39:18.670 --> 00:39:21.310
Some people go
from Forest Hills,

00:39:21.310 --> 00:39:25.300
and then their next
tap is at Copley.

00:39:25.300 --> 00:39:29.450
So the walk between Back Bay
and Copley is five minutes,

00:39:29.450 --> 00:39:31.700
and it's a nice walk.

00:39:31.700 --> 00:39:33.470
If you use nearest
node, you have

00:39:33.470 --> 00:39:34.850
to remain on the rail line.

00:39:34.850 --> 00:39:38.660
And you have to transfer either
at Downtown Crossing to the Red

00:39:38.660 --> 00:39:40.190
and then at Park
Street to the Green

00:39:40.190 --> 00:39:43.340
or go to Haymarket and
transfer it to the Orange Line.

00:39:43.340 --> 00:39:47.100
That's a 20-minute,
25-minute ordeal.

00:39:47.100 --> 00:39:49.621
AUDIENCE: For a walk from
Downtown across to Park Street,

00:39:49.621 --> 00:39:50.120
that's--

00:39:50.120 --> 00:39:53.725
AUDIENCE: Sure, but then you
are not following the method.

00:39:53.725 --> 00:39:55.600
AUDIENCE: Oh, you don't
[INAUDIBLE] transfer?

00:39:55.600 --> 00:39:57.620
GABRIEL SANCHEZ-MARTINEZ: Yeah.

00:39:57.620 --> 00:40:02.976
So this is a case where the
minimum cost approach says,

00:40:02.976 --> 00:40:04.850
yeah, you get off the
Back Bay, and you walk.

00:40:04.850 --> 00:40:07.314
So yes, it's an improvement.

00:40:07.314 --> 00:40:08.480
There are some other cases--

00:40:08.480 --> 00:40:10.580
AUDIENCE: What was the
person destination?

00:40:10.580 --> 00:40:11.900
GABRIEL SANCHEZ-MARTINEZ: Well,
we don't know destination.

00:40:11.900 --> 00:40:13.135
We're inferring destination.

00:40:13.135 --> 00:40:13.440
[INTERPOSING VOICES]

00:40:13.440 --> 00:40:14.270
GABRIEL SANCHEZ-MARTINEZ:
And what we know

00:40:14.270 --> 00:40:16.480
is that they get on at
Copley the next time.

00:40:16.480 --> 00:40:18.990
AUDIENCE: Yeah, but was
that their afternoon trip?

00:40:18.990 --> 00:40:20.360
Or was that their--

00:40:20.360 --> 00:40:21.380
GABRIEL SANCHEZ-MARTINEZ:
It's a morning trip.

00:40:21.380 --> 00:40:22.490
They go from Forest Hills.

00:40:22.490 --> 00:40:25.339
AUDIENCE: So both Forest Hills
and Copley were morning taps?

00:40:25.339 --> 00:40:27.130
GABRIEL SANCHEZ-MARTINEZ:
Oh, I don't know.

00:40:27.130 --> 00:40:28.870
Copley might have been
the afternoon tap.

00:40:28.870 --> 00:40:30.286
AUDIENCE: It doesn't
really matter

00:40:30.286 --> 00:40:32.734
if it was in the afternoon.

00:40:32.734 --> 00:40:34.190
AUDIENCE: [INAUDIBLE].

00:40:34.190 --> 00:40:36.815
But then why would
a person get on--

00:40:36.815 --> 00:40:38.440
AUDIENCE: The question
is where do they

00:40:38.440 --> 00:40:39.740
get off the Orange Line.

00:40:39.740 --> 00:40:41.073
GABRIEL SANCHEZ-MARTINEZ: Right.

00:40:41.073 --> 00:40:43.300
We're trying to infer the
destination when they board

00:40:43.300 --> 00:40:44.810
the Orange Line in the morning.

00:40:44.810 --> 00:40:48.446
AUDIENCE: But the
time gap also matters.

00:40:48.446 --> 00:40:49.050
Forest Hills--

00:40:49.050 --> 00:40:51.466
GABRIEL SANCHEZ-MARTINEZ: We
are making an assumption that

00:40:51.466 --> 00:40:56.260
people [AUDIO OUT]
too far from their--

00:40:56.260 --> 00:40:57.250
AUDIENCE: But I--

00:40:57.250 --> 00:40:58.875
GABRIEL SANCHEZ-MARTINEZ:
--destination

00:40:58.875 --> 00:41:01.276
in a non-public
transportation mode.

00:41:01.276 --> 00:41:01.900
AUDIENCE: Sure.

00:41:01.900 --> 00:41:03.400
GABRIEL SANCHEZ-MARTINEZ:
That's one

00:41:03.400 --> 00:41:06.010
of the assumptions
in this method

00:41:06.010 --> 00:41:07.650
and in the previous
method as well.

00:41:07.650 --> 00:41:08.660
AUDIENCE: But I'm still
troubled by the time gap.

00:41:08.660 --> 00:41:10.410
Was Copley and afternoon tap?

00:41:10.410 --> 00:41:11.110
Or was it--

00:41:11.110 --> 00:41:12.250
GABRIEL SANCHEZ-MARTINEZ:
It could have been.

00:41:12.250 --> 00:41:14.030
There are many
people who do this.

00:41:14.030 --> 00:41:14.680
AUDIENCE: It makes
a difference--

00:41:14.680 --> 00:41:15.340
GABRIEL SANCHEZ-MARTINEZ:
So there

00:41:15.340 --> 00:41:16.870
are many people who do this.

00:41:16.870 --> 00:41:19.080
So there are some
people who do it

00:41:19.080 --> 00:41:21.850
close in time and some people
who do it in the evening,

00:41:21.850 --> 00:41:23.110
after they leave work.

00:41:23.110 --> 00:41:27.780
So I'm giving you an example
of one origin target pair.

00:41:27.780 --> 00:41:33.231
And I would say it's
a marked improvement.

00:41:33.231 --> 00:41:35.730
It's certainly not the case
that the person goes all the way

00:41:35.730 --> 00:41:39.000
to Haymarket and turns around.

00:41:39.000 --> 00:41:39.900
OK.

00:41:39.900 --> 00:41:44.110
The other example is less clear.

00:41:44.110 --> 00:41:49.380
So somebody-- an OD pair
starting at Maverick,

00:41:49.380 --> 00:41:54.280
and then the next tap
is at Downtown Crossing.

00:41:54.280 --> 00:41:58.030
So obviously, the
closest node assumption

00:41:58.030 --> 00:42:00.340
is that you transfer
at State Street

00:42:00.340 --> 00:42:03.250
and take the Orange
Line one stop.

00:42:03.250 --> 00:42:05.500
That's actually not too bad.

00:42:05.500 --> 00:42:08.145
The algorithm-- and first,
for a lot of these people,

00:42:08.145 --> 00:42:09.520
that you get off
at State Street,

00:42:09.520 --> 00:42:13.210
and you walk about four
minutes, and if you

00:42:13.210 --> 00:42:14.730
look at Google
directions, Google

00:42:14.730 --> 00:42:16.188
will say that's
what you should do.

00:42:18.770 --> 00:42:22.070
The transfer to the
Orange Line would take

00:42:22.070 --> 00:42:23.780
six minutes, instead of four.

00:42:23.780 --> 00:42:25.216
So it's very close.

00:42:25.216 --> 00:42:26.840
And it depends on
the weather that day.

00:42:26.840 --> 00:42:29.350
And it depends on
people's preference.

00:42:29.350 --> 00:42:31.760
It might depend on
real-time information

00:42:31.760 --> 00:42:33.350
about whether the
train is right here,

00:42:33.350 --> 00:42:37.160
and I can run, or
arriving in one minute,

00:42:37.160 --> 00:42:39.600
or if it's 10 minutes away.

00:42:39.600 --> 00:42:41.970
So this is more
subtle, more nuanced.

00:42:41.970 --> 00:42:43.950
And I wouldn't say that
was an improvement.

00:42:43.950 --> 00:42:47.850
So part of the 5% is
clear improvement,

00:42:47.850 --> 00:42:52.310
and another part of it is,
well, it might be an improvement

00:42:52.310 --> 00:42:52.810
or not.

00:42:52.810 --> 00:42:54.990
It depends on
people's preferences.

00:42:54.990 --> 00:43:03.170
So if we look at the
distribution of the results

00:43:03.170 --> 00:43:07.820
from destination in this
case, 70% of destinations

00:43:07.820 --> 00:43:09.700
were inferred.

00:43:09.700 --> 00:43:13.690
And then we have different
reasons why we can't infer it.

00:43:13.690 --> 00:43:16.150
So for 16%, there was
no target location.

00:43:16.150 --> 00:43:23.010
That means there was no other
tap that day, essentially.

00:43:23.010 --> 00:43:28.000
So there was no target.

00:43:28.000 --> 00:43:29.870
For 8% of them, there
was another target,

00:43:29.870 --> 00:43:31.150
but it was very far.

00:43:31.150 --> 00:43:36.870
So somehow, the person went to
another bus stop in the system,

00:43:36.870 --> 00:43:40.240
and it was far away
from any rail station.

00:43:40.240 --> 00:43:43.430
So we're not so
comfortable, in that case,

00:43:43.430 --> 00:43:47.960
saying that the destination
is close to the next tap.

00:43:47.960 --> 00:43:51.820
So we will not make an
inference for those people.

00:43:51.820 --> 00:43:55.000
Some paths were non-feasible.

00:43:55.000 --> 00:43:59.830
So that means that
the algorithm did not

00:43:59.830 --> 00:44:03.790
find any path that made
it to the target on time

00:44:03.790 --> 00:44:06.760
to make the next.

00:44:06.760 --> 00:44:08.590
So that could be about data.

00:44:08.590 --> 00:44:10.695
It could be a number of things.

00:44:10.695 --> 00:44:12.820
There are some assumptions
about how quickly people

00:44:12.820 --> 00:44:15.250
can access trains and hop.

00:44:15.250 --> 00:44:16.810
So many things can go into that.

00:44:19.390 --> 00:44:20.250
Yeah, and so forth.

00:44:20.250 --> 00:44:25.831
And then unknown origin, so
errors in the data, et cetera.

00:44:25.831 --> 00:44:26.330
OK?

00:44:30.220 --> 00:44:34.790
And the inference probabilities,
the total ones are shown here.

00:44:34.790 --> 00:44:37.980
So the blue line is overall
destination entrance rates,

00:44:37.980 --> 00:44:40.529
so I said close to 70%.

00:44:40.529 --> 00:44:42.070
That's what you see
on the blue line.

00:44:42.070 --> 00:44:44.260
It dips a little bit on
weekends because there

00:44:44.260 --> 00:44:46.930
are fewer taps and
maybe more walking

00:44:46.930 --> 00:44:50.770
between taps or between trips.

00:44:50.770 --> 00:44:54.070
For rail, it's a little
higher than the general.

00:44:54.070 --> 00:44:57.350
For bus, shown in yellow,
it's a little lower.

00:44:57.350 --> 00:44:58.900
And if you take
away the part that

00:44:58.900 --> 00:45:05.260
didn't have a second tap or a
tap after that the transaction,

00:45:05.260 --> 00:45:10.345
then it goes up to closer
to 90%, not quite 90%.

00:45:10.345 --> 00:45:11.220
AUDIENCE: [INAUDIBLE]

00:45:11.220 --> 00:45:11.370
GABRIEL SANCHEZ-MARTINEZ: Yeah?

00:45:11.370 --> 00:45:13.495
AUDIENCE: Does this include
only people who tapped?

00:45:13.495 --> 00:45:16.550
Or does this also include
people who paid cash?

00:45:16.550 --> 00:45:20.870
GABRIEL SANCHEZ-MARTINEZ: So
these numbers in this slide

00:45:20.870 --> 00:45:22.010
are everyone.

00:45:22.010 --> 00:45:26.510
If the person is cash, then they
are not counted on the red line

00:45:26.510 --> 00:45:29.450
because they wouldn't have
an inferable destination.

00:45:29.450 --> 00:45:35.567
But certainly, the bus line
does include cash transactions.

00:45:35.567 --> 00:45:36.400
[INTERPOSING VOICES]

00:45:36.400 --> 00:45:36.580
GABRIEL SANCHEZ-MARTINEZ:
And that's

00:45:36.580 --> 00:45:38.536
one of the reasons
why it's lower.

00:45:38.536 --> 00:45:40.230
AUDIENCE: [INAUDIBLE] target
location on the last slide

00:45:40.230 --> 00:45:41.355
includes cash transactions?

00:45:41.355 --> 00:45:44.890
GABRIEL SANCHEZ-MARTINEZ: So
this was only for the rail.

00:45:44.890 --> 00:45:47.140
Sorry, this is for
the whole system,

00:45:47.140 --> 00:45:52.720
but the two examples that I
gave here, I was looking at--

00:45:52.720 --> 00:45:55.300
I quoted 5%
difference, and that's

00:45:55.300 --> 00:45:58.990
a case study where I compared
rail transactions, not

00:45:58.990 --> 00:46:01.680
bus transactions.

00:46:01.680 --> 00:46:04.470
So that's the one
thing to have in mind.

00:46:04.470 --> 00:46:06.620
But yeah, this is overall
destination inference

00:46:06.620 --> 00:46:08.207
in the MBTA, and this as well.

00:46:08.207 --> 00:46:09.540
Different ways of looking at it.

00:46:09.540 --> 00:46:10.366
AUDIENCE: So if you
paid cash, you'd

00:46:10.366 --> 00:46:11.540
be in the no target range.

00:46:11.540 --> 00:46:13.080
GABRIEL SANCHEZ-MARTINEZ: Yes.

00:46:13.080 --> 00:46:15.030
And you could infer an
origin for that person,

00:46:15.030 --> 00:46:17.820
but not a destination, so you
leave that trip uninferred

00:46:17.820 --> 00:46:19.460
destination for now.

00:46:19.460 --> 00:46:21.700
OK.

00:46:21.700 --> 00:46:25.210
We've covered O and D. Let's
move to X, transfer inference.

00:46:25.210 --> 00:46:29.060
We talked about why transfer
inference is so important.

00:46:29.060 --> 00:46:31.120
We also call this
interchange inference.

00:46:31.120 --> 00:46:34.710
Interchange is a term preferred
in London by the British.

00:46:34.710 --> 00:46:37.670
In the US, we say transfer.

00:46:37.670 --> 00:46:41.194
So we have seen
this diagram before.

00:46:41.194 --> 00:46:42.610
But now there are
these blue boxes

00:46:42.610 --> 00:46:47.980
surrounding both, say, the
morning pair and the afternoon

00:46:47.980 --> 00:46:48.770
pair.

00:46:48.770 --> 00:46:52.630
So the inference
we want to make now

00:46:52.630 --> 00:46:55.660
is whether this first
trip was connected

00:46:55.660 --> 00:46:57.670
to the second with a transfer.

00:46:57.670 --> 00:47:00.760
Or whether, in fact, the
person was doing something else

00:47:00.760 --> 00:47:04.630
in between those two trips, and
this was the actual intended

00:47:04.630 --> 00:47:07.340
destination of that passenger.

00:47:07.340 --> 00:47:09.430
And that's an important
question for the reasons

00:47:09.430 --> 00:47:10.450
we talked about earlier.

00:47:16.170 --> 00:47:19.790
These are some definitions
for your reference.

00:47:19.790 --> 00:47:24.860
A journey, in this
subject, is everything

00:47:24.860 --> 00:47:29.420
that is accomplished
from the real origin

00:47:29.420 --> 00:47:31.170
to the real destination
of the person,

00:47:31.170 --> 00:47:33.740
including transfers and,
possibly, multiple fare

00:47:33.740 --> 00:47:35.240
payments.

00:47:35.240 --> 00:47:38.090
A fare stage, not
included in the slide,

00:47:38.090 --> 00:47:41.450
is everything that you do
in a single fare payment.

00:47:41.450 --> 00:47:44.720
So it could involve
behind-the-gate transfers,

00:47:44.720 --> 00:47:48.920
or it could be one bus ride.

00:47:48.920 --> 00:47:53.630
Transfers are transfers
between stages.

00:47:53.630 --> 00:47:58.070
So they link segments
of a journey.

00:47:58.070 --> 00:48:00.390
How do we do this linking?

00:48:00.390 --> 00:48:02.730
This is also from Jay
Gordon's thesis, which

00:48:02.730 --> 00:48:05.820
is referenced in the back.

00:48:05.820 --> 00:48:09.000
We look at a series of
three kinds of conditions--

00:48:09.000 --> 00:48:10.860
temporal conditions,
logical conditions,

00:48:10.860 --> 00:48:12.390
and spatial conditions.

00:48:12.390 --> 00:48:16.020
Temporal conditions,
say, how much time

00:48:16.020 --> 00:48:17.940
happened between the
inferred destination

00:48:17.940 --> 00:48:21.280
and the next origin,
the inferred origin.

00:48:21.280 --> 00:48:24.280
If that was a very long time,
and the distance was short,

00:48:24.280 --> 00:48:27.370
then the person might have
been doing something else.

00:48:27.370 --> 00:48:33.780
So we can't necessarily assume
that this was a transfer.

00:48:33.780 --> 00:48:36.160
We also look at bus wait time.

00:48:36.160 --> 00:48:37.680
So what if the
distance was short?

00:48:37.680 --> 00:48:42.390
A long time happened [AUDIO OUT]
of next bus or every 20

00:48:42.390 --> 00:48:45.960
minutes, and the person
had to wait that long?

00:48:45.960 --> 00:48:47.970
Well, that is also considered.

00:48:47.970 --> 00:48:53.340
So if we look and see
that that next bus passed

00:48:53.340 --> 00:48:56.420
after a reasonable time allowed
to get to the next stop.

00:48:56.420 --> 00:48:59.280
Or how many buses passed?

00:48:59.280 --> 00:49:01.500
Maybe you want to
allow one, just in case

00:49:01.500 --> 00:49:04.270
that bus is very full and
can't take that person.

00:49:04.270 --> 00:49:07.980
So these are the considerations
in temporal conditions.

00:49:07.980 --> 00:49:11.310
Spatial conditions, you want
to look at maximum interchange

00:49:11.310 --> 00:49:13.440
distance, assuming that
a person can actually

00:49:13.440 --> 00:49:18.720
do a transfer that is two
kilometers long, for example.

00:49:18.720 --> 00:49:20.940
You probably would be
doing something else,

00:49:20.940 --> 00:49:22.020
if that's the case.

00:49:22.020 --> 00:49:24.870
And we look at circuity, so
circuity at the journey level

00:49:24.870 --> 00:49:26.750
and between stages.

00:49:26.750 --> 00:49:29.250
A circuitous journey
is one that ends very

00:49:29.250 --> 00:49:32.280
close to where you started.

00:49:32.280 --> 00:49:36.270
So if you infer
transfers, and you

00:49:36.270 --> 00:49:39.240
end up back where you
started, then somewhere

00:49:39.240 --> 00:49:42.420
in that chain of stages,
there must have not

00:49:42.420 --> 00:49:43.890
been a real transfer.

00:49:43.890 --> 00:49:46.860
There must have been a
non-transportation activity.

00:49:46.860 --> 00:49:50.190
So therefore, you can't really
infer that all of that chain

00:49:50.190 --> 00:49:52.170
is linked with transfers.

00:49:52.170 --> 00:49:53.830
And then circuity
between stages.

00:49:53.830 --> 00:49:59.490
So if you, for example,
board the same bus line

00:49:59.490 --> 00:50:03.720
going backwards, even
if the time was short,

00:50:03.720 --> 00:50:06.632
and the distance was short,
you may have seen your friend

00:50:06.632 --> 00:50:09.090
and given your friend something,
and then hopped on the bus

00:50:09.090 --> 00:50:09.720
again.

00:50:09.720 --> 00:50:11.370
So it might have been
a quick transfer.

00:50:11.370 --> 00:50:14.430
And therefore, we want to
look at circuity to infer

00:50:14.430 --> 00:50:18.031
if that was a transfer or not.

00:50:18.031 --> 00:50:20.530
Logical conditions, I actually
gave an example of that right

00:50:20.530 --> 00:50:21.030
now.

00:50:21.030 --> 00:50:25.420
So if you're entering the
same station you get off at,

00:50:25.420 --> 00:50:28.660
or you take the
same bus line, then

00:50:28.660 --> 00:50:30.760
that shouldn't be a
transfer because you could

00:50:30.760 --> 00:50:32.890
have stayed on the same bus.

00:50:32.890 --> 00:50:35.560
One example of
that breaking would

00:50:35.560 --> 00:50:39.220
be a bus being taken out of
service or something like this.

00:50:39.220 --> 00:50:43.390
So you could consider not to
make that logical condition

00:50:43.390 --> 00:50:49.322
more accurate.

00:50:49.322 --> 00:50:51.280
In many cases when that
happens, though, people

00:50:51.280 --> 00:50:52.780
are not asked to tap again.

00:50:52.780 --> 00:50:59.250
So take that with
a grain of salt.

00:50:59.250 --> 00:51:01.380
Questions about these
assumptions and the tests

00:51:01.380 --> 00:51:02.670
that we impose?

00:51:02.670 --> 00:51:05.340
So essentially, if all
of these tests pass,

00:51:05.340 --> 00:51:07.920
we say, yes, this is a transfer.

00:51:07.920 --> 00:51:10.650
If one of them doesn't pass,
we say, we're not sure.

00:51:10.650 --> 00:51:13.570
It could have been or maybe not.

00:51:13.570 --> 00:51:16.780
And therefore, this will be
a conservative assumption

00:51:16.780 --> 00:51:23.580
about whether these two stages
are linked as one journey.

00:51:23.580 --> 00:51:26.970
Here is in London, the results.

00:51:26.970 --> 00:51:31.860
So about 2/3 were one stage,
about 1/4 were two stages,

00:51:31.860 --> 00:51:34.650
and then about 10% were
more than two stages.

00:51:34.650 --> 00:51:37.950
And here's a
distribution of duration

00:51:37.950 --> 00:51:42.660
of journey from first
origin to last destination,

00:51:42.660 --> 00:51:45.310
instead of the
unlinked trip time.

00:51:45.310 --> 00:51:49.270
This includes transfer
time in between.

00:51:49.270 --> 00:51:53.770
So very powerful for
service planning.

00:51:53.770 --> 00:51:57.400
There was a comparison with
the London travel diary survey,

00:51:57.400 --> 00:51:59.230
little tedious.

00:51:59.230 --> 00:52:02.600
And it lined up quite well, but
there were some differences.

00:52:02.600 --> 00:52:05.320
So if we look at people
reporting that they only

00:52:05.320 --> 00:52:08.770
took one journey on the day
they were queried about,

00:52:08.770 --> 00:52:10.870
it lined up very well.

00:52:10.870 --> 00:52:15.220
If you then look
at two or more, it

00:52:15.220 --> 00:52:18.820
turns out that a lot of people
in LTDS say that they took two,

00:52:18.820 --> 00:52:21.100
but they may have taken more.

00:52:21.100 --> 00:52:23.680
And they're just
simplifying the reporting.

00:52:23.680 --> 00:52:26.620
That's one
possibility of errors.

00:52:26.620 --> 00:52:30.020
And it is a known
bias in surveys

00:52:30.020 --> 00:52:33.130
that people to try to help you
out by saying what I usually

00:52:33.130 --> 00:52:36.970
do, instead of what I did
yesterday, or things like that.

00:52:36.970 --> 00:52:41.170
So percent of cardholders,
shown on the second graph,

00:52:41.170 --> 00:52:43.420
and the number of stages per
journey, similar pattern.

00:52:46.730 --> 00:52:54.780
So in LTDS, you tend
to have fewer people.

00:52:54.780 --> 00:53:01.030
Well, yeah, here we have more
people inferred with one stage,

00:53:01.030 --> 00:53:02.560
so no transfer.

00:53:02.560 --> 00:53:05.370
But if you look at two or
more, a similar pattern

00:53:05.370 --> 00:53:13.400
emerges where people might be
reporting two and, in fact,

00:53:13.400 --> 00:53:15.230
it might have been more or less.

00:53:15.230 --> 00:53:21.020
So in this case, the bias
is towards more direct trips

00:53:21.020 --> 00:53:24.120
on the inferred side, versus
the questionnaire side.

00:53:24.120 --> 00:53:26.090
OK?

00:53:26.090 --> 00:53:28.530
So it didn't validate perfectly.

00:53:28.530 --> 00:53:30.850
But there were some
known issues with LTDS.

00:53:33.740 --> 00:53:40.120
London has since decided
that ODX is more accurate.

00:53:40.120 --> 00:53:42.410
Now they continue
LTDS because LTDS

00:53:42.410 --> 00:53:45.480
is useful for other
things, like asking

00:53:45.480 --> 00:53:48.240
about social demographics,
and trip purpose,

00:53:48.240 --> 00:53:50.280
and things like that.

00:53:50.280 --> 00:53:55.580
That doesn't obviate
the need for LTDS,

00:53:55.580 --> 00:54:02.300
but it might reduce the need
to have as many LTDS surveys.

00:54:02.300 --> 00:54:03.240
Scaling.

00:54:03.240 --> 00:54:06.870
So we've done ODX,
and we've inferred

00:54:06.870 --> 00:54:09.500
a percentage of destinations--
or we've inferred destinations

00:54:09.500 --> 00:54:12.720
for a percentage of
transactions, not all of them.

00:54:12.720 --> 00:54:14.880
And we've linked up
the ones that we could.

00:54:14.880 --> 00:54:17.820
Now, we want the full
matrix, because for planning,

00:54:17.820 --> 00:54:22.570
we want to know how many people
want to go from here to there.

00:54:22.570 --> 00:54:26.940
So there are different
methods for scaling.

00:54:26.940 --> 00:54:30.510
We have different situations.

00:54:30.510 --> 00:54:35.460
So AFC, AVL, and ODX,
together, given an OD matrix,

00:54:35.460 --> 00:54:38.970
but it's only for a
sample of passenger trips.

00:54:38.970 --> 00:54:41.730
If you have APC, that gives
you the full boarding count

00:54:41.730 --> 00:54:42.709
[AUDIO OUT].

00:54:42.709 --> 00:54:45.000
So if you have that for all
your bus fleet, then great.

00:54:45.000 --> 00:54:46.460
You can use IPF.

00:54:46.460 --> 00:54:53.240
And you could apply your
ODX matrix as the seed

00:54:53.240 --> 00:54:56.170
to make it more accurate.

00:54:56.170 --> 00:54:57.100
That's great.

00:54:57.100 --> 00:55:01.090
In some cases, you only have
APC on a fraction of vehicles

00:55:01.090 --> 00:55:02.650
or on no vehicles.

00:55:02.650 --> 00:55:05.750
And therefore, that's
a little tougher.

00:55:05.750 --> 00:55:10.940
So IPF can be applied
in this context,

00:55:10.940 --> 00:55:13.420
not just on the whole
matrix, but also

00:55:13.420 --> 00:55:18.100
on the part of the matrix
that is not inferred.

00:55:18.100 --> 00:55:20.920
So you can, essentially,
subtract from your control

00:55:20.920 --> 00:55:25.660
totals the portion of the
demand that was inferred,

00:55:25.660 --> 00:55:28.570
and apply IPF only
on the remainder.

00:55:28.570 --> 00:55:31.590
And that will scale
up only that part.

00:55:31.590 --> 00:55:33.470
OK?

00:55:33.470 --> 00:55:39.670
That's better if you don't
want to distort your seed too

00:55:39.670 --> 00:55:41.080
much, essentially.

00:55:41.080 --> 00:55:43.900
If you're not very
comfortable assuming

00:55:43.900 --> 00:55:47.050
that all the people
that are not inferred

00:55:47.050 --> 00:55:50.050
have the same demand OD
structure as the people

00:55:50.050 --> 00:55:51.880
that you do have
an inference for,

00:55:51.880 --> 00:55:53.410
then separating
those out and using

00:55:53.410 --> 00:55:55.780
IPF on the uninferred
portion will give you

00:55:55.780 --> 00:55:58.660
a more accurate result
because you're not

00:55:58.660 --> 00:56:03.850
amplifying whatever you
observed and was able to infer.

00:56:03.850 --> 00:56:08.910
So one example of
that is transfers.

00:56:08.910 --> 00:56:12.300
And we'll give an example of
that in the next few slides,

00:56:12.300 --> 00:56:13.320
actually, right here.

00:56:13.320 --> 00:56:19.110
So consider scaling when you
have transfer information

00:56:19.110 --> 00:56:21.990
from ODX, and you don't
have APC on every bus.

00:56:21.990 --> 00:56:25.050
You have it on some
buses, but not every bus.

00:56:25.050 --> 00:56:28.410
So the real complete OD
matrix is what you want.

00:56:28.410 --> 00:56:29.820
And we could split it.

00:56:29.820 --> 00:56:32.370
I'm using algebraic
notation here.

00:56:32.370 --> 00:56:35.400
The real matrix, R, can be
split into the inferred portion

00:56:35.400 --> 00:56:39.600
and the missing portion, M.

00:56:39.600 --> 00:56:40.650
And the missing portion--

00:56:40.650 --> 00:56:42.191
there's two reasons
for missing data.

00:56:42.191 --> 00:56:44.160
One of them is, I
saw the boarding,

00:56:44.160 --> 00:56:46.840
but I couldn't
infer destination.

00:56:46.840 --> 00:56:49.150
So that's U, the
uninferred portion.

00:56:49.150 --> 00:56:51.296
And then there's the N,
the non-interaction part.

00:56:51.296 --> 00:56:52.920
Those are the people
that board without

00:56:52.920 --> 00:56:54.170
interacting with the fare box.

00:56:58.045 --> 00:57:02.820
We want all of R. We know I, or
at least we made an inference

00:57:02.820 --> 00:57:05.790
for I. And then we want to
estimate U and estimate N.

00:57:05.790 --> 00:57:08.910
And then we can add those two
estimates together to the I,

00:57:08.910 --> 00:57:12.230
and we'll have the estimate
of R. And that's what we want.

00:57:12.230 --> 00:57:14.490
That's what scaling
accomplishes.

00:57:14.490 --> 00:57:18.980
Now there's one critical
observation to make here.

00:57:22.710 --> 00:57:25.560
If you take a trip
on a bus line,

00:57:25.560 --> 00:57:28.320
and then you transferred
somewhere else,

00:57:28.320 --> 00:57:32.910
there will be a tap close
to your destination,

00:57:32.910 --> 00:57:35.710
shortly after your destination.

00:57:35.710 --> 00:57:38.790
So the likelihood that
you were able to make

00:57:38.790 --> 00:57:41.380
a destination inference is very
high Do you agree with that?

00:57:45.490 --> 00:57:46.874
Yes or no?

00:57:46.874 --> 00:57:49.684
AUDIENCE: [INAUDIBLE]

00:57:49.684 --> 00:57:51.850
GABRIEL SANCHEZ-MARTINEZ:
If you have some bus line,

00:57:51.850 --> 00:57:57.120
and let's say that at stop
B, there is a rail station.

00:57:57.120 --> 00:58:01.380
And you are taking the
bus line from D, C,

00:58:01.380 --> 00:58:07.680
to B. If you are actually going
to transfer to this transfer

00:58:07.680 --> 00:58:14.580
station, then you will
have a tap onto x, shortly

00:58:14.580 --> 00:58:17.426
after you get off at B. Right?

00:58:17.426 --> 00:58:18.370
OK.

00:58:18.370 --> 00:58:23.680
So given that I inferred
your origin being D,

00:58:23.680 --> 00:58:26.470
the probability that I actually
infer that your distinction was

00:58:26.470 --> 00:58:29.230
B is very high because
I have the information

00:58:29.230 --> 00:58:30.590
to make that inference.

00:58:30.590 --> 00:58:33.100
It's close in time
and in distance.

00:58:33.100 --> 00:58:34.660
It will pass the checks.

00:58:34.660 --> 00:58:37.960
So if we make the assumption
that in every case where

00:58:37.960 --> 00:58:40.750
we have a transfer,
we've successfully

00:58:40.750 --> 00:58:45.100
inferred the destination, then
we have to then say, well,

00:58:45.100 --> 00:58:48.280
then none of the people
who are uninferred

00:58:48.280 --> 00:58:49.990
had a transfer afterwards.

00:58:49.990 --> 00:58:50.490
Right?

00:58:53.430 --> 00:58:53.930
Right?

00:58:53.930 --> 00:58:54.540
OK.

00:58:54.540 --> 00:58:56.730
And what happens with--

00:58:56.730 --> 00:58:59.200
what if this is a very
popular rail station,

00:58:59.200 --> 00:59:02.670
and a lot of people take it?

00:59:02.670 --> 00:59:06.540
Then the uninferred
portion of the demand

00:59:06.540 --> 00:59:08.130
are people who don't
transfer there.

00:59:08.130 --> 00:59:13.590
And if you applied the
ODX matrix of the people

00:59:13.590 --> 00:59:16.440
that you had a
destination inference for,

00:59:16.440 --> 00:59:20.820
you would be weighing B as
the destination too much.

00:59:20.820 --> 00:59:23.340
Those people are not very
likely transferring to--

00:59:23.340 --> 00:59:26.430
some people might be getting
off at B, but fewer of them

00:59:26.430 --> 00:59:28.230
because you're looking
at the people who

00:59:28.230 --> 00:59:29.670
don't end up transferring.

00:59:29.670 --> 00:59:33.090
So it could be people that
go somewhere else around B,

00:59:33.090 --> 00:59:34.780
but the percentage
will be lower.

00:59:34.780 --> 00:59:39.690
So what we want to do is produce
destination probability matrix

00:59:39.690 --> 00:59:43.350
from the portion of I that
we inferred that was not

00:59:43.350 --> 00:59:45.850
followed by a transfer.

00:59:45.850 --> 00:59:48.280
So we prepare a
different matrix,

00:59:48.280 --> 00:59:51.970
excluding the people that
transferred after this trip.

00:59:51.970 --> 00:59:55.570
And then we use that to
scale up the remaining

00:59:55.570 --> 00:59:57.680
origins in probability.

00:59:57.680 --> 01:00:01.040
So that's what we have here,
expressed mathematically.

01:00:01.040 --> 01:00:03.572
U is the vector of
boarding locations

01:00:03.572 --> 01:00:04.780
with uninferred destinations.

01:00:04.780 --> 01:00:06.970
And we multiply it
times L bar, where

01:00:06.970 --> 01:00:10.690
L bar is a matrix of destination
probabilities of trips

01:00:10.690 --> 01:00:12.040
not followed by transfers.

01:00:12.040 --> 01:00:16.070
So that comes from
ODX, But we remove

01:00:16.070 --> 01:00:18.890
trips followed by transfers.

01:00:18.890 --> 01:00:19.490
All right?

01:00:19.490 --> 01:00:25.340
And then we have to take care
of the non-interaction trips

01:00:25.340 --> 01:00:26.780
or not observed trips.

01:00:26.780 --> 01:00:31.490
Some of them are trips
with uninferred origins.

01:00:31.490 --> 01:00:35.080
So it could be that we know that
this person was at this trip

01:00:35.080 --> 01:00:37.420
because the origin
inference failed,

01:00:37.420 --> 01:00:39.220
or it could be that the person--

01:00:39.220 --> 01:00:42.280
there's some information
that, in general,

01:00:42.280 --> 01:00:44.540
some portion of
passengers don't interact.

01:00:44.540 --> 01:00:48.010
So you want to scale everything
up by 5%, say, as an example.

01:00:48.010 --> 01:00:50.830
That could come from
surveys or from APC,

01:00:50.830 --> 01:00:53.200
if you have APC on a
portion of the fleet.

01:00:53.200 --> 01:00:57.950
So essentially, n, here,
is the scaling factor.

01:00:57.950 --> 01:01:02.410
It could be bump what you have
so far, which is I plus U,

01:01:02.410 --> 01:01:04.870
by some amount, some percentage.

01:01:04.870 --> 01:01:06.790
That's the simple
way of doing it.

01:01:06.790 --> 01:01:07.870
n could be a vector.

01:01:07.870 --> 01:01:09.880
So you could have
different scaling factors

01:01:09.880 --> 01:01:12.050
for each boarding stop.

01:01:12.050 --> 01:01:13.990
It could be a 5%
overall, or it could

01:01:13.990 --> 01:01:16.750
be there's a lot of
non-interaction at this stop,

01:01:16.750 --> 01:01:17.950
but not this stuff stop.

01:01:17.950 --> 01:01:19.660
It could be correlated to loads.

01:01:19.660 --> 01:01:20.965
So many things could happen.

01:01:20.965 --> 01:01:22.720
You can scale up this way.

01:01:22.720 --> 01:01:24.220
And now we have
everything together.

01:01:24.220 --> 01:01:27.880
So this is just
combining the terms.

01:01:27.880 --> 01:01:31.150
This is the scaling
factor for not observed,

01:01:31.150 --> 01:01:35.560
so if n is a flat
5%, this is 1.05.

01:01:35.560 --> 01:01:37.930
And then I is what
you had from ODX.

01:01:37.930 --> 01:01:44.660
And uL is the application of
the destinations improbability

01:01:44.660 --> 01:01:48.420
to the people that had origins,
but not inferred destinations.

01:01:48.420 --> 01:01:49.840
OK?

01:01:49.840 --> 01:01:53.370
Questions about this
method, the scaling method?

01:01:53.370 --> 01:01:57.690
This for one trip, or for
bus trips together, say.

01:01:57.690 --> 01:02:00.860
It's not journey-level scaling.

01:02:00.860 --> 01:02:03.620
So let's move on to
journey-level scaling.

01:02:03.620 --> 01:02:06.080
So now we're getting a
little more complicated.

01:02:06.080 --> 01:02:10.760
So we have journeys, which
include full itineraries

01:02:10.760 --> 01:02:13.370
of people boarding
at one location,

01:02:13.370 --> 01:02:16.640
or entering a station in one
location, doing several trips,

01:02:16.640 --> 01:02:18.396
including transfers, possibly.

01:02:18.396 --> 01:02:20.270
And each of those is
considered an itinerary.

01:02:20.270 --> 01:02:23.960
An itinerary could be one stage,
or could be multiple stages

01:02:23.960 --> 01:02:26.180
linked together with transfers.

01:02:26.180 --> 01:02:31.910
So again, we have
inferred itineraries

01:02:31.910 --> 01:02:33.260
for a portion of the demand.

01:02:33.260 --> 01:02:37.280
But we want to scale up the
demand, knowing control totals,

01:02:37.280 --> 01:02:40.070
but at the itinerary level,
because we have information

01:02:40.070 --> 01:02:41.280
about itineraries.

01:02:41.280 --> 01:02:43.340
So why not do it that way?

01:02:43.340 --> 01:02:44.760
It could be more accurate.

01:02:44.760 --> 01:02:49.340
So it's challenging because
there are many possibilities.

01:02:49.340 --> 01:02:52.460
And some places that
people go through

01:02:52.460 --> 01:02:55.260
don't have good control totals.

01:02:55.260 --> 01:02:57.870
But essentially, we can
follow an approach that

01:02:57.870 --> 01:03:02.100
is, in essence,
IPF but applied not

01:03:02.100 --> 01:03:07.620
to boardings and alightings,
but to the scaling

01:03:07.620 --> 01:03:08.890
factors themselves.

01:03:08.890 --> 01:03:10.980
So this is a toy example.

01:03:10.980 --> 01:03:13.440
Here's a rail line where
there's tap in and tap out.

01:03:13.440 --> 01:03:16.170
Here's a bus line where
there's only tap in.

01:03:16.170 --> 01:03:18.300
So there are many
possible itineraries

01:03:18.300 --> 01:03:19.860
that a person could have here.

01:03:19.860 --> 01:03:21.600
Going from A to
B, transfer to D,

01:03:21.600 --> 01:03:23.610
alight at E, that's
one itinerary.

01:03:23.610 --> 01:03:27.100
Go from A to C, through B,
that's another itinerary.

01:03:27.100 --> 01:03:30.390
And at each of the nodes
here, A, B, C, D, E,

01:03:30.390 --> 01:03:32.100
there might be some counts.

01:03:32.100 --> 01:03:35.520
So on D and E, we only have on
counts because people are not

01:03:35.520 --> 01:03:36.750
tapping off.

01:03:36.750 --> 01:03:41.490
On A, B, and C, we have on and
off, or entry and exit, counts.

01:03:41.490 --> 01:03:45.750
That means that there
are these count nodes, A

01:03:45.750 --> 01:03:48.630
in, B out, as two
examples, where

01:03:48.630 --> 01:03:52.070
we count how many people
go through that place.

01:03:52.070 --> 01:03:59.300
And we know from--

01:03:59.300 --> 01:04:03.620
we have, for a portion of the
people, this ODX sample here,

01:04:03.620 --> 01:04:08.840
some number of itineraries that
go through A. So this is A in.

01:04:08.840 --> 01:04:12.957
So we have some people going--

01:04:12.957 --> 01:04:14.540
a portion of those
people are inferred

01:04:14.540 --> 01:04:18.560
to have gone from A to
B, a portion to ABC,

01:04:18.560 --> 01:04:21.560
a portion on the itinerary ABDE.

01:04:21.560 --> 01:04:25.320
And then there's some portion
of it, shown here as delta A

01:04:25.320 --> 01:04:28.040
in, who are included
in the counts,

01:04:28.040 --> 01:04:33.440
but we don't have an
inference of their itinerary.

01:04:33.440 --> 01:04:34.210
OK?

01:04:34.210 --> 01:04:37.990
So what we want to do is
scale up the mixture of ODX

01:04:37.990 --> 01:04:42.360
here to make up the
total entry count.

01:04:42.360 --> 01:04:44.760
But there's a catch.

01:04:44.760 --> 01:04:47.760
These itineraries are
affecting counts elsewhere

01:04:47.760 --> 01:04:48.790
on the network.

01:04:48.790 --> 01:04:51.310
So we also have B
out, as one example.

01:04:51.310 --> 01:04:54.360
And we know that
the people on TAB

01:04:54.360 --> 01:04:58.320
also show up on the count on
B, not the people going ABC,

01:04:58.320 --> 01:04:58.890
though.

01:04:58.890 --> 01:05:00.660
Those are not included
in the count of B

01:05:00.660 --> 01:05:03.480
out because they
don't exit at B.

01:05:03.480 --> 01:05:07.950
And there are some new
itineraries showing up at B out

01:05:07.950 --> 01:05:09.600
that are not in A in.

01:05:09.600 --> 01:05:14.880
So we want to somehow match
the counts at all the places

01:05:14.880 --> 01:05:18.000
that are affected, or
that are showing up,

01:05:18.000 --> 01:05:22.200
or associated with
each itinerary,

01:05:22.200 --> 01:05:24.600
and scale the demand so
that the control totals are

01:05:24.600 --> 01:05:27.590
satisfied at all locations.

01:05:27.590 --> 01:05:30.070
So the method is similar to IPF.

01:05:30.070 --> 01:05:33.460
We prepare a binary location
itinerary incidence matrix

01:05:33.460 --> 01:05:37.510
with zeros and ones,
associating each itinerary

01:05:37.510 --> 01:05:39.790
with the count nodes.

01:05:39.790 --> 01:05:44.530
So A in, well, AB is one
itinerary that is shown there.

01:05:44.530 --> 01:05:50.150
So is ABC, ABDE, not CB, not
CBDE, not DE, as an example.

01:05:50.150 --> 01:05:53.680
So we have this big
matrix of zeros and ones.

01:05:53.680 --> 01:05:57.340
And we have two equations.

01:06:01.120 --> 01:06:06.820
Ti is the total scaled
up itinerary demand

01:06:06.820 --> 01:06:09.550
on itinerary i.

01:06:09.550 --> 01:06:11.130
And we know that
that total is going

01:06:11.130 --> 01:06:15.490
to be 1 plus the scaling
factor, or the scaling factor

01:06:15.490 --> 01:06:16.930
is 1 plus alpha, really.

01:06:16.930 --> 01:06:18.730
Alpha is the portion
over 1 that we

01:06:18.730 --> 01:06:23.560
want to scale by times the
observed or inferred flow

01:06:23.560 --> 01:06:27.310
on that itinerary i, which is t.

01:06:27.310 --> 01:06:31.690
Then we also have this other
relationship that the remaining

01:06:31.690 --> 01:06:37.270
portion of the count on a node,
which is the count on node n,

01:06:37.270 --> 01:06:40.030
the control total on
node n, minus the portion

01:06:40.030 --> 01:06:46.060
that was seen through
that place is the amount--

01:06:46.060 --> 01:06:48.490
it adds up to the sum
of all itineraries going

01:06:48.490 --> 01:06:52.295
through that place times
their scaling factors.

01:06:52.295 --> 01:06:54.670
So now we need to figure out
what the scaling factors are

01:06:54.670 --> 01:06:58.490
for each itinerary, satisfying
both of these equations.

01:06:58.490 --> 01:07:02.620
We have two
equations on vectors,

01:07:02.620 --> 01:07:05.950
we have it on control nodes, and
we also have it on itineraries.

01:07:05.950 --> 01:07:07.450
So we're back to
the same situation.

01:07:07.450 --> 01:07:13.330
We can do IPF on
itineraries and count nodes.

01:07:13.330 --> 01:07:15.090
And that's what we do.

01:07:15.090 --> 01:07:17.770
If we have better data, we could
initialized with a good seed

01:07:17.770 --> 01:07:21.200
matrix, otherwise you
could initialized to 1.

01:07:21.200 --> 01:07:29.740
We then update the estimated
count nodes, which is delta.

01:07:29.740 --> 01:07:32.680
Again, delta here
is the difference

01:07:32.680 --> 01:07:36.340
between the count of
flow through that node

01:07:36.340 --> 01:07:37.660
and the observed flow.

01:07:37.660 --> 01:07:40.700
So it's the part that
you have to scale up to.

01:07:40.700 --> 01:07:42.610
And you do that for all nodes.

01:07:42.610 --> 01:07:46.070
And then you-- oh, let's
look at what happens here.

01:07:46.070 --> 01:07:50.620
So when you apply this equation,
you calculate a delta hat

01:07:50.620 --> 01:07:51.880
right here.

01:07:51.880 --> 01:07:54.440
That is much higher,
it looks like.

01:07:54.440 --> 01:07:58.919
Yeah, it's much higher than
the actual measured delta.

01:07:58.919 --> 01:08:00.460
So you know that
that initial scaling

01:08:00.460 --> 01:08:05.860
is producing demand flow that
is too high through those nodes.

01:08:05.860 --> 01:08:07.840
And that's because
we said that alpha

01:08:07.840 --> 01:08:10.210
was 1 for all of those nodes.

01:08:10.210 --> 01:08:13.210
But it isn't, so those alphas
need to be adjusted now.

01:08:13.210 --> 01:08:14.740
So we moved to alphas.

01:08:14.740 --> 01:08:18.490
And we update alphas by
looking at, essentially,

01:08:18.490 --> 01:08:21.430
the average scaling
factor required

01:08:21.430 --> 01:08:27.399
across these control deltas
that apply to each itinerary.

01:08:27.399 --> 01:08:29.380
Not all of them apply
to each itinerary.

01:08:29.380 --> 01:08:31.930
So for itinerary
AB, you would take

01:08:31.930 --> 01:08:35.500
the average required
adjustment factor

01:08:35.500 --> 01:08:37.990
across all the deltas
that apply to AB,

01:08:37.990 --> 01:08:40.180
which are only the first two.

01:08:40.180 --> 01:08:42.310
You wouldn't include
the last three

01:08:42.310 --> 01:08:44.760
because they don't touch AB.

01:08:44.760 --> 01:08:50.120
So you calculate the average,
and you adjust the alphas.

01:08:50.120 --> 01:08:56.060
But now you're not getting
the demand that you expected,

01:08:56.060 --> 01:08:59.470
so you have to go back, and
you cycle through again.

01:08:59.470 --> 01:09:01.220
And you go back and
forth, back and forth.

01:09:01.220 --> 01:09:04.550
You apply these two
equations until you converge.

01:09:04.550 --> 01:09:07.609
And convergence in this case
means that the delta hats

01:09:07.609 --> 01:09:10.700
will match the deltas
that you measured,

01:09:10.700 --> 01:09:12.979
and that the alpha
values are not changing

01:09:12.979 --> 01:09:15.180
much between iterations.

01:09:15.180 --> 01:09:16.189
OK?

01:09:16.189 --> 01:09:22.660
So we haven't seen the
proof that this converges.

01:09:22.660 --> 01:09:24.840
It relies on an average here.

01:09:24.840 --> 01:09:29.560
So it's an introduction or
a new aspect of the method.

01:09:29.560 --> 01:09:34.670
But in every test that
we've run, it does converge.

01:09:34.670 --> 01:09:36.500
On a toy example,
where we didn't

01:09:36.500 --> 01:09:38.540
know what the actual
journeys were,

01:09:38.540 --> 01:09:41.090
because we produced
the real data,

01:09:41.090 --> 01:09:43.609
and then we hit it,
and scaled it up,

01:09:43.609 --> 01:09:50.750
we started with different
required scaling factors

01:09:50.750 --> 01:09:52.260
by itinerary.

01:09:52.260 --> 01:09:59.480
So in the blue line case,
this blue line right here,

01:09:59.480 --> 01:10:02.090
the scaling factors
required across itineraries

01:10:02.090 --> 01:10:04.050
were very similar to each other.

01:10:04.050 --> 01:10:06.750
They all needed to be scaled
up by the same amount.

01:10:06.750 --> 01:10:10.100
And what we show here is
that the solution converged

01:10:10.100 --> 01:10:13.280
very quickly, and that
the accuracy was high,

01:10:13.280 --> 01:10:16.880
because the root mean
squared error was low.

01:10:16.880 --> 01:10:17.630
OK?

01:10:17.630 --> 01:10:19.940
But then as we start
moving to differences

01:10:19.940 --> 01:10:22.940
in scaling factors
required, the algorithm

01:10:22.940 --> 01:10:24.970
did converge and
produced different alphas

01:10:24.970 --> 01:10:26.990
for each itinerary.

01:10:26.990 --> 01:10:29.960
But it took longer to
converge, and the root

01:10:29.960 --> 01:10:32.540
mean square of
the final solution

01:10:32.540 --> 01:10:34.460
was higher, which makes sense.

01:10:34.460 --> 01:10:37.280
All these methods, the
IPF founding methods

01:10:37.280 --> 01:10:39.425
amplify errors.

01:10:39.425 --> 01:10:41.550
They amplify whatever you
give it at the beginning.

01:10:41.550 --> 01:10:45.950
So if you start with
something all 1's and in fact,

01:10:45.950 --> 01:10:49.910
they are quite different from
1's or some of them are 1,

01:10:49.910 --> 01:10:52.160
and others are not, then
you're going to have a bigger

01:10:52.160 --> 01:10:54.800
error in the final solution.

01:10:54.800 --> 01:11:01.400
So this was applied
to London once again.

01:11:01.400 --> 01:11:05.710
In practice, there is
another complication.

01:11:05.710 --> 01:11:10.450
People who are
counted at each node,

01:11:10.450 --> 01:11:13.210
they don't all finish
their journeys,

01:11:13.210 --> 01:11:18.880
or they don't all start their
journeys in the time band

01:11:18.880 --> 01:11:22.660
that you are including
the counts in.

01:11:22.660 --> 01:11:26.620
So if you do a trip
that takes a whole hour,

01:11:26.620 --> 01:11:28.780
you might be seeing
tapping in here,

01:11:28.780 --> 01:11:32.590
and then you might end up
tapping out at the next hour.

01:11:32.590 --> 01:11:35.530
So you need control totals,
in this case, by the hour.

01:11:35.530 --> 01:11:39.950
We were looking at hour scaling,
scaling of demand every hour.

01:11:39.950 --> 01:11:45.550
But you need to adjust
the control totals to get

01:11:45.550 --> 01:11:48.010
what percentage of people
who are tapping out

01:11:48.010 --> 01:11:51.640
at this location
actually started

01:11:51.640 --> 01:11:53.680
their journey in that hour.

01:11:53.680 --> 01:11:56.380
How many of them actually
started on the hour before?

01:11:56.380 --> 01:11:58.180
So there was an
offset correction,

01:11:58.180 --> 01:12:00.200
and this is what is
being shown here.

01:12:00.200 --> 01:12:04.000
Here you have raw entries and
raw exits in dashed lines.

01:12:04.000 --> 01:12:07.270
And the correction essentially
shifted those entries

01:12:07.270 --> 01:12:09.930
backwards in time a little
bit, so that the control totals

01:12:09.930 --> 01:12:11.260
matched.

01:12:11.260 --> 01:12:13.876
And then you can run the journey
scaling as we just showed.

01:12:17.050 --> 01:12:21.430
And the results, we don't have
ground truth data in this case.

01:12:21.430 --> 01:12:22.630
You could run a survey.

01:12:22.630 --> 01:12:25.060
I guess LTDS, in some
ways, is ground truth,

01:12:25.060 --> 01:12:26.610
but it's a low sample.

01:12:26.610 --> 01:12:29.470
The overall scaling
required was about 50%.

01:12:29.470 --> 01:12:33.950
You can see the 3/2 line here.

01:12:33.950 --> 01:12:38.110
One way of validating it
was to run it only on rail.

01:12:38.110 --> 01:12:43.540
Because rail has OND, we can
run IPF on the rail matrix,

01:12:43.540 --> 01:12:47.650
because you have the control
totals for all the gates

01:12:47.650 --> 01:12:48.750
in and out.

01:12:48.750 --> 01:12:51.490
So there's no
complication of the bus.

01:12:51.490 --> 01:12:53.200
You can run IPF on that.

01:12:53.200 --> 01:12:57.310
And it aligned very well with
the more sophisticated solution

01:12:57.310 --> 01:13:02.710
of running this by proportional
fitting on the itinerary

01:13:02.710 --> 01:13:07.570
scaling factors, instead
of the simpler IPF method.

01:13:07.570 --> 01:13:09.670
Presumably, the errors
that you see here

01:13:09.670 --> 01:13:11.410
that are slightly
off the diagonal

01:13:11.410 --> 01:13:14.050
are improvements in accuracy.

01:13:14.050 --> 01:13:17.830
Because instead of starting
from, say, all 1's you

01:13:17.830 --> 01:13:23.080
are using good information
about a seed matrix from ODX.

01:13:23.080 --> 01:13:26.080
So the accuracy should
have been improving.

01:13:26.080 --> 01:13:32.419
We don't have, again, the ground
truth to assert that measure,

01:13:32.419 --> 01:13:33.835
how close are we
about to reality.

01:13:37.830 --> 01:13:40.670
And one application
of this, here's

01:13:40.670 --> 01:13:48.610
a chart showing all the origins.

01:13:48.610 --> 01:13:50.550
So it's like a
heat map of London.

01:13:50.550 --> 01:13:56.880
And a darker color of
red shading each cell

01:13:56.880 --> 01:13:58.590
shows a higher
proportion of people

01:13:58.590 --> 01:14:01.890
originating at that location and
going to Oxford Circus, which

01:14:01.890 --> 01:14:03.640
is right here in the middle.

01:14:03.640 --> 01:14:05.970
So for a planner,
looking at this

01:14:05.970 --> 01:14:08.430
and knowing if I
want to know where

01:14:08.430 --> 01:14:13.260
people are coming from to
Oxford circle, here's a map.

01:14:13.260 --> 01:14:17.620
And you can do is by time band,
so only for the AM peak or--

01:14:17.620 --> 01:14:20.720
there's many applications of
this origin destination data.

01:14:20.720 --> 01:14:24.140
I'm just showing you one here.

01:14:24.140 --> 01:14:29.600
And here are some references,
so Jay Gordon's thesis,

01:14:29.600 --> 01:14:32.300
a paper he wrote.

01:14:32.300 --> 01:14:36.620
The Southwick reference is
for the scaling of buses

01:14:36.620 --> 01:14:39.690
without the transfer demand.

01:14:39.690 --> 01:14:41.930
So if you want to
read more about that,

01:14:41.930 --> 01:14:43.820
that's the write up.

01:14:43.820 --> 01:14:47.990
And then I wrote a
paper on the inference

01:14:47.990 --> 01:14:49.850
of destinations using
dynamic programming,

01:14:49.850 --> 01:14:51.680
instead of closest node.

01:14:51.680 --> 01:14:53.310
That's also published.

01:14:53.310 --> 01:14:54.380
You can get that.

01:14:54.380 --> 01:14:56.870
And then finally,
Jay's website has

01:14:56.870 --> 01:15:02.000
the this visualizations for
London, and Boston, and yeah.

01:15:02.000 --> 01:15:04.610
So you can have fun
looking at that.

01:15:07.380 --> 01:15:07.940
All right.

01:15:07.940 --> 01:15:09.440
Do we have any
questions about this?

01:15:13.120 --> 01:15:16.160
We can watch the
animations again.

01:15:16.160 --> 01:15:18.960
And maybe now we really know--

01:15:18.960 --> 01:15:22.670
now we really appreciate
what went into it.

01:15:22.670 --> 01:15:24.970
AUDIENCE: So I know
there's a number

01:15:24.970 --> 01:15:29.380
of old systems [AUDIO OUT]
a lot of newer systems

01:15:29.380 --> 01:15:31.840
are just doing proof of payment.

01:15:31.840 --> 01:15:34.380
So in that case,
they only can use--

01:15:34.380 --> 01:15:36.280
GABRIEL SANCHEZ-MARTINEZ:
So some new systems

01:15:36.280 --> 01:15:37.720
are proof of payment as well.

01:15:37.720 --> 01:15:39.220
AUDIENCE: Right.

01:15:39.220 --> 01:15:41.054
And in that case, they
can only use APC to--

01:15:41.054 --> 01:15:42.511
GABRIEL SANCHEZ-MARTINEZ:
So right.

01:15:42.511 --> 01:15:43.360
You can have APC.

01:15:43.360 --> 01:15:46.490
APC has some issues, especially
when the vehicle is crowded.

01:15:46.490 --> 01:15:48.430
Some people block APC sensors.

01:15:48.430 --> 01:15:51.490
So you could have--

01:15:51.490 --> 01:15:54.550
if it's proof of
payment, manual surveys

01:15:54.550 --> 01:15:57.942
is the other alternative.

01:15:57.942 --> 01:15:58.441
Yeah.

01:16:01.190 --> 01:16:04.510
And proof of payment is
something we can debate.

01:16:04.510 --> 01:16:06.470
It has benefits and [AUDIO OUT].

01:16:06.470 --> 01:16:08.750
So on the data
collections side, that's

01:16:08.750 --> 01:16:11.890
a clear disadvantage
of proof of payment.

01:16:11.890 --> 01:16:13.430
Yeah.

01:16:13.430 --> 01:16:17.600
AUDIENCE: So for the scaling--

01:16:17.600 --> 01:16:19.810
GABRIEL SANCHEZ-MARTINEZ:
Which scaling method?

01:16:19.810 --> 01:16:21.720
AUDIENCE: The slide 41

01:16:21.720 --> 01:16:23.860
GABRIEL
SANCHEZ-MARTINEZ: 41, OK.

01:16:23.860 --> 01:16:27.250
AUDIENCE: You've got an
itinerary and an itinerary, so

01:16:27.250 --> 01:16:29.000
how many itineraries
do you have?

01:16:29.000 --> 01:16:30.660
GABRIEL SANCHEZ-MARTINEZ:
Oh many, many, many, many.

01:16:30.660 --> 01:16:31.535
AUDIENCE: [INAUDIBLE]

01:16:31.535 --> 01:16:35.630
GABRIEL SANCHEZ-MARTINEZ:
Any possible combination of--

01:16:35.630 --> 01:16:37.380
I don't know if
I have that here.

01:16:37.380 --> 01:16:40.600
AUDIENCE: This is only
one example of one trip.

01:16:40.600 --> 01:16:42.100
GABRIEL SANCHEZ-MARTINEZ:
Yeah, so--

01:16:42.100 --> 01:16:42.630
AUDIENCE: So you have--

01:16:42.630 --> 01:16:43.280
GABRIEL SANCHEZ-MARTINEZ:
So we know

01:16:43.280 --> 01:16:45.590
that there are
trillions of solutions

01:16:45.590 --> 01:16:47.660
that satisfy the control total.

01:16:47.660 --> 01:16:50.090
I forget how many
unique itineraries there

01:16:50.090 --> 01:16:52.730
are, but many, many, many.

01:16:52.730 --> 01:16:58.650
It's a large number in a city
like London, particularly.

01:16:58.650 --> 01:17:00.530
AUDIENCE: So for
this method, you--

01:17:00.530 --> 01:17:01.905
GABRIEL
SANCHEZ-MARTINEZ: So this

01:17:01.905 --> 01:17:03.560
is a computationally
intense activity.

01:17:03.560 --> 01:17:05.730
Yeah.

01:17:05.730 --> 01:17:09.219
AUDIENCE: You need
the APC information.

01:17:09.219 --> 01:17:10.760
GABRIEL SANCHEZ-MARTINEZ:
On bus, you

01:17:10.760 --> 01:17:11.930
would want to have that.

01:17:11.930 --> 01:17:15.380
That would be one control total
that you could use for bus.

01:17:15.380 --> 01:17:17.630
This method is flexible,
though, because it

01:17:17.630 --> 01:17:20.870
doesn't require that you have
control totals everywhere.

01:17:20.870 --> 01:17:23.967
You just use whatever
control total you trust.

01:17:23.967 --> 01:17:27.260
So say, if you didn't
have APC on buses,

01:17:27.260 --> 01:17:30.000
then you would only use
the control total on rail.

01:17:30.000 --> 01:17:31.700
If you have APC
on some buses, you

01:17:31.700 --> 01:17:34.100
could use the control
totals on those buses

01:17:34.100 --> 01:17:36.890
to improve the
scaling information.

01:17:36.890 --> 01:17:42.446
But it doesn't require that
all the places have counts.

01:17:42.446 --> 01:17:43.320
Does that make sense?

01:17:43.320 --> 01:17:48.330
Because you have, essentially,
a list of count nodes.

01:17:48.330 --> 01:17:51.810
And that list is not necessarily
a complete list of places

01:17:51.810 --> 01:17:53.650
that people go through.

01:17:53.650 --> 01:17:58.740
And then you have all the list
of itineraries that you see,

01:17:58.740 --> 01:18:00.170
and you want to associate those.

01:18:06.330 --> 01:18:07.980
Again, no proof of
convergence here.

01:18:07.980 --> 01:18:11.310
But [AUDIO OUT].

01:18:11.310 --> 01:18:14.280
And on the toy
examples we run, we

01:18:14.280 --> 01:18:20.010
observe these properties of
convergence rate and error

01:18:20.010 --> 01:18:26.080
at the end, which is consistent
with normal or more traditional

01:18:26.080 --> 01:18:28.830
applications of IPF.

01:18:28.830 --> 01:18:32.596
So we can hypothesize that
it behaves very similarly.

01:18:35.255 --> 01:18:36.130
Question in the back.

01:18:36.130 --> 01:18:39.640
AUDIENCE: [INAUDIBLE] generate a
list of reasonable itineraries.

01:18:39.640 --> 01:18:40.070
GABRIEL SANCHEZ-MARTINEZ:
It's not

01:18:40.070 --> 01:18:41.444
a list of reasonable
itineraries.

01:18:41.444 --> 01:18:43.650
It's a list of
inferred itineraries.

01:18:43.650 --> 01:18:47.000
So it's an area
that was inferred

01:18:47.000 --> 01:18:49.010
because I saw you
tapping in here,

01:18:49.010 --> 01:18:51.710
out there, then transferring,
taking this bus,

01:18:51.710 --> 01:18:53.870
and maybe you took three
other buses after that.

01:18:53.870 --> 01:18:55.160
Maybe one person did that.

01:18:55.160 --> 01:18:56.210
AUDIENCE: [INAUDIBLE]

01:18:56.210 --> 01:18:57.240
GABRIEL SANCHEZ-MARTINEZ:
That's one itinerary

01:18:57.240 --> 01:18:58.114
that's included here.

01:18:58.114 --> 01:19:00.270
AUDIENCE: So do we just
ignore the possibility

01:19:00.270 --> 01:19:02.634
that the people with
uninferred destinations have--

01:19:02.634 --> 01:19:04.550
GABRIEL SANCHEZ-MARTINEZ:
Something different?

01:19:04.550 --> 01:19:06.140
Yes.

01:19:06.140 --> 01:19:08.300
You could generate
every combination,

01:19:08.300 --> 01:19:10.520
but that's maybe intractable.

01:19:10.520 --> 01:19:13.130
So what we're doing
is only considering

01:19:13.130 --> 01:19:17.120
itineraries that were observed,
and only scaling those up.

01:19:19.700 --> 01:19:22.350
But that's a good point.

01:19:22.350 --> 01:19:24.780
There might be some
people that were counted,

01:19:24.780 --> 01:19:27.450
but didn't have an inference,
and their itinerary

01:19:27.450 --> 01:19:29.230
might be completely different.

01:19:29.230 --> 01:19:31.730
And this method
doesn't handle that.

01:19:36.926 --> 01:19:42.370
AUDIENCE: How different is
[AUDIO OUT] the scaling matrix,

01:19:42.370 --> 01:19:45.990
compared with the traditional
matrix that you can calculate

01:19:45.990 --> 01:19:50.010
with the sample [INAUDIBLE]
to infer the alighting?

01:19:50.010 --> 01:19:52.527
GABRIEL SANCHEZ-MARTINEZ:
You mean the traditional IPF?

01:19:52.527 --> 01:19:53.110
AUDIENCE: Yes.

01:19:53.110 --> 01:19:55.110
Are you [INAUDIBLE]?

01:19:55.110 --> 01:19:56.300
Is it very different?

01:19:56.300 --> 01:19:56.810
Or is--

01:19:56.810 --> 01:19:58.018
GABRIEL SANCHEZ-MARTINEZ: No.

01:19:58.018 --> 01:20:02.530
Well, it depends on the
accuracy of your IPF procedure

01:20:02.530 --> 01:20:06.890
and the accuracy of
your control totals.

01:20:06.890 --> 01:20:10.030
Yeah, if your seed
matrix is very good,

01:20:10.030 --> 01:20:14.160
then IPF should
[AUDIO OUT] well.

01:20:14.160 --> 01:20:18.900
[AUDIO OUT] any applications
of IPF, we just seed it to one

01:20:18.900 --> 01:20:20.220
and run it.

01:20:20.220 --> 01:20:23.910
And you have the issue
of the transfer, which

01:20:23.910 --> 01:20:26.880
would plague that, and it
would amplify the error

01:20:26.880 --> 01:20:30.540
because presumably,
your seed matrix--

01:20:30.540 --> 01:20:32.850
a lot of people might be
getting off here to transfer,

01:20:32.850 --> 01:20:35.040
and you may not be
considering that.

01:20:35.040 --> 01:20:37.110
If you use IPF to scale
up the inferred portion,

01:20:37.110 --> 01:20:40.650
for example, that would happen.

01:20:40.650 --> 01:20:44.760
So I think through
our validation,

01:20:44.760 --> 01:20:49.650
we have seen that
there's more reason

01:20:49.650 --> 01:20:53.070
to trust the inference
algorithms scaled

01:20:53.070 --> 01:20:57.960
up than to just take control
totals and scale those up.

01:20:57.960 --> 01:20:59.690
From an information
theory perspective,

01:20:59.690 --> 01:21:02.370
we're adding information,
so you should--

01:21:02.370 --> 01:21:05.550
even if we can't provide
evidence that absolutely, it

01:21:05.550 --> 01:21:08.070
is the case, from
information theory,

01:21:08.070 --> 01:21:09.750
we see we're consuming
more information

01:21:09.750 --> 01:21:12.300
to generate this estimate,
then that the estimate

01:21:12.300 --> 01:21:15.630
should be more accurate.

01:21:15.630 --> 01:21:19.440
But it depends on whether your
inferences were correct or not.

01:21:19.440 --> 01:21:23.150
That depends on the assumptions
you made about people.

01:21:23.150 --> 01:21:24.980
So many assumptions
go into this,

01:21:24.980 --> 01:21:28.602
and it's hard to say exactly.

01:21:32.570 --> 01:21:33.210
All right.

01:21:33.210 --> 01:21:35.940
So do you want to
look at Boston?

01:21:35.940 --> 01:21:37.716
Or--

01:21:43.870 --> 01:21:45.370
GABRIEL SANCHEZ-MARTINEZ:
Let's see.

01:21:48.250 --> 01:21:51.840
Turn it off.

01:21:51.840 --> 01:21:54.002
All right, so here's Boston.

01:22:06.900 --> 01:22:09.370
GABRIEL SANCHEZ-MARTINEZ:
It's a much smaller city.

01:22:09.370 --> 01:22:11.830
And this is an earlier
video where we still

01:22:11.830 --> 01:22:13.660
had some issues with ODX.

01:22:13.660 --> 01:22:16.750
And so some of them,
you could perhaps

01:22:16.750 --> 01:22:19.202
detect by looking
at the animation.

01:22:19.202 --> 01:22:21.160
So that's another
application of this animation

01:22:21.160 --> 01:22:25.830
is to find issues
with the algorithm.

01:22:25.830 --> 01:22:28.170
In this case, people
are being routed

01:22:28.170 --> 01:22:29.980
through the actual paths.

01:22:29.980 --> 01:22:32.610
So that's another difference
between the video of London,

01:22:32.610 --> 01:22:35.384
where people were
bursting in linearly.

01:22:35.384 --> 01:22:36.360
AUDIENCE: Right.

01:22:36.360 --> 01:22:38.568
GABRIEL SANCHEZ-MARTINEZ:
Here, it looks less bursty,

01:22:38.568 --> 01:22:42.000
and part of that is that the
nodes are moving through paths.

01:22:42.000 --> 01:22:45.480
AUDIENCE: You see these thick
dots along the red line.

01:22:45.480 --> 01:22:47.095
GABRIEL SANCHEZ-MARTINEZ: Yeah.

01:22:47.095 --> 01:22:47.580
AUDIENCE: [INAUDIBLE]

01:22:47.580 --> 01:22:48.871
GABRIEL SANCHEZ-MARTINEZ: Yeah.

01:22:50.580 --> 01:22:56.630
Some of the issues are
very slowly-moving dots.

01:22:56.630 --> 01:23:00.520
So you see some green
dots that barely move.

01:23:00.520 --> 01:23:04.490
So those are errors that
have been fixed already,

01:23:04.490 --> 01:23:07.250
and we should run
this program again

01:23:07.250 --> 01:23:11.180
to generate a new animation
without those errors.

01:23:11.180 --> 01:23:13.790
But yeah, you see
the same pattern.

01:23:13.790 --> 01:23:15.920
This is now late at night.

01:23:15.920 --> 01:23:20.300
So you can see where people
are still at work, or perhaps

01:23:20.300 --> 01:23:21.520
at restaurants, or bars.

01:23:21.520 --> 01:23:28.380
And Boston system
just shuts down.

01:23:28.380 --> 01:23:33.170
So it's not as alive at night
because we're only looking

01:23:33.170 --> 01:23:37.430
at people who would take the T.

01:23:37.430 --> 01:23:40.080
All right?

01:23:40.080 --> 01:23:40.710
Thank you.

01:23:40.710 --> 01:23:42.480
And if you have
questions, I'll take them.

01:23:42.480 --> 01:23:47.090
Otherwise, I'll
see you next class.