WEBVTT

00:00:00.070 --> 00:00:01.780
The following
content is provided

00:00:01.780 --> 00:00:04.030
under a Creative
Commons license.

00:00:04.030 --> 00:00:06.870
Your support will help MIT
OpenCourseWare continue

00:00:06.870 --> 00:00:10.730
to offer high quality
educational resources for free.

00:00:10.730 --> 00:00:13.330
To make a donation or
view additional materials

00:00:13.330 --> 00:00:17.217
from hundreds of MIT courses,
visit MIT OpenCourseWare

00:00:17.217 --> 00:00:17.842
at ocw.mit.edu.

00:00:26.830 --> 00:00:27.959
PROFESSOR: All right.

00:00:27.959 --> 00:00:29.250
We should probably get started.

00:00:33.230 --> 00:00:37.960
So RNA plays important
regulatory and catalytic roles

00:00:37.960 --> 00:00:40.860
in biology, and so it's
important to understand

00:00:40.860 --> 00:00:41.450
its function.

00:00:41.450 --> 00:00:45.462
And so that's going to be the
main theme of today's lecture.

00:00:45.462 --> 00:00:46.920
But before we get
to that, I wanted

00:00:46.920 --> 00:00:51.840
to briefly review what
we went over last time.

00:00:51.840 --> 00:00:55.160
So we talked about hidden
Markov models, some

00:00:55.160 --> 00:00:59.670
of the terminology, thinking
of them as generative models,

00:00:59.670 --> 00:01:03.160
terminology of the different
types of parameters,

00:01:03.160 --> 00:01:06.050
the initiation probabilities
and transition probabilities

00:01:06.050 --> 00:01:07.320
and so forth.

00:01:07.320 --> 00:01:11.200
And Viterbi algorithm, just
sort of the core algorithm

00:01:11.200 --> 00:01:16.077
used whenever you apply HMMs.

00:01:16.077 --> 00:01:18.160
Essentially, you always
use the Viterbi algorithm.

00:01:18.160 --> 00:01:22.410
And then we gave as an
example the CpG Island HMM,

00:01:22.410 --> 00:01:25.740
which is admittedly a
bit of a toy example.

00:01:25.740 --> 00:01:28.397
It's not really
used in practice,

00:01:28.397 --> 00:01:29.730
that illustrates the principles.

00:01:29.730 --> 00:01:32.650
And then today we're going
to talk about a couple

00:01:32.650 --> 00:01:35.246
of real world HMMs.

00:01:35.246 --> 00:01:36.620
But before we get
to that, I just

00:01:36.620 --> 00:01:38.300
wanted to-- sort
of toward the end,

00:01:38.300 --> 00:01:40.930
we talked about the
computational complexity

00:01:40.930 --> 00:01:45.920
of the algorithm, and concluded
that if you have a case state

00:01:45.920 --> 00:01:51.050
HMM run on a sequence of length
L, it's order k squared L.

00:01:51.050 --> 00:01:55.660
And this diagram is helpful
to many people in sort

00:01:55.660 --> 00:01:56.910
of thinking about that.

00:01:56.910 --> 00:02:00.520
So you can have transitions
from any state--

00:02:00.520 --> 00:02:03.000
for example, from this state--
to any of the other five

00:02:03.000 --> 00:02:04.754
states, and there's
five-state HMM.

00:02:04.754 --> 00:02:06.170
And when you're
doing the Viterbi,

00:02:06.170 --> 00:02:10.750
you have to maximize over the
five possible input transitions

00:02:10.750 --> 00:02:11.440
into each state.

00:02:11.440 --> 00:02:14.435
And so the full
set of computations

00:02:14.435 --> 00:02:19.070
that you have to do from going
from position i to i plus 1

00:02:19.070 --> 00:02:20.025
is k squared.

00:02:20.025 --> 00:02:20.900
Does that make sense?

00:02:20.900 --> 00:02:23.890
And then there's L different
transitions you have to do,

00:02:23.890 --> 00:02:26.670
so it's k squared L.

00:02:26.670 --> 00:02:30.670
Any questions about that?

00:02:30.670 --> 00:02:31.860
OK.

00:02:31.860 --> 00:02:35.900
All right and, so the example
that we gave is shown here.

00:02:35.900 --> 00:02:40.870
And what we did was to take an
example sort of where you could

00:02:40.870 --> 00:02:44.870
sort of see the answer--
not immediately see it,

00:02:44.870 --> 00:02:49.900
but if we're thinking about it
a little, figure out the answer.

00:02:49.900 --> 00:02:53.010
And then we talked about how
the Viterbi algorithm actually

00:02:53.010 --> 00:02:57.940
works, and why it makes the
transitions at the right place.

00:03:00.960 --> 00:03:05.080
It seems to intuitively like it
would make a transition later,

00:03:05.080 --> 00:03:07.180
but actually transitions
at the right place.

00:03:07.180 --> 00:03:09.000
And one way to
think about that is

00:03:09.000 --> 00:03:16.540
that these are not hard and
fast decisions because you're

00:03:16.540 --> 00:03:18.540
optimizing two different paths.

00:03:18.540 --> 00:03:21.840
At every state, you're
considering two possibilities.

00:03:21.840 --> 00:03:26.140
And so you explore the
possibility of-- the first time

00:03:26.140 --> 00:03:29.710
you hit a c, you explore the
possibility of transitioning

00:03:29.710 --> 00:03:32.080
from genome to
island, but you're not

00:03:32.080 --> 00:03:35.510
confirming whether you're going
to do that yet until you get

00:03:35.510 --> 00:03:38.410
to the end and see whether that
path ends up having a higher

00:03:38.410 --> 00:03:42.060
probability at the end of the
sequence than the alternative.

00:03:42.060 --> 00:03:45.570
So that's sort of one way
of thinking about that.

00:03:45.570 --> 00:03:48.920
Any questions about
this sort of thing,

00:03:48.920 --> 00:03:53.470
how to understand when a
transition will be made?

00:03:53.470 --> 00:03:56.760
And I want to emphasize,
for this simple HMM,

00:03:56.760 --> 00:03:58.840
we talked about
you can kind of see

00:03:58.840 --> 00:04:00.220
what the answer's going to be.

00:04:00.220 --> 00:04:05.080
But if you have any HMM, any
sort of interesting real world

00:04:05.080 --> 00:04:07.550
HMM with multiple
states, there's

00:04:07.550 --> 00:04:09.600
no way you're going
to be able to see it.

00:04:09.600 --> 00:04:11.558
Maybe you could guess
what the answer might be,

00:04:11.558 --> 00:04:14.290
but you're not going to be able
to be confident of what that

00:04:14.290 --> 00:04:16.942
is, which is why you have
to actually implement it.

00:04:19.840 --> 00:04:21.940
All right, good.

00:04:21.940 --> 00:04:23.840
Let's talk about a couple
of real world HMMs.

00:04:23.840 --> 00:04:26.730
So I mentioned gene finding.

00:04:26.730 --> 00:04:30.560
That's been a popular
application of HMMs,

00:04:30.560 --> 00:04:32.100
both in prokaryotes
and eukaryotes.

00:04:32.100 --> 00:04:34.400
There's some examples
discussed in the text.

00:04:34.400 --> 00:04:39.610
Another very popular application
are so-called profile HMMs.

00:04:39.610 --> 00:04:43.440
And so this is a
hidden Markov model

00:04:43.440 --> 00:04:47.570
that's made based on a multiple
alignment of proteins which

00:04:47.570 --> 00:04:49.887
have a related function
or share a common domain.

00:04:49.887 --> 00:04:51.470
For example, there's
a database called

00:04:51.470 --> 00:04:56.280
Pfam, which includes
profile HMMs for hundreds

00:04:56.280 --> 00:04:58.740
of different types
of protein domains.

00:04:58.740 --> 00:05:03.210
And so once you have many
dozens or hundreds or thousands

00:05:03.210 --> 00:05:05.020
of examples of a
protein domain, you

00:05:05.020 --> 00:05:07.270
can learn lots of
things about it--

00:05:07.270 --> 00:05:11.110
not just what the
frequencies of each residue

00:05:11.110 --> 00:05:12.910
are in each position,
but how likely

00:05:12.910 --> 00:05:15.460
you are to have an
insertion at each position.

00:05:15.460 --> 00:05:17.330
And if you do have
an insertion, what

00:05:17.330 --> 00:05:20.200
types of amino acid residues
are likely to be inserted

00:05:20.200 --> 00:05:21.970
in that position,
and how often you

00:05:21.970 --> 00:05:25.060
are likely to have a
deletion at each position

00:05:25.060 --> 00:05:26.240
in the multiple alignment.

00:05:26.240 --> 00:05:30.460
And so the challenge then
is to take a query protein

00:05:30.460 --> 00:05:35.080
and to thread it through all
of these profile HMMs and ask,

00:05:35.080 --> 00:05:37.660
does it have a significant
match to any of them?

00:05:37.660 --> 00:05:40.280
And so that's basically
how Pfam works.

00:05:40.280 --> 00:05:42.580
And the nice thing about
HMMs is that they allow you

00:05:42.580 --> 00:05:46.040
to-- if you want to have
the same probability

00:05:46.040 --> 00:05:49.880
of an insertion at each position
in your multiple alignment,

00:05:49.880 --> 00:05:50.550
you can do that.

00:05:50.550 --> 00:05:53.390
But if you have enough data
to observe that there's

00:05:53.390 --> 00:05:58.630
a five-fold higher likelihood of
having an insertion at position

00:05:58.630 --> 00:06:02.000
three in a multiple alignment
than there is at position two,

00:06:02.000 --> 00:06:03.010
you can put that in.

00:06:03.010 --> 00:06:06.310
You just change
those probabilities.

00:06:06.310 --> 00:06:09.230
So in this HMM, each
of the hidden states

00:06:09.230 --> 00:06:14.860
is either an M state, which is
a match state, or an I state,

00:06:14.860 --> 00:06:15.850
or an insert state.

00:06:15.850 --> 00:06:19.520
And so those will emit
actual amino acid residues.

00:06:19.520 --> 00:06:21.240
Or it could be a
delete state, which

00:06:21.240 --> 00:06:25.190
is thought of as emitting
a dash, a placeholder

00:06:25.190 --> 00:06:27.810
in the multiple alignment.

00:06:27.810 --> 00:06:30.650
So these are also widely used.

00:06:30.650 --> 00:06:36.140
And then one of my favorite
examples-- it's fairly simple,

00:06:36.140 --> 00:06:38.530
but it turns out to
be quite useful--

00:06:38.530 --> 00:06:42.820
is the so-called
TMHMM for prediction

00:06:42.820 --> 00:06:45.200
of transmembrane
helices in protein.

00:06:45.200 --> 00:06:50.280
So we know that many,
especially eukaryotic proteins,

00:06:50.280 --> 00:06:52.500
are embedded in membranes.

00:06:52.500 --> 00:06:59.400
And there's one famous family
of seven transmembrane helix

00:06:59.400 --> 00:07:01.400
proteins, and there
are others that

00:07:01.400 --> 00:07:04.030
have one or a few
transmembrane helices.

00:07:04.030 --> 00:07:08.180
And knowing that a protein
has at least one transmembrane

00:07:08.180 --> 00:07:10.735
helix is very useful in terms
of predicting its function.

00:07:10.735 --> 00:07:12.600
You predict it's localization.

00:07:12.600 --> 00:07:15.000
And knowing that it's a seven
transmembrane helix protein

00:07:15.000 --> 00:07:16.380
is also useful.

00:07:16.380 --> 00:07:20.250
And so you want to predict
whether the protein has

00:07:20.250 --> 00:07:23.785
transmembrane helices and
what their orientation is.

00:07:23.785 --> 00:07:25.660
That is, proteins can
have their end terminus

00:07:25.660 --> 00:07:29.030
either inside the cell
or outside the cell.

00:07:29.030 --> 00:07:33.260
And then of course, where
exactly those helices are.

00:07:33.260 --> 00:07:38.240
And this program has
about a 97% accuracy,

00:07:38.240 --> 00:07:41.650
according to [? the author. ?]
So it works very well.

00:07:41.650 --> 00:07:44.930
So what properties
do you think--

00:07:44.930 --> 00:07:46.950
we said before that
you have to have

00:07:46.950 --> 00:07:49.310
strongly different
emission probabilities

00:07:49.310 --> 00:07:52.080
in the different hidden states
to have a chance of being

00:07:52.080 --> 00:07:54.580
able to predict
things accurately.

00:07:54.580 --> 00:07:56.570
So what properties do
you think are captured

00:07:56.570 --> 00:08:00.210
in a model of
transmembrane helices?

00:08:00.210 --> 00:08:01.780
What types of
emission probabilities

00:08:01.780 --> 00:08:05.956
would you when you have for the
different states in this model?

00:08:05.956 --> 00:08:06.456
Anyone?

00:08:09.830 --> 00:08:13.690
So for this protein,
what kind of residues

00:08:13.690 --> 00:08:15.730
would you have in here?

00:08:15.730 --> 00:08:16.970
Oops, sorry.

00:08:16.970 --> 00:08:19.300
I'm having trouble
with this thing.

00:08:19.300 --> 00:08:21.550
All right, here in the
middle of the membrane,

00:08:21.550 --> 00:08:24.187
what kind of residues are
you going to see there?

00:08:24.187 --> 00:08:25.062
AUDIENCE: [INAUDIBLE]

00:08:25.062 --> 00:08:26.200
PROFESSOR: Those are
going to be hydrophobic.

00:08:26.200 --> 00:08:26.700
Exactly.

00:08:26.700 --> 00:08:30.450
And what about right
where the helix emerges

00:08:30.450 --> 00:08:33.310
from the membrane?

00:08:33.310 --> 00:08:35.564
[INAUDIBLE] charge residue's
there to kind of anchor

00:08:35.564 --> 00:08:38.276
it and prevent it from
sliding back into membrane.

00:08:38.276 --> 00:08:43.860
And then in general, both on
the exterior and interior,

00:08:43.860 --> 00:08:46.520
you'll tend to have more
hydrophilic residues.

00:08:46.520 --> 00:08:50.680
So that's sort of
the basis of TMHMM.

00:08:50.680 --> 00:08:52.390
So this is the structure.

00:08:52.390 --> 00:08:56.680
And you'll notice that these are
not exactly the hidden states

00:08:56.680 --> 00:09:00.160
that correspond to individual
amino acid residues.

00:09:00.160 --> 00:09:03.100
These are like meta
states, just to illustrate

00:09:03.100 --> 00:09:04.710
the overall structure.

00:09:04.710 --> 00:09:07.880
I'll show you the actual
states on the next slide.

00:09:07.880 --> 00:09:10.450
But these were the
types of states

00:09:10.450 --> 00:09:14.020
that the author, Anders
[? Crow ?], decided to model.

00:09:14.020 --> 00:09:20.000
So he has sort of a-- focuses
here on the helix core.

00:09:20.000 --> 00:09:23.710
There's also a cytoplasmic
cap and a non-cytoplasmic cap.

00:09:23.710 --> 00:09:25.660
Oops, didn't mean that.

00:09:25.660 --> 00:09:31.020
And then there's sort of a
globular domain on each side--

00:09:31.020 --> 00:09:32.720
both on the cytoplasmic
side, or you

00:09:32.720 --> 00:09:35.600
could have one on the
non-cytoplasmic side.

00:09:35.600 --> 00:09:40.480
OK, so there's going to be
different compositions in each

00:09:40.480 --> 00:09:41.460
of these regions.

00:09:41.460 --> 00:09:44.740
Now one of the things we
talked about with HMMs

00:09:44.740 --> 00:09:48.169
is that if you were-- now let's
think about the helix core.

00:09:48.169 --> 00:09:49.710
The simplest model
you might think of

00:09:49.710 --> 00:09:53.120
would be to have sort
of a helix state,

00:09:53.120 --> 00:09:56.520
and then to allow that
state to recur to itself.

00:09:56.520 --> 00:09:59.670
OK, so this type of thing where
you then have some transition

00:09:59.670 --> 00:10:04.350
to some sort of cap state
after, this would allow you

00:10:04.350 --> 00:10:10.590
to model helices of any length.

00:10:10.590 --> 00:10:13.200
But now how long are
transmembrane helices?

00:10:13.200 --> 00:10:15.610
What does that
distribution look like?

00:10:15.610 --> 00:10:18.800
Anyone have an idea?

00:10:18.800 --> 00:10:20.611
There's a certain
physical dimension.

00:10:20.611 --> 00:10:21.110
[INAUDIBLE]

00:10:24.800 --> 00:10:27.530
It takes a certain number
residues to get across here,

00:10:27.530 --> 00:10:30.590
and then that number
is about 20-ish.

00:10:30.590 --> 00:10:32.420
So transmembrane helices
tend to be sort of

00:10:32.420 --> 00:10:34.960
on the order of 20
plus or minus a few.

00:10:34.960 --> 00:10:37.580
And so it's totally unrealistic
to have a transmembrane helix

00:10:37.580 --> 00:10:40.430
that's, like, five
residues long.

00:10:40.430 --> 00:10:44.980
So if you run this algorithm
in generative mode,

00:10:44.980 --> 00:10:49.275
what distribution of helix
lengths will you produce?

00:10:52.697 --> 00:10:54.280
We're running in
generative mode where

00:10:54.280 --> 00:10:56.460
we're going to let,
remember, to generate

00:10:56.460 --> 00:10:58.350
a series of hidden
states and then

00:10:58.350 --> 00:11:02.750
associated amino acid sequences.

00:11:02.750 --> 00:11:05.995
It's coming from some,
let's say-- I don't know.

00:11:05.995 --> 00:11:09.650
What kind of states are there
here? [INAUDIBLE] plasmic.

00:11:09.650 --> 00:11:14.980
Let's say goes into
helix, hangs out here.

00:11:14.980 --> 00:11:17.886
I'm sorry, is there an
answer to this question?

00:11:17.886 --> 00:11:19.130
Anyone?

00:11:19.130 --> 00:11:21.470
I don't know how
long-- if I let it run,

00:11:21.470 --> 00:11:22.770
it'll generate a random number.

00:11:22.770 --> 00:11:25.710
It depends on what this
probability is here.

00:11:25.710 --> 00:11:27.940
Let's call this probability
p, and then this

00:11:27.940 --> 00:11:30.190
would be 1 minus p.

00:11:30.190 --> 00:11:34.420
OK, so obviously if
1 minus p is bigger,

00:11:34.420 --> 00:11:36.595
it'll tend to produce
longer helices.

00:11:36.595 --> 00:11:37.970
But in general,
what is the shape

00:11:37.970 --> 00:11:42.940
of the distribution there of
consecutive helical states

00:11:42.940 --> 00:11:45.778
that this model will generate?

00:11:45.778 --> 00:11:47.150
AUDIENCE: Binomial.

00:11:47.150 --> 00:11:48.050
PROFESSOR: Binomial.

00:11:48.050 --> 00:11:49.970
OK, can you explain why?

00:11:49.970 --> 00:11:55.290
AUDIENCE: Because
the helix would

00:11:55.290 --> 00:11:59.900
have to have probable--
the helix of length n

00:11:59.900 --> 00:12:05.466
would occur 1 minus
p to the n power.

00:12:05.466 --> 00:12:08.730
PROFESSOR: OK, so a helix of
length 10 with a probability

00:12:08.730 --> 00:12:12.580
of then, say, let's call it L,
for the length of the helix,

00:12:12.580 --> 00:12:19.197
equals n is 1 minus
p to the n, right?

00:12:19.197 --> 00:12:19.905
Is that binomial?

00:12:22.770 --> 00:12:24.916
Someone else?

00:12:24.916 --> 00:12:25.880
AUDIENCE: Yeah.

00:12:25.880 --> 00:12:27.564
Is it a negative binomial?

00:12:27.564 --> 00:12:28.772
PROFESSOR: Negative binomial.

00:12:28.772 --> 00:12:29.736
OK.

00:12:29.736 --> 00:12:33.110
AUDIENCE: [INAUDIBLE] states and
a helix state before moving out

00:12:33.110 --> 00:12:34.384
[INAUDIBLE].

00:12:34.384 --> 00:12:35.050
PROFESSOR: Yeah.

00:12:35.050 --> 00:12:37.630
So the distribution is
going to be like that.

00:12:37.630 --> 00:12:43.620
You have to stay in here
for n and then leave.

00:12:43.620 --> 00:12:49.242
So this is the
simplest-- you can

00:12:49.242 --> 00:12:51.450
have special cases of binomial
and negative binomial.

00:12:51.450 --> 00:12:52.950
But in general,
this distribution

00:12:52.950 --> 00:12:55.180
is called the
geometric distribution.

00:12:55.180 --> 00:12:58.430
Or a continuous version would
be the exponential distribution.

00:12:58.430 --> 00:13:01.880
So what is the shape
of this distribution?

00:13:01.880 --> 00:13:11.140
If I were to plot n down here on
this axis, and the probability

00:13:11.140 --> 00:13:14.760
that L equals n on this
axis, what kind of shape--

00:13:14.760 --> 00:13:17.920
could someone draw in the air?

00:13:17.920 --> 00:13:20.586
So you had up and then down?

00:13:20.586 --> 00:13:24.950
OK, so actually, it's
going to be just down.

00:13:31.210 --> 00:13:32.550
Like that, right?

00:13:32.550 --> 00:13:36.806
Because as n increases,
this goes down

00:13:36.806 --> 00:13:38.180
because 1 minus
p is less than 1.

00:13:38.180 --> 00:13:40.275
So it just steadily goes down.

00:13:40.275 --> 00:13:42.025
And what is the mean
of this distribution?

00:13:47.150 --> 00:13:48.608
Anyone remember this?

00:13:51.524 --> 00:13:53.940
Yeah, so there's sort
of two versions of this

00:13:53.940 --> 00:13:55.340
that you'll see.

00:13:55.340 --> 00:14:03.120
One of them is the 1 minus p
n minus 1 p, and one of them

00:14:03.120 --> 00:14:03.620
is this.

00:14:03.620 --> 00:14:08.990
And so this is the number of
failures before a success,

00:14:08.990 --> 00:14:09.970
if you will.

00:14:09.970 --> 00:14:11.650
Successes lead to the helix.

00:14:11.650 --> 00:14:14.800
And this is the number of
trials till the first success.

00:14:14.800 --> 00:14:17.190
So one of them has
a mean that's 1/p,

00:14:17.190 --> 00:14:22.030
and the other has a mean
that's 1 minus p over p.

00:14:22.030 --> 00:14:26.510
So usually, p is small, and
so those are about the same.

00:14:26.510 --> 00:14:27.150
So 1/p.

00:14:27.150 --> 00:14:29.050
You could think that
1/p is roughly right.

00:14:29.050 --> 00:14:32.520
And so if we were to model
transmembrane helices,

00:14:32.520 --> 00:14:34.360
and if transmembrane
heresies are about--

00:14:34.360 --> 00:14:37.130
I said about 20
residues long-- you

00:14:37.130 --> 00:14:46.157
would set p to what value
to get the right mean?

00:14:49.900 --> 00:14:51.770
AUDIENCE: 0.05.

00:14:51.770 --> 00:14:54.250
PROFESSOR: Yeah.

00:14:54.250 --> 00:14:55.170
0.05.

00:14:55.170 --> 00:15:01.010
1/20, so that 1 over that
will be about 20, right?

00:15:01.010 --> 00:15:04.860
And then 1 minus p
would, of course, be 0.9.

00:15:04.860 --> 00:15:07.335
So if I were to do that,
I would get a distribution

00:15:07.335 --> 00:15:10.780
that looks about like
this with a mean of 20.

00:15:10.780 --> 00:15:14.910
But if I were to then look
at real transmembrane helices

00:15:14.910 --> 00:15:16.930
and look at their
distribution, I

00:15:16.930 --> 00:15:21.220
would see something
totally different.

00:15:21.220 --> 00:15:23.000
It would probably
look like that.

00:15:23.000 --> 00:15:25.600
It would have a mean around 20.

00:15:25.600 --> 00:15:30.360
But the probability of anything
less than 15 would be 0.

00:15:30.360 --> 00:15:31.130
That's too short.

00:15:31.130 --> 00:15:35.500
It can't go across the membrane.

00:15:35.500 --> 00:15:37.680
And then again, you don't
have ones that are 40.

00:15:37.680 --> 00:15:40.180
They don't kind of wiggle around
in there and then come out.

00:15:40.180 --> 00:15:43.010
They tend to just
go straight across.

00:15:43.010 --> 00:15:46.330
So there's a problem here.

00:15:46.330 --> 00:15:51.020
You can see that if you want
to make a more accurate model,

00:15:51.020 --> 00:15:54.340
you want to not only get the
right emission probabilities

00:15:54.340 --> 00:15:57.100
with the right probabilities of
hydrophobics and hydrophilics

00:15:57.100 --> 00:15:58.240
and the different
states, but you also

00:15:58.240 --> 00:15:59.600
want to get the length right.

00:15:59.600 --> 00:16:04.470
And so the trick that--
well, actually, yeah.

00:16:04.470 --> 00:16:07.190
Can anyone think of tricks
to get the right length

00:16:07.190 --> 00:16:09.270
distribution here?

00:16:09.270 --> 00:16:11.290
How do we do better than this?

00:16:11.290 --> 00:16:14.770
Basically, hidden
Markov models where

00:16:14.770 --> 00:16:16.660
you have a state that
will recur to itself,

00:16:16.660 --> 00:16:18.580
it will always be a
geometric distribution.

00:16:18.580 --> 00:16:22.010
The only choice you have is
what is that probability.

00:16:22.010 --> 00:16:24.360
And so you can get
any mean you want,

00:16:24.360 --> 00:16:26.330
but you always get this shape.

00:16:26.330 --> 00:16:29.380
So if you want a
more general shape,

00:16:29.380 --> 00:16:32.805
what are some tricks
that you could do?

00:16:32.805 --> 00:16:36.094
How could you change the model?

00:16:36.094 --> 00:16:37.078
any ideas?

00:16:37.078 --> 00:16:38.554
Yeah, go ahead.

00:16:38.554 --> 00:16:40.623
AUDIENCE: [INAUDIBLE] have
multiple helix states.

00:16:40.623 --> 00:16:41.998
PROFESSOR: Multiple
helix states.

00:16:41.998 --> 00:16:42.498
OK.

00:16:42.498 --> 00:16:43.474
How many?

00:16:46.426 --> 00:16:49.880
AUDIENCE: Proportional to the
length we want, [INAUDIBLE].

00:16:49.880 --> 00:16:53.030
PROFESSOR: Like one for
each possible length.

00:16:53.030 --> 00:16:55.010
AUDIENCE: It'd be
less than one length.

00:16:55.010 --> 00:16:56.495
PROFESSOR: Or less than one.

00:16:56.495 --> 00:16:56.994
OK.

00:16:56.994 --> 00:16:58.970
So you could have
something like-- I mean,

00:16:58.970 --> 00:17:02.940
let's say you have like this.

00:17:02.940 --> 00:17:08.450
Helix begin-- or,
helix 1, helix 2.

00:17:08.450 --> 00:17:11.290
You allow each of these
to recur to themselves.

00:17:14.260 --> 00:17:15.220
What does that get you?

00:17:18.702 --> 00:17:20.910
This actually gets you
something a little bit better.

00:17:20.910 --> 00:17:26.780
It gives you a little bit
about of-- it's more like that.

00:17:26.780 --> 00:17:28.860
So that's better.

00:17:28.860 --> 00:17:32.330
But if I want to get the exact
distribution, then actually

00:17:32.330 --> 00:17:37.870
one-- so this is the solution
that the authors actually used.

00:17:37.870 --> 00:17:44.490
They made essentially 25
different helix states,

00:17:44.490 --> 00:17:49.190
and then they allowed various
different transitions here.

00:17:49.190 --> 00:17:52.810
So it's a larger
arbitrary here, but they

00:17:52.810 --> 00:17:58.100
have this special state three
that can kind of take a jump.

00:17:58.100 --> 00:18:00.600
So it can just
continue on to four,

00:18:00.600 --> 00:18:03.860
and that'll make your
maximum length helix core.

00:18:03.860 --> 00:18:07.180
Or it can skip one, go
to five, and that'll

00:18:07.180 --> 00:18:10.006
make a helix core that's one
residue shorter than that,

00:18:10.006 --> 00:18:11.380
or it can skip
two, and so forth.

00:18:11.380 --> 00:18:13.150
And you can set
any probabilities

00:18:13.150 --> 00:18:14.410
you want on these transitions.

00:18:14.410 --> 00:18:18.120
As so you can fit basically
an arbitrary distribution

00:18:18.120 --> 00:18:20.450
within a fixed range
of lengths that's

00:18:20.450 --> 00:18:22.450
determined by how
many states you have.

00:18:22.450 --> 00:18:26.270
OK, so they really wanted to get
the length distribution right,

00:18:26.270 --> 00:18:27.561
and that's what they did.

00:18:27.561 --> 00:18:28.560
What's the cost of this?

00:18:28.560 --> 00:18:29.570
What's the downside?

00:18:29.570 --> 00:18:30.904
Simona?

00:18:30.904 --> 00:18:32.320
AUDIENCE: I was
just going to ask,

00:18:32.320 --> 00:18:34.930
it looks like from
this your minimum helix

00:18:34.930 --> 00:18:36.500
length could be four.

00:18:36.500 --> 00:18:37.262
PROFESSOR: Yeah.

00:18:37.262 --> 00:18:38.220
That's a good question.

00:18:42.262 --> 00:18:44.470
Well, we don't know what
the probabilities-- they say

00:18:44.470 --> 00:18:45.080
said on that.

00:18:45.080 --> 00:18:47.624
Well, did they really mean that?

00:18:47.624 --> 00:18:50.040
And also, that's only the core,
and maybe these cap things

00:18:50.040 --> 00:18:52.780
can be-- yeah, that seems
a little short to me.

00:18:52.780 --> 00:18:55.840
So yeah, I agree.

00:18:55.840 --> 00:18:56.430
I'm not sure.

00:18:56.430 --> 00:18:58.346
It could just be for the
sake of illustration,

00:18:58.346 --> 00:19:01.660
but they don't
actually use those.

00:19:01.660 --> 00:19:05.869
But anyway, I'll probably
have to read the paper.

00:19:05.869 --> 00:19:07.535
I haven't read this
paper for many years

00:19:07.535 --> 00:19:09.493
so I don't remember
exactly the answer to that.

00:19:09.493 --> 00:19:13.410
But I have a citation.

00:19:13.410 --> 00:19:15.095
You can look it up
if you're curious.

00:19:15.095 --> 00:19:16.970
But the main point I
wanted to make with this

00:19:16.970 --> 00:19:20.020
is just that by setting an
arbitrary number of states

00:19:20.020 --> 00:19:22.062
and putting in possible
transitions between them,

00:19:22.062 --> 00:19:24.270
you can actually construct
any length of distribution

00:19:24.270 --> 00:19:24.790
you want.

00:19:24.790 --> 00:19:27.392
But there is a downside,
and what is that downside?

00:19:27.392 --> 00:19:28.600
AUDIENCE: Computational cost.

00:19:28.600 --> 00:19:30.930
PROFESSOR: Yeah, the
computational cost.

00:19:30.930 --> 00:19:32.490
Instead of having
one helix state,

00:19:32.490 --> 00:19:34.580
now we've got 25 or something.

00:19:34.580 --> 00:19:38.660
So and the time goes up by the
square of the number of states,

00:19:38.660 --> 00:19:41.300
so it's going to run slower.

00:19:41.300 --> 00:19:45.480
And you also have to estimate
all these parameters.

00:19:45.480 --> 00:19:54.520
OK, so here's an example
of the output of the TMHMM

00:19:54.520 --> 00:20:00.180
program for a mouse
chloride channel gene, CLC6.

00:20:00.180 --> 00:20:02.810
So the program
predicts that there

00:20:02.810 --> 00:20:05.820
are seven transmembrane
helices, as shown

00:20:05.820 --> 00:20:07.790
by these little red blocks here.

00:20:07.790 --> 00:20:11.040
You can see they're all about
the same-- about 20 or so--

00:20:11.040 --> 00:20:17.530
and that the program starts
outside and ends inside.

00:20:17.530 --> 00:20:21.850
So let's say you were going
to do some experiments

00:20:21.850 --> 00:20:25.737
on this protein to
test this prediction.

00:20:25.737 --> 00:20:27.570
So one of the types of
experiments people do

00:20:27.570 --> 00:20:30.150
is they put some
sort of modifiable

00:20:30.150 --> 00:20:35.670
or modified residue
into one of the spaces

00:20:35.670 --> 00:20:37.530
between the
transmembrane helices.

00:20:37.530 --> 00:20:41.190
And then you can test,
by modifying this cell

00:20:41.190 --> 00:20:45.030
with something that's a
non-permeable chemical,

00:20:45.030 --> 00:20:46.820
can you modify that protein?

00:20:46.820 --> 00:20:52.150
So only if that stretches
on the outside of the cell

00:20:52.150 --> 00:20:53.800
will you be able to predict it.

00:20:53.800 --> 00:20:57.961
So that's a way of
testing the topology.

00:20:57.961 --> 00:20:59.960
So if you were doing those
types of experiments,

00:20:59.960 --> 00:21:02.440
you might actually-- like
maybe you're not sure

00:21:02.440 --> 00:21:06.110
if every transmembrane
helix is correct.

00:21:06.110 --> 00:21:08.250
There could be some
where the boundaries were

00:21:08.250 --> 00:21:10.450
a little off, or
even a wrong helix.

00:21:10.450 --> 00:21:12.300
And so one of the
things that you often

00:21:12.300 --> 00:21:14.940
want with a
prediction is not only

00:21:14.940 --> 00:21:18.490
to know what is the optimal
or most likely prediction,

00:21:18.490 --> 00:21:21.770
but also how confident
is the algorithm in each

00:21:21.770 --> 00:21:23.390
of the parts of its prediction.

00:21:23.390 --> 00:21:28.310
How confident is it in the
location of transmembrane helix

00:21:28.310 --> 00:21:33.710
three or the probability
that actually there

00:21:33.710 --> 00:21:36.250
is a transmembrane helix three.

00:21:36.250 --> 00:21:42.280
And so the way that this program
does that is using something

00:21:42.280 --> 00:21:45.380
called the
forward-backward algorithm.

00:21:45.380 --> 00:21:48.070
So those of you who read
the Rabener tutorial,

00:21:48.070 --> 00:21:49.660
it's described
pretty well there.

00:21:49.660 --> 00:21:52.480
The basic idea is
that I mentioned

00:21:52.480 --> 00:21:59.630
that this Po-- the probability
of the observable sequence

00:21:59.630 --> 00:22:02.680
summing over all
possible HMM structures

00:22:02.680 --> 00:22:05.550
or all possible sequences
of hidden states--

00:22:05.550 --> 00:22:06.950
that is possible to calculate.

00:22:06.950 --> 00:22:08.580
And the way that
you do it is you

00:22:08.580 --> 00:22:11.630
run an algorithm that's
similar to the Viterbi,

00:22:11.630 --> 00:22:14.340
but instead of taking
the maximum entering

00:22:14.340 --> 00:22:17.910
each hidden state at
intermediate positions,

00:22:17.910 --> 00:22:19.907
you sum those inputs.

00:22:19.907 --> 00:22:21.490
So you just do the
sum at every point.

00:22:21.490 --> 00:22:25.720
And it turns out that will
calculate the sum of the two

00:22:25.720 --> 00:22:28.220
values at the end-- or
the k values at the end

00:22:28.220 --> 00:22:33.580
will be equal to the sum of
the probabilities of generating

00:22:33.580 --> 00:22:37.232
the observable sequence
over all possible sequences

00:22:37.232 --> 00:22:37.940
of hidden states.

00:22:37.940 --> 00:22:39.420
OK, so that's useful.

00:22:39.420 --> 00:22:41.310
And then you can also
run it backwards.

00:22:41.310 --> 00:22:44.750
There's no reason it has to be
only going in one direction.

00:22:44.750 --> 00:22:48.420
And so what you do is you run
these sort of summing versions

00:22:48.420 --> 00:22:56.330
of the Viterbi in both
the forward direction

00:22:56.330 --> 00:23:01.350
and also run one in
the backward direction.

00:23:01.350 --> 00:23:04.870
And then you take a
particular position here--

00:23:04.870 --> 00:23:09.365
like let's say this is your
helix state, for example.

00:23:09.365 --> 00:23:11.150
And we're interested
in this position

00:23:11.150 --> 00:23:13.240
somewhere in the
middle of the protein.

00:23:13.240 --> 00:23:14.590
Is that a helix or not?

00:23:14.590 --> 00:23:18.480
And so basically
you take the value

00:23:18.480 --> 00:23:20.800
that you get here
from the forward

00:23:20.800 --> 00:23:22.797
in your forward
algorithm and the value

00:23:22.797 --> 00:23:24.630
that you get here in
the backward algorithm,

00:23:24.630 --> 00:23:28.710
and multiply those two
together, and divide by this Po.

00:23:28.710 --> 00:23:31.310
And that gives you
the probability.

00:23:31.310 --> 00:23:35.350
So that ends up being
a way of calculating

00:23:35.350 --> 00:23:37.900
the sum of all
the parses that go

00:23:37.900 --> 00:23:42.580
through this particular
position i in the sequence

00:23:42.580 --> 00:23:43.740
in that particular state.

00:23:46.320 --> 00:23:50.880
I mean, I realize that may
not have been totally clear,

00:23:50.880 --> 00:23:56.590
and I don't want to take more
time to totally go into it,

00:23:56.590 --> 00:23:59.274
but it is pretty well
described and Rabener.

00:23:59.274 --> 00:24:00.690
And I'll just give
you an example.

00:24:00.690 --> 00:24:03.504
So if you're motivated,
please take a look at that.

00:24:03.504 --> 00:24:04.920
And if you have
further questions,

00:24:04.920 --> 00:24:09.640
I'd be happy to discuss
during office hours next week.

00:24:09.640 --> 00:24:12.930
And this is what it looks like
for this particular protein.

00:24:12.930 --> 00:24:15.690
So you get something called the
posterior probability, which

00:24:15.690 --> 00:24:21.410
is the sum of the probabilities
of all the parses.

00:24:21.410 --> 00:24:25.270
And they've plotted it for
the particular state that

00:24:25.270 --> 00:24:28.830
is in the Viterbi path, that
is in the optimal parse--

00:24:28.830 --> 00:24:31.111
so for example, in blue here.

00:24:31.111 --> 00:24:33.610
Well, actually, they've done
it for all the different states

00:24:33.610 --> 00:24:34.390
here.

00:24:34.390 --> 00:24:37.670
So blue is the probability
that you're outside.

00:24:37.670 --> 00:24:40.770
OK, so it's very, very
confident that the end terminus

00:24:40.770 --> 00:24:42.690
of the protein is
outside the cell.

00:24:42.690 --> 00:24:44.440
It's very, very confident
in the locations

00:24:44.440 --> 00:24:48.330
of transmembrane
helices one and two.

00:24:48.330 --> 00:24:51.330
It actually more
often than not thinks

00:24:51.330 --> 00:24:54.584
there's actually a
third helix right here,

00:24:54.584 --> 00:24:56.500
but that didn't make it
in the optional parse.

00:24:56.500 --> 00:24:58.458
That actually occurs in
the majority of parses,

00:24:58.458 --> 00:25:00.650
but not in the optimal.

00:25:00.650 --> 00:25:03.820
And it's probably because it
would then cause other things

00:25:03.820 --> 00:25:08.550
to be flipped later on if you
had transmembrane helix there.

00:25:08.550 --> 00:25:11.800
It's not sure whether
there's a helix there or not,

00:25:11.800 --> 00:25:13.450
but then it's
confident in this one.

00:25:13.450 --> 00:25:15.380
OK, so this gives you an idea.

00:25:15.380 --> 00:25:19.990
Now if you wanted to do some
sort of test of the prediction,

00:25:19.990 --> 00:25:23.860
you want to test probably
first the higher confidence

00:25:23.860 --> 00:25:27.700
predictions, so you might
do something right here.

00:25:27.700 --> 00:25:30.170
Or if maybe from
experience you know

00:25:30.170 --> 00:25:32.587
that when it has a
probability that's that high,

00:25:32.587 --> 00:25:34.670
it's always right, so
there's no point testing it.

00:25:34.670 --> 00:25:38.580
So you should test one of these
kind of less confident regions.

00:25:38.580 --> 00:25:41.450
So this actually makes the
prediction much more useful

00:25:41.450 --> 00:25:44.010
to have some degree
of confidence assigned

00:25:44.010 --> 00:25:46.500
to each part of the prediction.

00:25:51.760 --> 00:25:55.750
So for the remainder
of today, I want

00:25:55.750 --> 00:26:01.870
to turn to the topic of
RNA secondary structure.

00:26:01.870 --> 00:26:03.710
So at the beginning,
I will sort of

00:26:03.710 --> 00:26:05.390
get through some nomenclature.

00:26:05.390 --> 00:26:10.450
And then to motivate the topic,
give some biological examples

00:26:10.450 --> 00:26:11.590
of RNA structure.

00:26:11.590 --> 00:26:15.370
Gives me an excuse to show some
pretty pictures of structure.

00:26:15.370 --> 00:26:18.180
And then we'll talk about
two approaches which

00:26:18.180 --> 00:26:21.470
are two of the most widely used
approaches toward predicting

00:26:21.470 --> 00:26:21.970
structure.

00:26:21.970 --> 00:26:25.600
So using evolution
to predict structure

00:26:25.600 --> 00:26:31.210
by method of co-variations,
which works well when you

00:26:31.210 --> 00:26:33.080
have many homologous sequences.

00:26:33.080 --> 00:26:35.770
And then using sort
of first principles

00:26:35.770 --> 00:26:38.761
thermodynamics to predict
secondary structure

00:26:38.761 --> 00:26:40.510
by energy minimization
where obviously you

00:26:40.510 --> 00:26:45.100
don't need to have a
homologous sequence present.

00:26:45.100 --> 00:26:47.710
And the nature
biotechnology primer

00:26:47.710 --> 00:26:51.000
on RNA folding
that I recommended

00:26:51.000 --> 00:26:57.312
is a good intro to the
energy minimization approach.

00:26:57.312 --> 00:26:58.770
So what is RNA
secondary structure?

00:26:58.770 --> 00:27:03.520
So you all know that
RNAs, like proteins,

00:27:03.520 --> 00:27:08.690
have a three-dimensional
tertiary fold structure that,

00:27:08.690 --> 00:27:11.860
in many cases, determines
their function.

00:27:11.860 --> 00:27:14.890
But there's also sort of
a simpler representation

00:27:14.890 --> 00:27:19.610
of this structure where you just
describe which pairs of bases

00:27:19.610 --> 00:27:21.230
are hydrogen bonded
to one other.

00:27:21.230 --> 00:27:25.010
OK, and so for RNA-- so
it's a famous example

00:27:25.010 --> 00:27:27.760
of an RNA structure, this
sort of clover leaf structure

00:27:27.760 --> 00:27:29.970
that all tRNAs have.

00:27:29.970 --> 00:27:34.260
The secondary structure of the
tRNA is the set of base pairs.

00:27:34.260 --> 00:27:37.310
So it's this base pair
here between the first base

00:27:37.310 --> 00:27:40.495
and this one toward
the end, and then

00:27:40.495 --> 00:27:42.180
base right here, and so forth.

00:27:42.180 --> 00:27:44.460
And so if you specify
all those base pairs,

00:27:44.460 --> 00:27:50.140
then you can then draw a picture
like this, which gives you

00:27:50.140 --> 00:27:54.990
a good idea of what parts of
the RNA molecule are accessible.

00:27:54.990 --> 00:27:56.700
So for example,
it won't tell you

00:27:56.700 --> 00:28:00.134
where the anticodon
loop is, which

00:28:00.134 --> 00:28:01.800
is sort of the business
end of the tRNA.

00:28:01.800 --> 00:28:04.460
But it narrows it down
to three possibilities.

00:28:04.460 --> 00:28:09.710
You might consider that,
or that, or down here.

00:28:09.710 --> 00:28:11.875
It's unlikely to be
something in here

00:28:11.875 --> 00:28:13.500
because these bases
are already paired.

00:28:13.500 --> 00:28:15.280
They can't pair to message.

00:28:15.280 --> 00:28:19.570
So it gives you sort of a first
approximation toward the 3D

00:28:19.570 --> 00:28:21.550
structure, and so
it's quite useful.

00:28:21.550 --> 00:28:24.110
So how do we represent
secondary structure?

00:28:24.110 --> 00:28:28.650
So there's a few different
common representations

00:28:28.650 --> 00:28:29.620
that you'll see.

00:28:29.620 --> 00:28:33.530
So one is-- and this is sort
of a computer-friendly but not

00:28:33.530 --> 00:28:36.230
terribly human-friendly
representation,

00:28:36.230 --> 00:28:38.470
I would say-- is
this sort of dot

00:28:38.470 --> 00:28:40.560
in parentheses notation here.

00:28:40.560 --> 00:28:46.040
So the dot is an unpaired
base and the parenthesis

00:28:46.040 --> 00:28:48.070
is a paired base.

00:28:48.070 --> 00:28:53.500
And how do you know-- chalk
is sort of non-uniformly

00:28:53.500 --> 00:28:59.400
distributed here-- so if you
have a structure like this

00:28:59.400 --> 00:29:01.700
and you have these
three parentheses, what

00:29:01.700 --> 00:29:02.670
are they paired to?

00:29:02.670 --> 00:29:06.350
Well, you don't know yet
until you get further down.

00:29:06.350 --> 00:29:08.370
And then each left
parenthesis has

00:29:08.370 --> 00:29:10.520
to have a right
parenthesis somewhere.

00:29:10.520 --> 00:29:13.650
So now if we see
this, then we know

00:29:13.650 --> 00:29:16.310
that there are two
unpaired bases here,

00:29:16.310 --> 00:29:18.050
and then there's
going to be three

00:29:18.050 --> 00:29:21.545
in a row that are
paired-- these guys.

00:29:21.545 --> 00:29:24.310
We don't know what
they're paired to yet.

00:29:24.310 --> 00:29:26.940
Then there's going to be a
five base pair loop, maybe

00:29:26.940 --> 00:29:30.240
a little pentagon type thing.

00:29:30.240 --> 00:29:34.550
Two, three, four--
oops-- four, five.

00:29:34.550 --> 00:29:38.670
And this one would be
the right parentheses

00:29:38.670 --> 00:29:47.010
that pair with the left
parentheses over here.

00:29:47.010 --> 00:29:48.690
I should probably
draw this coming out

00:29:48.690 --> 00:29:51.930
to make it clearer
that it's not paired.

00:29:51.930 --> 00:29:54.680
So this notation you
can convert to this.

00:29:54.680 --> 00:29:59.370
So after a while, it's
relatively easy to do this,

00:29:59.370 --> 00:30:02.960
except when they're super long.

00:30:02.960 --> 00:30:05.522
So that's what the left part
of that would look like.

00:30:05.522 --> 00:30:06.730
So what about the right part?

00:30:06.730 --> 00:30:11.710
So the right part, we have
something like one, two, three,

00:30:11.710 --> 00:30:15.900
four, bunch of dots, and then
we have two, and then a dot,

00:30:15.900 --> 00:30:17.189
and then two.

00:30:17.189 --> 00:30:18.480
What does that thing look like?

00:30:18.480 --> 00:30:22.008
So that's going to look like
four bases here in a stem.

00:30:25.470 --> 00:30:29.230
Big loop, and then there's
going to be two bases that

00:30:29.230 --> 00:30:31.600
are paired, and then
a bulge, and then

00:30:31.600 --> 00:30:35.010
two more that are paired.

00:30:35.010 --> 00:30:38.290
These things happen
in real structures.

00:30:38.290 --> 00:30:40.200
OK and then the
arced notation is

00:30:40.200 --> 00:30:41.500
a little more human-friendly.

00:30:41.500 --> 00:30:44.890
It actually draws an
arc between each pair

00:30:44.890 --> 00:30:47.340
of bases that are
hydrogen bonded.

00:30:47.340 --> 00:30:50.880
So I'm sure you can imagine
what those structures would

00:30:50.880 --> 00:30:51.380
look like.

00:30:53.900 --> 00:30:56.744
And it turns out that the
arcs are very important.

00:30:56.744 --> 00:30:58.410
Like whether those
arcs cross each other

00:30:58.410 --> 00:31:02.050
or not is sort of a fundamental
classification of RNA

00:31:02.050 --> 00:31:05.480
secondary structures, into
the ones that are tractable

00:31:05.480 --> 00:31:07.150
and the ones that
are really difficult.

00:31:09.670 --> 00:31:11.710
So pretty pictures of RNA.

00:31:11.710 --> 00:31:15.480
So this is a lower
resolution cryo-EM structure

00:31:15.480 --> 00:31:17.280
of the bacterial ribosomes.

00:31:17.280 --> 00:31:20.380
Remember, ribosomes have two
sub-units-- a large sub-unit,

00:31:20.380 --> 00:31:23.160
50S, and a small sub-unit, 30S.

00:31:23.160 --> 00:31:26.100
And if you crack it open--
OK, so you basically split.

00:31:26.100 --> 00:31:30.330
You sort of break the ribosome
like that, and you look inside,

00:31:30.330 --> 00:31:32.760
they're full of tRNAs.

00:31:32.760 --> 00:31:36.430
So there are three
pockets that are normally

00:31:36.430 --> 00:31:37.900
distinguished within ribosomes.

00:31:37.900 --> 00:31:40.020
The A site-- this
is the site where

00:31:40.020 --> 00:31:43.390
the tRNA enters
that's going to add

00:31:43.390 --> 00:31:45.710
a new amino acid to the
growing peptide chain.

00:31:45.710 --> 00:31:49.370
The P site, which is
this tRNA will have it

00:31:49.370 --> 00:31:52.720
[INAUDIBLE] with the
actual growing peptide.

00:31:52.720 --> 00:31:56.730
And then the exit tunnel where
this tRNA will eventually--

00:31:56.730 --> 00:32:00.910
the exit, the E site,
which is the one that

00:32:00.910 --> 00:32:02.982
was added a couple
of residues ago.

00:32:05.810 --> 00:32:10.139
So people often think
of RNA structure

00:32:10.139 --> 00:32:11.930
just in terms of these
secondary structures

00:32:11.930 --> 00:32:16.420
because they're much
easier to generate

00:32:16.420 --> 00:32:20.910
than tertiary structures, and
they give you-- like for tRNA,

00:32:20.910 --> 00:32:25.850
it gives you some pretty good
information about how it works.

00:32:25.850 --> 00:32:31.030
But for a large and complex
structure like the ribosome,

00:32:31.030 --> 00:32:33.390
it turns out that
RNA is actually not

00:32:33.390 --> 00:32:36.030
bad at building
complex structures.

00:32:36.030 --> 00:32:38.230
I would say it's not
as good as protein,

00:32:38.230 --> 00:32:43.130
but it is capable of
constructing something

00:32:43.130 --> 00:32:44.356
like a long tube.

00:32:44.356 --> 00:32:45.730
And in fact, in
the ribosome, you

00:32:45.730 --> 00:32:49.580
find such a long
tube right here.

00:32:49.580 --> 00:32:55.430
That is where the peptide
that's been synthesized

00:32:55.430 --> 00:32:57.610
exits the ribosome.

00:32:57.610 --> 00:33:01.480
And you'll notice it's not
a large cavity in which

00:33:01.480 --> 00:33:02.920
the protein might start folding.

00:33:02.920 --> 00:33:09.210
It's a skinny tube that is thin
enough that the polypeptide has

00:33:09.210 --> 00:33:13.380
to remain linear, cannot
start folding back on itself.

00:33:13.380 --> 00:33:16.120
So you sort of
extrude the protein

00:33:16.120 --> 00:33:18.590
in a linear, unfolded
confirmation,

00:33:18.590 --> 00:33:21.240
and let it fold outside
of the ribosome.

00:33:21.240 --> 00:33:24.550
If it could fold inside
that, that might clog it up.

00:33:24.550 --> 00:33:31.440
That's probably one reason why
it's not designed that way.

00:33:31.440 --> 00:33:34.210
I'm sure that was tried
bye evolution and rejected.

00:33:34.210 --> 00:33:37.020
So if you look at the
ribosome-- now remember,

00:33:37.020 --> 00:33:40.500
the ribosome is composed
of both RNA and protein--

00:33:40.500 --> 00:33:45.560
you'll see that it's much
more of one than the other.

00:33:45.560 --> 00:33:51.795
And so it's really much more
of the fettuccine, which

00:33:51.795 --> 00:33:56.120
is the RNA part, than the
linguini of the protein.

00:33:56.120 --> 00:33:58.440
And if you also look
at the distribution

00:33:58.440 --> 00:34:00.240
of the proteins on
the ribosome, you'll

00:34:00.240 --> 00:34:03.070
see that they're
not in the core.

00:34:03.070 --> 00:34:05.010
They're kind of decorated
around the edges.

00:34:05.010 --> 00:34:08.040
It really looks like something
that was originally made out

00:34:08.040 --> 00:34:12.341
of RNA, and then you sort of
added proteins as accessories

00:34:12.341 --> 00:34:12.840
later.

00:34:12.840 --> 00:34:14.256
And that's probably
what happened.

00:34:17.670 --> 00:34:19.409
This is based on
the structures that

00:34:19.409 --> 00:34:22.050
were solved a few years ago.

00:34:22.050 --> 00:34:27.130
If you then look at where
the nearest proteins are

00:34:27.130 --> 00:34:29.449
to the active site-- actual
catalytic site-- remember,

00:34:29.449 --> 00:34:35.050
the ribosome catalyzes peptide
in addition to an amino acid

00:34:35.050 --> 00:34:38.300
to a growing peptide, so
peptide bond formation--

00:34:38.300 --> 00:34:42.250
you'll find that the
nearest proteins are around

00:34:42.250 --> 00:34:46.290
18 to 20 angstroms away.

00:34:46.290 --> 00:34:48.489
And this is too far
to do any chemistry,

00:34:48.489 --> 00:34:54.370
so the active site
residues or molecules

00:34:54.370 --> 00:34:56.330
need to be within
a few angstroms

00:34:56.330 --> 00:34:58.060
to do any useful chemistry.

00:34:58.060 --> 00:35:02.430
And so this basically
proves that the ribosome.

00:35:02.430 --> 00:35:03.160
Is a ribozyme.

00:35:03.160 --> 00:35:05.100
That is, it's an RNA enzyme.

00:35:05.100 --> 00:35:06.030
RNAs is [INAUDIBLE].

00:35:11.540 --> 00:35:17.620
So here is the
structure of a ribosome.

00:35:17.620 --> 00:35:20.160
It's very kind of beautiful,
and it's impressive

00:35:20.160 --> 00:35:23.500
that somebody can actually
solve the structure of something

00:35:23.500 --> 00:35:24.450
this big.

00:35:24.450 --> 00:35:27.450
But what is actually
the practical use

00:35:27.450 --> 00:35:28.870
of this structure?

00:35:28.870 --> 00:35:33.170
Turns out there's quite an
important practical application

00:35:33.170 --> 00:35:35.130
of knowing the structure.

00:35:35.130 --> 00:35:38.330
Any ideas?

00:35:38.330 --> 00:35:39.332
AUDIENCE: Antibiotics.

00:35:39.332 --> 00:35:40.290
PROFESSOR: Antibiotics.

00:35:40.290 --> 00:35:40.790
Exactly.

00:35:40.790 --> 00:35:47.640
So many antibiotics work by
taking advantage of differences

00:35:47.640 --> 00:35:49.980
between the prokaryotic
ribosome structure

00:35:49.980 --> 00:35:51.610
and eukaryotic
ribosome structure.

00:35:51.610 --> 00:35:55.330
So if you can make
a small molecule--

00:35:55.330 --> 00:35:58.980
these are some examples--
that will inhibit

00:35:58.980 --> 00:36:01.625
prokaryotic ribosomes
but hopefully not

00:36:01.625 --> 00:36:03.000
inhibit eukaryotic
ribosome, then

00:36:03.000 --> 00:36:06.710
you can kill bacteria that
might be infecting you.

00:36:11.920 --> 00:36:14.550
So non-coding RNA.

00:36:14.550 --> 00:36:17.260
So there's many different
families of non-coding RNAs,

00:36:17.260 --> 00:36:19.202
and I'm going to list
some in a moment.

00:36:19.202 --> 00:36:20.660
And I'm going to
actually challenge

00:36:20.660 --> 00:36:22.404
you, see if you can
come up with any more

00:36:22.404 --> 00:36:23.570
families of non-coding RNAs.

00:36:23.570 --> 00:36:27.550
But they're receiving
increasing interest,

00:36:27.550 --> 00:36:32.350
I would say, ever since
micro RNA's were discovered.

00:36:32.350 --> 00:36:34.940
Sort of a boom in looking
at different types

00:36:34.940 --> 00:36:36.240
of non-coding RNAs.

00:36:36.240 --> 00:36:40.690
Link RNA is also important and
interesting, as well as many

00:36:40.690 --> 00:36:47.240
of the classical RNA's like
tRNAs and rRNAs and snoRNAs.

00:36:47.240 --> 00:36:50.489
There may be new aspects of
their regulation and function

00:36:50.489 --> 00:36:51.530
that will be interesting.

00:36:51.530 --> 00:36:55.230
And so when you're
studying a non RNA,

00:36:55.230 --> 00:36:58.910
it's very, very helpful
to know its structure.

00:36:58.910 --> 00:37:02.600
If it's going to base pair in
trans with some other RNA--

00:37:02.600 --> 00:37:07.870
as tRNAs do, as micro RNA's
do, for example, or snRNAs

00:37:07.870 --> 00:37:10.240
and snoRNAs-- then
you want to know

00:37:10.240 --> 00:37:12.110
which parts of the
molecule are free

00:37:12.110 --> 00:37:15.340
and which are
internally based paired.

00:37:15.340 --> 00:37:20.960
And if you want to predict
non RNAs genes in a genome,

00:37:20.960 --> 00:37:23.500
you may want to look
for regions that

00:37:23.500 --> 00:37:28.120
are under selection for
conservation of RNA structure,

00:37:28.120 --> 00:37:30.750
for conservation
of the potential

00:37:30.750 --> 00:37:32.960
to base pair at some distance.

00:37:32.960 --> 00:37:34.780
If you see that,
it's much more likely

00:37:34.780 --> 00:37:38.430
that that region of the genome
encodes a non-coding RNA

00:37:38.430 --> 00:37:43.379
than it codes, for example--
there's a coding axon

00:37:43.379 --> 00:37:45.170
or that it's a
transcription factor binding

00:37:45.170 --> 00:37:48.050
site or something like that
that functions at the DNA level.

00:37:48.050 --> 00:37:54.030
So having this
notion of structure--

00:37:54.030 --> 00:37:59.610
even just secondary structure--
is helpful for that application

00:37:59.610 --> 00:38:01.530
as well, and predicting
functions as well,

00:38:01.530 --> 00:38:02.740
as I mentioned.

00:38:02.740 --> 00:38:05.760
So co-variation.

00:38:05.760 --> 00:38:08.830
So let's take a look
at these sequences.

00:38:08.830 --> 00:38:15.110
So imagine you've discovered a
new class of mini micro RNA's.

00:38:15.110 --> 00:38:19.640
They're only eight bases
long, and you've sequence five

00:38:19.640 --> 00:38:24.870
homologues from your
five favorite mammals.

00:38:24.870 --> 00:38:28.430
And these are the
sequences that you get.

00:38:28.430 --> 00:38:30.560
And you know that
they're homologous

00:38:30.560 --> 00:38:32.560
by [? a centimeter ?],
they're in the same place

00:38:32.560 --> 00:38:35.630
in the genome, and they seem
to have the same function.

00:38:35.630 --> 00:38:39.040
What could you say about
their secondary structure

00:38:39.040 --> 00:38:42.400
based on this
multiple alignment?

00:38:42.400 --> 00:38:45.644
You have to stare at it a
little bit to see the pattern.

00:38:45.644 --> 00:38:46.636
There's a pattern here.

00:38:50.108 --> 00:38:51.596
Any ideas?

00:38:51.596 --> 00:38:55.564
Anyone have a guess about
what the structure is?

00:39:01.020 --> 00:39:01.710
Yeah, go ahead.

00:39:01.710 --> 00:39:04.520
AUDIENCE: There's a two
base pair stem, and then

00:39:04.520 --> 00:39:08.060
a four base loop.

00:39:08.060 --> 00:39:10.020
PROFESSOR: Two base pair
stem, four base loop,

00:39:10.020 --> 00:39:11.472
and you have of the stem.

00:39:11.472 --> 00:39:13.410
So how do you know that?

00:39:13.410 --> 00:39:17.275
AUDIENCE: So if you
look at the first two

00:39:17.275 --> 00:39:22.400
and last two bases
of each sequence,

00:39:22.400 --> 00:39:24.790
the first and the
eighths nucleotide

00:39:24.790 --> 00:39:28.812
can pair with each other, and so
can the second and the seventh.

00:39:28.812 --> 00:39:29.966
PROFESSOR: Yeah.

00:39:29.966 --> 00:39:30.716
Everyone see that?

00:39:30.716 --> 00:39:34.700
So in the first
column you have AUACG,

00:39:34.700 --> 00:39:36.155
and that's
complementary to UAUGC.

00:39:38.966 --> 00:39:40.090
Each base is complementary.

00:39:40.090 --> 00:39:44.580
And the second position is
CAGGU complementary to GUCUA.

00:39:48.200 --> 00:39:50.196
There's one slight
exception there.

00:39:50.196 --> 00:39:51.070
AUDIENCE: [INAUDIBLE]

00:39:51.070 --> 00:39:52.050
PROFESSOR: Yeah.

00:39:52.050 --> 00:39:56.445
Well, it turns out that that
RNA-- although the Watson Crick

00:39:56.445 --> 00:39:59.580
pairs GC and AU are the
most stable-- GU pairs

00:39:59.580 --> 00:40:02.850
are only a little bit
less stable than AU pairs,

00:40:02.850 --> 00:40:07.050
and they occur in
natural RNA molecules.

00:40:07.050 --> 00:40:09.920
So GU is allowed in RNA
even though you would never

00:40:09.920 --> 00:40:11.695
see that in DNA.

00:40:11.695 --> 00:40:13.740
OK, so everyone see that?

00:40:13.740 --> 00:40:18.200
So the structure is--
I think I have it here.

00:40:23.770 --> 00:40:28.030
This would be co-variation
You're changing the bases,

00:40:28.030 --> 00:40:29.850
but preserving the
ability to pair.

00:40:29.850 --> 00:40:32.570
So when one base change-- when
the first base changes from A

00:40:32.570 --> 00:40:35.091
to U, the last base
changes from U to A

00:40:35.091 --> 00:40:36.532
in order to preserve
that pairing.

00:40:36.532 --> 00:40:38.740
You wouldn't know that if
you just had two sequences,

00:40:38.740 --> 00:40:41.080
but once you get
several sequences,

00:40:41.080 --> 00:40:43.990
it can be pretty
compelling and allow

00:40:43.990 --> 00:40:47.050
you to make a pretty
strong inference that that

00:40:47.050 --> 00:40:50.509
is the structure
of that molecule.

00:40:50.509 --> 00:40:51.550
So how would you do this?

00:40:51.550 --> 00:40:53.900
So imagine you had a more
realistic example where

00:40:53.900 --> 00:40:57.010
you've got a non-coding RNA
that's 100 or a few hundred

00:40:57.010 --> 00:41:01.520
bases long, and you might have
a multiple alignment of 50

00:41:01.520 --> 00:41:03.710
homologous sequences.

00:41:03.710 --> 00:41:05.720
You want something,
you're not going

00:41:05.720 --> 00:41:07.810
to be able to see it by eye.

00:41:07.810 --> 00:41:13.130
You need sort of a more
objective criterion.

00:41:13.130 --> 00:41:15.740
So one method
that's commonly used

00:41:15.740 --> 00:41:21.020
is this statistic IX
mutual information.

00:41:21.020 --> 00:41:26.190
So if you look in your
multiple alignment--

00:41:26.190 --> 00:41:27.816
I'll just draw this here.

00:41:33.655 --> 00:41:34.655
You have many sequences.

00:41:37.760 --> 00:41:41.370
You consider every
pair of columns--

00:41:41.370 --> 00:41:44.760
this is a multiple alignment,
so this column and this column--

00:41:44.760 --> 00:41:46.980
and you calculate
what we're going

00:41:46.980 --> 00:41:49.796
to call-- what are we
going to call it? f ix.

00:41:52.770 --> 00:41:54.860
That would be the frequency
of a nucleotide x.

00:41:54.860 --> 00:41:57.610
You're in column i, so you just
count how many A's, C's, G's,

00:41:57.610 --> 00:41:58.610
and T's there are.

00:41:58.610 --> 00:42:04.875
And similarly, f jy for
all the possible values

00:42:04.875 --> 00:42:06.849
of x and all the
possible values of y.

00:42:06.849 --> 00:42:08.890
So these are the base
frequencies in each column.

00:42:08.890 --> 00:42:14.400
And then you calculate the
dinucleotide frequencies xy

00:42:14.400 --> 00:42:17.490
at each pair of columns.

00:42:17.490 --> 00:42:22.470
So in this colony, you say if
there's an A here and a C here,

00:42:22.470 --> 00:42:24.460
and then there's
another AC down here,

00:42:24.460 --> 00:42:27.702
and there's a total of one,
two, three, four, five, six,

00:42:27.702 --> 00:42:37.470
seven sequences,
then f AC ij is 2/7.

00:42:37.470 --> 00:42:40.620
So you just calculate the
frequency of each dinucleotide.

00:42:40.620 --> 00:42:43.670
These are no longer consecutive
dinucleotides in a sequence

00:42:43.670 --> 00:42:44.700
necessarily there.

00:42:44.700 --> 00:42:47.770
They can be in
arbitrary spacing.

00:42:47.770 --> 00:42:49.640
OK, so you calculate
those and then

00:42:49.640 --> 00:42:54.552
you throw them
into this formula,

00:42:54.552 --> 00:42:55.510
and out comes a number.

00:42:55.510 --> 00:42:58.660
So what does this
formula remind of?

00:42:58.660 --> 00:43:01.396
Have you seen a
similar formula before?

00:43:05.380 --> 00:43:06.376
AUDIENCE: [INAUDIBLE]

00:43:06.376 --> 00:43:09.902
PROFESSOR: Someone said
[INAUDIBLE] Yeah, go ahead.

00:43:09.902 --> 00:43:12.360
AUDIENCE: It reminds me of the
Shannon entropy [INAUDIBLE].

00:43:12.360 --> 00:43:14.834
PROFESSOR: Yeah, it looks
like Shannon entropy,

00:43:14.834 --> 00:43:17.120
but there's a log
of a ratio in there,

00:43:17.120 --> 00:43:19.010
so it's not exactly
Shannon entropy.

00:43:19.010 --> 00:43:23.590
So what other formula has
a log of a ratio in it?

00:43:23.590 --> 00:43:24.586
AUDIENCE: [INAUDIBLE]

00:43:24.586 --> 00:43:25.419
PROFESSOR: Relative.

00:43:25.419 --> 00:43:28.570
So it actually looks
like relative entropy.

00:43:28.570 --> 00:43:31.200
So relative entropy
of what versus what?

00:43:39.270 --> 00:43:43.900
Who can sort of say more
precisely if it's-- we'll say

00:43:43.900 --> 00:43:47.140
it's relative entropy of
something versus a p versus q.

00:43:47.140 --> 00:43:49.650
And what is p and what is q?

00:43:49.650 --> 00:43:50.950
Yeah, in the back.

00:43:50.950 --> 00:43:54.819
AUDIENCE: Is it relative
entropy of co-occurrence

00:43:54.819 --> 00:43:56.220
versus independent occurrence?

00:43:56.220 --> 00:43:57.630
PROFESSOR: Good.

00:43:57.630 --> 00:43:59.910
Yeah. co-occurence--
everyone get that?

00:43:59.910 --> 00:44:05.520
Co-occurrence of a pair of
nucleotide xy at positions ij.

00:44:05.520 --> 00:44:08.680
Versus q is an
independent occurrence.

00:44:08.680 --> 00:44:12.130
So if x and y occurred
independently,

00:44:12.130 --> 00:44:17.270
they would have this frequency.

00:44:17.270 --> 00:44:20.030
So if you think about it,
you calculate the frequency

00:44:20.030 --> 00:44:23.420
of each base at each column
in the multiple alignment.

00:44:23.420 --> 00:44:25.900
And this is like
your null hypothesis.

00:44:25.900 --> 00:44:28.810
You're going to assume, what if
they're evolving independently?

00:44:28.810 --> 00:44:35.060
So if it's not a folded
RNA-- or if it's a folded RNA

00:44:35.060 --> 00:44:37.380
but those two columns
don't happen to interact--

00:44:37.380 --> 00:44:40.470
there's no reason to suspect
that those bases would

00:44:40.470 --> 00:44:42.420
have any relationship
to each other.

00:44:42.420 --> 00:44:45.540
So this is like
your expected value

00:44:45.540 --> 00:44:50.490
of the frequency of
xy in position ij.

00:44:50.490 --> 00:44:53.060
And then this p is
your observed value.

00:44:53.060 --> 00:44:56.040
So you're taking relative
entropy of basically observed

00:44:56.040 --> 00:44:58.040
over expected.

00:44:58.040 --> 00:45:04.170
And so relative entropy
has-- I haven't proved this,

00:45:04.170 --> 00:45:06.910
but it's non-negative.

00:45:06.910 --> 00:45:10.310
It can be 0, and then it
goes up to some maximum,

00:45:10.310 --> 00:45:12.580
a positive value, but
it's never negative.

00:45:12.580 --> 00:45:20.900
And what would it be if,
in fact, p were equal to q?

00:45:20.900 --> 00:45:22.804
What would this formula give?

00:45:26.980 --> 00:45:29.900
This is where we're
saying suppose.

00:45:29.900 --> 00:45:30.490
Suppose this.

00:45:30.490 --> 00:45:33.160
In general, this won't
be sure, but suppose

00:45:33.160 --> 00:45:35.920
it was equal to that.

00:45:35.920 --> 00:45:40.726
We've got mi ij equals
summation of what?

00:45:48.170 --> 00:45:52.120
That log of this,
which is equal to this,

00:45:52.120 --> 00:46:05.196
so it's fx i fy j
over the same thing--

00:46:05.196 --> 00:46:12.280
hope you can see that-- log
of-- log of 1 is 0, right?

00:46:12.280 --> 00:46:14.360
So it's just 0.

00:46:14.360 --> 00:46:19.580
So if the nucleotides
of the two columns

00:46:19.580 --> 00:46:24.160
occur completely independently,
mutual information is 0.

00:46:24.160 --> 00:46:27.810
And that's one reason it's
called mutual information.

00:46:27.810 --> 00:46:29.040
There's no information.

00:46:29.040 --> 00:46:30.640
Knowing what's in
column i gives you

00:46:30.640 --> 00:46:33.620
no information about column j.

00:46:33.620 --> 00:46:36.590
So remember, relative entities
are measures of information,

00:46:36.590 --> 00:46:39.870
not entropy.

00:46:39.870 --> 00:46:45.400
And what is the maximum value
that the mutual information

00:46:45.400 --> 00:46:47.080
could have?

00:46:47.080 --> 00:46:47.860
Any ideas on that?

00:46:53.810 --> 00:46:54.360
Any guesses?

00:47:03.613 --> 00:47:04.587
Joe, yeah.

00:47:04.587 --> 00:47:08.970
AUDIENCE: You could have
log base 2 log over f sub x,

00:47:08.970 --> 00:47:09.750
f sub y.

00:47:13.674 --> 00:47:14.340
PROFESSOR: Of 1?

00:47:14.340 --> 00:47:17.060
OK, so you're saying if one of
the particular dinucleotides

00:47:17.060 --> 00:47:18.930
had a frequency of 1?

00:47:18.930 --> 00:47:19.555
AUDIENCE: Yeah.

00:47:19.555 --> 00:47:23.000
So if they're always the same
whenever there's-- like an A,

00:47:23.000 --> 00:47:24.750
there's always going to be a T.

00:47:24.750 --> 00:47:25.458
PROFESSOR: Right.

00:47:25.458 --> 00:47:31.370
So whenever there's an A,
there's always a G or a T.

00:47:31.370 --> 00:47:34.010
AUDIENCE: So then you'd
get a 1 in the numerator,

00:47:34.010 --> 00:47:40.573
and they're relative
probably in the bottom, which

00:47:40.573 --> 00:47:44.240
would be maximized if
they were all even.

00:47:44.240 --> 00:47:45.697
PROFESSOR: If they were all?

00:47:45.697 --> 00:47:46.530
[INTERPOSING VOICES]

00:47:46.530 --> 00:47:47.480
PROFESSOR: If they were uniform.

00:47:47.480 --> 00:47:47.980
Yeah.

00:47:47.980 --> 00:47:49.110
So did everyone get that?

00:47:49.110 --> 00:47:59.560
So the maximum occurs if fx i
and j-- they're both uniform,

00:47:59.560 --> 00:48:03.790
so they're a quarter for
every base at both positions.

00:48:03.790 --> 00:48:08.770
That's the maximum entropy in
the background distribution.

00:48:08.770 --> 00:48:26.720
But then if fx y ij equals
1/4, for example, x equals y--

00:48:26.720 --> 00:48:28.870
or in our case, we're
not interested in that.

00:48:28.870 --> 00:48:34.530
We're interested in x
equals complement of y.

00:48:34.530 --> 00:48:36.784
C of y is going to be
the complement of y.

00:48:41.890 --> 00:48:50.000
And 0 otherwise for x not
equal complement of y.

00:48:50.000 --> 00:48:58.714
OK, so for example, if we have
only the dinucleotides AT,

00:48:58.714 --> 00:49:04.400
CG, GC, and TA occur,
and each of them

00:49:04.400 --> 00:49:10.470
occurs with a
frequency of 1/4, then

00:49:10.470 --> 00:49:13.670
you'll have four terms in
the sum because, remember,

00:49:13.670 --> 00:49:15.500
the 0 log 0 is 0.

00:49:15.500 --> 00:49:18.940
So you'll have four terms
in the sum, and each of them

00:49:18.940 --> 00:49:29.580
will look like 1/4 log
1/4 over a 1/4 times 1/4.

00:49:29.580 --> 00:49:33.510
And so this will be 4,
so log 2 of 4 4 is 2.

00:49:33.510 --> 00:49:39.000
And so you have four terms
that are each 1/4 times 2.

00:49:39.000 --> 00:49:41.822
And so you'll get 2.

00:49:44.690 --> 00:49:46.719
Well, this is not a sum.

00:49:46.719 --> 00:49:47.760
These are the four terms.

00:49:47.760 --> 00:49:53.140
These are the individual
nonzero terms in that sum.

00:49:53.140 --> 00:49:54.030
Does that make sense?

00:49:54.030 --> 00:49:55.340
Everyone get this?

00:49:57.880 --> 00:50:02.640
So that's why this is a useful
measure of co-variation.

00:50:05.950 --> 00:50:08.850
If what's in one
column really strongly

00:50:08.850 --> 00:50:11.710
influences what's
in the other column,

00:50:11.710 --> 00:50:14.110
and there's a lot of
variation in the two columns,

00:50:14.110 --> 00:50:17.420
and so you can really see
that co-variation well,

00:50:17.420 --> 00:50:19.975
then mutual information
is maximized.

00:50:22.760 --> 00:50:24.390
And that's basically
what we just said,

00:50:24.390 --> 00:50:28.390
is written down here.

00:50:28.390 --> 00:50:31.400
So it's maximal.

00:50:31.400 --> 00:50:32.900
They don't have to
be complementary.

00:50:32.900 --> 00:50:36.750
It would achieve this maximum
of 2 if they are complementary,

00:50:36.750 --> 00:50:39.950
but it would be also if they
had some other very specific

00:50:39.950 --> 00:50:42.690
relationship between
the nucleotides.

00:50:42.690 --> 00:50:45.960
So if you're going to use
this, the way you would use it

00:50:45.960 --> 00:50:48.200
is take your multiple
alignment, calculate

00:50:48.200 --> 00:50:50.800
the mutual information
of each pair of columns--

00:50:50.800 --> 00:50:53.320
so you actually have to
make a table, i versus j,

00:50:53.320 --> 00:50:55.130
all possible pairs
of columns-- and then

00:50:55.130 --> 00:50:57.310
you're going to look for
the really high values.

00:50:57.310 --> 00:51:01.970
And then when you find
those high values, when

00:51:01.970 --> 00:51:04.570
you look at what actual bases
are tending to occur together,

00:51:04.570 --> 00:51:07.070
you'll want to see
that they're bases

00:51:07.070 --> 00:51:09.540
that are complementary
to one another.

00:51:09.540 --> 00:51:11.400
And another thing
that you'd want to see

00:51:11.400 --> 00:51:15.120
is you'd want to see that
consecutive positions in one

00:51:15.120 --> 00:51:17.770
part of the alignment
are co-varying

00:51:17.770 --> 00:51:21.770
with consecutive positions in
another part of the alignment

00:51:21.770 --> 00:51:24.990
in the right way, in this sort
of inverse complementary way

00:51:24.990 --> 00:51:27.295
that RNA likes to pair.

00:51:27.295 --> 00:51:28.170
Does that make sense?

00:51:28.170 --> 00:51:35.890
So in a sort of nested way
in your multiple alignment,

00:51:35.890 --> 00:51:38.450
if you saw that this
one co-varied with that,

00:51:38.450 --> 00:51:41.860
and then you also saw that
the next base co-varied

00:51:41.860 --> 00:51:44.340
with the base right
before this one,

00:51:44.340 --> 00:51:46.960
and this one co-varies
with that one,

00:51:46.960 --> 00:51:48.620
that starts to look like a stem.

00:51:48.620 --> 00:51:51.320
It's much more likely that
you have a three-base stem

00:51:51.320 --> 00:51:55.184
than that you just
have some isolated base

00:51:55.184 --> 00:51:56.600
pair out in the
middle of nowhere.

00:51:56.600 --> 00:51:59.020
It turns out it takes
a few bases to make

00:51:59.020 --> 00:52:01.920
a good thermodynamically
stable stem,

00:52:01.920 --> 00:52:04.286
and so you want to look
for blocks of these things.

00:52:04.286 --> 00:52:08.194
And so this works pretty well.

00:52:08.194 --> 00:52:10.110
Yeah, actually, one point
I want to make first

00:52:10.110 --> 00:52:13.300
is that mutual
information is nice

00:52:13.300 --> 00:52:16.544
because it's kind
of a useful concept

00:52:16.544 --> 00:52:18.835
and it also relates to some
of the entropy and relative

00:52:18.835 --> 00:52:21.293
entropy that we've been talking
about in the course before.

00:52:21.293 --> 00:52:24.190
But it's not the only statistic
that would work in practice.

00:52:24.190 --> 00:52:27.720
You can use any measure of
basically non-independence

00:52:27.720 --> 00:52:29.500
between distributions.

00:52:29.500 --> 00:52:31.240
A chi square statistic
would probably

00:52:31.240 --> 00:52:34.730
work equally well in practice.

00:52:34.730 --> 00:52:37.770
And so here is a
multiple alignment

00:52:37.770 --> 00:52:39.410
of a bunch of sequences.

00:52:39.410 --> 00:52:45.410
And what I've done is
put boxes around columns

00:52:45.410 --> 00:52:48.510
that have significant

00:52:48.510 --> 00:52:52.230
mutual information with
other sets of columns.

00:52:52.230 --> 00:52:57.470
So for example, this set of
columns here at the left-- the

00:52:57.470 --> 00:53:01.660
far left-- has significant
mutual information

00:53:01.660 --> 00:53:03.660
with the ones at the far right.

00:53:03.660 --> 00:53:06.510
And these ones,
these four positions

00:53:06.510 --> 00:53:08.850
co-vary with these
four, and so forth.

00:53:08.850 --> 00:53:11.450
So can you tell,
based on looking

00:53:11.450 --> 00:53:13.240
at this pattern of
co-variation, what

00:53:13.240 --> 00:53:14.860
the structure is going to be?

00:53:22.440 --> 00:53:25.400
OK, let's say we start up here.

00:53:25.400 --> 00:53:29.200
The first is going to
pair with the last,

00:53:29.200 --> 00:53:30.404
with something at the end.

00:53:30.404 --> 00:53:31.820
Then we're going
to have something

00:53:31.820 --> 00:53:36.150
here in the middle that pairs
with something else nearby.

00:53:36.150 --> 00:53:38.690
Then we have something
here that pairs

00:53:38.690 --> 00:53:42.060
with something else nearby,
then we have another like that.

00:53:44.475 --> 00:53:45.350
Does that make sense?

00:53:45.350 --> 00:53:49.190
So that there's these
three pairs of columns

00:53:49.190 --> 00:53:52.490
in the middle-- these two, these
two, and these two-- and then

00:53:52.490 --> 00:53:55.220
they're surrounded
by this thing,

00:53:55.220 --> 00:53:57.160
the first pairing with the last.

00:53:57.160 --> 00:53:59.160
And so it's a clover
leaf, so that's tRNA.

00:54:05.056 --> 00:54:05.556
Yeah?

00:54:08.250 --> 00:54:14.381
AUDIENCE: So with that previous
slide, this table here,

00:54:14.381 --> 00:54:17.470
you could create a
co-variation matrix.

00:54:17.470 --> 00:54:19.155
How would that-- or,
and it could be--

00:54:19.155 --> 00:54:21.113
PROFESSOR: How does that
co-variations matrix--

00:54:21.113 --> 00:54:23.580
how do you convert it
to this representations?

00:54:23.580 --> 00:54:27.100
AUDIENCE: I'm just wondering
how this would go up.

00:54:27.100 --> 00:54:29.480
Like let's say you took
the co-variation matrix--

00:54:29.480 --> 00:54:30.271
PROFESSOR: Oh, what
would it look like?

00:54:30.271 --> 00:54:31.173
AUDIENCE: --and visualized
it as a heat map--

00:54:31.173 --> 00:54:32.530
PROFESSOR: In the
co-variation matrix.

00:54:32.530 --> 00:54:33.155
AUDIENCE: Yeah.

00:54:33.155 --> 00:54:37.554
What would it look like in
this particular example?

00:54:37.554 --> 00:54:39.220
PROFESSOR: Yeah,
that's a good question.

00:54:39.220 --> 00:54:40.200
OK, let's do that.

00:54:42.690 --> 00:54:44.190
I haven't thought
about that before,

00:54:44.190 --> 00:54:47.560
so you'll have to
help me on this.

00:54:47.560 --> 00:54:52.224
So here's the beginning.

00:54:52.224 --> 00:54:53.890
We're going to write
the sequence from 1

00:54:53.890 --> 00:54:57.790
to n in both dimensions.

00:54:57.790 --> 00:55:02.330
And so here's the beginning,
and it co-varies with the end.

00:55:02.330 --> 00:55:06.670
So this first would have a
co-variation with the last,

00:55:06.670 --> 00:55:08.760
and then the second would
co-vary with the second

00:55:08.760 --> 00:55:10.150
to last, and so forth.

00:55:10.150 --> 00:55:13.730
So you get a little
diagonal down here.

00:55:13.730 --> 00:55:17.210
That's this top stem here.

00:55:17.210 --> 00:55:18.980
And then what about
the second stem?

00:55:18.980 --> 00:55:21.894
So then you have
something down here

00:55:21.894 --> 00:55:24.310
that's going to co-vary with
something kind of near by it.

00:55:29.720 --> 00:55:32.300
So block two is going to
co-vary with block three.

00:55:32.300 --> 00:55:35.283
And again, it's going to be
this inverse complementary kind

00:55:35.283 --> 00:55:38.230
of thing like that.

00:55:38.230 --> 00:55:43.910
It's symmetrical, so
you get this with that.

00:55:43.910 --> 00:55:47.100
But you only have
to do one half,

00:55:47.100 --> 00:55:49.770
so you can just do
this upper half here.

00:55:49.770 --> 00:55:50.660
So you get that.

00:55:50.660 --> 00:55:55.046
So it would look
something like that.

00:55:55.046 --> 00:55:57.426
AUDIENCE: So with the
diagonal line orthogonal

00:55:57.426 --> 00:56:01.890
to the diagonal of the matrix--

00:56:01.890 --> 00:56:05.730
PROFESSOR: Yeah, that's because
they're inverse complementary.

00:56:05.730 --> 00:56:08.130
AUDIENCE: OK.

00:56:08.130 --> 00:56:10.050
PROFESSOR: That make sense?

00:56:10.050 --> 00:56:12.450
Good question.

00:56:12.450 --> 00:56:14.187
But we'll see an
example like that later

00:56:14.187 --> 00:56:15.270
actually, as it turns out.

00:56:17.910 --> 00:56:22.180
All right, so here's
my question for you.

00:56:22.180 --> 00:56:25.390
You're setting this
non-coding RNA.

00:56:25.390 --> 00:56:26.810
It has some length.

00:56:26.810 --> 00:56:29.190
You have some
number of sequences.

00:56:29.190 --> 00:56:32.910
They might have some structure.

00:56:32.910 --> 00:56:35.850
Is this method going to
work for you, or is it not?

00:56:35.850 --> 00:56:40.060
What is required for it to work?

00:56:40.060 --> 00:56:45.160
For example, would
I want to isolate

00:56:45.160 --> 00:56:48.820
this gene-- this
non-coding RNA gene--

00:56:48.820 --> 00:56:52.680
just from primates, from
like human, gorilla,

00:56:52.680 --> 00:56:57.770
chimp, orangutan, and
do that alignment?

00:56:57.770 --> 00:56:59.290
Or would I want to go further?

00:56:59.290 --> 00:57:05.840
Would I want to go back to
the rodents and dog, horse--

00:57:05.840 --> 00:57:06.925
how far do you want to go?

00:57:06.925 --> 00:57:07.590
Yeah, question.

00:57:07.590 --> 00:57:10.662
AUDIENCE: I think we a need a
very strong sequence alignment

00:57:10.662 --> 00:57:14.106
for this, so we
cannot go very far,

00:57:14.106 --> 00:57:17.058
because if you don't have
a high percentage homology,

00:57:17.058 --> 00:57:19.518
then you will see all
sorts of false positives.

00:57:19.518 --> 00:57:20.502
PROFESSOR: Absolutely.

00:57:20.502 --> 00:57:23.590
So if you go too far, your
alignment will suffer,

00:57:23.590 --> 00:57:25.097
and you need an
alignment in order

00:57:25.097 --> 00:57:26.680
to identify the
corresponding columns.

00:57:26.680 --> 00:57:30.580
So that puts an upper limit
on how far you can go.

00:57:30.580 --> 00:57:32.790
But excellent point.

00:57:32.790 --> 00:57:33.890
Is there a lower limit?

00:57:33.890 --> 00:57:35.515
Do you want to go as
close as possible,

00:57:35.515 --> 00:57:40.200
like this example I gave
with human, chimp, orangutan?

00:57:40.200 --> 00:57:42.750
Or is that too close?

00:57:42.750 --> 00:57:44.030
Why is too close bad?

00:57:44.030 --> 00:57:44.842
Tim?

00:57:44.842 --> 00:57:46.770
AUDIENCE: Maybe if
you're too close,

00:57:46.770 --> 00:57:49.180
then the sequence is
having to [INAUDIBLE]

00:57:49.180 --> 00:57:51.108
to give you enough
information [INAUDIBLE].

00:57:51.108 --> 00:57:52.149
PROFESSOR: Yeah, exactly.

00:57:52.149 --> 00:57:53.040
They're all the same.

00:57:53.040 --> 00:57:57.880
Actually, you'll
get 1 times 1 over 1

00:57:57.880 --> 00:58:00.210
in that mutual information
statistic, which log of that

00:58:00.210 --> 00:58:01.440
is going to be 0.

00:58:01.440 --> 00:58:04.860
There's zero mutual information
if they're all the same.

00:58:04.860 --> 00:58:09.400
So there has to
be some variation,

00:58:09.400 --> 00:58:12.230
and the structure
has to be conserved.

00:58:12.230 --> 00:58:13.180
That's key.

00:58:13.180 --> 00:58:17.340
You have to assume that the
structure is well conserved

00:58:17.340 --> 00:58:20.147
and you have to have
a good alignment

00:58:20.147 --> 00:58:21.605
and there has to
be some variation,

00:58:21.605 --> 00:58:22.854
a certain amount of variation.

00:58:22.854 --> 00:58:26.620
Those are basically
the three keys.

00:58:26.620 --> 00:58:29.170
Secondary structure has a more
highly conserved sequence.

00:58:29.170 --> 00:58:31.710
Sufficient divergence so that
you have these variations,

00:58:31.710 --> 00:58:35.060
and sufficient number of
homologues you have to get good

00:58:35.060 --> 00:58:40.340
statistics, and not so far
they your alignment is bad.

00:58:40.340 --> 00:58:41.050
Sorry about that.

00:58:41.050 --> 00:58:41.550
Sally?

00:58:44.201 --> 00:58:45.742
AUDIENCE: It seems
like another thing

00:58:45.742 --> 00:58:50.030
that we assume here is that
you can project it onto a plane

00:58:50.030 --> 00:58:52.590
and it will lie flat.

00:58:52.590 --> 00:58:55.270
So if you have some very
important, weird folding

00:58:55.270 --> 00:58:58.611
that allows you to, say,
crisscross the rainbow thing.

00:58:58.611 --> 00:59:00.277
PROFESSOR: Yeah,
crisscross the rainbow.

00:59:00.277 --> 00:59:01.684
Yeah, very good question.

00:59:08.420 --> 00:59:10.400
So in the example
of tRNA, if you

00:59:10.400 --> 00:59:12.880
were to do that arc
diagram for tRNA,

00:59:12.880 --> 00:59:14.664
it would look like
another big arc--

00:59:14.664 --> 00:59:16.330
that's the first and
last-- and then you

00:59:16.330 --> 00:59:19.460
have these three nested arcs.

00:59:19.460 --> 00:59:20.405
Nothing crisscrossing.

00:59:24.410 --> 00:59:32.340
What if I saw-- [INAUDIBLE]--
two blocks of sequence that

00:59:32.340 --> 00:59:33.793
have a relationship like that?

00:59:33.793 --> 00:59:34.779
Is that OK?

00:59:43.160 --> 00:59:46.611
With this method, the
co-variation, that's OK.

00:59:46.611 --> 00:59:47.730
There's no problem there.

00:59:47.730 --> 00:59:51.034
What does this
structure look like?

00:59:51.034 --> 00:59:57.870
So [INAUDIBLE] you have a
stem, then you have a loop,

00:59:57.870 --> 00:59:58.550
and then a stem.

00:59:58.550 --> 01:00:01.640
So this is 1 pairs with 3.

01:00:01.640 --> 01:00:02.510
That's 1.

01:00:02.510 --> 01:00:03.610
That's 3.

01:00:03.610 --> 01:00:06.350
Then you've got 2 up
here, but 2 pairs with 4.

01:00:06.350 --> 01:00:09.340
So here's 4 over
here, so 4 is going

01:00:09.340 --> 01:00:12.620
to have to come back up
here and pair with 2.

01:00:15.270 --> 01:00:16.940
This is 2 over here.

01:00:16.940 --> 01:00:20.750
So that is called a pseudoknot.

01:00:20.750 --> 01:00:22.920
It's not really a knot
because this thing doesn't

01:00:22.920 --> 01:00:25.850
go through the
loop, but it kind of

01:00:25.850 --> 01:00:27.800
behaves like a
knot in some ways.

01:00:27.800 --> 01:00:31.290
And so do these actually
occur in natural RNAs?

01:00:31.290 --> 01:00:32.780
Yes, Tim is nodding.

01:00:32.780 --> 01:00:34.580
And are they important?

01:00:34.580 --> 01:00:37.090
Can you give me an example
where they are important

01:00:37.090 --> 01:00:38.289
biologically?

01:00:38.289 --> 01:00:39.726
AUDIENCE: [INAUDIBLE]

01:00:39.726 --> 01:00:41.163
[INTERPOSING VOICES]

01:00:41.163 --> 01:00:42.850
PROFESSOR: Riboswitches.

01:00:42.850 --> 01:00:44.516
We're going to come
to what riboswitches

01:00:44.516 --> 01:00:49.390
are in a moment for
those not familiar.

01:00:49.390 --> 01:00:51.050
And I think I have
an example later

01:00:51.050 --> 01:00:52.450
of a pseudoknot
that's important.

01:00:52.450 --> 01:00:53.533
So that's a good question.

01:00:58.190 --> 01:01:00.290
I think I should have added
to this list the point

01:01:00.290 --> 01:01:03.203
that you made in
the back that they

01:01:03.203 --> 01:01:06.020
have to be close enough that
you can get a good alignment.

01:01:06.020 --> 01:01:07.502
I should add that to this last.

01:01:07.502 --> 01:01:08.002
Thanks.

01:01:08.002 --> 01:01:09.650
It's a good point.

01:01:09.650 --> 01:01:11.730
All right, so classes
of non-coding RNAs.

01:01:11.730 --> 01:01:14.340
As promised, my
favorites listed here.

01:01:17.070 --> 01:01:19.540
Everyone knows tRNAs, rRNAs.

01:01:19.540 --> 01:01:22.530
You can think of UTRs
as being non RNAs.

01:01:22.530 --> 01:01:24.270
They often have
structure that can

01:01:24.270 --> 01:01:26.230
be involved in
regulating the message.

01:01:26.230 --> 01:01:28.160
snRNAs involved splicing.

01:01:28.160 --> 01:01:31.490
snoRNAs-- small
nucleolar RNAs-- are

01:01:31.490 --> 01:01:33.870
involved in directing
modification

01:01:33.870 --> 01:01:39.519
of other RNAs, such as ribosomal
RNAs and snRNAs, for example.

01:01:39.519 --> 01:01:41.310
Terminators of
transcription in prokaryotes

01:01:41.310 --> 01:01:43.460
are like little stem
loop structures.

01:01:43.460 --> 01:01:45.200
RNaseP is an important enzyme.

01:01:45.200 --> 01:01:51.590
SRP is involved in targeting
proteins with signal peptides

01:01:51.590 --> 01:01:54.290
to the export machinery.

01:01:54.290 --> 01:01:55.730
We won't go into tmRNA.

01:01:55.730 --> 01:01:57.440
micro RNAs and link
RNAs, you probably

01:01:57.440 --> 01:01:59.400
know, and riboswitches.

01:01:59.400 --> 01:02:03.394
So Tim, can you tell us
what a riboswitch is?

01:02:03.394 --> 01:02:06.810
AUDIENCE: A riboswitch
is any RNA structure

01:02:06.810 --> 01:02:10.226
that changes
confirmation according

01:02:10.226 --> 01:02:16.550
to some stimulus [INAUDIBLE]
or something in the cell.

01:02:16.550 --> 01:02:20.020
It could be an ion, critical
changes in the structure.

01:02:20.020 --> 01:02:22.317
[INAUDIBLE]

01:02:22.317 --> 01:02:23.650
PROFESSOR: Yeah, that was great.

01:02:23.650 --> 01:02:25.922
So just for those that
may not have heard,

01:02:25.922 --> 01:02:26.880
I'll just say it again.

01:02:26.880 --> 01:02:31.480
So a riboswitch is
any RNA that can

01:02:31.480 --> 01:02:34.750
have multiple confirmations,
and changes confirmation

01:02:34.750 --> 01:02:41.325
in response to some stimulus--
temperature, binding

01:02:41.325 --> 01:02:45.190
of some ligand, small molecules,
something like that, et cetera.

01:02:45.190 --> 01:02:49.360
And often, one of
those structures

01:02:49.360 --> 01:02:51.970
will block a particular
regulatory element.

01:02:51.970 --> 01:02:53.600
I'll show an
example in a moment.

01:02:53.600 --> 01:02:55.940
And so when it's in
one confirmation,

01:02:55.940 --> 01:02:57.180
the gene will be repressed.

01:02:57.180 --> 01:02:58.555
And when it's in
the other, it'll

01:02:58.555 --> 01:03:02.560
be on. so it's a way of using
RNA's secondary structure

01:03:02.560 --> 01:03:04.630
to sense what's
going on in the cell

01:03:04.630 --> 01:03:06.590
and to appropriately
regulate gene expression.

01:03:09.027 --> 01:03:11.610
All right, so now we're going
to talk about a second approach.

01:03:11.610 --> 01:03:12.860
So this would be the approach.

01:03:12.860 --> 01:03:14.670
You've got some RNA.

01:03:14.670 --> 01:03:18.561
It may not do something,
and maybe you can't find any

01:03:18.561 --> 01:03:19.060
homologues.

01:03:19.060 --> 01:03:21.940
It might be some newly
evolved species-specific RNA,

01:03:21.940 --> 01:03:24.250
or your studying
some obscure species

01:03:24.250 --> 01:03:27.100
where you don't have a lot
of genomic sequence around.

01:03:27.100 --> 01:03:29.200
So you want to use the
first principles, approach,

01:03:29.200 --> 01:03:31.545
the energy
minimization approach.

01:03:31.545 --> 01:03:32.920
Or maybe you have
the homologues,

01:03:32.920 --> 01:03:34.820
but you don't trust
your alignment.

01:03:34.820 --> 01:03:36.680
You want a second
opinion on what

01:03:36.680 --> 01:03:38.130
the structure is going to be.

01:03:38.130 --> 01:03:44.870
So just in the way
that protein folding--

01:03:44.870 --> 01:03:46.540
you could think of
an equilibrium model

01:03:46.540 --> 01:03:49.400
where it's determined
by folding free energy,

01:03:49.400 --> 01:03:52.200
and enthalpy will
favor base pairing.

01:03:52.200 --> 01:03:55.810
You get gain some enthalpy
when you form a hydrogen bond,

01:03:55.810 --> 01:03:58.770
and entropy will tend
to favor unfolding.

01:03:58.770 --> 01:04:02.590
So an RNA molecule
that's linear has

01:04:02.590 --> 01:04:04.210
all this confirmational
flexibility,

01:04:04.210 --> 01:04:06.072
and lose some of that
when you form a stem.

01:04:06.072 --> 01:04:06.780
It forms a helix.

01:04:06.780 --> 01:04:09.460
Those things don't have
as much flexibility.

01:04:09.460 --> 01:04:13.670
And even the nucleotides in
the loop are a little bit

01:04:13.670 --> 01:04:16.340
confirmationally--
they're not as flexible

01:04:16.340 --> 01:04:18.600
as they were when it was linear.

01:04:18.600 --> 01:04:20.790
So that means that
at high temperatures,

01:04:20.790 --> 01:04:24.930
it'll favor unfolding.

01:04:24.930 --> 01:04:29.480
So the earliest
approaches were approaches

01:04:29.480 --> 01:04:34.300
that sought to maximize
the number of base pairs.

01:04:34.300 --> 01:04:37.710
So they basically ignore entropy
and focus on the enthalpy

01:04:37.710 --> 01:04:39.530
that you gain from
forming base pairs.

01:04:39.530 --> 01:04:43.730
And so Ruth Nussinov
described the first algorithm

01:04:43.730 --> 01:04:47.780
to figure out what is the
maximum number of base pairs

01:04:47.780 --> 01:04:51.160
that you can form in an RNA.

01:04:51.160 --> 01:04:57.750
And so a way to
think about this is

01:04:57.750 --> 01:04:59.225
imagine you've
got this sequence.

01:05:06.444 --> 01:05:08.110
What is the largest
number of base pairs

01:05:08.110 --> 01:05:09.690
I can form with this sequence?

01:05:15.090 --> 01:05:17.405
I could just draw all
possible base pairs.

01:05:17.405 --> 01:05:19.780
That A can pair with that T.
This A can pair with that T.

01:05:19.780 --> 01:05:21.660
They can't both pair
simultaneously, right?

01:05:21.660 --> 01:05:27.460
And this C can pair with that G.
So if we don't allow crossing,

01:05:27.460 --> 01:05:30.610
which-- coming back
to Sally's point--

01:05:30.610 --> 01:05:32.470
this would cross this, right?

01:05:32.470 --> 01:05:34.320
So we're not going
to allow that.

01:05:34.320 --> 01:05:38.780
So the best you could do be to
have this A pair with this C

01:05:38.780 --> 01:05:41.790
and this C pair with this G
and form this little structure.

01:05:45.500 --> 01:05:49.324
This is not realistic because
RNA loops can't be one base.

01:05:49.324 --> 01:05:50.490
They minimum is about three.

01:05:50.490 --> 01:05:52.810
But just for the
sake of argument,

01:05:52.810 --> 01:05:55.720
you can list all these
out, but imagine now

01:05:55.720 --> 01:05:59.140
you've got 100 bases here.

01:05:59.140 --> 01:06:02.490
Every base will on
average potentially

01:06:02.490 --> 01:06:07.700
be able to pair with
24 or 25 other bases.

01:06:07.700 --> 01:06:12.190
So you're just going to have
just an incredible mishmash

01:06:12.190 --> 01:06:16.960
of possible lines
all crisscrossing.

01:06:16.960 --> 01:06:22.697
So how do you figure out how
to maximize that pairing?

01:06:27.231 --> 01:06:27.730
Any ideas?

01:06:33.208 --> 01:06:34.950
Don, yeah?

01:06:34.950 --> 01:06:37.512
AUDIENCE: You look for
sections of homology.

01:06:37.512 --> 01:06:39.400
PROFESSOR: We're
not using homology.

01:06:39.400 --> 01:06:41.300
We're doing [INAUDIBLE]

01:06:41.300 --> 01:06:44.190
AUDIENCE: I'm sorry, not
homology, but sections where--

01:06:44.190 --> 01:06:44.602
PROFESSOR: Complementary?

01:06:44.602 --> 01:06:45.426
AUDIENCE: Complementary.

01:06:45.426 --> 01:06:46.967
Yeah, that's the
word I was thinking.

01:06:46.967 --> 01:06:48.670
PROFESSOR: The blocks
are complementary.

01:06:48.670 --> 01:06:51.470
AUDIENCE: And then so--

01:06:51.470 --> 01:06:54.172
PROFESSOR: You could blast
the sequence against inverse

01:06:54.172 --> 01:06:56.990
complements itself and
look for little blocks.

01:06:56.990 --> 01:06:59.410
You could do that.

01:06:59.410 --> 01:07:00.970
That's not what
people generally do,

01:07:00.970 --> 01:07:03.770
mostly because the blocks of
complementarity in real RNA

01:07:03.770 --> 01:07:05.680
structures are really short.

01:07:05.680 --> 01:07:07.710
They can be two,
three, four, bases.

01:07:07.710 --> 01:07:08.625
Sally, yeah?

01:07:08.625 --> 01:07:11.000
AUDIENCE: Could you use
[INAUDIBLE] approach

01:07:11.000 --> 01:07:16.110
where you just start with a
very small case and build up?

01:07:16.110 --> 01:07:18.630
PROFESSOR: So we've seen that
work for protein sequence

01:07:18.630 --> 01:07:19.130
alignment.

01:07:19.130 --> 01:07:22.750
We've seen it work for
the Viterbi algorithm.

01:07:22.750 --> 01:07:27.710
So that is sort of the go-to
approach in bioinfomatics,

01:07:27.710 --> 01:07:29.950
is to use some sort of
dynamic programming.

01:07:29.950 --> 01:07:32.790
Now this one for RNA
secondary structure

01:07:32.790 --> 01:07:35.440
that Nussinov came up
with is a little bit

01:07:35.440 --> 01:07:36.800
different than the others.

01:07:36.800 --> 01:07:39.860
So you'll see it has a
kind of different flavor.

01:07:39.860 --> 01:07:42.482
It turns out to be
actually it's a little hard

01:07:42.482 --> 01:07:44.190
to get your head around
at the beginning,

01:07:44.190 --> 01:07:47.720
but it's actually
easier to do by hand.

01:07:47.720 --> 01:07:49.380
So let's take a look at that.

01:07:49.380 --> 01:07:53.020
OK, so recursive
maximization of base pairing.

01:07:53.020 --> 01:07:55.290
Now the thing about
base pairing that's

01:07:55.290 --> 01:07:56.780
different from
these other problems

01:07:56.780 --> 01:07:59.500
is that the first
base in the sequence

01:07:59.500 --> 01:08:02.980
can base pair with the last.

01:08:02.980 --> 01:08:05.220
How do you chop up a sequence?

01:08:05.220 --> 01:08:08.870
Remember with Needleman-Wunsch
and with Viterbi

01:08:08.870 --> 01:08:11.146
we go from the
beginning to the end,

01:08:11.146 --> 01:08:12.270
and that's a logical order.

01:08:12.270 --> 01:08:16.560
But with base pairing, that's
actually not a logical order.

01:08:16.560 --> 01:08:19.350
You can't really do it that way.

01:08:19.350 --> 01:08:24.540
So instead, you go
from the inside out.

01:08:24.540 --> 01:08:26.640
You start in the
middle of a sequence

01:08:26.640 --> 01:08:30.990
and work your way outwards
in both directions.

01:08:30.990 --> 01:08:40.890
Or another way to think about
it is you start with you write

01:08:40.890 --> 01:08:45.920
the sequence from 1
to n on both axes,

01:08:45.920 --> 01:08:52.399
and then actually we'll see that
we initiate the diagonal all

01:08:52.399 --> 01:08:53.584
to 0's.

01:08:53.584 --> 01:08:58.229
And then we think about
these positions here next.

01:09:02.620 --> 01:09:06.109
So 1 versus 2.

01:09:06.109 --> 01:09:08.100
Could 1 pair with 2?

01:09:08.100 --> 01:09:09.439
And could 2 pair with 3?

01:09:09.439 --> 01:09:12.087
Those are like little
bits of possible RNA

01:09:12.087 --> 01:09:12.920
secondary structure.

01:09:12.920 --> 01:09:14.340
Again, we're ignoring
this fact that loops

01:09:14.340 --> 01:09:15.464
have to be certain minimum.

01:09:15.464 --> 01:09:17.800
This is sort of a
simplified case.

01:09:17.800 --> 01:09:19.600
And then you build outwards.

01:09:19.600 --> 01:09:27.220
So you conclude that base 4
here could pair with base 5,

01:09:27.220 --> 01:09:30.090
so we're going to put a 1 there.

01:09:30.090 --> 01:09:33.630
And then we're going
to build outward

01:09:33.630 --> 01:09:35.590
from that toward the
beginning of the sequence

01:09:35.590 --> 01:09:38.930
and toward the end, adding
additional base pairs

01:09:38.930 --> 01:09:40.210
when we can.

01:09:40.210 --> 01:09:42.200
That's basically the way
the [INAUDIBLE] works.

01:09:42.200 --> 01:09:47.740
And so that's one
key idea, that we

01:09:47.740 --> 01:09:50.890
go from sort of
close sequences, work

01:09:50.890 --> 01:09:53.120
outward, to faraway sequences.

01:09:53.120 --> 01:09:57.540
And the second key idea
is that the relationship

01:09:57.540 --> 01:10:00.620
that, as you add more bases
on the outside of what you've

01:10:00.620 --> 01:10:05.920
already got, that the optimal
structure in that larger

01:10:05.920 --> 01:10:08.430
portion of sequence
space is related

01:10:08.430 --> 01:10:13.100
to the optimal structures
of smaller portions of it

01:10:13.100 --> 01:10:14.810
in one of four different ways.

01:10:14.810 --> 01:10:17.470
And these are the four ways.

01:10:17.470 --> 01:10:21.370
So let's look at these.

01:10:23.940 --> 01:10:29.830
So the first one is
probably the simplest

01:10:29.830 --> 01:10:38.270
where if you're doing this,
you're here somewhere,

01:10:38.270 --> 01:10:44.050
meaning you've compared
sequences from position,

01:10:44.050 --> 01:10:49.680
let's say, i minus
1 to j minus 1 here.

01:10:49.680 --> 01:10:53.430
And then we're going to
consider adding-- actually,

01:10:53.430 --> 01:10:56.700
it depends how you
number your sequence.

01:10:56.700 --> 01:10:58.460
Let me see how this is done.

01:10:58.460 --> 01:10:59.530
Sorry. i plus 1.

01:11:03.360 --> 01:11:06.482
i plus 1 to j minus 1.

01:11:06.482 --> 01:11:08.690
We figured out what the
optimal structure is in here,

01:11:08.690 --> 01:11:09.920
let's suppose.

01:11:09.920 --> 01:11:12.370
And now we're going to
consider adding one more

01:11:12.370 --> 01:11:13.750
base on either end.

01:11:13.750 --> 01:11:19.780
We're going to add j
down here, and we're

01:11:19.780 --> 01:11:22.190
going to ask if it pairs with i.

01:11:22.190 --> 01:11:25.020
And if so, we're going to take
whatever the optimal structure

01:11:25.020 --> 01:11:27.612
was in here and we're
going to add one base pair,

01:11:27.612 --> 01:11:29.320
and we're going to
add plus 1 because now

01:11:29.320 --> 01:11:30.810
it's got one additional.

01:11:30.810 --> 01:11:32.040
We're counting base pairs.

01:11:32.040 --> 01:11:36.230
So that's that first case there.

01:11:36.230 --> 01:11:39.940
And then the second case is
you could also consider just

01:11:39.940 --> 01:11:43.270
adding one unpaired base onto
whatever structure you had,

01:11:43.270 --> 01:11:45.380
and then you don't add one.

01:11:45.380 --> 01:11:47.484
And you could go in
either direction.

01:11:47.484 --> 01:11:49.900
You can go sort of toward of
the beginning of the sequence

01:11:49.900 --> 01:11:52.580
or toward the end
of the sequence.

01:11:52.580 --> 01:11:54.890
And then the third
one is the tricky one,

01:11:54.890 --> 01:11:57.830
is what's called a bifurcation.

01:11:57.830 --> 01:12:02.840
You could consider
that actually i and j

01:12:02.840 --> 01:12:05.840
are both paired, but
not with each other.

01:12:05.840 --> 01:12:09.280
That i pairs with something
that was inside here

01:12:09.280 --> 01:12:11.280
and j pairs with something
that was inside here.

01:12:11.280 --> 01:12:15.760
So your optimal parse
from i to j, if you will,

01:12:15.760 --> 01:12:18.650
is not going to come from the
optimal parse from i plus 1

01:12:18.650 --> 01:12:19.500
to j minus 1.

01:12:19.500 --> 01:12:23.160
It's going to come from
rethinking this and doing

01:12:23.160 --> 01:12:25.690
the optimal parse from here
to here and from here to here,

01:12:25.690 --> 01:12:29.060
and combining those two.

01:12:29.060 --> 01:12:32.590
So you're probably
confused by now,

01:12:32.590 --> 01:12:35.252
so let me try to do an example.

01:12:46.545 --> 01:12:49.320
And then I have an analogy
that will confuse you further.

01:12:49.320 --> 01:12:51.200
So ask me for that one.

01:13:00.630 --> 01:13:02.350
This was the simplest
one I could come up

01:13:02.350 --> 01:13:04.220
with that has this property.

01:13:04.220 --> 01:13:11.510
OK, so we said before that
if you were doing the optimal

01:13:11.510 --> 01:13:18.080
from 1 to 5, that it would be
the AC pairing with the GT.

01:13:18.080 --> 01:13:19.450
We do that one.

01:13:19.450 --> 01:13:24.800
And now if you notice, this guy
is kind of a similar sequence.

01:13:24.800 --> 01:13:27.060
I just added a T at the
beginning and an A at the end.

01:13:27.060 --> 01:13:33.910
And so you can probably imagine
that the best structure of this

01:13:33.910 --> 01:13:36.470
is here, those three.

01:13:36.470 --> 01:13:39.644
You've got three pairs of
this sub-sequence here.

01:13:39.644 --> 01:13:41.560
That's as good as you
can do with seven bases.

01:13:41.560 --> 01:13:43.170
You can only get three pairs.

01:13:43.170 --> 01:13:45.003
And this is as good as
you can do with five,

01:13:45.003 --> 01:13:47.050
so these are clearly optimal.

01:13:47.050 --> 01:13:53.900
So the issue comes that if
you're starting from somewhere

01:13:53.900 --> 01:13:58.669
in the middle here-- let's
say you are-- let's see,

01:13:58.669 --> 01:13:59.960
so how would you be doing this?

01:14:02.610 --> 01:14:03.659
You start here.

01:14:03.659 --> 01:14:05.950
Let's suppose the first two
you consider are these two.

01:14:05.950 --> 01:14:08.520
You consider pairing
that T with that A.

01:14:08.520 --> 01:14:12.900
You can see this is
not going to go well.

01:14:12.900 --> 01:14:17.640
You might end up with that
as your optimal substructure

01:14:17.640 --> 01:14:18.410
of this region.

01:14:18.410 --> 01:14:20.285
Remember, you're working
from the inside out,

01:14:20.285 --> 01:14:24.760
so you're going from here to
here, and you end up with that.

01:14:27.790 --> 01:14:29.270
And what do you do here?

01:14:29.270 --> 01:14:30.770
You don't have a G
to pair the C to,

01:14:30.770 --> 01:14:33.880
so you add another
unpaired base.

01:14:33.880 --> 01:14:36.140
Now you've got this
optimal substructure

01:14:36.140 --> 01:14:38.680
of a sequence that's
almost the whole sequence.

01:14:38.680 --> 01:14:40.590
It's just missing the
first and last bases,

01:14:40.590 --> 01:14:43.500
but it only has
three base pairs.

01:14:43.500 --> 01:14:46.410
So when you go to add
this, you can say,

01:14:46.410 --> 01:14:49.560
oh, I can't add any more base
pairs, so I've only got three.

01:14:49.560 --> 01:14:52.280
But you should consider
that we've already

01:14:52.280 --> 01:14:54.570
solved the optimal
structure of that,

01:14:54.570 --> 01:14:57.120
and we had two nice pairs here.

01:14:57.120 --> 01:15:00.480
We had that pair and
that pair, and we already

01:15:00.480 --> 01:15:04.380
solved the substructure
of the optimal structure

01:15:04.380 --> 01:15:06.700
of this portion here, and
you had those three pairs.

01:15:06.700 --> 01:15:09.770
And so you can combine those
two and all of a sudden

01:15:09.770 --> 01:15:12.680
you can do much better.

01:15:12.680 --> 01:15:16.215
So that's what that
bifurcation thing is about.

01:15:20.650 --> 01:15:23.030
So this is the
recursion working out,

01:15:23.030 --> 01:15:25.920
and you can see that's
the base pairing one.

01:15:25.920 --> 01:15:29.470
You can add one, or you can
just add an unpaired base

01:15:29.470 --> 01:15:30.610
and you don't add anything.

01:15:30.610 --> 01:15:33.220
Or you consider all
the possible locations

01:15:33.220 --> 01:15:36.150
of bifurcations in-between the
two positions you're adding,

01:15:36.150 --> 01:15:39.040
i and j, and you consider
all the possible pairs.

01:15:39.040 --> 01:15:43.204
And you just sum up each
pair and go-- I'm sorry,

01:15:43.204 --> 01:15:44.120
you don't sum them up.

01:15:44.120 --> 01:15:48.740
You consider them all, and
then you take the maximum.

01:15:48.740 --> 01:15:54.570
All right, so the algorithm
is to take an n by n matrix,

01:15:54.570 --> 01:15:58.810
initialize the diagonal to 0,
and initialize the sub-diagonal

01:15:58.810 --> 01:16:00.379
to 0 also.

01:16:00.379 --> 01:16:01.920
Just don't think
too much about that.

01:16:01.920 --> 01:16:02.760
Just do it.

01:16:02.760 --> 01:16:07.040
And then fill in this
matrix recursively

01:16:07.040 --> 01:16:09.520
from the diagonal
up and to the right.

01:16:09.520 --> 01:16:12.760
And it actually doesn't matter
what order you fill it in

01:16:12.760 --> 01:16:14.730
as long as you're kind
of working your way up

01:16:14.730 --> 01:16:15.355
into the right.

01:16:15.355 --> 01:16:17.590
You have to have the thing
to the left and the thing

01:16:17.590 --> 01:16:21.500
below already filled in if
you're going to fill in a box.

01:16:21.500 --> 01:16:24.210
And then you keep track of
the optimal score, which

01:16:24.210 --> 01:16:25.980
is going to be the
sum of base pairs.

01:16:25.980 --> 01:16:28.970
And then you also keep
track of how you got there.

01:16:28.970 --> 01:16:32.789
What base pair did you add
so that you can trace back?

01:16:32.789 --> 01:16:34.580
And then when you get
up to the upper right

01:16:34.580 --> 01:16:39.010
corner of this matrix,
you then trace back.

01:16:39.010 --> 01:16:42.190
So here is a partially
filled in this matrix.

01:16:42.190 --> 01:16:44.820
This is from that the
Nature Biotechnology Review.

01:16:44.820 --> 01:16:48.534
And the 0's are filled in.

01:16:48.534 --> 01:16:50.200
So here's what I want
you to do at home,

01:16:50.200 --> 01:16:54.110
is print out, photocopy or
whatever-- make this matrix,

01:16:54.110 --> 01:16:56.260
or make a bigger
version of it perhaps--

01:16:56.260 --> 01:17:00.580
and look at the sequence
and fill in this matrix,

01:17:00.580 --> 01:17:05.284
and fill in the little arrows
every time you add a base pair.

01:17:05.284 --> 01:17:06.450
It's actually not that hard.

01:17:06.450 --> 01:17:09.150
There are no bifurcations in
this, so that's the tricky one.

01:17:09.150 --> 01:17:09.936
Ignore that one.

01:17:09.936 --> 01:17:11.310
You'll just be
adding base pairs.

01:17:11.310 --> 01:17:12.340
It'll be pretty easy.

01:17:12.340 --> 01:17:15.470
And then you can
reconstruct the sequence.

01:17:15.470 --> 01:17:16.835
So here it is filled in.

01:17:16.835 --> 01:17:18.960
And the answer is given,
so you can check yourself.

01:17:18.960 --> 01:17:21.000
But do it without
looking at the answer.

01:17:21.000 --> 01:17:24.160
And then you go to the
upper right corner.

01:17:24.160 --> 01:17:26.000
That means that the
optimal structure

01:17:26.000 --> 01:17:28.250
from the beginning of the
sequence to the end-- which,

01:17:28.250 --> 01:17:30.080
of course, was our
goal all along.

01:17:30.080 --> 01:17:32.590
And then you trace
back and you can

01:17:32.590 --> 01:17:38.410
see whenever you're
moving diagonally here,

01:17:38.410 --> 01:17:40.440
you're adding a base pair.

01:17:40.440 --> 01:17:42.880
Remember, you add
one on each end,

01:17:42.880 --> 01:17:45.590
and so you're moving diagonally
and adding the base pair,

01:17:45.590 --> 01:17:47.940
and you get this
little structure here.

01:17:52.270 --> 01:17:55.427
So computational complexity
of the algorithm.

01:17:55.427 --> 01:17:57.510
You could think about this
but I'll just tell you.

01:17:57.510 --> 01:17:59.415
It's memory n squared
because you've

01:17:59.415 --> 01:18:01.970
got to fill in this
matrix, so square

01:18:01.970 --> 01:18:03.220
of the length of the sequence.

01:18:03.220 --> 01:18:06.100
Time n cubed.

01:18:06.100 --> 01:18:07.210
This is bad now.

01:18:07.210 --> 01:18:08.700
And why is it n cubed?

01:18:08.700 --> 01:18:11.657
It's n cubed because you have to
fill in a matrix that's n by n.

01:18:11.657 --> 01:18:13.490
And then when you do
that maximization step,

01:18:13.490 --> 01:18:16.310
that check for bifurcations,
that's sort of of order n,

01:18:16.310 --> 01:18:16.930
as well.

01:18:16.930 --> 01:18:19.517
So n cubed-- so this means
that RNA folding is slow.

01:18:19.517 --> 01:18:21.100
And in fact, some
of the servers won't

01:18:21.100 --> 01:18:23.058
allow you to fold anything
more than a thousand

01:18:23.058 --> 01:18:27.530
bases because they'll take
forever or something like that.

01:18:27.530 --> 01:18:30.300
And it cannot
handle pseudoknots.

01:18:30.300 --> 01:18:32.420
If you think through
the recursion,

01:18:32.420 --> 01:18:34.220
pseudoknots will be a problem.

01:18:37.170 --> 01:18:40.810
I'm going to just
show you-- yeah,

01:18:40.810 --> 01:18:44.910
I'll get to this-- that
these are from the viruses.

01:18:44.910 --> 01:18:49.010
Real viruses, some of
them have pseudoknots

01:18:49.010 --> 01:18:51.782
like these ones shown
here, and some even

01:18:51.782 --> 01:18:53.990
have these kissing loops,
which is another type where

01:18:53.990 --> 01:18:57.550
the two stem loops,
the loops interact.

01:18:57.550 --> 01:18:59.840
And the pseudoknots
in particular

01:18:59.840 --> 01:19:01.790
are important in the
viral life cycle.

01:19:01.790 --> 01:19:03.900
They can actually cause
programmed ribosomal frame

01:19:03.900 --> 01:19:05.750
shifting.

01:19:05.750 --> 01:19:07.500
When the ribosomes
hits one of the things,

01:19:07.500 --> 01:19:10.332
normally it just denatures
RNA secondary structure.

01:19:10.332 --> 01:19:12.040
When it hits a
pseudoknot, it'll actually

01:19:12.040 --> 01:19:15.420
get knocked back by
one and will start

01:19:15.420 --> 01:19:16.980
translating in a
different frame.

01:19:16.980 --> 01:19:18.670
And that's actually
useful to the virus

01:19:18.670 --> 01:19:20.540
to do that under
certain circumstances.

01:19:20.540 --> 01:19:23.940
That's how HIV makes the
replicated polymerase,

01:19:23.940 --> 01:19:30.870
is by doing a frame shift on
the ribosome using a pseudoknot.

01:19:30.870 --> 01:19:33.790
So these things are important.

01:19:33.790 --> 01:19:40.510
And there's fancier
methods that use

01:19:40.510 --> 01:19:43.010
more sophisticated
thermodynamic models where

01:19:43.010 --> 01:19:46.270
GC counts more than AU.

01:19:46.270 --> 01:19:48.810
And I won't go into
the details, but I just

01:19:48.810 --> 01:19:51.540
wanted to show you some
pretty pictures here

01:19:51.540 --> 01:19:55.110
that the Zuker
algorithm-- this is

01:19:55.110 --> 01:19:59.800
a real world RNA folding
algorithm-- calculates not only

01:19:59.800 --> 01:20:03.610
the minimum energy fold,
but also sub-optimal folds,

01:20:03.610 --> 01:20:05.990
and the probabilities of
particular base pairs,

01:20:05.990 --> 01:20:10.800
summing over all the possible
structures that RNA could form,

01:20:10.800 --> 01:20:14.370
weighted by their free energy.

01:20:14.370 --> 01:20:16.180
So it's the full
partition function.

01:20:16.180 --> 01:20:17.614
It's not perfectly accurate.

01:20:17.614 --> 01:20:19.280
It gets about 70% of
base pairs correct,

01:20:19.280 --> 01:20:20.988
which means it usually
gets things right,

01:20:20.988 --> 01:20:23.230
but occasionally totally wrong.

01:20:23.230 --> 01:20:27.560
And there's a website for the
Mfold server, which is actually

01:20:27.560 --> 01:20:30.370
one of the most beautiful
websites in bioinfomatics,

01:20:30.370 --> 01:20:31.510
I would say.

01:20:31.510 --> 01:20:34.140
And also if you want
to run it locally,

01:20:34.140 --> 01:20:36.480
you should download the
Vienna RNAfold package,

01:20:36.480 --> 01:20:38.880
which has a very
similar algorithm.

01:20:38.880 --> 01:20:41.590
And I just wanted to show
you one or two examples.

01:20:41.590 --> 01:20:43.990
So this is the U5 snRNA.

01:20:43.990 --> 01:20:45.480
This is the output of Mfold.

01:20:45.480 --> 01:20:47.500
It predicts this structure.

01:20:47.500 --> 01:20:50.710
And then this what's called
the energy dot plot, which

01:20:50.710 --> 01:20:55.260
shows the bases in the optimal
structure down below here

01:20:55.260 --> 01:20:58.030
and then sort of these
suboptimal structures here.

01:20:58.030 --> 01:21:00.180
And you can see
there's no ambiguity.

01:21:00.180 --> 01:21:02.850
It's totally confident
in this structure.

01:21:02.850 --> 01:21:07.420
Then I ran the lysine
riboswitch through this program,

01:21:07.420 --> 01:21:09.840
and I got this.

01:21:09.840 --> 01:21:12.060
I got the minimum
for energy structure

01:21:12.060 --> 01:21:13.020
down in the lower left.

01:21:13.020 --> 01:21:15.630
And then you see there's a
lot of other colored dots.

01:21:15.630 --> 01:21:17.450
Those are from the
suboptimal structures.

01:21:17.450 --> 01:21:20.850
So it looks like this thing
has multiple structures, which

01:21:20.850 --> 01:21:21.950
of course it does.

01:21:21.950 --> 01:21:28.050
So the way that this one works
is, in the absence of lysine,

01:21:28.050 --> 01:21:31.810
it forms this structure
where the ribosome binding

01:21:31.810 --> 01:21:34.750
sequences-- this is
prokaryotic-- is exposed.

01:21:34.750 --> 01:21:37.710
And so the ribosome
can enter and translate

01:21:37.710 --> 01:21:40.520
these lysine
biosynthetic enzymes.

01:21:40.520 --> 01:21:43.630
But then when lysine
accumulates to a certain level,

01:21:43.630 --> 01:21:47.900
it can interact with the
RNA and shift it's structure

01:21:47.900 --> 01:21:50.600
so that you now form
this stem, which

01:21:50.600 --> 01:21:52.520
sequesters the ribosome
binding sequence

01:21:52.520 --> 01:21:54.640
and blocks lysine biosynthesis.

01:21:54.640 --> 01:21:56.980
So a very clever system.

01:21:56.980 --> 01:22:00.040
And it turns out
that there's dozens

01:22:00.040 --> 01:22:02.030
of these things in
bacterial genomes,

01:22:02.030 --> 01:22:04.267
and they control a
lot of metabolism.

01:22:04.267 --> 01:22:05.350
So they're very important.

01:22:05.350 --> 01:22:07.590
And there may be some
in eukaryotes, too,

01:22:07.590 --> 01:22:09.077
and that would be good.

01:22:09.077 --> 01:22:10.910
If anyone's looking for
a product, not happy

01:22:10.910 --> 01:22:12.451
with their current
project, you might

01:22:12.451 --> 01:22:15.780
think about looking
for more riboswitches.

01:22:15.780 --> 01:22:18.810
So I'm going to
have to end there.

01:22:18.810 --> 01:22:21.440
And thank you guys
for your attention,

01:22:21.440 --> 01:22:24.500
and good luck on the midterm.