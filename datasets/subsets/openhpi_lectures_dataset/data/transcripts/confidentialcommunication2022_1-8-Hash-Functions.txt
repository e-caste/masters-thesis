WEBVTT

1
00:00:00.890 --> 00:00:04.830 
In our openHPI course "Confidential
Communication in the Internet", we

2
00:00:04.830 --> 00:00:09.960 
want to have now a closer look to
cryptographic hash functions. You remember,

3
00:00:10.410 --> 00:00:15.320 
we already introduced this when we have a
general introduction of cryptographic

4
00:00:16.680 --> 00:00:23.340 
procedures, that in the information
security hash methods are used

5
00:00:23.710 --> 00:00:25.860 
to generate
fingerprints, to

6
00:00:27.070 --> 00:00:33.360 
generate short strings for a document
which characterize a document

7
00:00:34.900 --> 00:00:36.610 
as precise as possible.

8
00:00:37.330 --> 00:00:41.150 
So this fixed length, this
fixed number of characters

9
00:00:42.360 --> 00:00:48.460 
should help later on when we
apply complicated algorithms

10
00:00:50.180 --> 00:00:55.410 
or complicated cryptographic algorithms
that we can apply them to the

11
00:00:55.760 --> 00:01:02.990 
hash instead of the large document.
So the objective that we need,

12
00:01:04.380 --> 00:01:06.900 
the properties we need
for such hash functions

13
00:01:07.330 --> 00:01:13.250 
to apply them in the
cryptography is that compression

14
00:01:13.890 --> 00:01:19.950 
of a document to a fixed length string
of two hundred fifty six bits,

15
00:01:20.640 --> 00:01:25.820 
that it's not possible at least
practically not possible to compute

16
00:01:25.910 --> 00:01:31.640 
from the string back the document.
We speak from a one way

17
00:01:32.190 --> 00:01:34.270 
property, a one way
hash function.

18
00:01:35.930 --> 00:01:40.970 
The second objective is that
it should be very difficult

19
00:01:41.380 --> 00:01:45.650 
to find a second document with
exactly the same hash value.

20
00:01:46.260 --> 00:01:50.390 
This a property is called
collision resistance

21
00:01:51.020 --> 00:01:56.160 
and the idea is if we characterize
one document, for example a contract

22
00:01:56.660 --> 00:02:00.890 
by a hash and the
attacker can modify

23
00:02:01.590 --> 00:02:05.370 
this contract and

24
00:02:06.080 --> 00:02:10.110 
is able to construct a document
with the same hash value

25
00:02:10.610 --> 00:02:16.590 
then all the signature or what
we do to prove that the

26
00:02:17.750 --> 00:02:23.970 
first document is the real one
would be not working.

27
00:02:24.890 --> 00:02:30.270 
How do this cryptographic
hash functions are working?

28
00:02:30.710 --> 00:02:33.150 
So what is the
basic idea behind?

29
00:02:34.090 --> 00:02:38.490 
So when we look to the hash
function then a hash function

30
00:02:38.930 --> 00:02:43.870 
transforms every input to
a fixed length output.

31
00:02:44.380 --> 00:02:47.260 
Say for example, two
hundred fifty six bit.

32
00:02:48.160 --> 00:02:53.850 
These are complex cryptographic
procedures that can be supported

33
00:02:54.150 --> 00:02:59.460 
by such hash from long documents, I
already mentioned digital signature.

34
00:03:00.010 --> 00:03:04.720 
And they need to apply
for the long document

35
00:03:05.260 --> 00:03:10.990 
but when we have a hash then this can
be also be applied to the short hash

36
00:03:11.490 --> 00:03:17.200 
instead of the long document would
improve the performance radically.

37
00:03:18.780 --> 00:03:21.910 
So in order to ensure
the one-way property,

38
00:03:22.420 --> 00:03:26.190 
special types of hash
functions are required

39
00:03:26.590 --> 00:03:31.380 
and these are the
cryptographic hash functions.

40
00:03:32.360 --> 00:03:40.010 
Here is an idea how this works. We have
our document. We want to prove that,

41
00:03:40.330 --> 00:03:43.510 
I want to prove that the
document comes from me.

42
00:03:44.060 --> 00:03:50.640 
So I say I can do this by encrypting
the document with my private key.

43
00:03:51.320 --> 00:03:56.260 
But when the document is long it needs
a lot of computational power.

44
00:03:56.750 --> 00:04:01.010 
So the better way is
to compute from the

45
00:04:01.410 --> 00:04:08.220 
document the hash value. It is a short string.
And then to encrypt this short string

46
00:04:08.710 --> 00:04:13.360 
instead of the document and
this exactly is the idea

47
00:04:13.360 --> 00:04:16.150 
behind the digital
signature. We will discuss

48
00:04:16.610 --> 00:04:18.440 
later in another video.

49
00:04:19.450 --> 00:04:23.850 
So before we can go
into more detail,

50
00:04:24.500 --> 00:04:28.160 
some definitions are needed.
So a hash function

51
00:04:28.730 --> 00:04:34.790 
is a function. A collision free
for a message M is called a

52
00:04:34.810 --> 00:04:40.340 
collision free for a message M if it is
practically impossible to construct

53
00:04:40.480 --> 00:04:45.750 
another message M'
different from M with

54
00:04:46.190 --> 00:04:49.570 
properties that have
the same hash value.

55
00:04:50.890 --> 00:04:54.130 
This is the collision
freeness for a message

56
00:04:54.580 --> 00:04:58.120 
and then we have see the
notion of collision free.

57
00:04:58.950 --> 00:05:00.960 
And this means that
it is practically

58
00:05:01.620 --> 00:05:08.240 
impossible to find two different messages
M and M' with this property.

59
00:05:08.630 --> 00:05:15.840 
So here it's to find for a given message, a
second one here the collision freeness

60
00:05:16.170 --> 00:05:17.730 
is a property that
it should be

61
00:05:18.510 --> 00:05:23.270 
practically impossible to find two
messages with the same hash value.

62
00:05:23.740 --> 00:05:27.050 
And of course this is a property
of the hash function h.

63
00:05:28.590 --> 00:05:33.850 
This hash function has to be
designed in a very special way.

64
00:05:34.260 --> 00:05:39.590 
And then a one way function property
we already mentioned. One way

65
00:05:40.930 --> 00:05:45.160 
hash function h is called a one
way function if it's practically

66
00:05:46.030 --> 00:05:48.550 
impossible to find a message

67
00:05:49.070 --> 00:05:52.170 
with a given hash value

68
00:05:52.880 --> 00:05:54.250 
as a fingerprint.

69
00:05:55.510 --> 00:06:02.640 
And hash function with hese properties
are called cryptographic hash functions.

70
00:06:03.200 --> 00:06:08.010 
So they are collision free
and they are one way.

71
00:06:09.820 --> 00:06:14.390 
Let's have a look to the length
of the hash value. We said all

72
00:06:14.390 --> 00:06:20.300 
the different documents should be
assigned to a fixed length string.

73
00:06:21.530 --> 00:06:24.950 
And this length of the hash
value plays an important role.

74
00:06:25.520 --> 00:06:30.840 
And to understand this I will
present to you a mathematical

75
00:06:31.690 --> 00:06:37.570 
theorem which is known
as the birthday paradox.

76
00:06:38.030 --> 00:06:39.730 
And the theorem says,

77
00:06:40.740 --> 00:06:46.290 
already in a group of twenty three
randomly selected people,

78
00:06:47.670 --> 00:06:51.240 
there is a probability
that two have the same

79
00:06:51.720 --> 00:06:53.390 
day, the same
birthday

80
00:06:54.320 --> 00:06:59.360 
in a year. It's higher than
half. So the year has

81
00:07:00.050 --> 00:07:05.740 
three hundred fifty five days and the
probability is larger than half

82
00:07:05.990 --> 00:07:12.330 
that in a randomly selected group to
celebrate the same day in the year

83
00:07:12.530 --> 00:07:17.670 
their birthday. Not celebrate, but they
have the same day as their birthday.

84
00:07:18.380 --> 00:07:24.320 
And this has some consequences
for the consideration

85
00:07:24.950 --> 00:07:28.800 
of the length of the valuable
length of hash functions.

86
00:07:29.360 --> 00:07:35.040 
Let's consider a hash function with
the hash value length of forty bits.

87
00:07:36.490 --> 00:07:39.910 
When we apply this
mathematical theorem

88
00:07:40.390 --> 00:07:43.880 
then we can tell with probability

89
00:07:44.610 --> 00:07:46.410 
larger than one half,

90
00:07:47.140 --> 00:07:53.880 
there is a collision with only k two to
the power twenty, it's about one million

91
00:07:54.130 --> 00:07:59.220 
random values. Hash value
is thus quite uncertain.

92
00:07:59.910 --> 00:08:06.830 
So we can construct, we can find a
random, we can find two documents

93
00:08:07.380 --> 00:08:14.630 
with the same value, with the same
hash value among the one million.

94
00:08:14.860 --> 00:08:16.960 
So this is not

95
00:08:18.330 --> 00:08:21.340 
secure enough for the
purpose we want to have it.

96
00:08:21.870 --> 00:08:26.040 
When we apply the same consideration
to hash values of length

97
00:08:26.040 --> 00:08:27.310 
two hundred and
fifty six,

98
00:08:28.090 --> 00:08:33.490 
then we got that with probability
larger one half, there is a collision

99
00:08:33.730 --> 00:08:39.850 
merely with k equal to
two to one hundred one

100
00:08:40.060 --> 00:08:43.560 
twenty eight random
values. So this is a

101
00:08:44.440 --> 00:08:49.970 
unimaginable large
number of values.

102
00:08:50.430 --> 00:08:57.210 
So it is considered secure against
this relatively small value

103
00:08:57.210 --> 00:08:59.610 
we have is the hash
value is short.

104
00:09:01.690 --> 00:09:05.140 
So what are the attacks against
cryptographic hash functions?

105
00:09:05.880 --> 00:09:10.870 
The target of the attacks
is there is no keys.

106
00:09:11.440 --> 00:09:16.090 
In this case here is no key search
so we will not find the key

107
00:09:16.300 --> 00:09:18.750 
like in the case
of a cracking

108
00:09:19.640 --> 00:09:25.740 
the symmetric or asymmetric
encryption method. Here in the

109
00:09:25.740 --> 00:09:31.830 
case of hash functions, the attack
is to find two different messages

110
00:09:32.180 --> 00:09:37.260 
with the same hash value. To find to
consequently find the collusion

111
00:09:37.770 --> 00:09:42.910 
or to finding a new message for a
given one with the same hash value.

112
00:09:43.140 --> 00:09:45.550 
This is a goal of the
attack, so it's different

113
00:09:45.970 --> 00:09:49.120 
in the case of the
encryption functions.

114
00:09:50.920 --> 00:09:53.300 
Also here the birthday
attack plays a role.

115
00:09:53.700 --> 00:09:58.780 
When modifying messages to create
messages with the same hash value

116
00:09:59.430 --> 00:10:02.330 
it is necessary
to add a two

117
00:10:03.120 --> 00:10:05.880 
to the n/2 attempts
are sufficient.

118
00:10:06.790 --> 00:10:10.230 
The idea is starting with the
message and then modifying this

119
00:10:10.230 --> 00:10:15.600 
method in such a way that we get many
different, formally different messages.

120
00:10:16.310 --> 00:10:22.640 
But to find a modified message with
the same hash value we only need

121
00:10:22.930 --> 00:10:28.820 
two to the n/2 attempts. And
this shows that the length

122
00:10:28.820 --> 00:10:30.280 
of the hash function

123
00:10:30.910 --> 00:10:35.880 
is the key. So the
longer the hash value,

124
00:10:36.510 --> 00:10:41.980 
the more attempts are needed
for finding two documents

125
00:10:42.100 --> 00:10:47.550 
with the same hash value. So for example
the length of one hundred ninety two

126
00:10:47.720 --> 00:10:53.560 
or two hundred fifty six bits is
good, that when one has a message

127
00:10:54.020 --> 00:10:57.690 
with a hash factor hash value and
one tries to find another message

128
00:10:57.950 --> 00:10:59.360 
with the same
hash value, then

129
00:11:00.100 --> 00:11:04.030 
this is practically not
possible for these

130
00:11:05.350 --> 00:11:09.350 
high length of hash values.

131
00:11:10.690 --> 00:11:14.240 
The popular hash functions
are the following

132
00:11:15.210 --> 00:11:20.820 
which are implied in the cryptographic
procedures we will discuss later.

133
00:11:21.590 --> 00:11:27.970 
There is a SHA, the secure hash algorithm,
which was developed in the early

134
00:11:28.560 --> 00:11:30.670 
nineties of last
century by

135
00:11:31.530 --> 00:11:35.450 
mathematicians of the
NSA. SHA1 was a

136
00:11:36.430 --> 00:11:40.690 
revised version of SHA which was
published in nineteen ninety five

137
00:11:41.010 --> 00:11:45.570 
and generates a hash value of
length one hundred sixty bits.

138
00:11:46.640 --> 00:11:51.170 
The theoretical
weakness of SHA-1

139
00:11:52.140 --> 00:11:58.050 
was shown in different attacks.
So the first in February 2005,

140
00:11:58.370 --> 00:12:01.480 
here a Chinese team of
mathematicians find

141
00:12:02.080 --> 00:12:06.420 
a theoretical approach to
crack SHA-1 by two to the

142
00:12:07.190 --> 00:12:12.480 
sixty nine attempts. This was
improved in august 2005 by another

143
00:12:12.710 --> 00:12:17.870 
successful attempt which only need instead
of the two hundred and sixty nine, only

144
00:12:18.110 --> 00:12:24.010 
two hundred sixty three attempts. This is a
huge amount. So it's a theoretical weakness.

145
00:12:24.630 --> 00:12:27.250 
And then in February 2017

146
00:12:27.670 --> 00:12:32.470 
the first published
condition of SHA 1 with a two

147
00:12:32.470 --> 00:12:36.570 
different pdf documents with
the same checksum. So here

148
00:12:37.160 --> 00:12:45.610 
it was detected, it showed that
collision free is not guaranteed.

149
00:12:45.990 --> 00:12:50.170 
So today the difficulty, the
number of attempts that are

150
00:12:50.170 --> 00:12:54.950 
needed to create such a collision is
two to the fifty seven point five.

151
00:12:55.580 --> 00:13:01.380 
So it comes into the fear that
we can practically perform such

152
00:13:02.140 --> 00:13:07.770 
such attacks. And for that reason
cracking a SHA-1 hash value less

153
00:13:08.080 --> 00:13:11.130 
is today possible with

154
00:13:11.930 --> 00:13:18.110 
renting computing power in the cloud for
less than fifty thousand US dollar.

155
00:13:18.330 --> 00:13:23.150 
So SHA-1 is no more, should
no more be used, is no more

156
00:13:23.630 --> 00:13:26.700 
is no more secure.
But there is a

157
00:13:27.360 --> 00:13:31.900 
successor which was developed
in two thousand and two.

158
00:13:32.310 --> 00:13:35.970 
It's a little bit similar.
It's a family of SHA,

159
00:13:36.570 --> 00:13:40.630 
different SHA function. It's a little
bit similar in the basic idea

160
00:13:41.670 --> 00:13:44.820 
with SHA-1 but the
SHA-2 family

161
00:13:45.500 --> 00:13:50.940 
which includes SHA-224, SHA-256,

162
00:13:50.940 --> 00:13:53.960 
SHA-384 and SHA-512

163
00:13:55.130 --> 00:14:02.240 
provide more secure hash functions.
This number here gives the length

164
00:14:02.420 --> 00:14:07.240 
of the hash value. So
for example SHA-256

165
00:14:07.290 --> 00:14:09.880 
nowadays is one of
the most common

166
00:14:11.220 --> 00:14:14.450 
cryptographic hash
functions applied

167
00:14:15.560 --> 00:14:20.440 
to guarantee a confidential
communication in the internet. It

168
00:14:20.440 --> 00:14:23.270 
was standardized in 2002

169
00:14:23.880 --> 00:14:29.210 
and it processes blocks of
length five hundred twelve.

170
00:14:30.640 --> 00:14:34.900 
Eventually the last block of a
document have to be filled up to the

171
00:14:35.080 --> 00:14:37.380 
five hundred
twelve bits and

172
00:14:38.210 --> 00:14:41.590 
the hash where it is

173
00:14:42.420 --> 00:14:47.090 
generated is two
hundred fifty six bit

174
00:14:47.760 --> 00:14:52.050 
values. So here for
example when we this

175
00:14:52.050 --> 00:14:57.710 
SHA-256 apply for a
sentence like "Franz chases

176
00:14:57.710 --> 00:15:02.810 
in a completely neglected taxi
across Bavaria" then we get this

177
00:15:03.780 --> 00:15:06.090 
then we get this

178
00:15:06.760 --> 00:15:11.170 
hash value produced,
computed with the

179
00:15:11.170 --> 00:15:13.670 
SHA-256.

180
00:15:14.790 --> 00:15:19.430 
There are more common cryptographic
hash functions, for example MD-4,

181
00:15:19.570 --> 00:15:26.290 
MD-5. Today they lack already a
collision safety. So they are

182
00:15:26.490 --> 00:15:30.970 
or should no more be
used. So we have RIPE-MD.

183
00:15:31.430 --> 00:15:35.110 
There exists different
variants with different

184
00:15:35.570 --> 00:15:39.430 
hash of different
lengths - 128, 160,

185
00:15:39.500 --> 00:15:43.440 
256 and so on. And
the collision attacks

186
00:15:44.110 --> 00:15:50.350 
are possible in the original RIPE
MD method but with longer

187
00:15:50.910 --> 00:15:53.680 
hashes it's much
more complicated

188
00:15:54.390 --> 00:15:58.410 
to construct. Jacuzzi is
another hash value

189
00:15:58.920 --> 00:16:03.170 
with five hundred twelve
bit long hashes

190
00:16:03.640 --> 00:16:07.620 
and this is some
used and applied

191
00:16:08.640 --> 00:16:16.130 
with AES, is designed
with AES ideas.

192
00:16:16.890 --> 00:16:20.410 
AES you remember
was a symmetric

193
00:16:21.110 --> 00:16:27.410 
encryption method. And then SHA-3
which is Keccak, also called,

194
00:16:27.740 --> 00:16:30.690 
was standardized in October
two hundred twelve

195
00:16:31.100 --> 00:16:33.090 
and provides an
alternative,

196
00:16:33.870 --> 00:16:37.350 
later on eventually
successor, to SHA-2.

197
00:16:38.870 --> 00:16:43.620 
So these are the cryptographic hash
functions that are needed later on

198
00:16:43.820 --> 00:16:49.490 
in cryptographic procedures like the
cryptographic protocols,

199
00:16:49.700 --> 00:16:52.040 
like the digital
signature protocol.

200
00:16:52.830 --> 00:16:56.240 
We will speak about
this in another clip.
