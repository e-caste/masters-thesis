WEBVTT

1
00:00:00.860 --> 00:00:04.210 
now let's speak about
attacks on services

2
00:00:04.540 --> 00:00:07.680 
and applications.there
are many.

3
00:00:08.220 --> 00:00:12.210 
the reason is the Internet
enables access to various

4
00:00:12.650 --> 00:00:17.160 
popular services from very different
nature. so as the famous

5
00:00:17.160 --> 00:00:21.640 
world wide web, email, data transfer,
computers remote control, e.g,

6
00:00:21.640 --> 00:00:25.600 
TELNET/SSH. this all
of the application

7
00:00:26.030 --> 00:00:28.930 
of the Internet. each
of the service

8
00:00:29.250 --> 00:00:33.480 
a is based on a specially
developed software so occurred

9
00:00:33.720 --> 00:00:38.870 
a application protocol and these
protocols are like all software,

10
00:00:39.040 --> 00:00:42.080 
can have weaknesses, can
have vulnerabilities.

11
00:00:43.130 --> 00:00:47.800 
attackers have found a lot of
such vulnerabilities and they

12
00:00:47.800 --> 00:00:50.510 
are able to exploit
this vulnerabilities.

13
00:00:50.840 --> 00:00:54.760 
and he by means of this
exploit they are able

14
00:00:54.970 --> 00:01:01.840 
to attack a system and to get
access to big secret data or

15
00:01:01.840 --> 00:01:06.740 
to disturb something.
let's consider

16
00:01:06.920 --> 00:01:11.280 
some concrete attacks. a famous
one is the denial service

17
00:01:11.670 --> 00:01:15.750 
attack. there is a simple
goal: the attacker

18
00:01:16.310 --> 00:01:22.860 
wants to get the service terminated
or at least restrict of the

19
00:01:22.860 --> 00:01:26.670 
functionality of such service.
so is is also famous

20
00:01:26.890 --> 00:01:31.900 
denial of service
attacks. so the idea is

21
00:01:32.280 --> 00:01:36.090 
to come into a situation that the
service is no longer available

22
00:01:36.460 --> 00:01:40.640 
for interested users or that
needs a long time for the users

23
00:01:40.970 --> 00:01:46.330 
and to get served. the common
attack method for such Denial of

24
00:01:46.330 --> 00:01:49.810 
service attack is
simply Bombardment

25
00:01:50.010 --> 00:01:55.980 
of the service with requests.
each service a is used that

26
00:01:55.990 --> 00:02:00.830 
the user sends a request and
then the service replies.

27
00:02:02.520 --> 00:02:05.460 
each client requests to
a server, of course

28
00:02:06.030 --> 00:02:08.980 
occupies server
resources of server

29
00:02:09.420 --> 00:02:13.880 
for the time of processing
of the request.

30
00:02:14.450 --> 00:02:18.570 
so to disturb such
a work of such

31
00:02:19.150 --> 00:02:24.900 
service is to
overload this

32
00:02:25.070 --> 00:02:29.990 
this resource requirements. resources
that are needed for performing

33
00:02:29.990 --> 00:02:33.280 
memory, network bandwidth,
computing power.

34
00:02:33.930 --> 00:02:39.060 
and if the attacker are able
to send a large number of

35
00:02:39.060 --> 00:02:43.240 
simultaneous requests, in the
same moment ,to a service

36
00:02:43.580 --> 00:02:47.040 
this can lead to overload
of the server.

37
00:02:47.250 --> 00:02:51.150 
a service in the
result is no more

38
00:02:51.340 --> 00:02:56.370 
able to react in the right way. so
it's a request from the attacker's

39
00:02:56.380 --> 00:03:01.460 
are designed in such a way that
as many resources as possible

40
00:03:01.470 --> 00:03:07.260 
are tied up for as long
as possible. so what

41
00:03:07.890 --> 00:03:11.780 
the attacks will do is
simply do whatever users

42
00:03:11.780 --> 00:03:14.990 
doing but they do
this with an

43
00:03:15.270 --> 00:03:20.490 
idea to disturb service. nowadays,
server performance is usually

44
00:03:20.490 --> 00:03:26.280 
very very high. a singer attacker
is no more able to execute

45
00:03:26.280 --> 00:03:29.950 
such a denial of service
attack, therefore

46
00:03:30.350 --> 00:03:32.770 
the idea of attack is

47
00:03:33.040 --> 00:03:36.420 
to perform such
a distributed

48
00:03:36.700 --> 00:03:40.540 
denial of service
attack. such DDoS.

49
00:03:41.070 --> 00:03:47.350 
and here an attacker or multiple
coordinated attackers

50
00:03:47.530 --> 00:03:51.960 
sent a flood of queries

51
00:03:52.130 --> 00:03:58.170 
from different sources. and the question
is how they can organizes it?

52
00:03:59.200 --> 00:04:04.680 
so a variety of attacker sources
are synchronized via agreements

53
00:04:04.700 --> 00:04:08.730 
in forums or in small helper
programs or malware.

54
00:04:09.280 --> 00:04:14.170 
so we already discussed about
the botnets. so the idea here

55
00:04:14.560 --> 00:04:19.440 
of the attacker to by means
of malware, for example,

56
00:04:19.440 --> 00:04:23.890 
by means of such
forums agreement

57
00:04:24.290 --> 00:04:30.030 
that many users in the same
moment send and request to the

58
00:04:30.400 --> 00:04:36.380 
service. and then even if the
servers are very powerful,

59
00:04:36.780 --> 00:04:39.430 
behind the services, the
server is overloaded

60
00:04:39.810 --> 00:04:44.910 
by a multitude of a request.
so the distributed denial

61
00:04:44.910 --> 00:04:49.100 
of service attacks are
very often carried out

62
00:04:49.290 --> 00:04:53.620 
by botnets and we discuss is
already sometimes they consist

63
00:04:53.620 --> 00:04:58.720 
of millions of parts. the
idea to repeat this botnets

64
00:04:58.720 --> 00:05:02.530 
was that there is a central
command and control server

65
00:05:02.850 --> 00:05:08.590 
which is controlled by the attacker and
the attacker launches the attack.

66
00:05:08.590 --> 00:05:12.220 
that means the
attack send

67
00:05:12.230 --> 00:05:17.150 
the requests and the trojans
on hijacked computers

68
00:05:17.490 --> 00:05:21.010 
and unceasing the in command
and control server,

69
00:05:21.220 --> 00:05:26.030 
they perform the time-synchronised
attacks and in the

70
00:05:26.040 --> 00:05:31.460 
the same moment all the
bots of the botnets in

71
00:05:31.460 --> 00:05:38.860 
same moment will send request to the
service. here we see it in a picture.

72
00:05:39.140 --> 00:05:42.600 
this is the victim, and
here is the attacker

73
00:05:42.790 --> 00:05:47.730 
with his comment and
control-server. so before he can

74
00:05:47.860 --> 00:05:53.680 
perform such an attack, he needs
to acquire such bot computers.

75
00:05:53.970 --> 00:05:59.000 
that means it need to get
the malware installed

76
00:05:59.000 --> 00:06:04.690 
of the computer which here
are wait for a commend

77
00:06:04.690 --> 00:06:08.210 
of the common control
to get controls over

78
00:06:08.400 --> 00:06:13.340 
to perform. in this way, a
request for the computer.

79
00:06:13.910 --> 00:06:18.640 
so many of text we discussed
already have the goal

80
00:06:19.090 --> 00:06:25.900 
to get access to your computer
and to allows the attacker

81
00:06:26.050 --> 00:06:29.810 
to control your
computer. for example,

82
00:06:30.050 --> 00:06:34.700 
to send single
for starting

83
00:06:34.870 --> 00:06:37.610 
such a distributed denial
of service attack.

84
00:06:39.340 --> 00:06:43.250 
there are some spectacular
examples for such denial of

85
00:06:43.250 --> 00:06:47.620 
service attacks. for example, from
august in two thousand sixteen,

86
00:06:48.670 --> 00:06:52.540 
Mirai Botnet was identified as
the most powerful botnets

87
00:06:52.550 --> 00:06:56.630 
with a 620 Gbit/s

88
00:06:56.820 --> 00:07:02.320 
traffic against computers
journalist Krebs

89
00:07:02.700 --> 00:07:06.490 
and up to 1 Tbit/s
against the french

90
00:07:06.490 --> 00:07:13.260 
web host "OVH". and it
was used to attack

91
00:07:13.560 --> 00:07:18.850 
the DNS provided "Dyn" and a effected
high-profile websites, for

92
00:07:18.850 --> 00:07:23.550 
example, GitHub, Twitter,
Netflix, and utilised a

93
00:07:23.710 --> 00:07:27.330 
a lot of IoT devices.

94
00:07:28.150 --> 00:07:32.790 
so here you see it was a
huge number of computers

95
00:07:33.020 --> 00:07:36.690 
they were able to
control and to perform

96
00:07:36.940 --> 00:07:41.690 
as such denial of service
attack. another

97
00:07:41.690 --> 00:07:44.920 
famous example of such
denial of service attack

98
00:07:45.070 --> 00:07:47.900 
was in february 2014.

99
00:07:48.270 --> 00:07:53.930 
a distributed denial service attack
on the "CloudFlare" infrastructure

100
00:07:54.350 --> 00:07:59.330 
of a provider of such
denial of service

101
00:07:59.520 --> 00:08:04.670 
protection with the
highest load of up to

102
00:08:04.920 --> 00:08:10.200 
400 Gbit/s per second.
so there are

103
00:08:10.200 --> 00:08:14.950 
some protection running
in the internet

104
00:08:14.960 --> 00:08:19.960 
try to find such sources for
such denial of service attack,

105
00:08:20.650 --> 00:08:24.530 
try to recognize denial service
attack and to provide some

106
00:08:24.530 --> 00:08:28.800 
protection. and exactly, such
an projection a platform

107
00:08:28.940 --> 00:08:33.420 
was a goal of such distributed
denial of service attack

108
00:08:33.580 --> 00:08:40.000 
with a huge amount of
power. At last, i

109
00:08:40.160 --> 00:08:43.280 
want to mention a denial of
service attack from march 2013.

110
00:08:43.280 --> 00:08:47.620 
an attack on the
s"Spamhaus.org",

111
00:08:47.910 --> 00:08:52.290 
this is a known operator of a
blacklist for spam email addresses.

112
00:08:52.550 --> 00:08:58.020 
so also he you see these attackers
are very much interested

113
00:08:58.370 --> 00:09:03.570 
to attack also such
protection platforms

114
00:09:03.790 --> 00:09:05.910 
and protection
services.

115
00:09:09.500 --> 00:09:12.930 
we can speak a lot
more about denial of

116
00:09:12.930 --> 00:09:17.240 
service attack, but we want to
consider different services and

117
00:09:17.240 --> 00:09:20.280 
attacks. again, different
service for example attacks

118
00:09:21.040 --> 00:09:25.990 
against email system. and
an important attack

119
00:09:25.990 --> 00:09:30.960 
via email system is sending
fishing and spam messages.

120
00:09:32.260 --> 00:09:38.000 
the fishing and spam
messages account for 80%

121
00:09:38.000 --> 00:09:42.420 
of all email traffic.

122
00:09:42.850 --> 00:09:47.930 
so that's a huge problem.
only one of five

123
00:09:48.110 --> 00:09:52.620 
emails are real emails. the others
are spam and phishing e-mails.

124
00:09:53.410 --> 00:09:58.120 
normally such fishing and spam
mails contain advertising

125
00:09:58.840 --> 00:10:04.080 
or fraudulent messages.
the senders' address

126
00:10:04.300 --> 00:10:09.140 
is typically fake. we already
spoke about e-mails spoofing.

127
00:10:09.470 --> 00:10:12.390 
so that attacker
are not detected,

128
00:10:12.760 --> 00:10:16.460 
and many people do
not know that

129
00:10:16.640 --> 00:10:20.070 
their address
is misused

130
00:10:20.260 --> 00:10:27.210 
for such fishing or spam message.
the distribution is typically

131
00:10:27.430 --> 00:10:33.010 
organized via botnets.( in
this case is mostly from the

132
00:10:33.010 --> 00:10:39.020 
email account of users
of pirated bots.

133
00:10:39.020 --> 00:10:44.540 
another typical way
for sending such

134
00:10:44.550 --> 00:10:48.710 
fishing and spam messages are
the open a relay a server.

135
00:10:49.130 --> 00:10:53.290 
this is faulty configured
email server

136
00:10:53.730 --> 00:10:57.840 
allowing the sender
distribution

137
00:10:58.100 --> 00:11:03.570 
under an account which
is not verified.

138
00:11:04.090 --> 00:11:08.760 
so there are ways to
send a huge number

139
00:11:09.050 --> 00:11:15.450 
of spam and
phishing emails

140
00:11:15.870 --> 00:11:19.280 
for different criminal
purposes. another

141
00:11:19.460 --> 00:11:23.230 
attack runs by means of
e-mail is sending of

142
00:11:23.480 --> 00:11:28.780 
malicious code. typically
that malicious code

143
00:11:28.780 --> 00:11:33.570 
is sent by hidden in a
spoofed email. for example,

144
00:11:33.900 --> 00:11:39.900 
in a form of an email's
attachment. in the moment

145
00:11:39.900 --> 00:11:44.750 
the victim doesn't know
there is unwanted code and

146
00:11:44.960 --> 00:11:50.550 
opens this attachment, then the code
which hidden in the attachment

147
00:11:50.550 --> 00:11:56.280 
is automatically

148
00:11:56.280 --> 00:12:01.430 
performed on the computer
of the user or who opened

149
00:12:01.790 --> 00:12:06.810 
as a attachment. and then later,
this malicious code with

150
00:12:07.480 --> 00:12:12.060 
different very different nature
is located on his computer.

151
00:12:13.680 --> 00:12:18.040 
also, a denial of service
attacks are possible on email

152
00:12:18.040 --> 00:12:23.990 
service. server can only
handle a limited amount of

153
00:12:24.000 --> 00:12:27.870 
open (TCP) connections., which
are used when the email is

154
00:12:28.140 --> 00:12:32.380 
sent or received. and
the idea is to disturb

155
00:12:32.900 --> 00:12:38.000 
the functionality of such
an email server or even

156
00:12:38.300 --> 00:12:43.600 
to let it crash down. make
numerous connections is

157
00:12:43.600 --> 00:12:46.700 
the idea of such denial service
attack is that an attacker.

158
00:12:46.910 --> 00:12:51.220 
because the service only able
to handle a limited number of

159
00:12:51.220 --> 00:12:56.490 
such tcp connection. the attacker
makes numerous connections

160
00:12:56.680 --> 00:13:00.130 
to email server without
the ideal to send data.

161
00:13:00.630 --> 00:13:05.280 
the idea is to open such
connection to take resource

162
00:13:05.810 --> 00:13:09.940 
of the server, is no
more able to work in

163
00:13:09.940 --> 00:13:15.190 
the right way. so then data is
deliberately transmitted very

164
00:13:15.190 --> 00:13:19.380 
very slowly, in order to
keep the connection open

165
00:13:19.610 --> 00:13:24.470 
for a long time. This is the
so-called slowloris attack.

166
00:13:24.820 --> 00:13:29.110 
keep it open for long time and
then the server can only handels

167
00:13:29.110 --> 00:13:34.490 
limited number. so after while
the server is no more able

168
00:13:34.670 --> 00:13:39.610 
to work correctly. another
attack on the email system is

169
00:13:39.610 --> 00:13:43.600 
brute force attack. an attacker
systematically attempts to

170
00:13:43.600 --> 00:13:47.480 
log on to the email server by
trying all possible user

171
00:13:47.650 --> 00:13:51.050 
possible user-password combination.
you know a system are

172
00:13:51.310 --> 00:13:56.760 
secured by a username and
password. and the idea of

173
00:13:56.760 --> 00:14:01.330 
Brute force attack is
systematically to find out

174
00:14:01.330 --> 00:14:05.150 
passwords for user
name to get access.

175
00:14:06.380 --> 00:14:11.300 
this can be successful,
because some services

176
00:14:11.310 --> 00:14:15.000 
limit the number of
login attempts.

177
00:14:15.490 --> 00:14:19.150 
The carefully
configured services

178
00:14:19.390 --> 00:14:25.690 
allow user only try a
limited number times

179
00:14:25.690 --> 00:14:30.100 
to give in username password. of
course for this brute force attack,

180
00:14:30.210 --> 00:14:34.370 
when it's an unlimited or
number for such login,

181
00:14:34.380 --> 00:14:38.740 
this kind of attack can
become successful.

182
00:14:39.140 --> 00:14:43.840 
if a service not correctly
configured, an attacker can then

183
00:14:44.020 --> 00:14:49.060 
take over the user account with
a cracked password and can

184
00:14:49.060 --> 00:14:53.810 
become active in the name of
the user. it's not only

185
00:14:54.010 --> 00:14:59.010 
the users' addresses
by address spoofing.

186
00:14:59.200 --> 00:15:01.940 
when he managed

187
00:15:02.400 --> 00:15:06.170 
to get in, he can use the
account of the user

188
00:15:06.370 --> 00:15:09.710 
in a fully
authenticated away.

189
00:15:11.000 --> 00:15:14.420 
many of say attacks
we discussed on the

190
00:15:14.420 --> 00:15:20.580 
email system, can be easily prevented
with a reliable authentication.

191
00:15:21.210 --> 00:15:24.390 
authentication is a very
important thing we

192
00:15:24.560 --> 00:15:28.860 
discuss already, since when the
internet protocols are designed.

193
00:15:29.310 --> 00:15:32.760 
this was a research project
that not considered to become

194
00:15:33.070 --> 00:15:36.820 
a system that's used by
billions of people.

195
00:15:37.260 --> 00:15:42.920 
so authentication mechanisms
often have dropped down. so

196
00:15:43.220 --> 00:15:47.030 
for example, for such in
reliable out authentication,

197
00:15:47.250 --> 00:15:50.960 
there are different approaches.
for example SMTP-AUTH.

198
00:15:51.250 --> 00:15:55.030 
this was an
email protocol

199
00:15:55.400 --> 00:15:59.760 
which allows authentication
with email

200
00:15:59.770 --> 00:16:03.220 
servers via login
password combination.

201
00:16:03.650 --> 00:16:09.200 
today it is common with
email service and he

202
00:16:09.880 --> 00:16:13.280 
general, there is
another way,

203
00:16:13.550 --> 00:16:18.420 
to have possibilities
for reliable

204
00:16:18.420 --> 00:16:22.270 
authentication when
one uses TLS/SSL

205
00:16:22.600 --> 00:16:26.280 
connections, because
this infrastructure

206
00:16:26.280 --> 00:16:30.570 
allows authentication to the
email server by means of a

207
00:16:30.570 --> 00:16:35.130 
digital certificate.
PGP, the pretty good

208
00:16:35.130 --> 00:16:38.340 
privacy. it's a quite
famous system

209
00:16:38.540 --> 00:16:44.280 
like this SMIME here which
enable an end to end

210
00:16:44.280 --> 00:16:47.860 
encryption of emails and
certificate- based authentication

211
00:16:48.100 --> 00:16:52.070 
by the recipient. so
the difference here

212
00:16:52.240 --> 00:16:57.280 
between tls/ssl and PGP is, PGP
is a system that's dedicated

213
00:16:57.620 --> 00:17:02.890 
to provide

214
00:17:03.110 --> 00:17:06.260 
particular security service
for the email application.

215
00:17:06.670 --> 00:17:12.260 
this TLS/SSL infrastructure can
be used for email service

216
00:17:12.260 --> 00:17:18.480 
but can be used also for other
services. so an appropriate

217
00:17:18.480 --> 00:17:24.060 
authentication significantly reduces
the effectiveness of these attacks.

218
00:17:24.260 --> 00:17:29.470 
so users should take care about
this protection matter.

219
00:17:31.080 --> 00:17:34.410 
if we look further
for attacks,

220
00:17:34.810 --> 00:17:39.350 
one of the most famous, important and
dangerous attacks is the remote

221
00:17:39.640 --> 00:17:44.880 
code execution. remote code
execution refers to exploiting of

222
00:17:44.880 --> 00:17:48.990 
vulnerability of a remote
service with the goal

223
00:17:49.350 --> 00:17:52.080 
of executing malicious
code on the server

224
00:17:52.370 --> 00:17:57.520 
of the service provider. so is
the idea is that the attacker

225
00:17:57.740 --> 00:18:01.910 
is seeking a full access
to the service offered

226
00:18:02.370 --> 00:18:05.860 
remotes code execution,

227
00:18:06.100 --> 00:18:09.810 
is a very dangerous attack,
because the attacker

228
00:18:10.020 --> 00:18:14.360 
can do with services
a lot of things.

229
00:18:15.700 --> 00:18:20.040 
what are the reasons? the reason
that attackers are successful

230
00:18:20.040 --> 00:18:24.360 
with such kind of remote
code execution attacks

231
00:18:24.710 --> 00:18:29.580 
is that user inputs are not
filtered in the right way.

232
00:18:30.100 --> 00:18:33.990 
so for many service you has to
give in for example, which kind

233
00:18:33.990 --> 00:18:36.300 
of things you want to have
or what you want to buy,

234
00:18:36.300 --> 00:18:41.640 
or you want to book, then
there are forms and the user

235
00:18:41.890 --> 00:18:47.010 
types in his wishes in the
form. the problem is that

236
00:18:47.020 --> 00:18:51.000 
the designer of the
develop robots program

237
00:18:51.350 --> 00:18:57.720 
in the back did not check whether
these user's input are really

238
00:18:57.750 --> 00:19:01.230 
are meaningful
user inputs.

239
00:19:01.260 --> 00:19:05.420 
or whether this is,
for example code for

240
00:19:05.580 --> 00:19:10.300 
attacking the system. generally
all programs, website that

241
00:19:10.300 --> 00:19:16.330 
excepts process
arbitrary user inputs,

242
00:19:16.780 --> 00:19:23.220 
all programs that allow to process
user input without a checking

243
00:19:23.520 --> 00:19:27.540 
can be affected by such
type of attacks.

244
00:19:27.800 --> 00:19:31.520 
for example, malicious code
that can be embedded in a

245
00:19:31.550 --> 00:19:37.300 
program code due to lack of filtering
is hidden in a text input.

246
00:19:37.490 --> 00:19:44.310 
and later it will be
installed on the server

247
00:19:44.310 --> 00:19:52.330 
and performs the attack.
to mention few

248
00:19:52.540 --> 00:19:57.710 
concrete attacks from the family
of remote code execution,

249
00:19:58.070 --> 00:20:01.150 
let's discuss buffer
overflow attack.

250
00:20:01.830 --> 00:20:05.520 
this is a variant of remote
code execution and here the

251
00:20:05.520 --> 00:20:09.450 
idea is that attacker
exceeds the maximum length

252
00:20:09.450 --> 00:20:13.830 
of the input fields,

253
00:20:13.830 --> 00:20:18.070 
in the input field
with fatal results.

254
00:20:18.750 --> 00:20:23.230 
the problem is that the input
for processing by the program

255
00:20:23.610 --> 00:20:27.930 
is stored in a memory, and exactly
of force expect big length

256
00:20:27.930 --> 00:20:33.380 
of the input, there
is a memory placed,

257
00:20:33.380 --> 00:20:39.120 
which the memory side is uses for
other things. for example, for

258
00:20:39.120 --> 00:20:43.070 
executing programs. so this
is a so-called buffer,

259
00:20:43.640 --> 00:20:48.550 
where's the user inputs are put
into the memory of the system

260
00:20:48.550 --> 00:20:52.060 
and then for the
continues processing.

261
00:20:54.450 --> 00:20:59.600 
what needs to be done is that
before saving the input,

262
00:20:59.990 --> 00:21:04.670 
a programmer should check the
maximal permission length

263
00:21:04.800 --> 00:21:08.910 
of the input. If such
a check is missing,

264
00:21:09.270 --> 00:21:13.900 
then the complete input of the
user is stored in the memory.

265
00:21:14.630 --> 00:21:18.530 
that means that part
of the buffers that

266
00:21:18.530 --> 00:21:21.680 
was dedicated for the
input is overwritten,

267
00:21:22.150 --> 00:21:27.420 
also neighbour parts of the memory
a overwritten with the input,

268
00:21:27.770 --> 00:21:33.570 
and now the attack is try to
exactly misuses by overwriting

269
00:21:33.850 --> 00:21:40.150 
the memory with malicious code.
so it is particularly dangerous

270
00:21:40.160 --> 00:21:43.240 
when an attacker manages
to overwrite memory

271
00:21:43.530 --> 00:21:46.990 
in such a way so that a program
flow allows the execution

272
00:21:47.170 --> 00:21:51.630 
of the overwritten of the
malicious code. there are

273
00:21:52.030 --> 00:21:55.290 
different types of such
a buffer overflow,

274
00:21:55.290 --> 00:21:59.620 
only disturb the functionality
of the service.

275
00:21:59.840 --> 00:22:05.910 
but is really a dangerous,
a buffer overflow

276
00:22:05.910 --> 00:22:11.250 
attacks. They are so
sophisticated that they place

277
00:22:11.520 --> 00:22:16.370 
executable code, malicious code
on the memory and the system

278
00:22:16.720 --> 00:22:23.510 
performs this. so target in
buffer overflow are "fine art",

279
00:22:23.900 --> 00:22:26.650 
because it's very
difficult to implement.

280
00:22:27.150 --> 00:22:31.670 
but it's dangerous and many of
these buffer over broker,

281
00:22:31.670 --> 00:22:35.050 
very smart of
buffer overflow

282
00:22:35.490 --> 00:22:39.480 
attacks can be loaded
from the internet

283
00:22:40.100 --> 00:22:42.950 
and can be applied by people
that would not be able

284
00:22:43.290 --> 00:22:49.420 
to design such attack. the
last example for such

285
00:22:49.420 --> 00:22:53.600 
remote code execution, i want
to give it to our injections.

286
00:22:53.990 --> 00:22:58.570 
it also injections are very agents
of so remote code execution

287
00:22:58.800 --> 00:23:02.160 
and here the idea is that an
attacker has in the back is

288
00:23:02.360 --> 00:23:06.510 
an executable program
code into the user

289
00:23:06.840 --> 00:23:13.370 
input-code injection. for example,
for databases. SQL is a language

290
00:23:13.380 --> 00:23:18.680 
for the work with databases
for comparing data

291
00:23:18.680 --> 00:23:24.610 
basis. also javascript
code he is injected

292
00:23:24.900 --> 00:23:31.920 
into HTML input fields. so the
task of the developer when he

293
00:23:31.920 --> 00:23:35.320 
designs many develop such a
service, he needs to check

294
00:23:35.670 --> 00:23:40.590 
the input for unauthorised
code injections.

295
00:23:41.060 --> 00:23:43.590 
he needs to checks input
for the lengths,

296
00:23:43.860 --> 00:23:47.820 
for example to prevent buffer
overflow and the developer needs

297
00:23:47.820 --> 00:23:52.070 
to check inputs that
there is no code inside

298
00:23:52.480 --> 00:23:57.860 
which later can be
executed. the best way is

299
00:23:58.430 --> 00:24:03.480 
that the input of the user
is not directly take over

300
00:24:03.670 --> 00:24:07.730 
for execution. so that the
reason that for many well

301
00:24:07.730 --> 00:24:12.400 
designed services that user can
only click on some input field

302
00:24:12.520 --> 00:24:16.970 
and not writes
a text in it.

303
00:24:18.400 --> 00:24:23.890 
if this is not done, if the code a is
not checked, and the injected code.
