WEBVTT

1
00:00:00.490 --> 00:00:05.020 
Welcome to knowledge graphs lecture
number 3 querying RDFS with SPARQL.

2
00:00:05.810 --> 00:00:08.740 
This is excursion number 3
and here you will learn how

3
00:00:08.880 --> 00:00:13.080 
to query wiki data knowledge
graphs. The Wiki data is one of

4
00:00:13.090 --> 00:00:16.940 
the most prominent knowledge
graphs of the linked data web

5
00:00:16.950 --> 00:00:18.320 
of the web of data.

6
00:00:20.860 --> 00:00:25.810 
Likewise to DBpedia, Wiki data
also is now a central hub

7
00:00:25.810 --> 00:00:30.280 
or has become a central hub of the
web of data which means many

8
00:00:30.770 --> 00:00:35.320 
other datasets that are out there
use this as a reference and

9
00:00:35.320 --> 00:00:40.480 
you will find links from those
data sets to Wikidata and back.

10
00:00:40.480 --> 00:00:44.580 
So, therefore, it forms something
like a hub or a reference. And

11
00:00:44.580 --> 00:00:48.720 
wiki data has been created as you see
here in the already known timeline

12
00:00:48.950 --> 00:00:53.120 
around 2012 and is
ever-growing then.

13
00:00:54.330 --> 00:00:58.900 
The main difference to DBpedia
that you already know

14
00:00:59.340 --> 00:01:04.210 
is the following. While DBpedia
is automatically extracted

15
00:01:04.430 --> 00:01:09.410 
from Wikipedia, you saw that infobox
extraction in the last excursion,

16
00:01:10.220 --> 00:01:15.520 
Wiki data is maintained in a
manual way, so this means you

17
00:01:15.520 --> 00:01:18.970 
can directly access wiki data
and then you can change and

18
00:01:18.970 --> 00:01:22.560 
add values, you can add new
entities and then you can fill

19
00:01:22.560 --> 00:01:28.900 
in properties, property values and stuff
like that. So this strictly also follows

20
00:01:29.170 --> 00:01:34.510 
the wiki community, which means
it's strictly wiki-based, so

21
00:01:34.510 --> 00:01:39.290 
this is a wiki based editor that
you have here only for structured

22
00:01:39.290 --> 00:01:43.750 
data in the case of wikidata and
as a main difference of course

23
00:01:43.750 --> 00:01:46.970 
it's always up to date, so it
does not have to be extracted

24
00:01:46.970 --> 00:01:51.950 
from time to time and it has grown
tremendously over the last years.

25
00:01:52.600 --> 00:01:57.750 
If we look at the numbers, so here for
example you see my entry in wiki data,

26
00:01:58.520 --> 00:02:02.610 
wikidata is huge. Right now in
march two thousand and twenty

27
00:02:02.610 --> 00:02:05.940 
we have seventy one million
entities in there with more than

28
00:02:05.940 --> 00:02:08.830 
six million persons, so no
wonder that I'm also there,

29
00:02:09.620 --> 00:02:13.340 
almost two million populated places,
three million architectural

30
00:02:13.340 --> 00:02:16.940 
structures, almost four million
events and so on and so on. So

31
00:02:17.140 --> 00:02:21.770 
there are movies, there is so called the
articles, astronomical objects, it's huge.

32
00:02:22.750 --> 00:02:27.190 
There have been more than one point
one billion manual added so far

33
00:02:27.310 --> 00:02:31.110 
and currently twenty four thousand
active users or more than

34
00:02:31.110 --> 00:02:35.610 
twenty four thousand are actively
contributing to the content

35
00:02:35.810 --> 00:02:39.950 
of wikidata. So this is huge, this
is up to date and of course

36
00:02:39.950 --> 00:02:42.400 
it's rather handy to use.
So how does it work?

37
00:02:43.660 --> 00:02:47.990 
What you see here is the wiki
data page of Joseph Fourier

38
00:02:48.130 --> 00:02:53.070 
in html representation of course you can
also get an rdf representation of that.

39
00:02:53.570 --> 00:02:56.610 
What you see here first
another difference to

40
00:02:57.090 --> 00:03:00.010 
wiki to dbpedia is here.

41
00:03:00.660 --> 00:03:05.080 
One has chosen as an identifier
simply a number plus

42
00:03:05.510 --> 00:03:10.350 
a letter and here Q means these are usually
entities which are referred to and

43
00:03:10.470 --> 00:03:14.210 
P in an identify means this
is a property for example.

44
00:03:15.090 --> 00:03:20.240 
This is one reason you know that in dbpedia
you have these speaking names.

45
00:03:20.400 --> 00:03:25.890 
However these names are different
if you consider these kind

46
00:03:25.890 --> 00:03:29.340 
of names in different languages.
Therefore it's difficult, you

47
00:03:29.340 --> 00:03:33.900 
know, with one URI to identify the
same thing in different languages.

48
00:03:34.240 --> 00:03:39.220 
Simply for that reason wikidata made
the approach that we use simply,

49
00:03:39.350 --> 00:03:44.070 
let's say, a number based identifier
that doesn't carry any meaning.

50
00:03:44.300 --> 00:03:49.290 
Therefore it's per se or by itself
multi-lingual. So this is already

51
00:03:49.530 --> 00:03:53.440 
the first advantage while it makes
it a bit more difficult to read.

52
00:03:53.740 --> 00:03:59.270 
However in this human made or a
human interface human-readable

53
00:03:59.270 --> 00:04:03.080 
interface you see here everything
can be read in a rather easy

54
00:04:03.080 --> 00:04:06.880 
way. So we have the identifier
here beside Joseph Fourier.

55
00:04:06.880 --> 00:04:10.270 
This is Q8772 for example.

56
00:04:11.930 --> 00:04:16.090 
Then you have properties. So there
are several statements beginning

57
00:04:16.090 --> 00:04:19.450 
with properties stating here for
example that Joseph Fourier,

58
00:04:19.640 --> 00:04:23.810 
he is a human, is an instance of
a class which is called human.

59
00:04:23.810 --> 00:04:27.650 
So this is a property and here
you have a property value which

60
00:04:27.650 --> 00:04:32.220 
can be either another entity or
it can be a literal of course,

61
00:04:32.220 --> 00:04:36.710 
then it's some kind of value which
might be associated with any type

62
00:04:36.870 --> 00:04:37.840 
of data type.

63
00:04:39.220 --> 00:04:44.030 
So far it's more or less the
same like in dbpedia but wikidata

64
00:04:44.030 --> 00:04:48.220 
offers more semantic
possibilities. First of all

65
00:04:49.620 --> 00:04:53.860 
every statement there should have
or every fact that is represented

66
00:04:53.860 --> 00:04:57.570 
here should have a reference and
if possible then even more

67
00:04:57.570 --> 00:05:01.980 
than one. This means where does
this knowledge come from, where

68
00:05:01.980 --> 00:05:06.790 
can this fact be referenced? So there
are references which are therefore

69
00:05:07.000 --> 00:05:08.120 
almost every fact.

70
00:05:09.320 --> 00:05:14.830 
And another thing is you can furthermore,
besides this kind of provenance information,

71
00:05:15.110 --> 00:05:19.850 
you can also make interweaved
statements, which means you can

72
00:05:19.850 --> 00:05:23.050 
make statements about statements.
Here for example you see the

73
00:05:23.050 --> 00:05:26.840 
country of citizenship of Joseph
Fourier was for a while

74
00:05:26.840 --> 00:05:31.700 
the kingdom of France and it was
that case from seventeen sixty

75
00:05:31.700 --> 00:05:35.460 
eight to seventeen ninety two. So
the start time and the end time

76
00:05:35.770 --> 00:05:40.550 
for the validity of exactly that
fact is given as a qualifier here.

77
00:05:40.950 --> 00:05:46.630 
So you see here is more semantics
represented behind that thing

78
00:05:47.240 --> 00:05:49.520 
or entity within
wikidata.

79
00:05:50.270 --> 00:05:53.660 
And all of these facts together
they form then something

80
00:05:53.660 --> 00:05:57.330 
which is referred to as a statement
and even about that statement

81
00:05:57.330 --> 00:06:01.230 
you can say something. You know
this already via reification.

82
00:06:01.230 --> 00:06:06.310 
So you see in wikidata we have more
flexibility and more possibilities.

83
00:06:06.790 --> 00:06:10.500 
Furthermore it's also much larger,
we saw that with almost seventy

84
00:06:10.500 --> 00:06:15.180 
one million entities by now. So
therefore it has become a quasi

85
00:06:15.180 --> 00:06:20.520 
reference also for many authority files,
for many archives, for many libraries.

86
00:06:21.880 --> 00:06:25.870 
One of the major benefits in
wikidata is that there is also

87
00:06:25.870 --> 00:06:30.270 
a SPARQL end point it's the so
called wikidata SPARQL query

88
00:06:30.270 --> 00:06:34.600 
service. It's rather similar to
the dbpedia SPARQL query service,

89
00:06:34.600 --> 00:06:38.850 
so you see here also as a result
tables are displayed accordingly

90
00:06:39.030 --> 00:06:43.110 
and I have also provided you
two links which exactly then

91
00:06:43.120 --> 00:06:46.490 
carry out these kind of queries
that we want to do here. What

92
00:06:46.490 --> 00:06:50.740 
we want to do here is simply we want to
select all of the facts that belong to

93
00:06:51.000 --> 00:06:55.020 
Joseph Fourier and you see here I
provided lots of prefixes that are

94
00:06:55.150 --> 00:06:59.510 
required for wikidata, so these
are wikidata specific prefixes

95
00:06:59.510 --> 00:07:03.390 
that you not necessarily need for
every query. I simply list them here

96
00:07:03.550 --> 00:07:07.860 
that you have seen them before. So
lets try the very first query here.

97
00:07:08.110 --> 00:07:12.210 
See what is known about Joseph
Fourier and what immediately

98
00:07:12.210 --> 00:07:15.470 
pops out and what you see here
yeah that's interesting to see

99
00:07:15.470 --> 00:07:18.140 
but you have no idea what it
means because it's simply the

100
00:07:18.140 --> 00:07:21.420 
identifiers, which means you have
here a property called p214

101
00:07:21.420 --> 00:07:23.720 
and then you
have a value which is

102
00:07:24.130 --> 00:07:27.800 
24601470. No idea what it is,

103
00:07:28.530 --> 00:07:33.510 
which means we have of course look
at the labels to see exactly

104
00:07:33.510 --> 00:07:36.800 
what's going on that we as humans
can make sense of it. So what

105
00:07:36.800 --> 00:07:39.670 
I can do here is I can simply
follow the second link where

106
00:07:39.670 --> 00:07:44.140 
I am using here the naming
services that are also part

107
00:07:44.140 --> 00:07:49.090 
of wikidata and then I simply
carry out that single query

108
00:07:49.090 --> 00:07:52.690 
that does nothing else but looking
for exactly the facts for

109
00:07:52.690 --> 00:07:55.760 
Joseph Fourier and now you
see yeah this is much clearer.

110
00:07:55.760 --> 00:07:59.090 
It says for example that he has
been a member of the Russian

111
00:07:59.090 --> 00:08:02.330 
academy of science, is a member
of the royal society and so

112
00:08:02.330 --> 00:08:05.480 
on and so on. So here now you
have all of the labels and can

113
00:08:05.480 --> 00:08:10.600 
really read the results and can
deal with it. So this more or

114
00:08:10.600 --> 00:08:14.570 
less is this SPARQL query interface
for other simple queries.

115
00:08:14.710 --> 00:08:18.830 
Another nice feature that we should
have a look at is of course

116
00:08:18.830 --> 00:08:22.860 
it offers the possibility to do
rather nice visualizations,

117
00:08:22.860 --> 00:08:26.780 
for example, timeline based
visualizations as you see here. So

118
00:08:26.780 --> 00:08:29.960 
we will do this more frequently
later on in the lecture. So

119
00:08:29.960 --> 00:08:34.290 
here for example we do a very very
sophisticated query where we ask

120
00:08:34.550 --> 00:08:40.400 
which living politicians are
environmentalists. And as you might

121
00:08:40.400 --> 00:08:44.370 
see here, if we carry out exactly
this really complex query,

122
00:08:44.930 --> 00:08:48.040 
don't worry, so you will need to
learn exactly what exactly

123
00:08:48.040 --> 00:08:52.170 
how the query works, you see here
all results that come back

124
00:08:52.210 --> 00:08:55.400 
as a timeline and of course we
selected also the pictures of

125
00:08:55.410 --> 00:08:59.520 
the politicians of the people
and you see here accordingly ordered to

126
00:08:59.520 --> 00:09:05.540 
the birth date you see all that people who
are in politics and are environmentalists.

127
00:09:05.670 --> 00:09:12.960 
So this is wikidata and now we can
go on to formulate more complex

128
00:09:12.990 --> 00:09:14.030 
SPARQL queries.
