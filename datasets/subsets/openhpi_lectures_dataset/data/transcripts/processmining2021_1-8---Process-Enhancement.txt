WEBVTT

1
00:00:00.770 --> 00:00:05.000 
Welcome to this video clip, in which
we discuss process enhancement.

2
00:00:06.720 --> 00:00:10.930 
So, in the previous
video clip we

3
00:00:11.820 --> 00:00:15.830 
mined, we discovered the first
process model; we did that manually

4
00:00:15.860 --> 00:00:19.260 
and we call this process model
P1. You again see it here

5
00:00:19.260 --> 00:00:20.700 
in the lower part
of this slide.

6
00:00:22.210 --> 00:00:26.680 
This discovered process model
shows us exactly how the process

7
00:00:26.680 --> 00:00:31.140 
was executed in reality. We didn't
even have a blueprint process

8
00:00:31.140 --> 00:00:35.750 
model to begin with and we have
discovered this process model

9
00:00:35.890 --> 00:00:39.880 
and this process model again shows
us exactly how the process

10
00:00:39.880 --> 00:00:41.640 
was executed in reality.

11
00:00:42.240 --> 00:00:48.930 
We also find that in some cases, the process
starts ends prematurely

12
00:00:49.170 --> 00:00:55.730 
and that is reflected by this end event. So,
it might end immediately after check

13
00:00:55.840 --> 00:01:02.410 
claim completeness. So, it seems
that incomplete claims are not

14
00:01:03.180 --> 00:01:07.310 
further evaluated upon. So,
we have to look at this

15
00:01:07.840 --> 00:01:12.180 
at this problem. And this discovered
process model gives us

16
00:01:12.180 --> 00:01:16.790 
valuable information to do it,
because we now see that we have

17
00:01:16.790 --> 00:01:21.840 
a problem with these incomplete traces,
with these incomplete process instances.

18
00:01:23.040 --> 00:01:27.650 
So, in process enhancement, we take
the information that we find

19
00:01:27.990 --> 00:01:31.530 
in the discovered process model
and we take it from there. So,

20
00:01:31.530 --> 00:01:34.650 
we analyze that information
and we enhance

21
00:01:35.620 --> 00:01:39.650 
we enhance the blueprint process
model or we, well, extend

22
00:01:40.430 --> 00:01:44.770 
the one to make it more useful to
meet our business needs better.

23
00:01:44.870 --> 00:01:48.260 
The story again is, we start with
the event log, we do process

24
00:01:48.260 --> 00:01:51.350 
discovery, we have the discovered
process model, that we see

25
00:01:51.660 --> 00:01:55.450 
that we have seen in the previous
slide, we see well we need

26
00:01:55.450 --> 00:01:57.390 
to fix something
because these

27
00:01:58.210 --> 00:02:02.680 
cases end prematurely and we do
that in process enhancement.

28
00:02:04.060 --> 00:02:09.010 
So, we enhance the discovered
process model to fix the problem.

29
00:02:09.480 --> 00:02:14.580 
In this particular cases, we do
this as follows. So, we request

30
00:02:14.590 --> 00:02:20.050 
first updates for incomplete claims.
So basically what we do

31
00:02:20.230 --> 00:02:25.180 
and I can enlarge this a little bit,
it's basically this area that we are

32
00:02:25.330 --> 00:02:31.480 
that we have added designs to this
existing and discovered process model.

33
00:02:31.950 --> 00:02:34.670 
So, after check claim
completeness,

34
00:02:35.650 --> 00:02:39.690 
we have this branching in
the process. So we can

35
00:02:41.590 --> 00:02:48.280 
we can either, if the claim is complete, we
just proceed to decide on claim coverage,

36
00:02:48.700 --> 00:02:54.640 
however if the claim is not complete,
we do not prematurely end the process,

37
00:02:55.050 --> 00:03:00.500 
but we go this path with
the condition claim incomplete.

38
00:03:01.310 --> 00:03:05.880 
What we do then is we send an update
request to the client asking to

39
00:03:06.110 --> 00:03:10.420 
well, provide us with information about
the missing parts of the claim.

40
00:03:11.220 --> 00:03:16.100 
After that we receive an update,
so we have the ru event

41
00:03:16.660 --> 00:03:21.290 
and then we go back, check the
claim completeness again, and

42
00:03:22.070 --> 00:03:25.730 
two things can happen in the second
iteration - either the claim

43
00:03:25.840 --> 00:03:28.610 
complete, then I go here, or the
claim is incomplete and then

44
00:03:28.610 --> 00:03:32.380 
I iterate this loop and the
assumption is that sooner or later

45
00:03:32.530 --> 00:03:36.350 
my claim will be complete, so
that I can process the claim.

46
00:03:37.370 --> 00:03:39.360 
So we now designed a

47
00:03:39.990 --> 00:03:43.940 
new process model p two and
we use this as a blueprint.

48
00:03:44.830 --> 00:03:49.300 
So process enhancement is not something
that we can do automatically

49
00:03:49.490 --> 00:03:53.430 
but we get information about the
discovered process model and we

50
00:03:53.620 --> 00:03:56.570 
design, we re-engineer
if you want,

51
00:03:57.280 --> 00:04:01.980 
a new process model that we can
then use as a blueprint model and

52
00:04:02.110 --> 00:04:05.120 
this process is called
process enhancement.

53
00:04:07.120 --> 00:04:11.990 
Alright, now what we do next is
we implement this modified new

54
00:04:12.010 --> 00:04:17.310 
process model P2 with the update
loop. So P2 is implemented and

55
00:04:17.460 --> 00:04:22.340 
and it is also executed. It is
executed by installing a new

56
00:04:22.340 --> 00:04:25.060 
organizational
policy saying that

57
00:04:25.710 --> 00:04:30.970 
if a claim is incomplete, we request
and we receive later an update.

58
00:04:32.750 --> 00:04:37.790 
We extend our initial example now
with this new information. So,

59
00:04:38.130 --> 00:04:42.810 
based on this modified process we
also find new data that describes

60
00:04:42.810 --> 00:04:46.480 
now this part of the process that
we that we did not have before

61
00:04:47.120 --> 00:04:53.310 
and we just extend our example. So we are
not creating new data with new timestamps,

62
00:04:53.410 --> 00:04:56.070 
we just extend
our example.

63
00:04:57.050 --> 00:05:00.770 
Alright, so we now have a
claim update table. I can

64
00:05:00.860 --> 00:05:03.920 
try to show you the
claim update table.

65
00:05:05.550 --> 00:05:11.810 
And here we have information about the
claim ID, so which claim is being updated,

66
00:05:12.550 --> 00:05:15.940 
we have also information about the
update number. So as indicated

67
00:05:15.940 --> 00:05:20.190 
before we can have a loop, so we can
have several updates to one claim.

68
00:05:20.830 --> 00:05:26.610 
And actually here we see
that the claim 1236 has

69
00:05:27.120 --> 00:05:31.780 
three updates. Right. So the first
update was sent on the sixth of May

70
00:05:32.110 --> 00:05:35.650 
and returned on the twelfth of
May, the second was sent on the

71
00:05:35.670 --> 00:05:38.310 
nineteenth of May and
returned a day later

72
00:05:38.740 --> 00:05:41.050 
and the third
update of

73
00:05:42.010 --> 00:05:46.920 
the claim with the ID 1236
were sent on the twenty

74
00:05:46.920 --> 00:05:48.330 
fifth of May and was

75
00:05:49.010 --> 00:05:51.320 
received on the twenty
eighth of May.

76
00:05:52.010 --> 00:05:55.010 
So now we find in the
data that we have

77
00:05:55.980 --> 00:06:01.230 
additional loops have been iterated
here for the elements or for

78
00:06:01.230 --> 00:06:03.210 
the claims that have
been incomplete.

79
00:06:04.710 --> 00:06:06.850 
And what we do now is
basically what we did

80
00:06:07.280 --> 00:06:11.390 
before already. So, we identify
the events that we have here

81
00:06:11.390 --> 00:06:16.980 
and we identify two events. So we
identify a send update request

82
00:06:16.990 --> 00:06:19.470 
event that is
sur event

83
00:06:20.150 --> 00:06:24.840 
that we see here and the
send date attribute tells

84
00:06:24.840 --> 00:06:27.910 
us exactly when this
event has occurred.

85
00:06:28.820 --> 00:06:33.650 
And we also have a receive update
event, when we use the receive

86
00:06:33.980 --> 00:06:36.140 
date to indicate when

87
00:06:36.740 --> 00:06:41.340 
a certain receive event
has been observed.

88
00:06:43.010 --> 00:06:47.940 
Using these events and the respective
event types, we can extend

89
00:06:48.660 --> 00:06:53.490 
our set of events and the
additional events are

90
00:06:53.490 --> 00:06:56.770 
shown here in the lower part or
the middle part of this slide.

91
00:06:56.770 --> 00:07:00.990 
So, we have a send update
request for 1236 that

92
00:07:01.750 --> 00:07:05.840 
reflects the first data
tuple in this table

93
00:07:07.810 --> 00:07:13.100 
and the first tuple also
represents the second event. So

94
00:07:13.300 --> 00:07:17.150 
receive update for 1236,
and then we have send update

95
00:07:17.350 --> 00:07:21.370 
request 1240, receive
update 1230 and then

96
00:07:21.370 --> 00:07:25.040 
we have the second iteration of the
loop for case 1236

97
00:07:25.550 --> 00:07:27.990 
and here we have the
third iteration

98
00:07:28.990 --> 00:07:33.670 
of the update for the claim
with the ID 1236.

99
00:07:35.510 --> 00:07:40.020 
We now have additional data and we
can now extend the trace variants

100
00:07:40.640 --> 00:07:44.780 
using the new scenario. And here
we have the trace variants

101
00:07:44.780 --> 00:07:46.380 
that we now
have observed

102
00:07:47.170 --> 00:07:51.330 
and here we have the ones that
we had before. So we have the

103
00:07:51.330 --> 00:07:55.940 
acceptance traces, we have the reject
traces but we do not have these

104
00:07:56.090 --> 00:07:59.890 
these prematurely ending traces
right. So, we no longer have

105
00:07:59.890 --> 00:08:03.130 
the trace variant where the
trace just stops there.

106
00:08:04.050 --> 00:08:09.350 
But instead of this, we have iterations
of this update loop and

107
00:08:09.480 --> 00:08:11.950 
iteration of the update
loop can be found here.

108
00:08:12.480 --> 00:08:16.210 
So here we have after
check claim completeness,

109
00:08:16.660 --> 00:08:22.030 
we have send update, receive update
check claim completeness again

110
00:08:22.260 --> 00:08:24.430 
and then decide
and accept.

111
00:08:25.550 --> 00:08:30.290 
We have also one iteration of the
loop here with a rejection. So,

112
00:08:30.570 --> 00:08:34.900 
after the loop has been iterated,
we can still reject the claim.

113
00:08:36.210 --> 00:08:40.120 
And we have also observed
two iterations

114
00:08:40.550 --> 00:08:44.940 
in which we have here the first
iteration, the second iteration

115
00:08:45.110 --> 00:08:49.050 
and even we have three iterations.
Right, so we have the first

116
00:08:49.050 --> 00:08:52.440 
iteration, the second iteration
and after the third iteration

117
00:08:52.630 --> 00:08:56.120 
the claim is complete and can
then be further processed and we

118
00:08:56.120 --> 00:08:59.210 
might even have others that I
don't have the space here to

119
00:08:59.270 --> 00:09:01.070 
to show you
in detail.

120
00:09:03.410 --> 00:09:07.990 
Now we can discover the process again
based on exactly the traces that we

121
00:09:08.330 --> 00:09:13.060 
we found earlier, discussed earlier
and we see, well, we can really

122
00:09:13.060 --> 00:09:15.510 
replay any trace
that we have here.

123
00:09:16.610 --> 00:09:21.390 
So maybe we come to the most complex one
that the one with the three iterations.

124
00:09:21.670 --> 00:09:23.180 
So we start with our c

125
00:09:24.460 --> 00:09:25.750 
we do a ccc.

126
00:09:27.500 --> 00:09:32.030 
Then we identify that the claim
is incomplete. So we move on

127
00:09:32.040 --> 00:09:37.930 
to the sequence flow. We send update request,
we receive an update request, we check

128
00:09:38.220 --> 00:09:40.720 
claim completeness
the second time,

129
00:09:41.530 --> 00:09:46.620 
we iterate the second time, we check
claim completeness once more,

130
00:09:46.910 --> 00:09:50.260 
we send an update request, we
receive an update request and

131
00:09:50.260 --> 00:09:53.320 
then we are happy and we can
proceed to taking the decision

132
00:09:53.460 --> 00:09:54.990 
and in this
case sending

133
00:09:55.870 --> 00:09:58.930 
the acceptance letter.
So what we basically did is,

134
00:09:59.700 --> 00:10:03.120 
looking at the last trace
variant that we have here,

135
00:10:03.870 --> 00:10:07.040 
we move on here, we do
the first iteration,

136
00:10:07.850 --> 00:10:12.100 
we do the second iteration of this loop,
we do the third iteration of this loop,

137
00:10:12.450 --> 00:10:15.870 
we can then decide and
we can then accept.

138
00:10:16.660 --> 00:10:20.990 
So, we see that obviously all
the traces can be replayed

139
00:10:20.990 --> 00:10:22.790 
without any problem, so

140
00:10:23.470 --> 00:10:26.520 
that the process obviously
very well

141
00:10:27.210 --> 00:10:29.160 
let's say realized.

142
00:10:30.880 --> 00:10:36.220 
But we can use this information to also
find additional improvement. Often

143
00:10:36.790 --> 00:10:40.710 
by looking at the process model
you get new ideas fresh ideas

144
00:10:40.710 --> 00:10:44.320 
of creating additional elements in
the process model enhancing it

145
00:10:44.660 --> 00:10:48.190 
even more to be even a
larger improvement.

146
00:10:49.190 --> 00:10:52.500 
So we can make additional process
improvements to increase

147
00:10:52.500 --> 00:10:58.130 
the quality of the decision in our example.
certain reviewing activities are added,

148
00:10:58.410 --> 00:11:02.750 
now we want to add certain
reviewing activities to a very

149
00:11:02.750 --> 00:11:06.380 
detailed look at the claim
before deciding whether we can

150
00:11:07.130 --> 00:11:10.260 
accept the claim or whether
we need to reject the claim.

151
00:11:11.540 --> 00:11:16.820 
In particular, we have one internal
review operation or activity

152
00:11:17.190 --> 00:11:21.720 
and we call this review
claim internally or rci.

153
00:11:23.240 --> 00:11:29.480 
We also have external reviewing
activities and these are represented

154
00:11:29.870 --> 00:11:34.670 
by inviting and receiving
external reviews.

155
00:11:35.810 --> 00:11:40.160 
Invite claim reviews
are icr and receive

156
00:11:40.650 --> 00:11:43.940 
external review is
rcr. So we have

157
00:11:44.960 --> 00:11:48.880 
overall three more event
types that we can

158
00:11:49.460 --> 00:11:51.890 
observe. Now, we

159
00:11:53.130 --> 00:11:56.110 
we use this
information and we,

160
00:11:56.830 --> 00:12:01.590 
well, come up with a new process
model where we have this and well

161
00:12:01.730 --> 00:12:06.100 
I can show you in a bit more
detail the middle part. So now

162
00:12:06.100 --> 00:12:09.840 
it's the middle part that is,
that has been updated where

163
00:12:10.380 --> 00:12:14.770 
these are the three new activities
that we enhance our process with.

164
00:12:15.340 --> 00:12:20.070 
And we have here concurrency. So,
this sign means it's an AND split

165
00:12:20.070 --> 00:12:25.810 
in BPMN or parallel split. So we have
two branches, two outgoing branches

166
00:12:26.030 --> 00:12:31.020 
are executed concurrently. So without any
ordering, independently from each other

167
00:12:31.930 --> 00:12:36.500 
so we have here a revenue claim
internally, rci, and here we

168
00:12:36.500 --> 00:12:41.100 
invite the claim review and we
receive the claim review. And

169
00:12:41.190 --> 00:12:47.150 
the synchronizing join means we can
only proceed the process once both

170
00:12:47.820 --> 00:12:51.270 
sequence flows have
been signaled. So, if

171
00:12:52.070 --> 00:12:54.640 
both parts have been
executed properly.

172
00:12:57.210 --> 00:13:02.310 
That's our next version of the enhanced process
model P2, with the reviewing

173
00:13:02.830 --> 00:13:06.350 
activities and what we do next,
well, we implement P3

174
00:13:06.950 --> 00:13:12.230 
and we use additional data about the
reviews because now we again extended the

175
00:13:12.620 --> 00:13:16.650 
process model and we can find
new data, data about reviews.

176
00:13:17.810 --> 00:13:23.860 
And this data about reviews tells us
that in some cases, no review is done

177
00:13:24.090 --> 00:13:24.750 
at all.

178
00:13:26.920 --> 00:13:29.680 
And that is not what we
would have expected,

179
00:13:30.540 --> 00:13:34.980 
but you know, this is how we started.
So, we started by saying that

180
00:13:35.360 --> 00:13:39.230 
it's not always the case that the
process is executed exactly

181
00:13:39.230 --> 00:13:42.530 
as specified in the blueprint
data process model and that's

182
00:13:42.530 --> 00:13:47.240 
exactly what we see here. So in some
cases no review is done at all.

183
00:13:48.610 --> 00:13:54.090 
In some cases, only an internal review is
done and no external reviews are done

184
00:13:55.440 --> 00:14:00.780 
and also an external review is
done only after an internal

185
00:14:00.780 --> 00:14:02.420 
review has been
done before.

186
00:14:03.140 --> 00:14:05.850 
So, this is things that we find
in the data. So we don't look

187
00:14:05.850 --> 00:14:10.050 
at the concrete data now but we just
tell you just tell you the findings

188
00:14:10.410 --> 00:14:13.170 
or the things that we
really find in the data.

189
00:14:14.550 --> 00:14:17.710 
So, we now again try to discover
the process model and call

190
00:14:17.710 --> 00:14:21.950 
it P4. So we discover the process
model P4 which shows how

191
00:14:22.210 --> 00:14:27.450 
the process is actually executed and
it is executed different from what

192
00:14:28.620 --> 00:14:32.810 
the blueprint model
would have told us.

193
00:14:34.170 --> 00:14:38.750 
So, we can adapt or we can discover
this process model and just

194
00:14:38.750 --> 00:14:43.960 
we look at the internal part. I'd just
like to show you this again a bit

195
00:14:44.190 --> 00:14:44.830 
larger.

196
00:14:47.300 --> 00:14:48.960 
Alright, so now we can

197
00:14:49.610 --> 00:14:52.490 
reconfigure this middle
part. So as you remember,

198
00:14:54.010 --> 00:14:57.340 
for P3, we had this
concurrency and now we have

199
00:14:58.070 --> 00:15:03.420 
a little bit of a more more adequate
way of expressing this. So, first,

200
00:15:04.370 --> 00:15:07.690 
we have the decision because we
observed cases in which there

201
00:15:07.690 --> 00:15:09.290 
was no review
done at all.

202
00:15:10.040 --> 00:15:15.240 
To reflect this, we added this new
edge and this decision, so we can

203
00:15:15.480 --> 00:15:17.690 
go right away from

204
00:15:20.190 --> 00:15:26.900 
from check claim completeness, we
can go all the way via this path

205
00:15:27.260 --> 00:15:31.790 
to decide on claim coverage. That's now
reflected. We observed that and we

206
00:15:32.560 --> 00:15:34.350 
we found that
here as well.

207
00:15:36.440 --> 00:15:41.990 
Also, we have review claim
internally only. So we can go this

208
00:15:41.990 --> 00:15:44.010 
path and then take
the upper decision.

209
00:15:45.030 --> 00:15:46.980 
Also, that is explained
through this model.

210
00:15:47.580 --> 00:15:51.170 
And also if we have the internal
and the external, we always

211
00:15:51.170 --> 00:15:54.800 
have the internal before the external
and we also have this behavior now.

212
00:15:55.030 --> 00:16:00.410 
So we have rci and we can take this
path and only after the internal check,

213
00:16:00.640 --> 00:16:04.460 
we invite and we receive the
results of the external check.

214
00:16:05.180 --> 00:16:07.950 
So this process model P4 is

215
00:16:08.890 --> 00:16:12.930 
now in place and this is what
we observed in our example.

216
00:16:14.580 --> 00:16:18.840 
So let's summarize these
steps that we've been taking.

217
00:16:19.460 --> 00:16:25.350 
So, in our scenario we started with
no process model; in particular

218
00:16:25.360 --> 00:16:28.130 
we started without any
blueprint process model.

219
00:16:30.100 --> 00:16:35.930 
We then, well, we then created events and
event logs and traces and trace variants

220
00:16:36.380 --> 00:16:40.660 
and then we discovered a process
model P1 and we saw that

221
00:16:41.110 --> 00:16:45.350 
this process model P1 that we
had discovered has actually

222
00:16:45.850 --> 00:16:51.610 
incomplete cases. So we found
this problem, we designed a new

223
00:16:51.610 --> 00:16:57.510 
process model P2. We had this
claim update cycle. So we send

224
00:16:57.510 --> 00:17:01.410 
our update request and we
receive the update from

225
00:17:01.410 --> 00:17:05.420 
the client. So we fixed it. We
discovered it using data and we

226
00:17:05.420 --> 00:17:08.660 
confirmed the process implementation,
so everything was fine.

227
00:17:09.550 --> 00:17:14.040 
We then enhanced
P2 again with

228
00:17:14.550 --> 00:17:18.660 
with new reviewing activities and
therefore we designed P3.

229
00:17:19.070 --> 00:17:22.020 
Now P3 had these concurrent
reviewing activities.

230
00:17:22.750 --> 00:17:27.510 
We again did process discovery
and we found in this

231
00:17:27.950 --> 00:17:32.270 
discovered process P4 that,
well, it was not exactly what

232
00:17:32.280 --> 00:17:36.580 
we expected because we had situations
in which there was no review done

233
00:17:36.910 --> 00:17:41.570 
at all and there's no concurrency
between the internal review

234
00:17:41.570 --> 00:17:46.010 
and the external review and therefore we
created or we discovered a new process

235
00:17:46.470 --> 00:17:50.150 
model P4 and well,
that's basically

236
00:17:50.810 --> 00:17:52.810 
the point from which
we should take it.

237
00:17:54.110 --> 00:17:57.890 
So, in the upper-right part of
the slide, you see something

238
00:17:57.890 --> 00:18:01.510 
called the BPM life cycle. Maybe
you are aware of this.

239
00:18:01.510 --> 00:18:04.780 
So, if not, then you can
also take take a look

240
00:18:05.280 --> 00:18:07.140 
at our previous
online course. So

241
00:18:08.960 --> 00:18:13.500 
the BPM life cycle, just a few words on
that, consists of designing the process,

242
00:18:13.670 --> 00:18:18.130 
configuring system and organization,
have a run time, enactment

243
00:18:18.130 --> 00:18:22.190 
time and then do an evaluation.
And what we basically did,

244
00:18:22.860 --> 00:18:26.230 
we are iterating the business
process life cycle when we did this.

245
00:18:26.820 --> 00:18:30.530 
So we started with a configuration
and with an enactment we

246
00:18:30.530 --> 00:18:33.420 
looked at the data, we did the
first process mining view. So

247
00:18:33.420 --> 00:18:38.570 
we discovered P1. As an outcome
we designed P2 and P2

248
00:18:38.570 --> 00:18:41.690 
is now the start of the second
iteration we implemented P2.

249
00:18:42.320 --> 00:18:43.410 
Everything was fine.

250
00:18:44.950 --> 00:18:49.780 
Then we made an additional enhancement
creating P3. We implemented P3

251
00:18:50.130 --> 00:18:54.020 
and we found that no
the implementation of P3

252
00:18:54.020 --> 00:18:57.570 
was not exactly as planned. So we
did process mining again and

253
00:18:57.570 --> 00:18:59.710 
we are now at P4 and

254
00:19:00.480 --> 00:19:04.840 
if I say we take it from here, it means,
well, we have more information about

255
00:19:05.020 --> 00:19:07.920 
the evolution of the business
process and the idea of this

256
00:19:08.160 --> 00:19:11.250 
of this story is a little
bit to give you an idea of

257
00:19:12.490 --> 00:19:16.650 
what the iteration of this
business process life-cycle that

258
00:19:16.650 --> 00:19:21.070 
leads basically to an
increase of quality in the process

259
00:19:21.130 --> 00:19:25.050 
as long as you improve the process.
