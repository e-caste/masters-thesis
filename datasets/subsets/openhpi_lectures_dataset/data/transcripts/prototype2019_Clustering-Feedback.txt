WEBVTT

1
00:00:07.340 --> 00:00:10.550 
In this video I will talk about a
tool that we often use to sort

2
00:00:10.550 --> 00:00:13.120 
and cluster feedback. It's
called the 'Feedback Grid'.

3
00:00:13.950 --> 00:00:18.490 
There's a lot to observe and hear
in user testing and that's

4
00:00:18.490 --> 00:00:20.790 
why it's important that you
immediately take notes.

5
00:00:21.170 --> 00:00:23.160 
In a real project we
would even recommend

6
00:00:23.260 --> 00:00:26.450 
to take a partner with you so one
of you can moderate the session

7
00:00:26.450 --> 00:00:29.540 
while the other one takes notes.
Or you could film the whole

8
00:00:29.540 --> 00:00:34.040 
session and analyse it afterwards.
How ever you collect the feedback,

9
00:00:34.280 --> 00:00:36.740 
it's important to sort and
cluster it afterwards.

10
00:00:37.070 --> 00:00:40.520 
We use the Feedback Grid for
this. It has four quadrants.

11
00:00:41.100 --> 00:00:44.730 
So the first quadrant is marked
by a plus sign and we collect

12
00:00:44.740 --> 00:00:47.820 
all the positive aspects or aspects
about your prototype that

13
00:00:47.820 --> 00:00:51.280 
worked. Maybe your tester was really
excited about the prototype,

14
00:00:51.280 --> 00:00:54.610 
they said something positive
about a particular function,

15
00:00:54.770 --> 00:00:57.450 
or maybe their face lit up when
they realised, 'oh, this

16
00:00:57.450 --> 00:01:01.560 
prototype has personalised
content!' This quadrant helps you

17
00:01:01.560 --> 00:01:04.240 
to check if your testing
assumption holds true.

18
00:01:05.210 --> 00:01:08.710 
The second quadrant is marked by
a minus sign and we collect

19
00:01:08.710 --> 00:01:12.670 
everything that didn't work or negative
aspects about our prototype.

20
00:01:13.450 --> 00:01:18.600 
So maybe your tester was really
confused by all the functions

21
00:01:18.600 --> 00:01:20.950 
of your prototype and
stared at it in horror,

22
00:01:21.090 --> 00:01:24.300 
or maybe their reaction was
like a half-hearted shrug, so

23
00:01:24.300 --> 00:01:26.630 
they weren't really that
interested in your idea.

24
00:01:26.900 --> 00:01:29.800 
Or maybe they said something like:
'I wouldn't use it because

25
00:01:29.800 --> 00:01:33.350 
it's just too much effort'. This
quadrant is really helpful

26
00:01:33.350 --> 00:01:36.610 
because it's a pool of learning.
You can check if your testing

27
00:01:36.610 --> 00:01:40.340 
assumption holds true and also
collect a lot of ideas about

28
00:01:40.340 --> 00:01:45.660 
how to improve your prototype.
So the third quadrant is about

29
00:01:45.670 --> 00:01:50.730 
open and unanswered questions. Maybe
your tester asked you something

30
00:01:50.750 --> 00:01:53.360 
and you had no answer for it or
hadn't even thought about it.

31
00:01:53.650 --> 00:01:58.110 
Maybe they asked if the product would
secretly record their conversations

32
00:01:58.110 --> 00:02:01.780 
or if your service would be available
in different geographical

33
00:02:01.780 --> 00:02:06.540 
locations. This quadrant helps you
to open up for new directions

34
00:02:06.540 --> 00:02:09.720 
for your prototype. It also shows
you what your testers are

35
00:02:09.720 --> 00:02:12.190 
interested in or what is
still unclear to them.

36
00:02:13.500 --> 00:02:16.890 
Now, the fourth quadrant
is about new ideas.

37
00:02:17.280 --> 00:02:20.740 
Testers often come up with new
ideas when they interact with

38
00:02:20.740 --> 00:02:24.960 
your prototype. They might say
things like: 'Oh, this would be

39
00:02:24.960 --> 00:02:28.720 
an amazing service also for parents',
or 'there should be a button

40
00:02:28.720 --> 00:02:32.200 
for switching languages'. Remember
that you're trying to test

41
00:02:32.210 --> 00:02:34.810 
key functions about your prototype,
though, so you shouldn't

42
00:02:34.810 --> 00:02:38.420 
rush to immediately integrate
every idea that a tester gives

43
00:02:38.420 --> 00:02:41.820 
you. In general it's a good sign,
though, if your tester has many

44
00:02:41.820 --> 00:02:45.820 
ideas about the prototype, because
it shows they're really engaged

45
00:02:45.820 --> 00:02:48.730 
in the testing, that they interacted
with your prototype and are

46
00:02:48.730 --> 00:02:50.990 
excited about the problem
or the solution.

47
00:02:51.850 --> 00:02:58.370 
Some of the feedback you get
might fit into two categories

48
00:02:58.370 --> 00:03:00.810 
at the same time but don't
let that confuse you

49
00:03:01.090 --> 00:03:04.160 
the most important part about
the sorting and clustering is

50
00:03:04.160 --> 00:03:07.220 
that you reflect on the
feedback that you heard.

51
00:03:08.170 --> 00:03:11.450 
You can also collect the feedback
of several testers in the

52
00:03:11.450 --> 00:03:14.140 
same Feedback Grid if
you use colour-coding.

53
00:03:16.910 --> 00:03:20.850 
In real projects you might collect
different or even opposing

54
00:03:20.850 --> 00:03:24.110 
feedback from different testers
and you might struggle on how

55
00:03:24.110 --> 00:03:27.450 
to incorporate all these different
opinions and how to go forward.

56
00:03:27.880 --> 00:03:31.130 
At the end of the day, your
project team then has to decide

57
00:03:31.220 --> 00:03:34.790 
which feedback is most crucial to
you or which tester group is

58
00:03:34.790 --> 00:03:37.170 
most important to you to
move the project further.

59
00:03:37.750 --> 00:03:40.610 
Now we hope you have fun
sorting your feedback!
