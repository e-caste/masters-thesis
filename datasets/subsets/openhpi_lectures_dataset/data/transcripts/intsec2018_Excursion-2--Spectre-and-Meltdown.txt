WEBVTT

1
00:00:00.670 --> 00:00:05.849 
This is an excursion about two recently detected really dangerous

2
00:00:05.850 --> 00:00:08.957 
attack scenarios, Meltdown and Spectre.

3
00:00:10.560 --> 00:00:15.419 
In early January, security researchers published two

4
00:00:15.450 --> 00:00:19.949 
attack scenarios, Meltdown and Spectre, which affect

5
00:00:19.950 --> 00:00:24.989 
microprocessors, which affect hardware and this is a difference

6
00:00:24.990 --> 00:00:29.579 
to the vulnerablities and hacks we discussed in the course which

7
00:00:29.760 --> 00:00:30.889 
affected software.

8
00:00:31.650 --> 00:00:33.757 
Here this attack affects the hardware below

9
00:00:36.210 --> 00:00:40.369 
of the software, below of the operating systems.

10
00:00:40.890 --> 00:00:44.789 
So, it's not a single operation system that's

11
00:00:45.420 --> 00:00:49.799 
infected, but it's every operating system because the hardware below

12
00:00:50.970 --> 00:00:54.509 
is attacked. So, the attack

13
00:00:55.440 --> 00:00:59.502 
works, the meltdown attack works for Intel

14
00:01:00.090 --> 00:01:02.001 
chips, the spectre attack works for all

15
00:01:04.920 --> 00:01:09.629 
the chips from the famous chip designers,

16
00:01:09.630 --> 00:01:12.780 
Intel, AMD, IBM power.

17
00:01:13.720 --> 00:01:16.970 
And for that reason, researcher named theis

18
00:01:18.180 --> 00:01:23.249 
vulnerability behind this attack "the worst

19
00:01:23.250 --> 00:01:27.920 
of all time". The worst of all time, because a huge number

20
00:01:28.140 --> 00:01:32.729 
of devices are affected, smartphone, laptops

21
00:01:33.000 --> 00:01:37.439 
and devices are affected, independent

22
00:01:37.680 --> 00:01:41.910 
from them, from the operating system that's used.

23
00:01:43.380 --> 00:01:47.849 
Both attack scenarios allow attackers to read from memory

24
00:01:48.330 --> 00:01:51.074 
that should not be accessible from the process which the

25
00:01:52.980 --> 00:01:54.569 
attacker can control.

26
00:01:57.240 --> 00:02:02.220 
So the attackers can read secret, they can read passwords

27
00:02:02.460 --> 00:02:07.019 
or cryptographic keys so that they can

28
00:02:07.200 --> 00:02:09.659 
decrypt text messages.

29
00:02:10.050 --> 00:02:14.549 
They can access such things which are receding

30
00:02:14.550 --> 00:02:19.419 
in memory, and they can do this even via

31
00:02:19.470 --> 00:02:22.100 
JavaScript in the browser.

32
00:02:23.760 --> 00:02:26.849 
So the A browser Windows came very early.

33
00:02:28.530 --> 00:02:30.330 
Published patches.

34
00:02:30.870 --> 00:02:35.849 
So was this was to prevent this access to the

35
00:02:36.120 --> 00:02:39.350 
to the hardware via JavaScript or the browser.

36
00:02:39.900 --> 00:02:44.639 
But the problem was much more problematic for cloud

37
00:02:44.640 --> 00:02:47.610 
companies, for the cloud companies.

38
00:02:47.640 --> 00:02:49.404 
This was just disastrous because the

39
00:02:52.110 --> 00:02:54.364 
computing resources of different customers are

40
00:02:56.550 --> 00:02:58.800 
running on the same physical hardware.

41
00:02:59.130 --> 00:03:03.509 
So the attackers could misuse this effect to

42
00:03:04.320 --> 00:03:06.259 
get access to secret data.

43
00:03:06.900 --> 00:03:10.740 
So it just needs to rent a virtual machine on

44
00:03:11.370 --> 00:03:13.918 
such a cloud and then they are able to spy out other

45
00:03:16.050 --> 00:03:19.949 
customers data, other customers, data from

46
00:03:20.550 --> 00:03:24.750 
computation that are done on the same machine,

47
00:03:25.200 --> 00:03:29.340 
like at the same hardware machine like, say, a virtual machine of the attacker.

48
00:03:29.850 --> 00:03:34.559 
So cloud companies are the first to report that patches

49
00:03:35.490 --> 00:03:40.559 
that have been applied. But this is a little bit problematic because

50
00:03:40.860 --> 00:03:45.479 
in most cases, the patches need time, computation

51
00:03:45.480 --> 00:03:49.469 
time and slow down the work of computers.

52
00:03:50.040 --> 00:03:54.300 
Let's have a closer look to see Miltown attack.

53
00:03:56.470 --> 00:04:01.509 
Programmes often take decisions, decisions, how to proceed during

54
00:04:01.510 --> 00:04:05.680 
the execution, what leads to different

55
00:04:06.370 --> 00:04:09.065 
execution and execution procedures in order to increase

56
00:04:11.110 --> 00:04:15.759 
the performance. Now CPU pre execute some

57
00:04:15.760 --> 00:04:20.589 
branches of programme code in advanced, for example, when

58
00:04:20.779 --> 00:04:24.520 
the CPU is waiting for redivide operations

59
00:04:26.320 --> 00:04:28.670 
such as speculative execution.

60
00:04:29.680 --> 00:04:32.032 
So this is called if such a speculative executed

61
00:04:34.540 --> 00:04:36.670 
branch becomes relevant later.

62
00:04:37.270 --> 00:04:41.889 
The CPU already did the work and can hand over

63
00:04:41.920 --> 00:04:46.779 
the results. The problem is that for such speculative executions,

64
00:04:47.260 --> 00:04:51.009 
there are no security checks are applied.

65
00:04:52.150 --> 00:04:56.730 
Later, when a pre executed branch is really chosen,

66
00:04:57.610 --> 00:05:00.648 
then the security check is performed and then the security is.

67
00:05:01.810 --> 00:05:06.309 
Security check prevents unauthorised access

68
00:05:06.490 --> 00:05:11.169 
to the memory, but the CPU

69
00:05:11.440 --> 00:05:15.040 
cache is faster than the regular memory.

70
00:05:15.850 --> 00:05:20.229 
So usually after first access to the need to do need, the data

71
00:05:21.190 --> 00:05:24.279 
is this data gets stored in the cache.

72
00:05:26.500 --> 00:05:31.329 
Now, by measuring access time, attackers can determine if data

73
00:05:31.330 --> 00:05:36.069 
was read from CPU cache or whether data are read

74
00:05:36.190 --> 00:05:38.689 
from memory. So now is the details of the meltdown.

75
00:05:41.290 --> 00:05:45.999 
Attack Attack writes Code White Codes in a branch

76
00:05:46.210 --> 00:05:50.600 
that reads the memory outside of siloed area.

77
00:05:51.340 --> 00:05:55.989 
So, for example, the memory of other programmes to get access

78
00:05:56.230 --> 00:06:01.089 
to secret there, then the branch will be executed

79
00:06:01.130 --> 00:06:03.090 
speculatively before C.P.U knows that it

80
00:06:05.560 --> 00:06:09.999 
access memory outside of the load part because there was

81
00:06:10.000 --> 00:06:12.129 
no security check performed.

82
00:06:13.360 --> 00:06:18.129 
Set branch of code can read so value, for example,

83
00:06:18.220 --> 00:06:22.569 
to make it easy as zero or one next

84
00:06:23.140 --> 00:06:27.850 
attacker, read some other data data from memory where

85
00:06:28.660 --> 00:06:33.369 
he or she is allowed to access he this data into

86
00:06:33.370 --> 00:06:37.959 
the CPU cache and then depending on the value from

87
00:06:37.960 --> 00:06:42.849 
the accessed memory still in the pre executed branch.

88
00:06:43.240 --> 00:06:47.529 
Here is an example. One can depending from that value,

89
00:06:47.710 --> 00:06:51.040 
one can read data from the allocated memory.

90
00:06:51.370 --> 00:06:55.569 
So if here is a value one is red, then the AI

91
00:06:55.900 --> 00:07:00.639 
should be loaded into the cache and is as else

92
00:07:00.880 --> 00:07:03.281 
see the value B should be loaded into cash in our

93
00:07:05.410 --> 00:07:08.800 
case because here is a one C A is loaded,

94
00:07:10.480 --> 00:07:13.077 
then security checks will be applied, simply executed

95
00:07:14.920 --> 00:07:19.629 
branch will be reverted and the value from access memory

96
00:07:19.870 --> 00:07:23.510 
as well as A and B will not return.

97
00:07:24.580 --> 00:07:29.559 
The problem to CPU cache will not be cleared and

98
00:07:29.680 --> 00:07:31.359 
is still in the cache.

99
00:07:32.830 --> 00:07:37.449 
So an ex attacker rereads A and B from the memory

100
00:07:37.660 --> 00:07:41.709 
and then he measures which accesses faster.

101
00:07:41.710 --> 00:07:44.797 
If access to one is faster than to the other, then the attacker

102
00:07:46.480 --> 00:07:48.587 
knows that one came from the cache and this

103
00:07:51.010 --> 00:07:54.629 
is the one which came from the speculative execution.

104
00:07:55.210 --> 00:07:59.980 
So in this way, here a is read faster than B,

105
00:08:00.670 --> 00:08:05.110 
A or B, not so is the attacker knows that in the

106
00:08:06.070 --> 00:08:08.471 
memory which was not allowed for him to see there

107
00:08:10.510 --> 00:08:12.764 
was a one and not to zero, if there would have

108
00:08:15.160 --> 00:08:18.759 
been a zero then B would have been cached.

109
00:08:19.000 --> 00:08:23.680 
And so in this way, the attacker where this mechanism

110
00:08:25.150 --> 00:08:27.012 
knows a value from a memory part which

111
00:08:29.680 --> 00:08:34.409 
is not allowed for him to access so the attacker

112
00:08:34.720 --> 00:08:39.639 
can repeat this procedure and can read larger amounts of data for a memory

113
00:08:39.880 --> 00:08:44.379 
that actually belongs to other programmes so he can find out passwords

114
00:08:44.380 --> 00:08:46.059 
or encryption keys or others.

115
00:08:48.370 --> 00:08:52.929 
You see, it's a really dangerous things because in the usual

116
00:08:52.930 --> 00:08:55.000 
work, the processor prevents.

117
00:08:55.350 --> 00:09:00.360 
The access to such kind of memory, but it is a speculative

118
00:09:00.480 --> 00:09:05.220 
computation which are introduced to make CPU's faster

119
00:09:05.820 --> 00:09:10.409 
into computation, this attack is possible

120
00:09:10.410 --> 00:09:13.720 
by means of survival and Arati of this hardware.

121
00:09:15.180 --> 00:09:16.846 
So this was detected in the middle

122
00:09:19.950 --> 00:09:25.350 
of spring, late spring of 2017.

123
00:09:25.650 --> 00:09:30.450 
And then the hardware sellers, as well as the software

124
00:09:30.720 --> 00:09:35.190 
vendors, developed patches to

125
00:09:35.340 --> 00:09:37.979 
prevent the attacks meltdown.

126
00:09:37.980 --> 00:09:42.210 
Inspector. Luckly, software updates can fix both

127
00:09:42.420 --> 00:09:46.889 
can fix Meltdown and Spectra onto the CPU, whether

128
00:09:47.310 --> 00:09:51.059 
Intel released the CPU firmware up to date update.

129
00:09:51.660 --> 00:09:56.279 
But it calls reboot issues, at least as was the this was

130
00:09:56.280 --> 00:10:00.509 
a message as end of January and under operation

131
00:10:01.020 --> 00:10:05.129 
and the operation system level Linux, Windows and

132
00:10:06.510 --> 00:10:10.260 
OS 10 released also patches.

133
00:10:11.110 --> 00:10:12.900 
And then we have the application level.

134
00:10:13.230 --> 00:10:17.699 
And here browsers, Firefox and Chrome have released

135
00:10:17.700 --> 00:10:22.109 
their own operation, independent patches to make

136
00:10:22.350 --> 00:10:25.110 
to prevent these attacks, meltdown and spectrum.

137
00:10:25.440 --> 00:10:29.880 
But software patches may result in performance loss

138
00:10:30.390 --> 00:10:33.624 
here as there is a report of about two to seven percent on Intel's

139
00:10:35.040 --> 00:10:40.049 
CPU's. So hardware vendors must implement

140
00:10:40.290 --> 00:10:44.340 
new concepts in future CPU's to overcome this.

141
00:10:44.490 --> 00:10:49.019 
Because you remember, the speculative computation was done to increase

142
00:10:49.020 --> 00:10:52.770 
the computing power of CPU's.

143
00:10:52.980 --> 00:10:57.150 
And here, if such a patch and such a prevent of this

144
00:10:57.750 --> 00:11:01.890 
meltdown spectre attack at the Creecy performance,

145
00:11:02.190 --> 00:11:04.640 
then new hardware concepts are needed and it needs

146
00:11:06.630 --> 00:11:09.031 
to buyer up to the moment this new hardware, this

147
00:11:11.070 --> 00:11:16.110 
new CPU's, find their way into the different devices.

148
00:11:16.980 --> 00:11:18.899 
So what is the message?

149
00:11:19.800 --> 00:11:24.029 
Keeping your system up to date is extremely important.

150
00:11:24.270 --> 00:11:28.760 
Even in that case, if there is hardware, a minority

151
00:11:29.370 --> 00:11:34.019 
that can be misused in such a spectacular attack.
