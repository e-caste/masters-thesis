WEBVTT

1
00:00:00.090 --> 00:00:03.350 
my name is sophia yang. and i'm an upcoming phd student at the

2
00:00:03.350 --> 00:00:06.630 
university of illinois at urbana-champaign. the paper i will

3
00:00:06.630 --> 00:00:09.850 
be presenting today is titled analyzing patterns and students

4
00:00:09.850 --> 00:00:13.110 
equal solutions via levenshtein edit distance. i would like

5
00:00:13.110 --> 00:00:15.850 
to acknowledge and thank my advisors for their help and support

6
00:00:15.850 --> 00:00:18.630 
with his work professor herman and professor alawini.

7
00:00:19.070 --> 00:00:21.680 
i would also like to thank the national science foundation

8
00:00:21.680 --> 00:00:23.240 
grant for supporting this work.

9
00:00:24.010 --> 00:00:27.170 
to examine how students learn SQL database and structures

10
00:00:27.170 --> 00:00:30.740 
often manually analyze student submissions to a given SQL problem.

11
00:00:31.120 --> 00:00:35.730 
our research questions are first how do students learn SQL. and secondly

12
00:00:35.830 --> 00:00:38.990 
how can we empower instructors to teach SQL effectively

13
00:00:39.050 --> 00:00:42.930 
and with adaptability to tailor to different students.

14
00:00:42.930 --> 00:00:45.900 
we collect our data from the database systems course which uses an auto

15
00:00:45.900 --> 00:00:49.140 
greater for SQL assignments giving us the opportunity to

16
00:00:49.140 --> 00:00:51.840 
trace students' attempts at solving SQL problems.

17
00:00:52.450 --> 00:00:55.880 
our data comes from over four semesters with each semester

18
00:00:55.880 --> 00:00:58.490 
enrollment being approximately four hundred students.

19
00:00:58.970 --> 00:01:02.240 
petrovich created the SQL tutor which is essentially a learning

20
00:01:02.240 --> 00:01:06.090 
support platform that slowly reveals a correct solution to students.

21
00:01:06.650 --> 00:01:09.780 
a hadi and his co-authors measured the difficulty of types

22
00:01:09.780 --> 00:01:13.670 
of SQL queries by analyzing the rate of correctness students answer them.

23
00:01:14.170 --> 00:01:17.210 
we have pre-processed SQL queries to remove insignificant

24
00:01:17.210 --> 00:01:20.410 
parts and the pre-processing module such as comments and redundant

25
00:01:20.410 --> 00:01:23.330 
punctuation including new line characters and white spaces.

26
00:01:23.620 --> 00:01:26.290 
the results are then stored in a tree-like structure based

27
00:01:26.290 --> 00:01:29.170 
on the structure of the query the SQL keywords and attribute

28
00:01:29.170 --> 00:01:32.170 
names are separate into two groups and then iteratively compared

29
00:01:32.170 --> 00:01:35.450 
to the sum the total eleven stein at a distance.

30
00:01:35.450 --> 00:01:38.560 
the levenshtein at a distance is computed by detecting the smallest changes

31
00:01:38.560 --> 00:01:41.570 
between the two strings being compared which includes deletions

32
00:01:41.570 --> 00:01:45.180 
insertions and substitutions or replacements.

33
00:01:45.180 --> 00:01:48.130 
the final edit distance represents the smallest number of changes required

34
00:01:48.130 --> 00:01:50.990 
to change the first string into the second string with each

35
00:01:50.990 --> 00:01:54.350 
change holding a weight of one. for example and the figure on

36
00:01:54.350 --> 00:01:57.500 
our right to change love and stein into its scrambled form at the top.

37
00:01:57.700 --> 00:02:03.190 
l n v e t h s i e n we must replace four letters and answer

38
00:02:03.190 --> 00:02:07.130 
and delete a letter which sums up to six edits.

39
00:02:07.130 --> 00:02:10.880 
we found that students generally take two different approaches
at tackling a SQL problem.

40
00:02:11.020 --> 00:02:14.320 
trial and error and divide and conquer or a combination of the two.

41
00:02:14.620 --> 00:02:18.010 
in the middle we present an example of a visualization created

42
00:02:18.010 --> 00:02:21.010 
by our submissions visualizer which depicts the levenshtein

43
00:02:21.140 --> 00:02:24.190 
distance between the current submission number with the final submission.

44
00:02:24.470 --> 00:02:29.040 
an example of a trial and error pattern is seen with submissions
fifteen through seventeen.

45
00:02:29.330 --> 00:02:32.350 
the students' fifteenth submission is the one shown in orange

46
00:02:32.360 --> 00:02:35.790 
which has a semantic error meaning the query was able to compile successfully,

47
00:02:35.790 --> 00:02:38.440 
but did not retrieve the correct results.

48
00:02:38.890 --> 00:02:41.900 
in its next submission it appends the where clause shown in

49
00:02:41.900 --> 00:02:45.390 
blue at the end of its previous query. the query continues to

50
00:02:45.390 --> 00:02:48.610 
have semantic issues, so the student replaces the where clause

51
00:02:48.610 --> 00:02:53.060 
shown in blue with the one shown in red and submits it,
as its seventeenth submission.

52
00:02:53.360 --> 00:02:56.270 
for divide and conquer we see that the student creates and

53
00:02:56.270 --> 00:03:00.190 
tests its subtrees, first before merging them into its final query.

54
00:03:00.480 --> 00:03:03.280 
the forty seventh submission shown in yellow served as the

55
00:03:03.280 --> 00:03:06.620 
subtree of the forty ninth submission in purple,

56
00:03:06.620 --> 00:03:10.620 
and the forty ninth submission served as the subtree of
the fifty eighth submission in peach.

57
00:03:10.960 --> 00:03:14.760 
lastly we notice when edit distance doesn't change it signifies

58
00:03:14.760 --> 00:03:17.570 
that the student had either cleaned up comments in his query

59
00:03:17.740 --> 00:03:21.130 
or re-submitted the same query out of frustration,

60
00:03:21.130 --> 00:03:23.320 
like we see between submissions twenty five to twenty eight.

61
00:03:23.780 --> 00:03:26.570 
we plan to extend our current work by providing an aggregate

62
00:03:26.570 --> 00:03:29.890 
view format of the class to provide instructors quicker insights.

63
00:03:30.430 --> 00:03:33.960 
we envision this to be implemented using hierarchical clustering

64
00:03:34.090 --> 00:03:37.320 
with the output visualization being a dendrogram which can

65
00:03:37.320 --> 00:03:41.290 
also be useful as a plagiarism detection aid furthermore.

66
00:03:41.290 --> 00:03:44.500 
we plan to equip instructors with deeper insights on whether the

67
00:03:44.500 --> 00:03:48.480 
student utilized multiple approaches and how they came up with
their final solution

68
00:03:48.630 --> 00:03:51.520 
by implementing global sequence alignment algorithms and the

69
00:03:51.520 --> 00:03:54.560 
back tracing technique to create insightful visualizations.

70
00:03:55.030 --> 00:03:56.480 
thank you all for watching.
