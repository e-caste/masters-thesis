WEBVTT

1
00:00:00.650 --> 00:00:03.750 
now we continue to speak
about attacks on the

2
00:00:03.750 --> 00:00:08.260 
world wide web. but now we
consider on the server-side.

3
00:00:09.110 --> 00:00:14.350 
a wide web most popular
an internet service

4
00:00:14.590 --> 00:00:18.650 
and this popularity makes
it an attractive target

5
00:00:18.890 --> 00:00:22.920 
and we already mentioned that
web can be attacked on two

6
00:00:23.330 --> 00:00:28.480 
levels, on two sides. so one
is via the web browser

7
00:00:28.770 --> 00:00:34.110 
to get access or for the
user to get access to the

8
00:00:34.110 --> 00:00:37.150 
user system and to influence
the user system and to get

9
00:00:37.450 --> 00:00:41.480 
access to the user data, here
is about attacks against web

10
00:00:41.480 --> 00:00:45.360 
browser we already discussed. but
the other way is to attacks

11
00:00:45.360 --> 00:00:49.740 
a web via the web
servers of the

12
00:00:50.010 --> 00:00:55.620 
Server providers.

13
00:00:55.980 --> 00:01:00.790 
they provide

14
00:01:01.110 --> 00:01:04.010 
the functionalities,
they provide services.

15
00:01:04.810 --> 00:01:11.050 
so to allow the user to excess
service to the user's interacts.

16
00:01:11.390 --> 00:01:14.320 
overall its browse over
his or her browser

17
00:01:14.540 --> 00:01:17.860 
with the web servers of
the service provider.

18
00:01:18.340 --> 00:01:23.930 
what are the targets of such
attacks against web service,

19
00:01:24.700 --> 00:01:29.080 
see a web service at the
idea, when they are able

20
00:01:29.670 --> 00:01:36.540 
to, for example, a place malicious code
on the web server of the service

21
00:01:36.540 --> 00:01:41.620 
provider, and when users interact
with a service provider, then

22
00:01:42.020 --> 00:01:46.200 
the malicious code is
transported in a very

23
00:01:46.400 --> 00:01:50.790 
quickly and very a
widely used way

24
00:01:51.080 --> 00:01:56.560 
to the user computers. so
the attack tries to misuse

25
00:01:56.860 --> 00:02:02.450 
of service provider for
distributing their

26
00:02:02.610 --> 00:02:04.680 
malicious code.

27
00:02:07.260 --> 00:02:10.560 
also a service provider, if
it's a popular service

28
00:02:10.810 --> 00:02:16.790 
provides an excess to the data of
many users, also this is attractive

29
00:02:17.020 --> 00:02:22.570 
for an attacker to attack.
the attacker misuse

30
00:02:22.780 --> 00:02:28.090 
in often, they misuse often the
inexperience or inattentiveness of

31
00:02:28.090 --> 00:02:32.230 
administrators and developers
of web services.

32
00:02:32.290 --> 00:02:37.110 
we saw another set are possible
because the developer will work

33
00:02:37.170 --> 00:02:41.870 
not correctly and we see from
other services that many of

34
00:02:41.880 --> 00:02:46.570 
the service provider are not
correctly configured as

35
00:02:46.850 --> 00:02:50.760 
they are and have
administrators which are not

36
00:02:51.020 --> 00:02:55.510 
correctly has no how to
secure a system and

37
00:02:55.510 --> 00:03:00.640 
this opens tools for attackers.
so in particular the attackers

38
00:03:00.640 --> 00:03:04.070 
emploit vulnerabilities are
in the server software.

39
00:03:04.610 --> 00:03:08.450 
this is for example the
http server software,

40
00:03:08.720 --> 00:03:12.480 
this is the functionality
of the web service,

41
00:03:12.810 --> 00:03:18.050 
they misuse exploit vulnerabilities
of script interpreters

42
00:03:18.400 --> 00:03:22.840 
of the servers was
PHP,Ruby,Python,...

43
00:03:23.280 --> 00:03:27.810 
which make web sites more
attractive more lively

44
00:03:28.270 --> 00:03:32.310 
and when we discussed attacks
against web browser we already

45
00:03:32.310 --> 00:03:36.340 
saw that there are minorities
in this script interpreters.

46
00:03:36.720 --> 00:03:41.120 
and they misuse
vulnerabilities in websites

47
00:03:41.410 --> 00:03:48.270 
and applications. there is an
organization so open web application

48
00:03:48.340 --> 00:03:53.540 
security project which regulatory
lists the top vulnerabilities

49
00:03:53.670 --> 00:03:58.990 
on the web and the last

50
00:03:59.150 --> 00:04:04.560 
ranking shows that there are
design and programming errors

51
00:04:04.920 --> 00:04:11.490 
and first place of the
top of vulnerabilities

52
00:04:11.730 --> 00:04:17.120 
on the web is injection and broken
out indications sensitive

53
00:04:17.120 --> 00:04:22.250 
data explorer and others, on the
seventh place, cross-site scripting,

54
00:04:22.720 --> 00:04:27.240 
also this an attack against the
web server and you see it

55
00:04:27.490 --> 00:04:31.480 
more as they are also administration
and configuration errors

56
00:04:31.710 --> 00:04:36.490 
which provide a attack
possibility to attack a system.

57
00:04:36.770 --> 00:04:42.560 
so on the place six on the top ten
list is security misconfiguration

58
00:04:42.890 --> 00:04:46.290 
using components with
known minorities

59
00:04:46.600 --> 00:04:50.160 
not updated with
last patches

60
00:04:50.390 --> 00:04:55.820 
to close this vulnerabilities and
infufficient loggin and Monitoring

61
00:04:55.820 --> 00:04:58.580 
this is administration's
available

62
00:04:58.840 --> 00:05:04.010 
and this are the attacks which
are based on minorities

63
00:05:04.290 --> 00:05:09.760 
of design by vulnerabilities by
their programs by applications

64
00:05:10.070 --> 00:05:12.430 
which are based on design
and programming errors.

65
00:05:12.670 --> 00:05:16.380 
let's speak about this
is a in more detail

66
00:05:16.830 --> 00:05:20.640 
and let's start with a i have
a closer look to injections.

67
00:05:21.870 --> 00:05:25.260 
by the way we already
discussed injections in

68
00:05:25.430 --> 00:05:32.320 
other videos already, but
here injects are with

69
00:05:32.340 --> 00:05:34.290 
the attacks against
web servers,

70
00:05:34.530 --> 00:05:39.910 
injections became very very dangerous.
injections refer to the introduction

71
00:05:39.910 --> 00:05:44.740 
of comments via
harmless user inputs.

72
00:05:45.490 --> 00:05:50.010 
so the user inputs are often
used without verification,

73
00:05:50.600 --> 00:05:54.050 
they are used by the system
directly as a parameter,

74
00:05:54.570 --> 00:05:59.300 
so if the user writes
something in the form,

75
00:05:59.670 --> 00:06:03.310 
and this is copied into the
memory and then it's executed.

76
00:06:04.310 --> 00:06:10.720 
this is bad in a sense that if
knowledge people, if attacker know

77
00:06:11.200 --> 00:06:16.010 
that the system works that way,
then they are able to hide

78
00:06:16.010 --> 00:06:21.480 
it to place into the input form
also, for example, malicious

79
00:06:21.480 --> 00:06:27.000 
code or other things which
sent directly is stored

80
00:06:27.310 --> 00:06:31.750 
in system memory and it's
used as a parameter and

81
00:06:31.750 --> 00:06:35.480 
this can be used to prepare
comments and program code.

82
00:06:37.550 --> 00:06:41.180 
if entries are not checked
properly, if the designer

83
00:06:41.460 --> 00:06:45.630 
of the program the developer
did not check the user input

84
00:06:45.640 --> 00:06:50.120 
for correct lengths or
forbidden symbols or others,

85
00:06:50.480 --> 00:06:53.510 
then the attackers can
place their own comments,

86
00:06:53.780 --> 00:06:58.450 
can place their own comments
in these parameters.

87
00:06:58.890 --> 00:07:02.840 
and later on those
parameters are executed

88
00:07:03.260 --> 00:07:09.920 
by the attacked service.
if it always works when

89
00:07:10.100 --> 00:07:12.800 
no proper input filtering
is implemented.

90
00:07:13.090 --> 00:07:18.570 
if the developer does not
directly check the input of

91
00:07:18.580 --> 00:07:22.310 
the user, in this case,
input of the attacker

92
00:07:22.620 --> 00:07:28.690 
then a attacker would not work.
most frequent type of misuse

93
00:07:28.700 --> 00:07:34.030 
in the map are already mentioned,
in another video was mentioned

94
00:07:34.260 --> 00:07:37.700 
SQL injections,
sql is a search

95
00:07:37.960 --> 00:07:43.300 
query language for databases so
the idea here is this injection

96
00:07:43.300 --> 00:07:47.240 
to introduce comment in
such a SQL queries

97
00:07:47.490 --> 00:07:54.370 
to dynamic web application and
by means of such injections,

98
00:07:54.400 --> 00:07:58.240 
it is possible that the
attacker bypasses

99
00:07:58.520 --> 00:08:03.480 
authentication and you
can get directly excess

100
00:08:03.820 --> 00:08:08.320 
to the user database, for
example to muliply us or to

101
00:08:08.320 --> 00:08:10.300 
add something, or to
leave something.

102
00:08:11.110 --> 00:08:14.780 
so basic idea of such an
injection here shown

103
00:08:14.780 --> 00:08:19.020 
in the SQL injection is that
the user can use a form

104
00:08:19.460 --> 00:08:22.910 
to request for example sending
of an information sheet.

105
00:08:24.090 --> 00:08:28.330 
let's look to such an example
so recipient's address

106
00:08:28.710 --> 00:08:34.690 
receiver is taken from the web
form, so the web form is the

107
00:08:34.750 --> 00:08:40.160 
user who wants to get
the information.

108
00:08:40.600 --> 00:08:45.060 
here is the sender's address
who requests the information

109
00:08:45.190 --> 00:08:49.910 
and then it's a a receiver address
is directly taken from the

110
00:08:49.910 --> 00:08:56.860 
web. now an attacker can exploit
this and specifies the commands

111
00:08:56.870 --> 00:08:59.440 
in the recipients field
instead of those

112
00:08:59.700 --> 00:09:04.480 
of expected reciplent. you
see, so the recipient now

113
00:09:04.720 --> 00:09:08.210 
is no more the address,
it starts with address

114
00:09:08.630 --> 00:09:14.170 
and then it continued by
a comment, by a comment

115
00:09:14.420 --> 00:09:18.740 
which insists in deleting
the hard drive.

116
00:09:19.900 --> 00:09:24.470 
so if the designer or
developer group does not

117
00:09:24.470 --> 00:09:28.700 
check that here
is not only

118
00:09:29.070 --> 00:09:33.030 
the address from
the sender,

119
00:09:33.200 --> 00:09:37.160 
but also some comments
that he is not aware

120
00:09:37.420 --> 00:09:40.620 
that here by means of this,
an attack can be done.

121
00:09:42.090 --> 00:09:47.150 
finally in such case of an
armed form, of a user

122
00:09:47.530 --> 00:09:52.520 
is following done send email
from, this is the email address

123
00:09:52.530 --> 00:09:56.670 
from an attacker
come and

124
00:09:58.830 --> 00:10:06.250 
delete the database. so here
you see by putting in

125
00:10:06.590 --> 00:10:13.450 
some malicious text in such
an input form that attack

126
00:10:13.450 --> 00:10:17.090 
you can force the system to
do some unwanted activity.

127
00:10:17.820 --> 00:10:22.220 
here an example with
an SQL injection

128
00:10:22.670 --> 00:10:27.270 
on website login.
so as the

129
00:10:27.480 --> 00:10:32.400 
common behind this from user a
user name here now is expected

130
00:10:32.410 --> 00:10:37.080 
the input of the username and password,
here is expected to password

131
00:10:37.410 --> 00:10:41.480 
of the user, this
is a SQL query

132
00:10:41.750 --> 00:10:45.290 
that checks whether the
user and that data

133
00:10:45.690 --> 00:10:51.860 
username and password whether this
pair is stored in the database.

134
00:10:53.440 --> 00:10:57.000 
so from here the system
knows that he has to take

135
00:10:57.000 --> 00:11:01.090 
the user names of the user, the
input of the user and from here

136
00:11:01.090 --> 00:11:04.160 
this line, this system
knows it takes the

137
00:11:04.390 --> 00:11:08.740 
input for the password.
now attackers that know

138
00:11:09.140 --> 00:11:13.170 
that the system is not
carefully designed

139
00:11:13.440 --> 00:11:16.770 
that it's not checked, the input
is not checked does following.

140
00:11:19.800 --> 00:11:25.720 
user enters the
text' OR 0=0--

141
00:11:25.720 --> 00:11:27.630 
that is to

142
00:11:30.800 --> 00:11:34.610 
put into the user name in this
form, for the user name

143
00:11:36.810 --> 00:11:41.430 
and then the password the user
does not know the password

144
00:11:41.660 --> 00:11:46.140 
there is no password grouped
now it comes to the system

145
00:11:46.450 --> 00:11:50.910 
and the system sees ok
user name and then

146
00:11:51.210 --> 00:11:56.460 
there is an or and several
equals zero is ever time true

147
00:11:57.220 --> 00:12:02.610 
so here zero equals
zero always applis

148
00:12:03.040 --> 00:12:09.540 
so it excess condition
username which was extended

149
00:12:09.640 --> 00:12:14.500 
in a better idea,
extended by the

150
00:12:14.500 --> 00:12:17.380 
attack by something that
every time is true

151
00:12:17.590 --> 00:12:24.120 
to force the system. now
this true came into

152
00:12:24.480 --> 00:12:30.690 
a place and this
is the interpret

153
00:12:30.900 --> 00:12:34.330 
what comes now is
considered as a comment.

154
00:12:34.730 --> 00:12:38.000 
so it's no considered for computation,
considered as a comment

155
00:12:38.280 --> 00:12:42.900 
so the system does not see
is that the attacker

156
00:12:43.140 --> 00:12:47.940 
does not give a password
and the right password

157
00:12:48.210 --> 00:12:52.720 
system stops here because this
is true and this is fine

158
00:12:53.110 --> 00:12:58.510 
and those attacker have
bypassed the login procedure.

159
00:12:59.010 --> 00:13:05.720 
without giving a username
without knowing the matching

160
00:13:05.720 --> 00:13:08.870 
password by means of
system manipulation.

161
00:13:09.570 --> 00:13:15.710 
the attacker can access the
system. what is a reason,

162
00:13:16.240 --> 00:13:19.760 
reason here is a mistake that
designs for us this program

163
00:13:20.160 --> 00:13:23.440 
did not work correctly,
because the user name

164
00:13:23.440 --> 00:13:28.000 
it should be not
allowed to continue

165
00:13:28.270 --> 00:13:33.120 
to arrived something such an
or a which is not a good or

166
00:13:33.130 --> 00:13:36.230 
which is one part is true
at all always true

167
00:13:36.630 --> 00:13:42.700 
as this is possible, so in
this way the attacker can

168
00:13:42.970 --> 00:13:47.760 
utilize this failer as vulnerbilities
on your system and can

169
00:13:47.760 --> 00:13:52.340 
bypass authentication
and then here it has

170
00:13:52.600 --> 00:13:56.200 
access like all
the authriozes.

171
00:13:56.830 --> 00:14:01.790 
what are countermeasures it's difficult
to speak about countermeasures.

172
00:14:01.790 --> 00:14:06.890 
because Must come primarily
from the developers.

173
00:14:07.550 --> 00:14:12.260 
the developers should filter in a
correct way, they should filter

174
00:14:12.260 --> 00:14:17.300 
to detect, if there code in the input,
if there are some letters and

175
00:14:17.310 --> 00:14:22.760 
characters that
are not allowed,

176
00:14:22.780 --> 00:14:28.310 
if the length limit or not, so
filtering outputs and that comments

177
00:14:28.310 --> 00:14:33.010 
controller characters, for example
quotation marks this was

178
00:14:33.010 --> 00:14:36.330 
in our example which is allowed
to continue with the or

179
00:14:36.770 --> 00:14:41.970 
with all parameters. so
this is done by the

180
00:14:41.970 --> 00:14:45.480 
on side of the developers, on the
other side also restrictions

181
00:14:45.480 --> 00:14:50.260 
of authorizations in need to be
done, for example execution

182
00:14:50.260 --> 00:14:54.830 
of comments only with a minimum
required permissions.

183
00:14:55.090 --> 00:14:59.360 
so that for example it's not
possible if this was the first

184
00:14:59.360 --> 00:15:02.840 
example to gives a comment
to delete a database.

185
00:15:03.190 --> 00:15:08.230 
and without being
status of

186
00:15:08.500 --> 00:15:15.180 
an administrator, then every time
it's also a countermeasures

187
00:15:15.180 --> 00:15:18.570 
inside of the developer,
the user content

188
00:15:18.840 --> 00:15:23.830 
should never being directly
taken over the system and

189
00:15:23.830 --> 00:15:29.420 
then one can avoid
that also a code

190
00:15:29.600 --> 00:15:35.970 
comes in, to never integrate user
input as a parameter in comments

191
00:15:36.320 --> 00:15:41.020 
and then use programming libraries,
libraries for the sanitizing

192
00:15:41.020 --> 00:15:45.710 
the user inputs. there are a lot
of help and programming language

193
00:15:45.710 --> 00:15:49.660 
which says support as it
can support to developer

194
00:15:49.910 --> 00:15:51.890 
to avoid such failures.

195
00:15:54.270 --> 00:16:00.080 
let's come to another
dangerous family of attacks

196
00:16:00.090 --> 00:16:04.620 
on the web service. so called
cross-site scripting

197
00:16:05.910 --> 00:16:08.760 
XSS cross-site scripting
this is a vulnerability

198
00:16:09.100 --> 00:16:13.340 
whereby an attacker introduces
malicious scripts

199
00:16:13.940 --> 00:16:19.300 
-small programs- into another web
page which are then executed

200
00:16:19.310 --> 00:16:23.670 
by the users of such
a web page so this

201
00:16:23.950 --> 00:16:27.920 
XSS is cross-site
scripting is a type of

202
00:16:28.250 --> 00:16:35.430 
html injection and only a threat
when the user can affects

203
00:16:35.430 --> 00:16:38.990 
the output of a web page
through their own input.

204
00:16:39.440 --> 00:16:44.390 
so this is true of for example
with forums also sings

205
00:16:45.140 --> 00:16:49.760 
then they attack us input initiated
the creation and delivery

206
00:16:49.760 --> 00:16:54.420 
of a new modified web page
with malicious script codes.

207
00:16:55.170 --> 00:16:59.820 
so the malicious script code is
then executed by all other users.

208
00:16:59.970 --> 00:17:03.910 
so it was it that manipulated
page and this is what makes

209
00:17:03.920 --> 00:17:08.110 
attacks against web
server, so popular

210
00:17:08.350 --> 00:17:14.310 
with attack us because with
one attack they can infact a

211
00:17:14.310 --> 00:17:18.170 
lot of users' systems.

212
00:17:19.630 --> 00:17:23.400 
so website that only
display their own content

213
00:17:23.900 --> 00:17:27.150 
that means is that the
website do not allow user

214
00:17:27.150 --> 00:17:30.440 
generated content they
are not infected

215
00:17:30.760 --> 00:17:34.140 
by such a cross-site
scripting attacks.

216
00:17:37.720 --> 00:17:42.010 
and this works, let's
consider an example so

217
00:17:42.010 --> 00:17:46.600 
often web pages with a lot of
dynamic user-generated content

218
00:17:46.820 --> 00:17:50.480 
are attacked, such website
is for example blocks

219
00:17:50.960 --> 00:17:57.180 
wiki's discussion forums.
so in the pre at such an

220
00:17:57.190 --> 00:18:01.350 
cross-site scripting works is that
user inputs are transferred

221
00:18:01.370 --> 00:18:04.500 
directly to the web
page without checking

222
00:18:04.690 --> 00:18:08.040 
whether input contain
script elements are not.

223
00:18:08.350 --> 00:18:13.330 
in a blog if one is allowed to make
an comment and in the comment

224
00:18:13.350 --> 00:18:16.220 
they are some controls.

225
00:18:16.740 --> 00:18:21.080 
this is a possible then such a
cross-site scripting attacks

226
00:18:21.080 --> 00:18:26.460 
can be performed. if you the
user inputs are not directly

227
00:18:26.460 --> 00:18:30.580 
transferred to the web page
and then there could be

228
00:18:30.700 --> 00:18:35.160 
an attack. Let's
consider an

229
00:18:35.160 --> 00:18:40.190 
example, example a of
manipulating the forum post.

230
00:18:41.070 --> 00:18:45.330 
Hi everyone this is my first
message to the forum.

231
00:18:45.860 --> 00:18:49.240 
this is what they are so
users see when they

232
00:18:49.520 --> 00:18:53.710 
click on that and then
in the red you see a

233
00:18:54.090 --> 00:18:58.330 
script imbedded in this
the user messages with

234
00:18:58.330 --> 00:18:59.160 
malicious code.

235
00:19:01.630 --> 00:19:05.920 
the malicious code
transferred then executed

236
00:19:06.180 --> 00:19:12.160 
by or users who read
the forum post.

237
00:19:12.710 --> 00:19:16.780 
if they click this, but on
their systems the malicious

238
00:19:16.780 --> 00:19:18.540 
code is performed.

239
00:19:21.110 --> 00:19:24.810 
the malicious code for a cross-site
scripting as attacks typically

240
00:19:24.810 --> 00:19:29.510 
has the following goals, the
idea is to inject malicious

241
00:19:29.510 --> 00:19:33.150 
code that exploits
minorities in the browser

242
00:19:33.450 --> 00:19:37.300 
to gain access to the user system
and the data of the user.

243
00:19:37.810 --> 00:19:41.740 
the goals of such a
cross-site scripting

244
00:19:41.740 --> 00:19:46.560 
are to send personal information
for example cookies

245
00:19:46.940 --> 00:19:50.150 
to attackers, to
prepare other

246
00:19:50.370 --> 00:19:54.440 
attackers for example cookies
may contain session data

247
00:19:54.840 --> 00:19:57.960 
they may contain
passwords session

248
00:19:58.330 --> 00:20:00.660 
they may contain password
for a web page

249
00:20:00.830 --> 00:20:06.510 
and can be used to log into a website
under the victim's identity.

250
00:20:08.170 --> 00:20:10.830 
cross-site scripting
is used for click

251
00:20:11.190 --> 00:20:16.330 
checking where are malicious script
code in the victim's browser

252
00:20:16.330 --> 00:20:21.740 
tricks' clicks on advertising
link's. so it's an advertising

253
00:20:21.740 --> 00:20:26.600 
fault and so you see

254
00:20:26.890 --> 00:20:29.910 
really dangerous things
that can be done.

255
00:20:30.380 --> 00:20:33.310 
what our protection so
what are countermeasures

256
00:20:33.890 --> 00:20:37.830 
on the part of website operators
on the part of the developers

257
00:20:38.130 --> 00:20:44.150 
the same as SQL- injection
always filter user inputs

258
00:20:44.610 --> 00:20:48.550 
to remove control characters
to remove contents

259
00:20:48.850 --> 00:20:52.250 
is called the
sanitizing input.

260
00:20:53.010 --> 00:20:58.050 
on the part of website visitors
does, you should only follow

261
00:20:58.050 --> 00:21:02.200 
links only follow links
to the main website

262
00:21:02.690 --> 00:21:08.810 
that you have visited, this
reduce the greatest risk so

263
00:21:08.810 --> 00:21:15.370 
do not follow links to other
pages. only to the main website

264
00:21:15.650 --> 00:21:21.430 
that you have with it,
then almost what hint

265
00:21:21.710 --> 00:21:27.400 
said almost work that you should
disables is javascript.

266
00:21:27.990 --> 00:21:31.530 
at least on page,
it is not needed

267
00:21:32.020 --> 00:21:35.720 
there you should disabled
javascript for example

268
00:21:35.720 --> 00:21:40.640 
with browser add-ons like no script
quick javascript switcher,

269
00:21:41.020 --> 00:21:46.120 
one can do is in a convenient
way because such javascript

270
00:21:46.120 --> 00:21:52.040 
scripts are misused for
performing such an

271
00:21:52.260 --> 00:21:59.130 
text and then it and then
this is a general hint

272
00:21:59.660 --> 00:22:03.400 
and it's a general
countermeasure always install

273
00:22:03.700 --> 00:22:08.450 
updates latest updates for
software, for the browser

274
00:22:08.690 --> 00:22:12.270 
so that is a malicious
code cannot exploit

275
00:22:12.790 --> 00:22:16.510 
at least cannot exploit known
security vulnerabilities

276
00:22:16.870 --> 00:22:20.380 
because it's the attacker knows
as they tried to exploited

277
00:22:20.760 --> 00:22:26.540 
and the windows
here provides

278
00:22:26.550 --> 00:22:30.920 
updates so that the exploits
from the attacker

279
00:22:31.440 --> 00:22:35.270 
are no more danger. so
you see a web service

280
00:22:35.550 --> 00:22:39.540 
is a very important
very attractive code

281
00:22:39.810 --> 00:22:44.980 
for attackers particular was also
to attack the web service.

282
00:22:45.050 --> 00:22:51.140 
because if they are able to
infact the web service then

283
00:22:51.310 --> 00:22:55.610 
they are attacks they are malicious
code or also things are

284
00:22:55.620 --> 00:23:00.860 
in a very short time widely spread
to the users of that services.
