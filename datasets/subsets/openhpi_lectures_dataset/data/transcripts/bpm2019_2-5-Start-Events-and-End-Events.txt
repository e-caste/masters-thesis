WEBVTT

1
00:00:00.350 --> 00:00:03.770 
Welcome to video clip 2.5
in which we discuss start

2
00:00:03.770 --> 00:00:04.990 
events and end events.

3
00:00:06.360 --> 00:00:09.400 
So the interaction of a business
process with its environment

4
00:00:09.400 --> 00:00:11.890 
is represented by events
or what is an event?

5
00:00:12.480 --> 00:00:16.320 
Events are happenings of the real
world that have a business

6
00:00:16.320 --> 00:00:18.470 
meaning and it do
not take time.

7
00:00:19.880 --> 00:00:24.230 
So that's important to stress
that in contrast to activities

8
00:00:24.230 --> 00:00:28.720 
that the time to execute events
do not take time. Events are

9
00:00:28.720 --> 00:00:30.700 
just happenings of the
real world that have

10
00:00:31.110 --> 00:00:33.210 
a business meaning and
do not take time.

11
00:00:34.720 --> 00:00:38.710 
The start event or start
event models the start of a

12
00:00:38.710 --> 00:00:43.110 
business process and an end event models
process completion with an outcome.

13
00:00:43.840 --> 00:00:50.060 
So we have here in this process
model that we have been looking at

14
00:00:50.930 --> 00:00:55.350 
for quite a while already we have a start
event and that is called claim received.

15
00:00:55.810 --> 00:00:58.270 
So claim received
is the happening

16
00:00:58.930 --> 00:01:02.080 
an event of the real world
that has a business meaning,

17
00:01:02.790 --> 00:01:07.790 
because after the claim is
received I can start I need to

18
00:01:07.790 --> 00:01:12.560 
start a new business process
instance that reacts to

19
00:01:12.930 --> 00:01:14.510 
the receiving
of the claim.

20
00:01:15.660 --> 00:01:19.660 
So a start event models the start of
the business process and an end event

21
00:01:19.940 --> 00:01:23.200 
models process completion with
an outcome. So we have here two

22
00:01:23.200 --> 00:01:27.360 
end events, one is claim approved
and one is claim rejected.

23
00:01:28.290 --> 00:01:31.690 
And here we have also
events and these

24
00:01:32.460 --> 00:01:36.850 
two events signal the end of
the business process instance

25
00:01:37.080 --> 00:01:41.380 
and also they are labelled with
the outcome so two different

26
00:01:41.390 --> 00:01:44.130 
outcomes are possible here - one
is claim approved one is

27
00:01:44.130 --> 00:01:44.990 
claim rejected.

28
00:01:47.200 --> 00:01:51.170 
In our application scenario we have
a similar situation of the process

29
00:01:51.470 --> 00:01:55.210 
ways to receive an order. And
after receiving the order the

30
00:01:55.210 --> 00:01:59.180 
order is fulfilled and the process
terminates successfully or

31
00:01:59.450 --> 00:02:04.090 
if the order cannot be fulfilled the process
terminates unsuccessfully and the order

32
00:02:04.230 --> 00:02:04.980 
is cancelled.

33
00:02:07.450 --> 00:02:11.050 
Alright so here we have a
representation of this

34
00:02:11.910 --> 00:02:15.950 
the model representation of the text
of the text describing the process,

35
00:02:16.760 --> 00:02:19.990 
and here we have
similar to the claim or

36
00:02:20.580 --> 00:02:23.940 
the claim received the order is
received or received as again

37
00:02:23.950 --> 00:02:27.010 
event happening of the real
world that has impact that has

38
00:02:27.190 --> 00:02:31.690 
an effect on the process. And we have
two end events that is the order

39
00:02:31.840 --> 00:02:35.490 
cancelled or order fulfilled. These
also events in the real world

40
00:02:35.760 --> 00:02:40.250 
that happen let's see that have a
business value or business meaning.

41
00:02:40.590 --> 00:02:46.610 
Alright if we look now at
the start event at the end

42
00:02:46.610 --> 00:02:50.220 
events we can see that both have
some kind of a different character

43
00:02:51.020 --> 00:02:54.200 
regarding event creation. So
what do we mean by that?

44
00:02:54.970 --> 00:02:59.620 
After a while the process
is about to be started

45
00:03:00.440 --> 00:03:05.020 
it reacts on the occurrence of
an event in the environment. So

46
00:03:05.560 --> 00:03:10.700 
order received is not something that
the process did by itself so that

47
00:03:11.060 --> 00:03:15.760 
isn't happening of the real world
that is then that is relevant

48
00:03:15.760 --> 00:03:18.720 
for the process yes but the
process did not start did not do

49
00:03:18.720 --> 00:03:20.500 
that but the process
reacts to that.

50
00:03:22.160 --> 00:03:26.200 
Regarding the end events it is a bit
different since since here the

51
00:03:26.200 --> 00:03:32.370 
event is created during the process
execution. So actively the process

52
00:03:33.040 --> 00:03:38.950 
triggers an event order cancelled or
an event order fulfilled. So this

53
00:03:39.150 --> 00:03:43.170 
that's a difference which was
the first the first situation

54
00:03:43.170 --> 00:03:47.690 
with a start event that event is caught
by the process, the process catches

55
00:03:48.030 --> 00:03:51.740 
so to speak this event and reacts
to that and related to the

56
00:03:51.740 --> 00:03:57.090 
end events that process we say
the process throws an event. So

57
00:03:57.300 --> 00:04:02.360 
either the order cancelled
event is thrown or the order

58
00:04:02.360 --> 00:04:05.000 
fulfilled event is thrown
by this business process.

59
00:04:07.040 --> 00:04:10.060 
So an event can be caught. In
this case the event happens in

60
00:04:10.060 --> 00:04:13.840 
the environment and its occurrence has
an impact on the process instance.

61
00:04:14.410 --> 00:04:19.740 
Or an event can be thrown in
which case the event is created

62
00:04:19.740 --> 00:04:25.680 
by the process instance itself. And again
a process or the start events

63
00:04:25.910 --> 00:04:31.290 
of the process we see here are
catching events, in these events

64
00:04:31.650 --> 00:04:37.790 
event needs to be caught by the process
and these two events are thrown,

65
00:04:37.970 --> 00:04:41.010 
either of them is thrown
by each process instance.

66
00:04:43.270 --> 00:04:47.900 
BPMN has a number of event types, two event types
We have already seen in the previous

67
00:04:48.010 --> 00:04:53.100 
example. That is a start event and
that is the end event. Start

68
00:04:53.100 --> 00:04:56.630 
events cause the start of a new
process instance and end events

69
00:04:56.640 --> 00:05:01.420 
signal determination of a process
instance. Start events are always

70
00:05:01.590 --> 00:05:02.720 
of catching nature

71
00:05:04.450 --> 00:05:06.620 
and end events are always
a throwing nature.

72
00:05:07.690 --> 00:05:12.400 
In addition there are so called intermediate
events. Well intermediate events

73
00:05:12.630 --> 00:05:16.250 
happen after start events, after
the start of the process and

74
00:05:16.250 --> 00:05:19.410 
before the end of the process. Therefore
they are intermediate events

75
00:05:19.730 --> 00:05:23.340 
and they can be of catching
and of throwing nature.

76
00:05:24.550 --> 00:05:28.550 
So intermediate events can be caught
or thrown during a process instance.

77
00:05:29.490 --> 00:05:33.960 
Events itself or themselves do
not take time happenings of the

78
00:05:34.170 --> 00:05:38.750 
real world but a process might have to
wait for an intermediate catching event

79
00:05:39.040 --> 00:05:42.750 
to occur. We will see that in the
example soon. So intermediate

80
00:05:42.750 --> 00:05:47.010 
event we take from the slides
are catching and throwing. In the

81
00:05:47.200 --> 00:05:51.630 
next video we dive a bit more
into intermediate events.

82
00:05:52.940 --> 00:05:57.810 
In addition to these event types
start intermediate end events

83
00:05:58.080 --> 00:06:00.530 
BPMN supports
event kinds.

84
00:06:01.350 --> 00:06:06.010 
Event kinds are similar to
the to the task types where

85
00:06:06.010 --> 00:06:11.120 
we say the task type can be used a task
service task or message task for instance

86
00:06:11.600 --> 00:06:16.310 
and the BPMN event kinds are
similar in the sense that the

87
00:06:16.720 --> 00:06:22.530 
a kind of event can be represented in
the model using markers of the events.

88
00:06:23.680 --> 00:06:27.610 
So for instance we can express
well BPM defines event

89
00:06:27.610 --> 00:06:30.210 
kinds that characterize
the nature of the event.

90
00:06:30.970 --> 00:06:36.110 
For instance the timer has expired, an error
has occurred, a message was received

91
00:06:36.600 --> 00:06:41.000 
and these event kinds can be
combined with event types.

92
00:06:41.000 --> 00:06:43.420 
But not all combinations
are allowed.

93
00:06:44.370 --> 00:06:49.700 
We will briefly look into this
but we cannot be complete in this

94
00:06:49.820 --> 00:06:56.230 
in this related to the BPMN because
BPMN has a very rich set of event

95
00:06:56.820 --> 00:07:00.580 
kinds and event types and also
their relationship is defined

96
00:07:00.590 --> 00:07:01.820 
properly in
the standard.

97
00:07:03.030 --> 00:07:08.030 
Each event kind has a
symbol and here we have

98
00:07:09.320 --> 00:07:13.660 
the following symbol, so there is a timer
intermediate events or the symbol

99
00:07:14.130 --> 00:07:17.720 
clock symbol that that we
see here, there's an error

100
00:07:18.200 --> 00:07:20.790 
event in this case
an error end event.

101
00:07:21.490 --> 00:07:25.710 
The error is represented by the
symbol that you see here.

102
00:07:26.430 --> 00:07:29.020 
An envelope signals

103
00:07:29.680 --> 00:07:35.820 
a message event similar to the task
message task type the same label

104
00:07:36.080 --> 00:07:40.990 
or the same marker is used. So this is
for instance message start event

105
00:07:41.160 --> 00:07:44.510 
and sometimes I'm not interested
in the nature of

106
00:07:44.510 --> 00:07:48.060 
the event or I don't care about it
from the modelling perspective.

107
00:07:48.060 --> 00:07:52.640 
It's not important to express
which kind of event

108
00:07:52.640 --> 00:07:56.340 
actually is expected there. This
case we can use just the blank

109
00:07:56.350 --> 00:07:58.130 
circle for an event

110
00:07:58.780 --> 00:08:02.680 
and it is called a none event
in the standard but we can

111
00:08:02.680 --> 00:08:06.170 
also say it's a blank event in
this case a blank start event.

112
00:08:09.550 --> 00:08:15.140 
Modeling guideline related to events
is well events do not consume time.

113
00:08:15.760 --> 00:08:19.000 
Event labels should
reflect that and event

114
00:08:19.700 --> 00:08:24.740 
or labels should labels of events
should be used in the noun

115
00:08:25.260 --> 00:08:27.400 
-verb participle
Style.

116
00:08:28.580 --> 00:08:32.960 
What do we mean by this - events
are observed changes of the

117
00:08:32.960 --> 00:08:36.510 
state of a system process
environment or the process itself

118
00:08:36.730 --> 00:08:40.290 
they must not be used to model
activities. So we cannot

119
00:08:40.290 --> 00:08:45.130 
use events to model activities
or things that take time.

120
00:08:45.840 --> 00:08:49.330 
To emphasize the occurrence of
an event labeled events using

121
00:08:49.330 --> 00:08:53.560 
the noun verb participle style
for instance order received,

122
00:08:53.990 --> 00:08:58.130 
order received noun
verb in participle.

123
00:08:59.850 --> 00:09:02.850 
There's an exception again an
exception to these modeling guideline

124
00:09:02.850 --> 00:09:07.320 
that is timer events, so I can
write with a timer event

125
00:09:07.320 --> 00:09:12.870 
every monday at ten am, that is a
typical typical label of a start

126
00:09:12.980 --> 00:09:18.320 
timer event where I start a process
every monday at ten am and then just

127
00:09:18.640 --> 00:09:25.980 
just tell the date and time when the
process, when new process instances need

128
00:09:26.320 --> 00:09:31.710 
to be created. Also related to events
we need to use a consistent

129
00:09:31.710 --> 00:09:36.560 
vocabulary so order received,
order is not just not just a word

130
00:09:36.570 --> 00:09:40.240 
but order should then also be reflected
not only in the events but also

131
00:09:40.410 --> 00:09:43.650 
in the activities when a check
the order or enter order details

132
00:09:43.790 --> 00:09:46.450 
or something we have seen this
in our examples already.

133
00:09:48.770 --> 00:09:51.750 
So looking at start
events and event kinds.

134
00:09:52.190 --> 00:09:56.620 
Start events triggers the
creation of a new process

135
00:09:56.620 --> 00:09:58.640 
instance and starts
its execution.

136
00:09:59.790 --> 00:10:04.040 
There are different types or
different kinds of start events.

137
00:10:04.040 --> 00:10:07.730 
Blank start events are used
as a process started manually

138
00:10:07.930 --> 00:10:11.570 
or if the kind of start event is not
relevant for the modeling purpose.

139
00:10:13.220 --> 00:10:16.530 
Timer start events allow the
definition of a particular date

140
00:10:16.560 --> 00:10:20.230 
time or recurring dates for the start
of the process either monday at

141
00:10:20.430 --> 00:10:23.080 
ten am would be an example
of a timer start event.

142
00:10:23.960 --> 00:10:27.290 
And we also often see message
start events that indicate the

143
00:10:27.290 --> 00:10:31.570 
start of a process instance upon
reception of a message and

144
00:10:31.570 --> 00:10:34.460 
we had that in our
example in the order

145
00:10:35.940 --> 00:10:42.440 
sorry in our order
example the event is order

146
00:10:42.440 --> 00:10:47.130 
received so that is the message event once
on orders received by create

147
00:10:47.130 --> 00:10:48.350 
a new process instance.

148
00:10:51.240 --> 00:10:54.570 
There's quite some discussion
about the number of start events

149
00:10:54.570 --> 00:10:58.870 
the number of end events and have
modelling guideline also related to

150
00:10:59.310 --> 00:11:02.320 
This, so each
business process model

151
00:11:02.930 --> 00:11:06.250 
should start should have
exactly one start event.

152
00:11:06.750 --> 00:11:10.600 
That makes a process instantiations
so the question when

153
00:11:10.600 --> 00:11:14.550 
is the process created an easy to
understand because once this

154
00:11:14.550 --> 00:11:18.660 
event once the start event occurs
process is instantiated.

155
00:11:19.320 --> 00:11:24.000 
Sometimes we
see that there might be

156
00:11:24.000 --> 00:11:28.660 
several start events that are required but
this shall always be alternative

157
00:11:29.280 --> 00:11:33.520 
when I have when I need several
start events to create a process

158
00:11:33.640 --> 00:11:37.270 
a number of issues are related
to that we cannot go much into

159
00:11:37.270 --> 00:11:39.280 
the detail in the context
of this course.

160
00:11:40.430 --> 00:11:44.770 
But it's a good idea to have to start
every business process with one

161
00:11:45.010 --> 00:11:50.430 
start event. Still I
have an example that

162
00:11:51.340 --> 00:11:56.600 
shows you a situation when multiple
start events are there

163
00:11:56.600 --> 00:11:59.550 
and we said that if you use them
they shall be alternative.

164
00:12:00.010 --> 00:12:04.960 
S Io briefly sketch a process with
three start events so I can

165
00:12:06.770 --> 00:12:08.100 
receive

166
00:12:09.420 --> 00:12:13.230 
an order by a fax message for
instance and I first need to

167
00:12:14.180 --> 00:12:20.340 
need to type the order details
from the fax message into my

168
00:12:20.660 --> 00:12:24.670 
system using some
form. I can also

169
00:12:25.100 --> 00:12:29.310 
receive it by email by email I
also need to prepare that but

170
00:12:29.310 --> 00:12:32.060 
I can just copy that so that's
a different active model as

171
00:12:32.060 --> 00:12:35.070 
a different activity
here. Then I have these

172
00:12:36.510 --> 00:12:41.770 
join here which is it well
I can either have receive

173
00:12:41.770 --> 00:12:46.880 
it by fax or receive it by email or
I can receive it by a web form

174
00:12:47.830 --> 00:12:50.450 
and assume I need to do
some semantics check

175
00:12:50.860 --> 00:12:54.170 
from semantic checks when I
received it by fax or by email

176
00:12:54.720 --> 00:13:00.060 
and I can also receive it by
web form if I receive it

177
00:13:00.060 --> 00:13:04.160 
by web form I do not need to do these
checks I need only to enter this

178
00:13:04.380 --> 00:13:08.730 
so I can start the process in
this way. So this is an example

179
00:13:08.730 --> 00:13:12.800 
and sometimes we see these when
I have different options

180
00:13:12.800 --> 00:13:16.500 
and opportunities or options to
start a process or maybe order

181
00:13:16.500 --> 00:13:20.570 
received by fax message or by e-mail
message or by web form and

182
00:13:20.760 --> 00:13:24.040 
then you have alternative start events
and that will be the structure at least of a

183
00:13:24.320 --> 00:13:27.140 
business process with
alternative start events.

184
00:13:30.070 --> 00:13:34.680 
Use a distinct and event for each
possible outcome of the process.

185
00:13:36.350 --> 00:13:39.660 
So different results
of a process

186
00:13:40.370 --> 00:13:44.630 
have often different business meanings
and shall therefore be distinguished

187
00:13:44.980 --> 00:13:48.170 
by different end events.
We see in this example

188
00:13:49.230 --> 00:13:55.420 
in our order case
where we have one end

189
00:13:55.420 --> 00:13:58.060 
events where the order might be
cancelled at the end of the day

190
00:13:58.200 --> 00:14:01.830 
or the order might be fulfilled
these are happening these are

191
00:14:01.830 --> 00:14:06.910 
events that have a business meaning
and we like to represent this

192
00:14:07.230 --> 00:14:11.710 
the two different possible outcomes
explicitly and the model and I think

193
00:14:11.930 --> 00:14:16.430 
many cases that's
very important to model

194
00:14:17.000 --> 00:14:21.320 
property an important property of a
process is its possible outcomes.

195
00:14:22.450 --> 00:14:25.280 
It's important that the
end events are exclusive

196
00:14:25.800 --> 00:14:28.630 
that we don't have many end
events that could happen

197
00:14:28.630 --> 00:14:32.500 
at the same time because that
would also hinder understanding,

198
00:14:32.500 --> 00:14:36.390 
would make understanding
a bit more a bit harder

199
00:14:36.470 --> 00:14:38.570 
and therefore it's a
good idea to have

200
00:14:39.090 --> 00:14:41.870 
to define end events
as being exclusive.

201
00:14:42.630 --> 00:14:46.390 
And in this case also it
is completely clear

202
00:14:46.390 --> 00:14:50.140 
when a process terminates and
the process terminates if one

203
00:14:50.190 --> 00:14:54.080 
and event has been signaled
or if one and event occurs

204
00:14:54.560 --> 00:15:00.030 
to be more precise. And this completes
videoclip 2.5 in which we

205
00:15:00.300 --> 00:15:02.360 
discussed start
events and end events.

206
00:15:03.310 --> 00:15:07.930 
We introduced events and said
that processes interact

207
00:15:07.930 --> 00:15:12.720 
with its environment or environment
by events. Events do not

208
00:15:12.720 --> 00:15:16.780 
take time to have a business
meaning. We looked at start events

209
00:15:16.780 --> 00:15:21.170 
and end events, we talked about events
that are thrown by the process

210
00:15:21.170 --> 00:15:24.750 
and we talked about events that
are caught by the process.

211
00:15:25.600 --> 00:15:29.740 
We looked at event kinds,
message events timer events

212
00:15:30.450 --> 00:15:35.740 
also the non-event or the
blank events and finally we

213
00:15:35.750 --> 00:15:39.040 
concluded this video clip by
looking at modeling guidelines

214
00:15:39.100 --> 00:15:40.420 
related to start events and end events.
