WEBVTT

1
00:00:00.160 --> 00:00:04.350 
hi i'm mike lane and i'm a phd student in career science at city hall.

2
00:00:04.810 --> 00:00:08.330 
and today i'm going to present a work in progress paper on

3
00:00:08.460 --> 00:00:11.610 
making peer-grading more scalable. so the problem that we are

4
00:00:11.610 --> 00:00:15.850 
trying to solve is to make breeding more scalable in large courses.

5
00:00:16.340 --> 00:00:18.870 
because in these courses they have a huge number of students

6
00:00:18.990 --> 00:00:21.940 
and it's infeasible to what we do what we could do in offline

7
00:00:21.940 --> 00:00:24.640 
courses where we collect all the assignments and have a ta

8
00:00:24.670 --> 00:00:25.440 
or instructor.

9
00:00:28.130 --> 00:00:30.600 
and if you do something you become like arise.

10
00:00:31.250 --> 00:00:34.160 
so there are existing solutions on there, but they're not great.

11
00:00:34.660 --> 00:00:37.230 
because like for some courses they limit the question types

12
00:00:37.230 --> 00:00:40.010 
that are used like they use mcqs or they use

13
00:00:40.540 --> 00:00:42.670 
programming assignments which give them taste cases.

14
00:00:43.930 --> 00:00:46.980 
i mean these question types can be easy to graded by the computer,

15
00:00:47.660 --> 00:00:49.420 
but flexible enough.

16
00:00:50.290 --> 00:00:54.810 
so they felt to gauge a student's learning performance.
and another popular socialist peer-grading.

17
00:00:55.350 --> 00:00:59.420 
we asked students to weight the set of assignments from their peers right.

18
00:01:00.250 --> 00:01:01.900 
but the problem is this approach is that

19
00:01:02.630 --> 00:01:04.260 
the students that's to learning the content.

20
00:01:05.260 --> 00:01:08.060 
so they might make mistakes when reading or they might try

21
00:01:08.060 --> 00:01:11.880 
to cheat the system. so the instructors would still need to

22
00:01:11.880 --> 00:01:14.410 
supervise the process to make sure the grade is fair.

23
00:01:14.810 --> 00:01:19.110 
so in our paper we propose a rank aggregation method to improve peer weighting.

24
00:01:20.100 --> 00:01:23.240 
so it works like this each student would receive some pairs

25
00:01:23.240 --> 00:01:25.960 
of assignments from their peers. and the students would report

26
00:01:26.040 --> 00:01:29.870 
back to the system their preference in each paper.
so for example if we have a and b,

27
00:01:30.100 --> 00:01:32.670 
of course each paper will contain two assignments.

28
00:01:33.170 --> 00:01:36.970 
and i must say that i prefer the first assignment

29
00:01:37.170 --> 00:01:41.490 
pay a and the second assignment pay b, and then the always a

30
00:01:42.290 --> 00:01:46.310 
case the professional data and then estimates an overall ranking

31
00:01:46.350 --> 00:01:47.540 
among all the assignments.

32
00:01:49.380 --> 00:01:52.290 
so when compared to the traditional peer weighting.

33
00:01:53.210 --> 00:01:57.940 
element has the following advantages.
so first we have provable theoretical error bounds

34
00:01:58.480 --> 00:02:01.390 
on the error of the estimation errors. and we show that the

35
00:02:01.390 --> 00:02:04.990 
balance gets tighter with the larger problem scale. so it's more stable.

36
00:02:05.540 --> 00:02:10.180 
and additionally in our method we also estimate each student's accuracy

37
00:02:10.340 --> 00:02:14.890 
or fairness in grade.
so naturally we can use this to identify the bad actors.

38
00:02:15.190 --> 00:02:18.360 
and to make sure that the grading is fair.

39
00:02:18.370 --> 00:02:21.910 
and now i'll just briefly give you an idea of how it works.
but of course i was to mass,

40
00:02:22.310 --> 00:02:25.010 
if you're interested to check all paper.

41
00:02:25.590 --> 00:02:29.310 
so first we define these key variables. y is a matrix that contains

42
00:02:29.310 --> 00:02:32.190 
the official data from all students,

43
00:02:32.820 --> 00:02:35.880 
data to test the quality of each assignment. and q is the vector that

44
00:02:35.960 --> 00:02:39.430 
represents the student's qualities in reading.

45
00:02:39.430 --> 00:02:43.780 
so that y is a is the data that we collect.
and we want to use it to two estimates to learn

46
00:02:44.020 --> 00:02:48.610 
most things on q.
so one key insights that we have is that y

47
00:02:48.930 --> 00:02:50.070 
or the expectation of y,

48
00:02:50.870 --> 00:02:53.590 
can be expressed as alpha beta q transpose.

49
00:02:54.110 --> 00:02:55.860 
here or vice is just a constant.

50
00:02:58.300 --> 00:03:01.610 
and notice that y the expectation of y is i know what we know what we know.

51
00:03:01.790 --> 00:03:06.480 
and from that we can represent why you suppose as alpha square,
square at most.

52
00:03:07.170 --> 00:03:10.840 
it's just some linear algebra.

53
00:03:11.380 --> 00:03:14.750 
and on the other hand with some matrix sampling techniques we can prove

54
00:03:14.860 --> 00:03:18.050 
the upper bound on the difference between y you suppose and y.

55
00:03:18.050 --> 00:03:20.230 
y i suppose. so we inverse

56
00:03:20.890 --> 00:03:23.830 
these two measures as y you suppose and y. y i suppose step

57
00:03:23.830 --> 00:03:26.890 
close to each other under the right conditions. now because y you

58
00:03:27.030 --> 00:03:30.730 
suppose and y which is process close on the leading edge factors of the

59
00:03:31.080 --> 00:03:34.490 
close final bits. but that's the basic idea,

60
00:03:35.490 --> 00:03:38.880 
and then because we can represents y you suppose x that's.

61
00:03:39.650 --> 00:03:41.810 
the leading edge of x or y you suppose. it's just theta

62
00:03:42.220 --> 00:03:45.760 
so combining these. we can use the leading edge of x or y and

63
00:03:45.760 --> 00:03:50.010 
remember y is the data that we know to estimate theta the hon

64
00:03:50.860 --> 00:03:55.670 
and q we can estimate it similarly and the six. thank you for

65
00:03:55.670 --> 00:03:58.850 
a time, and please feel free to reach out if you have any questions.

66
00:03:59.150 --> 00:03:59.670 
have a good day.
