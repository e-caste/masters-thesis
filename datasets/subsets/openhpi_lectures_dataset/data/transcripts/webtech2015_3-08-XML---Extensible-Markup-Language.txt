WEBVTT

1
00:00:06.250 --> 00:00:08.380 
XML- the Extensible Markup Language.

2
00:00:10.590 --> 00:00:15.410 
There was a major criticism with HTML, and this criticism was that

3
00:00:15.750 --> 00:00:16.650 
it is not flexible.

4
00:00:17.870 --> 00:00:23.850 
There are markups. The set of markup is defined and there is no possibility

5
00:00:23.850 --> 00:00:29.840 
to create new markups there's no possibility to have influence

6
00:00:30.080 --> 00:00:31.830 
on the semantic of this markup.

7
00:00:32.510 --> 00:00:35.070 
And there's a simple reason the reason is that

8
00:00:35.490 --> 00:00:42.120 
you remember HTML was created following the SGML ID and the

9
00:00:42.120 --> 00:00:48.370 
SGML ID was to have a characterization

10
00:00:48.780 --> 00:00:54.170 
of documents by means of a document type definition. So HTML was

11
00:00:54.370 --> 00:00:59.690 
based on a Document Type Definition and this Document Type Definition

12
00:01:00.010 --> 00:01:04.700 
all were regulated. So the authors of an HTML document cannot

13
00:01:04.700 --> 00:01:07.510 
assign HTML elements different meanings.

14
00:01:08.300 --> 00:01:10.670 
They cannot introduce new elements.

15
00:01:11.470 --> 00:01:17.740 
This is a major hindrance for interaction, particularly with external applications.

16
00:01:17.840 --> 00:01:23.120 
So if applications are designed with special meaning and special things

17
00:01:23.290 --> 00:01:26.160 
that should interact over the World Wide Web.

18
00:01:27.190 --> 00:01:29.170 
This was the reason to

19
00:01:29.830 --> 00:01:36.580 
take one step back from HTML into the direction of SGML. And with SGML,

20
00:01:36.840 --> 00:01:41.690 
this was a meta language. HTML was a language.

21
00:01:42.170 --> 00:01:43.580 
So question was

22
00:01:44.390 --> 00:01:49.420 
to design and meta language for the World Wide Web.

23
00:01:49.940 --> 00:01:54.210 
And the result was this Extensible Markup Language- XML.

24
00:01:57.940 --> 00:02:05.960 
The XML allows to create new and grow its own elements by defining own

25
00:02:06.160 --> 00:02:07.640 
Document Type Definitions.

26
00:02:10.210 --> 00:02:14.220 
So this model I already mentioned it from the development from XML was

27
00:02:14.550 --> 00:02:21.980 
like HTML to look at the complex meta language SGML- Standard

28
00:02:21.980 --> 00:02:26.430 
Designs Generalized Markup Language and to take those elements

29
00:02:26.980 --> 00:02:32.550 
which are needed to design web documents.

30
00:02:33.620 --> 00:02:36.750 
And also it's important to

31
00:02:37.560 --> 00:02:41.680 
follow the SGML ID of of distinction between the

32
00:02:42.430 --> 00:02:45.150 
structure description and the

33
00:02:46.110 --> 00:02:46.910 
layout description.

34
00:02:49.520 --> 00:02:53.320 
XML was designed primarily for applications on the web.

35
00:02:54.080 --> 00:02:59.770 
So only a subset of SGML was selected to define XML,

36
00:03:00.740 --> 00:03:06.600 
to hold things easy, to make the interpretation of an XML document easy,

37
00:03:07.030 --> 00:03:10.920 
to make it more easy to design authoring tools,

38
00:03:11.580 --> 00:03:14.600 
to make it more easy to implement browsers and others.

39
00:03:16.980 --> 00:03:23.200 
Of course one important part of XML one of part of web documents is this

40
00:03:23.540 --> 00:03:25.460 
hyper link concept.

41
00:03:27.290 --> 00:03:34.640 
So in XML, only the absolute really necessary SGML provisions were adopted

42
00:03:35.560 --> 00:03:40.540 
to the one thing to get full flexibility

43
00:03:41.110 --> 00:03:48.020 
like SGML. On the other side to have to restrict this flexibility

44
00:03:48.360 --> 00:03:51.540 
on the use in the world Wide Web.

45
00:03:54.170 --> 00:03:56.150 
So the extensible markup language, the

46
00:03:56.780 --> 00:04:03.360 
XML specifications only describe structure of documents.

47
00:04:04.710 --> 00:04:09.490 
And XML document is considered syntactically correct.

48
00:04:10.370 --> 00:04:16.540 
If it conforms the XML generation rules and these XML generation rules

49
00:04:16.820 --> 00:04:18.910 
you can find here in the

50
00:04:19.850 --> 00:04:23.440 
website of the World Wide Web consortium.

51
00:04:24.730 --> 00:04:28.560 
So for example a document has only one root element.

52
00:04:29.490 --> 00:04:32.010 
Elements have start and end texts.

53
00:04:32.890 --> 00:04:35.170 
Same way like with HTML

54
00:04:35.790 --> 00:04:38.540 
start tag and end tag

55
00:04:39.510 --> 00:04:46.370 
have are characterized by the same tag, and the difference is shown

56
00:04:47.960 --> 00:04:51.980 
having the slash before the tag in the end tag.

57
00:04:53.920 --> 00:04:59.470 
XML document that conforms to the general XML specification

58
00:05:00.260 --> 00:05:05.130 
and the rules and definitions established in the grammar scale

59
00:05:05.160 --> 00:05:10.820 
is called 'valid'. This specification this was here described in the web 3 consortium

60
00:05:11.420 --> 00:05:13.350 
and the rules and definitions

61
00:05:14.090 --> 00:05:18.000 
established in the grammars. The grammars can

62
00:05:18.000 --> 00:05:21.270 
be described for example by means of Document Type Definitions.

63
00:05:21.760 --> 00:05:24.880 
And if it conforms to both then, it's considered valid.

64
00:05:26.510 --> 00:05:31.380 
The definition of a grammar can be done for example by XML

65
00:05:31.940 --> 00:05:37.350 
schemes or by Document Type Definitions. These are two approaches

66
00:05:37.970 --> 00:05:39.750 
and to define the grammar

67
00:05:40.970 --> 00:05:44.340 
what is the characteristic of the meta language.

68
00:05:44.910 --> 00:05:48.470 
The meta language is a language to describe different languages

69
00:05:48.470 --> 00:05:53.760 
and the different special languages, they are described, characterized by

70
00:05:53.990 --> 00:05:57.840 
the grammar. And the grammar can be or the grammar

71
00:05:58.420 --> 00:06:04.870 
of an XML document type is described by a scheme or by Document

72
00:06:04.880 --> 00:06:05.660 
Type Definition.

73
00:06:07.980 --> 00:06:14.170 
The XML does not replace HTML. HTML is also important in future

74
00:06:14.170 --> 00:06:17.200 
and we have discussed the continued development.

75
00:06:17.870 --> 00:06:23.660 
XML is needed when we want to

76
00:06:24.360 --> 00:06:26.850 
when we like to overcome the weaknesses of HTML.

77
00:06:27.480 --> 00:06:33.670 
So when we want to design some interactions of

78
00:06:34.140 --> 00:06:40.080 
applications over the internet in the World Wide Web, and if we need

79
00:06:40.270 --> 00:06:45.730 
for these applications special semantic support, special meta tags,

80
00:06:47.060 --> 00:06:48.100 
and special meanings of those meta tags.

81
00:06:50.210 --> 00:06:56.390 
The general object model allows developing applications with mechanized access

82
00:06:56.580 --> 00:07:01.240 
and manipulation of data and this is done on the basis of

83
00:07:01.980 --> 00:07:04.090 
DOM- the Document Object Model.

84
00:07:06.150 --> 00:07:12.540 
DOM described the possibility to interact with special parts

85
00:07:13.100 --> 00:07:14.180 
of the document.

86
00:07:15.760 --> 00:07:19.700 
The open standard for describing arbitrary data structures

87
00:07:20.760 --> 00:07:26.050 
significantly simplifies exchange via the World Wide Web,

88
00:07:26.420 --> 00:07:30.640 
and has made an integrative link between document and application.

89
00:07:31.600 --> 00:07:37.160 
So the application can access a special part of the document,

90
00:07:37.640 --> 00:07:42.680 
can be driven by own semantics, and this is

91
00:07:43.320 --> 00:07:46.780 
possible on the basis of the Document Object Model.

92
00:07:49.410 --> 00:07:57.920 
XML follows the idea of SGMl. So XML is used only for describing the structure

93
00:07:58.220 --> 00:08:02.110 
of a web document. The formatting

94
00:08:03.760 --> 00:08:06.970 
needs to be described by means of stylesheets

95
00:08:07.500 --> 00:08:12.460 
in an extra format description language. And this extra format

96
00:08:13.180 --> 00:08:18.080 
description language- this is the Extensible Stylesheet

97
00:08:18.540 --> 00:08:19.260 
Language- XSL.

98
00:08:22.120 --> 00:08:22.470 
This was too much.

99
00:08:25.180 --> 00:08:26.250 
Actually it is XSL-FO.

100
00:08:29.120 --> 00:08:34.740 
The formatting objects and the extensible style up, a stylesheet language serves

101
00:08:35.190 --> 00:08:41.910 
in describing the layout of different elements of an XML document.

102
00:08:42.330 --> 00:08:47.370 
The XML, the elements are descriptive documents. A structure is described,

103
00:08:47.700 --> 00:08:54.950 
and by means of XSL we can describe the format and the layout properties

104
00:08:55.270 --> 00:08:58.170 
of the different XML elements.

105
00:09:01.510 --> 00:09:04.790 
This XSL is often used in close interaction with the

106
00:09:05.710 --> 00:09:07.870 
XSL-Transformation -

107
00:09:09.890 --> 00:09:15.400 
XSLT and typical use is that an XML document

108
00:09:15.890 --> 00:09:22.650 
is transformed by this XSL transformation into an XSL document.

109
00:09:23.230 --> 00:09:30.410 
To be rendered by the formatting objects processor

110
00:09:30.720 --> 00:09:33.070 
into a readable printable document.

111
00:09:36.160 --> 00:09:39.220 
Let's have a closer look to this Document Type Definition. There's

112
00:09:39.220 --> 00:09:43.680 
a possibility to define the grammar of an XML document.

113
00:09:44.540 --> 00:09:46.310 
So XML provides authors

114
00:09:47.080 --> 00:09:51.060 
the possibility of a tailor made definition of their documents

115
00:09:51.060 --> 00:09:54.200 
via their own Document Type Definition.

116
00:09:55.790 --> 00:09:59.640 
To check the validity of an XML document,

117
00:10:00.050 --> 00:10:02.270 
a grammar is always required.

118
00:10:03.390 --> 00:10:07.890 
And this grammar can be defined by means of such Document Type Definition

119
00:10:08.010 --> 00:10:11.470 
or the second approach by means of XML schemes.

120
00:10:12.240 --> 00:10:17.950 
The grammar describes the available elements and describes

121
00:10:18.580 --> 00:10:21.720 
also the correct use of these.

122
00:10:23.150 --> 00:10:25.270 
Then we need an XML Parser.

123
00:10:26.210 --> 00:10:29.720 
It is needed to interpret the XML document

124
00:10:30.220 --> 00:10:33.320 
to the associated Document Type Definition.

125
00:10:33.920 --> 00:10:39.730 
The Document Type Definition explains the elements of a document and the Parser

126
00:10:40.060 --> 00:10:45.190 
connects this to. So finds out the declaration and the rules

127
00:10:45.210 --> 00:10:46.860 
of the XML syntax.

128
00:10:49.040 --> 00:10:53.220 
Beside of the Document Type Definition sells the XML Schemes.

129
00:10:53.220 --> 00:10:57.470 
in place to define the grammar of an XML document.

130
00:10:57.930 --> 00:11:04.940 
The XML schemes are more complex, but offering inheritance XML

131
00:11:04.940 --> 00:11:07.420 
Parsing and more detailed description.

132
00:11:08.540 --> 00:11:16.530 
So in practical use, people like to work more with XML schemes instead

133
00:11:16.880 --> 00:11:19.310 
of working with the Document Type Definition.

134
00:11:20.210 --> 00:11:24.950 
And let's have a look to an example of a Document Type Definition newspaper.

135
00:11:26.460 --> 00:11:31.320 
Such a newspaper consists of different elements which are defined

136
00:11:31.320 --> 00:11:36.210 
here in the document type definition. The newspaper consists of a

137
00:11:36.330 --> 00:11:37.660 
sequence of articles.

138
00:11:40.250 --> 00:11:45.470 
The article consists of a title, consists of an introduction

139
00:11:45.770 --> 00:11:46.990 
and consists of a text.

140
00:11:48.220 --> 00:11:52.170 
Now we have to explain the elements 'title, introduction, text'.

141
00:11:52.750 --> 00:11:56.680 
The element title- these are consisting of PCDATA.

142
00:11:57.420 --> 00:12:00.620 
The introduction consists of pc data as well as a text.

143
00:12:01.690 --> 00:12:06.770 
And then we have a list of attributes. Attributes for example for an

144
00:12:06.950 --> 00:12:12.530 
article author required means. It's needed in any case.

145
00:12:13.020 --> 00:12:16.360 
This is described in CDATA.

146
00:12:17.350 --> 00:12:19.730 
Then we have the article 'lecturer'.

147
00:12:21.450 --> 00:12:26.490 
This is not required. It is implied, so it can be done or not. Also the data

148
00:12:26.620 --> 00:12:28.160 
and the article data.

149
00:12:28.820 --> 00:12:34.390 
And then we have a special entity. So we have the entity of a newspaper

150
00:12:34.660 --> 00:12:39.310 
of the New York Times and we have the entity of a publisher

151
00:12:39.310 --> 00:12:41.330 
of the New York Times. This is suits better.

152
00:12:43.690 --> 00:12:48.700 
So you see we describe by means of Document Type Definition

153
00:12:48.960 --> 00:12:55.070 
how such a newspaper looks like, and then we can define concrete entities

154
00:12:56.030 --> 00:12:59.730 
to have a document. So this is a Document Type Definition

155
00:13:00.330 --> 00:13:06.460 
and now we look to an example of an XML document according to that

156
00:13:06.590 --> 00:13:08.580 
newspaper document type definition.

157
00:13:09.480 --> 00:13:11.030 
So the document starts with the

158
00:13:11.970 --> 00:13:15.950 
XML version and then it is a

159
00:13:17.360 --> 00:13:23.660 
Document Type Newspaper and then there is a link to the document type

160
00:13:24.050 --> 00:13:25.380 
definition of a newspaper.

161
00:13:26.600 --> 00:13:30.450 
And then the newspaper consists of different articles. So the

162
00:13:30.450 --> 00:13:31.280 
first article

163
00:13:33.430 --> 00:13:37.680 
has the author Hasso Plattner. Has a date when it was written.

164
00:13:38.130 --> 00:13:42.140 
There is a title, there is introduction, and there is the main

165
00:13:42.140 --> 00:13:45.990 
article, the main text, and then it's the first article finished.

166
00:13:45.990 --> 00:13:49.890 
And then next article starts in this concrete document, in this

167
00:13:49.890 --> 00:13:54.370 
following this document type definition. Then starts an article with

168
00:13:54.540 --> 00:14:00.990 
the author- me and the date and a new title, a new introduction, a new text

169
00:14:01.890 --> 00:14:05.790 
and so on and it's a simple example. Se close this

170
00:14:06.190 --> 00:14:07.810 
special XML document

171
00:14:09.120 --> 00:14:12.850 
consisting only of two articles. So this is a valid

172
00:14:13.410 --> 00:14:19.810 
XML document with respect to the newspaper document type definition

173
00:14:20.020 --> 00:14:22.920 
we have shown on the page before.

174
00:14:25.300 --> 00:14:32.870 
The most characteristic part of documents in the web are the hyperlinks.

175
00:14:33.470 --> 00:14:37.250 
So how xml is dealing with the links?

176
00:14:39.460 --> 00:14:45.580 
In HTML the link concept was very simple and the hyperlink element

177
00:14:45.870 --> 00:14:50.240 
to characterize the hyperlink elements was this anchor element A.

178
00:14:51.950 --> 00:14:57.740 
And this was very limited. So HTML hyperlinks only two resources.

179
00:14:58.490 --> 00:15:03.070 
HTML hyperlink is always always uni-directional.

180
00:15:03.730 --> 00:15:07.620 
Shows only in one direction. HTML hyperlink is a part

181
00:15:08.300 --> 00:15:12.180 
of the HTML from where the link originates.

182
00:15:12.880 --> 00:15:18.210 
So these are very restricted. Also html

183
00:15:18.640 --> 00:15:23.420 
hyperlinks do not affect the representation of the link target

184
00:15:23.830 --> 00:15:29.580 
in the browser. So there was a development done.

185
00:15:31.170 --> 00:15:37.810 
To be able to describe the links and more general type of links,

186
00:15:38.440 --> 00:15:43.630 
two separate language style standards were developed for XML-

187
00:15:43.830 --> 00:15:50.660 
to generalize the HTML link concept and for defining links between information resources.

188
00:15:51.390 --> 00:15:56.610 
So one language standard is the XML Linking Language XLink.

189
00:15:59.030 --> 00:16:04.730 
For example XLink also is usable and one can also define multi-directional

190
00:16:05.500 --> 00:16:07.610 
links and connection between documents.

191
00:16:08.210 --> 00:16:14.350 
And the second language standard for describing links in XML

192
00:16:14.630 --> 00:16:17.470 
is the XML Pointer Language- XPointer.

193
00:16:19.090 --> 00:16:23.900 
And this XPointer language extends the XPath Specification to refer

194
00:16:24.140 --> 00:16:27.290 
to parts of XML document the

195
00:16:27.950 --> 00:16:30.020 
link is directed to.

196
00:16:30.680 --> 00:16:34.720 
So it's normal only possible to link to an

197
00:16:35.690 --> 00:16:39.850 
external document. Now by means of XML Pointer Language, one

198
00:16:39.850 --> 00:16:44.110 
can also link in this new document on a very special place.

199
00:16:45.310 --> 00:16:47.960 
Example here for example xlink

200
00:16:49.780 --> 00:16:53.190 
h reference to this pointer

201
00:16:53.950 --> 00:16:59.110 
in the text in a special text how this is used.

202
00:17:01.340 --> 00:17:05.510 
We can give only a very rough overview about XML.

203
00:17:05.990 --> 00:17:08.640 
So to conclude this overview

204
00:17:10.690 --> 00:17:14.050 
remark about area specific description language.

205
00:17:15.930 --> 00:17:20.910 
So with the xml meta language concept for it mining own document type definition

206
00:17:21.670 --> 00:17:25.110 
the path to the development of area specific

207
00:17:25.570 --> 00:17:28.030 
descriptive languages is free.

208
00:17:28.770 --> 00:17:30.930 
So for example to describe

209
00:17:31.690 --> 00:17:38.670 
language markup language which is usable to describe mathematical text,

210
00:17:39.060 --> 00:17:46.400 
this is MathML. Or special type in area specific descriptive language for

211
00:17:46.540 --> 00:17:47.150 
chemical

212
00:17:49.850 --> 00:17:53.440 
texts. This is a Chemical Markup Language.

213
00:17:54.020 --> 00:17:58.790 
For Synchronized Multimedia Integration Language SMIL is

214
00:17:58.790 --> 00:18:02.350 
an area specific descriptive language that

215
00:18:02.930 --> 00:18:07.260 
may, that can be designed by means of XML and

216
00:18:07.790 --> 00:18:10.500 
special document type definition.

217
00:18:11.360 --> 00:18:14.580 
Another important one is Scalable Vector Graphics.

218
00:18:15.080 --> 00:18:18.270 
So by means of XML, we are able,

219
00:18:19.010 --> 00:18:23.850 
XML as a meta language, we are able to define elements with

220
00:18:23.850 --> 00:18:26.590 
own semantic, with own contexts and

221
00:18:27.270 --> 00:18:31.130 
this is used in practice. We can also design

222
00:18:31.840 --> 00:18:35.320 
easily design area specific descriptive languages.
