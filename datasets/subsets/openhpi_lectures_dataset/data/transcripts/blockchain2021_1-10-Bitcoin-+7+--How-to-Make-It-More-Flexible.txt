WEBVTT

1
00:00:01.160 --> 00:00:04.350 
In our openHPI course "Blockchain:
Revealing the Myth",

2
00:00:04.830 --> 00:00:11.770 
we now consider the final part
how one can make the systems

3
00:00:11.770 --> 00:00:13.470 
a bitcoin system
more flexible.

4
00:00:15.080 --> 00:00:20.700 
And this is necessary because we
have understood the different

5
00:00:20.700 --> 00:00:23.340 
components of the
bitcoin system

6
00:00:23.960 --> 00:00:28.470 
but what is needed in the
practical application is

7
00:00:28.910 --> 00:00:31.970 
a little bit more
flexibility in the system.

8
00:00:33.010 --> 00:00:37.030 
To review the system we have
a framework of coins made

9
00:00:37.540 --> 00:00:42.960 
as sequences of digital signatures,
we have a system of participants

10
00:00:43.370 --> 00:00:47.520 
to agree on a single history
or so order transactions,

11
00:00:48.090 --> 00:00:52.990 
the participants in the network
act behind the hash of

12
00:00:54.600 --> 00:00:58.970 
their public key, we have a
solution to the double spending

13
00:00:58.970 --> 00:01:02.210 
problem using a peer
to peer distribution

14
00:01:02.640 --> 00:01:08.540 
timestamping to generate a computational
proof of the chronological order

15
00:01:08.990 --> 00:01:14.260 
of the transactions and we
provided incentives for the user

16
00:01:14.670 --> 00:01:21.050 
to comply with the rules and to
provide the necessary proof of work

17
00:01:21.410 --> 00:01:25.720 
to generate the
common truth, this

18
00:01:26.810 --> 00:01:32.100 
blockchain as a chain of
the blocks of transactions.

19
00:01:33.550 --> 00:01:39.360 
And we have the flexibility that,
the users can leave the systems

20
00:01:39.360 --> 00:01:46.620 
the users can rejoin the network at
will, they can change their addresses,

21
00:01:46.930 --> 00:01:50.780 
they can do this by
transaction to transaction.

22
00:01:51.190 --> 00:01:55.500 
So we have this flexibility
we want to have. But

23
00:01:55.980 --> 00:01:59.540 
if you remember there is
a huge amount of blocks,

24
00:02:00.010 --> 00:02:03.540 
a huge amount of blocks
in this block chain

25
00:02:04.110 --> 00:02:09.680 
and the question is - is it all needed
for every user in each moment

26
00:02:10.240 --> 00:02:13.400 
for using
the system

27
00:02:15.170 --> 00:02:18.790 
do spending a bitcoins
or receiving bitcoins?

28
00:02:21.230 --> 00:02:25.940 
What one can observe, once the
latest transaction in a coin

29
00:02:26.320 --> 00:02:30.250 
the UTXO is buried
under enough blocks

30
00:02:31.320 --> 00:02:34.550 
suspend transactions
before it

31
00:02:35.390 --> 00:02:42.290 
can be discarded to save disk space.
It's not necessary to

32
00:02:42.300 --> 00:02:43.370 
remember this

33
00:02:46.050 --> 00:02:51.410 
but simply to cut it off is not
possible because you remember

34
00:02:51.420 --> 00:02:53.310 
all is connected via

35
00:02:53.940 --> 00:02:59.450 
hash functions. So what
we need to do is we

36
00:02:59.890 --> 00:03:02.220 
want to discard that

37
00:03:03.140 --> 00:03:05.190 
useless former
information

38
00:03:06.120 --> 00:03:10.530 
without changing the system and
in the system the hash values

39
00:03:10.860 --> 00:03:12.380 
play an important role.

40
00:03:13.810 --> 00:03:19.070 
To facilitate this discarding
without breaking the blocks hash

41
00:03:20.030 --> 00:03:25.130 
transactions are hashed in
so called Merkle Tree.

42
00:03:25.650 --> 00:03:29.770 
Merkle tree that is such a
graph theoretical structure

43
00:03:30.310 --> 00:03:35.960 
with the tree is a
graph with is no cycle

44
00:03:36.380 --> 00:03:39.890 
and here we have a
different UTXO

45
00:03:40.390 --> 00:03:44.910 
the hash values which
were produced when the

46
00:03:45.450 --> 00:03:49.250 
blocks were produced
and this values are

47
00:03:50.010 --> 00:03:55.170 
stored in that data structure that is
called a Merkle Tree. Merkle is a

48
00:03:55.910 --> 00:04:00.560 
cryptographic researcher.

49
00:04:01.170 --> 00:04:07.810 
So a hash tree is a
tree-like structure that consists of

50
00:04:07.940 --> 00:04:10.910 
successive hash values

51
00:04:11.620 --> 00:04:16.680 
and the Merkle root is the last
hash value in this hash tree.

52
00:04:17.670 --> 00:04:21.990 
And by means of that structure
which we added to the blocks

53
00:04:22.360 --> 00:04:27.900 
we later on are able to
forget former blocks

54
00:04:28.330 --> 00:04:34.520 
at least to former blocks
to save a space

55
00:04:35.130 --> 00:04:36.800 
as a user's memory.

56
00:04:38.620 --> 00:04:41.970 
So in the shown example
here this is very small Merkle Tree.

57
00:04:44.160 --> 00:04:46.250 
In reality they
are much larger.

58
00:04:46.870 --> 00:04:51.170 
It is shown in example, we see
that we have the hash values

59
00:04:51.600 --> 00:04:58.300 
of three of four, a
transaction of four TX0.

60
00:04:59.280 --> 00:05:05.770 
We have the TX0, TX1, TX2, TX3

61
00:05:06.390 --> 00:05:12.260 
and they have any hash value
in this transaction

62
00:05:12.850 --> 00:05:17.230 
and from the hash value here from
the hash to the hash value

63
00:05:17.480 --> 00:05:24.200 
from the
first TX0 and from that

64
00:05:24.610 --> 00:05:29.750 
we can compute the hash
value from the next level.

65
00:05:30.610 --> 00:05:36.010 
So further hash values are calculated
from the first found hash value

66
00:05:36.390 --> 00:05:41.030 
of the original transaction and
in this case at the end here

67
00:05:41.240 --> 00:05:46.550 
in the root in the Merkle root we have
comprised the hash values of these

68
00:05:47.310 --> 00:05:49.370 
four transactions.

69
00:05:52.710 --> 00:05:59.740 
And this is the hash value in the
root of the Merkle root. So here is

70
00:05:59.990 --> 00:06:05.750 
the information available to
all these four transactions.

71
00:06:07.190 --> 00:06:13.050 
Now old blocks in the block
chain can then be compacted

72
00:06:13.580 --> 00:06:16.440 
by stubbing of
branches of the tree.

73
00:06:17.740 --> 00:06:21.120 
Interior hash do not
need to be stored.

74
00:06:22.220 --> 00:06:24.730 
So for example to order
to check whether

75
00:06:25.530 --> 00:06:30.950 
the transaction TX3 was
included in the respective block

76
00:06:31.720 --> 00:06:38.150 
the h2, and h21

77
00:06:38.790 --> 00:06:43.500 
are sufficient for the verification
for the calculation of

78
00:06:43.510 --> 00:06:47.430 
the Merkle root and comparing it with
the root stored in the block.

79
00:06:49.100 --> 00:06:53.940 
So here is this value because
we are interested in TX3

80
00:06:55.010 --> 00:06:58.720 
the shell value, this value
and what was before

81
00:06:59.940 --> 00:07:05.130 
then all this information in a certain
sense is comprised available

82
00:07:05.310 --> 00:07:09.900 
here in the hash value in the
root of the Merkle tree.

83
00:07:12.410 --> 00:07:16.470 
Of course this information has to
be added to the block header.

84
00:07:17.610 --> 00:07:23.670 
It means that we no longer have to
take the hash of the entire block

85
00:07:24.180 --> 00:07:28.410 
with all transactions, hash of
the previous block and nonce and

86
00:07:28.770 --> 00:07:31.780 
as reference for the
following blocks

87
00:07:32.520 --> 00:07:38.920 
we can work instead with the information
data from the transactions

88
00:07:39.540 --> 00:07:41.810 
in this so called
block header.

89
00:07:43.170 --> 00:07:48.820 
With other words the Merkle root together
with the hash of the previous block,

90
00:07:49.270 --> 00:07:52.780 
so nonce and some other
additional information

91
00:07:53.370 --> 00:07:55.480 
are stored in this
block header

92
00:07:56.630 --> 00:08:03.190 
and are used as a reference to the
block in the next block header.

93
00:08:03.870 --> 00:08:09.850 
So we get our change by enlarging
this block header by adding the

94
00:08:10.180 --> 00:08:14.760 
Merkle root, the hash
value of the Merkle root

95
00:08:15.230 --> 00:08:19.990 
together with the hash value of
the previous block of the nonce

96
00:08:19.990 --> 00:08:24.710 
that is necessary to prove that
the proof of work was done

97
00:08:24.760 --> 00:08:28.240 
and some other
information. This now is

98
00:08:29.270 --> 00:08:36.620 
connected in the block in the block
header and now here the block chain

99
00:08:37.050 --> 00:08:40.060 
can be forwarded. This information
in the block header

100
00:08:40.650 --> 00:08:45.150 
provides a unique summary

101
00:08:45.750 --> 00:08:51.130 
of the entire block. So if this
is to make bitcoin more as a

102
00:08:51.130 --> 00:08:56.130 
system more flexible is that we
can comprise the information

103
00:08:56.430 --> 00:08:59.250 
of this block chain that
contains the block chain.

104
00:09:01.380 --> 00:09:03.440 
Another point is that

105
00:09:04.360 --> 00:09:09.110 
we have to simplify the
payment verification.

106
00:09:10.170 --> 00:09:14.240 
Basically in our system all
nodes are created equal

107
00:09:14.850 --> 00:09:20.760 
and can be both can be service users, can
be service providers can be buyers

108
00:09:20.920 --> 00:09:22.600 
or can be sellers.

109
00:09:24.740 --> 00:09:29.890 
If you look at the size of the block
chain of the bitcoin block chain

110
00:09:30.670 --> 00:09:34.980 
in February 2021 it's about

111
00:09:35.390 --> 00:09:38.390 
above of three hundred
twenty gigabytes.

112
00:09:38.810 --> 00:09:45.260 
It is clear that not every user has enough
resources for storage and verifications.

113
00:09:46.520 --> 00:09:50.700 
Thus in a bitcoin system,
today's bitcoin system

114
00:09:51.540 --> 00:09:54.510 
we have two
types of users.

115
00:09:55.460 --> 00:09:57.360 
There are the
normal users

116
00:09:58.140 --> 00:10:00.350 
which were described
so far

117
00:10:01.410 --> 00:10:07.620 
also called full nodes and beside
of that we also have light users

118
00:10:08.870 --> 00:10:11.380 
which are called
lightweight nodes

119
00:10:12.680 --> 00:10:17.460 
and the difference is
that the full node

120
00:10:18.740 --> 00:10:24.810 
users they save the entire block chain and
are involved in the verification process

121
00:10:25.150 --> 00:10:27.050 
in the block
generation, in the

122
00:10:28.020 --> 00:10:33.040 
transaction, in the checking whether
the transactions are valid, whether

123
00:10:33.470 --> 00:10:39.070 
the collecting the transactions to form
a block into a in the proof of work

124
00:10:39.440 --> 00:10:43.390 
which is necessary to form a block.
This all is done by the full

125
00:10:43.700 --> 00:10:49.520 
nodes, the full nodes inside
such a bitcoin network

126
00:10:50.070 --> 00:10:52.880 
and beside of that we have
a light weighed nodes

127
00:10:53.720 --> 00:11:00.690 
which do not be part of the checking
process and others. They only save

128
00:11:01.110 --> 00:11:02.830 
a copy of the
block headers,

129
00:11:03.580 --> 00:11:07.250 
of the block headers of the
longest proof-of-work chain

130
00:11:07.730 --> 00:11:12.950 
which they can get by querying full
nodes until they are convinced

131
00:11:13.340 --> 00:11:14.960 
they have the
longest chain.

132
00:11:16.850 --> 00:11:22.620 
So this is for people that eventually
want to a a use the bitcoin

133
00:11:22.620 --> 00:11:25.190 
network but not
to be a full

134
00:11:25.860 --> 00:11:33.810 
participant taking part in the
support of the network and not

135
00:11:34.610 --> 00:11:39.880 
coming into the possibility to earn
bitcoin by creating a block and

136
00:11:40.050 --> 00:11:46.420 
they do not need the full block chain.
For them it's enough only to have

137
00:11:46.620 --> 00:11:49.220 
the longest headers

138
00:11:50.510 --> 00:11:52.520 
the blocks of the
longest block chain.

139
00:11:53.910 --> 00:11:58.910 
So lightweight users can't check
the transactions for themself

140
00:11:59.160 --> 00:12:03.850 
but by linking it to a place in
the chain, they can see that

141
00:12:03.850 --> 00:12:09.590 
a full node has accepted it and blocks added
after it further confirms the networks

142
00:12:09.840 --> 00:12:13.140 
has accepted it and then
they can make use

143
00:12:13.610 --> 00:12:15.040 
of their bitcoins.

144
00:12:16.580 --> 00:12:22.590 
The full nodes of course are the backbone
of the bitcoin system. Without them

145
00:12:22.850 --> 00:12:28.040 
and without the
majority of the CPU

146
00:12:29.580 --> 00:12:33.290 
CPU resources available
to the honest

147
00:12:34.240 --> 00:12:40.080 
full nodes that
this is a majority in the bitcoin

148
00:12:40.490 --> 00:12:44.020 
this is the basic assumption
in our bitcoin system.

149
00:12:45.230 --> 00:12:48.420 
The full nodes allow
the system to grow,

150
00:12:49.470 --> 00:12:56.790 
at the same time remain as the security
they hold a centralized and a guarantee

151
00:12:56.970 --> 00:13:02.900 
that it works as it's assumed. And the light
weight users the lightweight nodes

152
00:13:03.260 --> 00:13:08.650 
do not have any block contents
not of transactions, they have

153
00:13:09.170 --> 00:13:10.990 
to trust the full node.

154
00:13:11.760 --> 00:13:15.290 
And they have to trust not a single
full node, they have to trust

155
00:13:15.650 --> 00:13:19.840 
a network of full nodes
in the bitcoin system

156
00:13:20.680 --> 00:13:23.990 
which generates
the blocks and

157
00:13:25.250 --> 00:13:29.040 
checks transactions
whether they are valid

158
00:13:29.440 --> 00:13:31.320 
in accordance
with the rules,

159
00:13:32.110 --> 00:13:37.270 
we have discussed in this week
when we considered the different

160
00:13:37.690 --> 00:13:44.120 
components of the bitcoin system and
which makes which guarantees that

161
00:13:44.330 --> 00:13:47.430 
a certain amount cannot
be a double spending.

162
00:13:48.920 --> 00:13:53.890 
Now we see something which we in the
beginning which we avoid to see.

163
00:13:54.430 --> 00:13:57.570 
In the beginning we said
we have to distrust

164
00:13:57.980 --> 00:14:02.940 
all the other users, this is a basic
principle of the bitcoin system.

165
00:14:03.340 --> 00:14:07.700 
And this remains true for the full
nodes, they have to distrust

166
00:14:08.020 --> 00:14:08.970 
the other full nodes.

167
00:14:09.670 --> 00:14:14.270 
But the lightweight nodes now
they have to trust what the

168
00:14:14.270 --> 00:14:15.620 
full nodes are doing.

169
00:14:18.460 --> 00:14:24.990 
A last point a last mechanism to make
the bitcoin system more flexible

170
00:14:25.560 --> 00:14:28.720 
is to work with scripts,
with so called scripts.

171
00:14:30.280 --> 00:14:32.890 
This is the last tool
that we need to present

172
00:14:33.460 --> 00:14:39.420 
to understand the bitcoin system and
that is important for the presentation

173
00:14:39.720 --> 00:14:43.100 
in the next week
when we look to

174
00:14:44.050 --> 00:14:47.890 
projects that are based
on the bitcoin ideas.

175
00:14:48.550 --> 00:14:55.390 
Scripts are mini programs, mini programs
that are used to lock outputs

176
00:14:56.000 --> 00:14:59.940 
this is a ScriptPub
key and to unlock

177
00:15:01.120 --> 00:15:04.190 
inputs this is a ScriptSig.

178
00:15:05.590 --> 00:15:09.780 
In place of the hash of the
recipient's public key

179
00:15:10.310 --> 00:15:14.990 
in the output comes the hash
from the locking script.

180
00:15:16.270 --> 00:15:21.860 
So in the beginning there is
the hash of your public key

181
00:15:22.360 --> 00:15:28.790 
but now if you work with scripts there
is a hash from the locking script

182
00:15:29.230 --> 00:15:30.900 
in the addressee.

183
00:15:31.900 --> 00:15:35.820 
In place of your
signature in the input

184
00:15:36.470 --> 00:15:39.670 
comes the unlocking script
with the necessary data

185
00:15:40.210 --> 00:15:41.480 
signature public key.

186
00:15:42.120 --> 00:15:45.840 
To understand this, let's
consider an example.

187
00:15:47.020 --> 00:15:51.770 
An example which shows that scripts
offer us more flexibility

188
00:15:52.230 --> 00:15:59.570 
in how, under which conditions and
the respective bitcoins

189
00:15:59.980 --> 00:16:07.090 
may be spent and to visualize this let's consider
an example. Let's imagine that Alice

190
00:16:07.390 --> 00:16:10.140 
wants to transfer two
bitcoins to Bob

191
00:16:10.750 --> 00:16:18.730 
and let's Bob plan to give these bitcoins to
his children, each receiving one bitcoin.

192
00:16:20.710 --> 00:16:25.810 
So Alice wants to spend the two
bitcoins, wants to transfer to Bob

193
00:16:26.120 --> 00:16:29.570 
and Bob once to forward

194
00:16:30.560 --> 00:16:33.870 
to his children and

195
00:16:34.470 --> 00:16:40.730 
in a way that exactly each children, each
of his two children gets one bitcoin.

196
00:16:42.050 --> 00:16:47.200 
To this end Bob creates two private
keys and generates a public keys

197
00:16:47.630 --> 00:16:54.530 
for each. So one key pair for his
son and one for his daughter.

198
00:16:55.910 --> 00:16:59.430 
Then Bob creates a script,
a script which states

199
00:16:59.870 --> 00:17:01.940 
that the daughter bere

200
00:17:02.760 --> 00:17:08.360 
that the first public key will be
allowed to use half of the bitcoins

201
00:17:09.480 --> 00:17:14.240 
and also in the script
he states that his son

202
00:17:15.180 --> 00:17:19.050 
Bill, represented by
the second public key

203
00:17:19.590 --> 00:17:23.790 
gets the second half
of its bitcoins.

204
00:17:24.960 --> 00:17:29.080 
And this is described in
what is called a script

205
00:17:29.770 --> 00:17:36.370 
and with his public keys
comprise and the information that

206
00:17:36.610 --> 00:17:40.010 
each of those get
one bitcoin.

207
00:17:41.410 --> 00:17:49.400 
Then finally Bob takes a script with a
public key and creates a hash value.

208
00:17:50.830 --> 00:17:57.710 
A hash value and this hash
value is used as the address

209
00:17:58.520 --> 00:18:02.790 
of the receiver of
the two bitcoins.

210
00:18:04.250 --> 00:18:07.490 
This information the script
appears in the Script

211
00:18:07.940 --> 00:18:13.120 
PubKey in the output
of Alice's transaction

212
00:18:15.820 --> 00:18:20.950 
and now Bea and Bill can
use their private keys

213
00:18:22.270 --> 00:18:26.280 
and can use this private key
to spend their bitcoins.

214
00:18:26.740 --> 00:18:29.520 
They add a new one and
now they can spend it.

215
00:18:30.650 --> 00:18:37.020 
To do this each of them has to create
a transaction whose scripting

216
00:18:37.560 --> 00:18:39.510 
contains the following
information -

217
00:18:40.420 --> 00:18:45.040 
the signature generated by
means of their private keys

218
00:18:45.570 --> 00:18:50.370 
and the script with
the public key used there.

219
00:18:51.780 --> 00:18:58.030 
So this is now the script sign,
this is what they can use as

220
00:18:58.950 --> 00:19:05.540 
a proof that they
really are able to spend

221
00:19:06.090 --> 00:19:10.250 
this one bitcoin to what
they want to spend it for.

222
00:19:12.390 --> 00:19:15.040 
Let's summarize
this final

223
00:19:15.700 --> 00:19:18.710 
incidences of
the bitcoin system.

224
00:19:19.610 --> 00:19:24.090 
Once the UTXO is burried
under enough blocks,

225
00:19:25.620 --> 00:19:30.940 
when all people agree that
these are unspent

226
00:19:31.760 --> 00:19:40.810 
bitcoins. Then spent actions before
the UTXO they can be discarded

227
00:19:41.330 --> 00:19:46.910 
to save disk space but of
course the information

228
00:19:47.320 --> 00:19:50.950 
of what was done before
need to be remembered.

229
00:19:51.360 --> 00:19:56.610 
And to this end a
new data structure

230
00:19:57.200 --> 00:20:00.760 
is used, the
Merkle tree

231
00:20:01.430 --> 00:20:05.300 
which facilitates that

232
00:20:06.440 --> 00:20:11.990 
without breaking the block hash
the transactions can be hashed

233
00:20:12.440 --> 00:20:16.590 
in that the relevant transactions
can be hashed in the Merkle tree.

234
00:20:17.830 --> 00:20:21.300 
The Merkle tree is represented
by the Merkle root

235
00:20:22.420 --> 00:20:25.990 
and together with a hash
of the previous block

236
00:20:27.030 --> 00:20:30.820 
with a nonce and with
some other information,

237
00:20:31.620 --> 00:20:36.560 
this Merkle root is stored
in the block header

238
00:20:37.640 --> 00:20:41.950 
and its hash is used to
reference to the block

239
00:20:42.370 --> 00:20:44.210 
in the next
block header.

240
00:20:45.030 --> 00:20:47.240 
So in this way one can

241
00:20:48.070 --> 00:20:52.000 
comprise the block chain

242
00:20:53.190 --> 00:20:58.730 
and the process to find out whether
the transactions are really valid.

243
00:20:59.970 --> 00:21:09.880 
Then we have seen that many users in such a
bitcoin network are merrily lightweight

244
00:21:10.230 --> 00:21:15.030 
nodes. Lightweight nodes that only
save a copy of the block headers,

245
00:21:15.430 --> 00:21:21.720 
not the complete block, so they save the block
headers of the longest proof-of-work chain

246
00:21:21.940 --> 00:21:27.020 
which they can get by carrying full
nodes until they are convinced

247
00:21:27.380 --> 00:21:29.440 
they have the
longest chain.

248
00:21:30.070 --> 00:21:34.010 
So it's not enough to only
ask one of the nodes,

249
00:21:34.970 --> 00:21:39.850 
you remember, maybe full node

250
00:21:39.850 --> 00:21:41.160 
may be a malicious node.

251
00:21:41.800 --> 00:21:48.700 
It has to convince
itself that the majority

252
00:21:50.510 --> 00:21:56.310 
of the nodes agree in the longest
chain and from this longer chain

253
00:21:56.930 --> 00:22:00.420 
the light weighted
nodes need the headers.

254
00:22:02.310 --> 00:22:05.530 
And then the
last piece

255
00:22:06.300 --> 00:22:09.770 
in our description of the
bitcoin system were scripts,

256
00:22:11.120 --> 00:22:15.550 
small mini programs which
provide more flexibility

257
00:22:15.950 --> 00:22:22.370 
in how bitcoins may be spent, under
which conditions they may be spent

258
00:22:22.750 --> 00:22:26.760 
and this can be done
in a certain sense

259
00:22:27.490 --> 00:22:30.780 
automatically. This

260
00:22:32.590 --> 00:22:41.080 
finished our description of the
bitcoin system, the four-step block

261
00:22:41.330 --> 00:22:44.860 
in our explanation of the
block-chain technology.

262
00:22:45.490 --> 00:22:49.490 
So here are two
recommendations for

263
00:22:50.440 --> 00:22:55.430 
who wants to read more - there is
more technical information

264
00:22:55.610 --> 00:22:58.870 
on the subject of bitcoin
and examples of coding,

265
00:23:00.060 --> 00:23:07.390 
we can recommend here this very easy to
understand explanation by Greg Walker

266
00:23:08.050 --> 00:23:14.050 
and if you want more detailed
information about bitcoin

267
00:23:14.050 --> 00:23:16.860 
in the context of the big
picture of bitcoins,

268
00:23:17.450 --> 00:23:23.030 
we can recommend our small
volume on "Blockchain:

269
00:23:23.570 --> 00:23:25.070 
Hype or Innovation."

270
00:23:26.550 --> 00:23:32.230 
And references - this bitcoin
system is based on this

271
00:23:32.550 --> 00:23:38.000 
paper from Nakamoto, "Bitcoin: A peer-
to-peer electronic cash system"

272
00:23:38.000 --> 00:23:43.830 
from 2008 and there
is also here a link to

273
00:23:45.030 --> 00:23:50.010 
information and to provided
information by Greg Walker,

274
00:23:50.410 --> 00:23:53.490 
the same I recommended
the reading

275
00:23:54.300 --> 00:23:58.410 
which if you are interested
you can follow. So this ends

276
00:24:00.240 --> 00:24:04.410 
the description of bitcoins. You
have seen it's very very complex,

277
00:24:04.960 --> 00:24:08.820 
it has many
different pieces

278
00:24:09.630 --> 00:24:15.140 
with own history, with own technology
and this is a characteristic

279
00:24:15.140 --> 00:24:20.790 
of block-chain that it brings together
this different pieces to make possible

280
00:24:22.110 --> 00:24:28.340 
such a new system the bitcoin system
for running an electronic cash system

281
00:24:28.520 --> 00:24:33.130 
without a trusted third
party, without any bank.
