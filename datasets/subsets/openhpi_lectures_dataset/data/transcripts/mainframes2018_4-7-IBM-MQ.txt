WEBVTT

1
00:00:03.140 --> 00:00:07.890 
Hello it's me again. Wolfram Greis from the European Mainframe Academy.

2
00:00:08.650 --> 00:00:13.450 
And in the next video clip I want to talk about the IBM MQ.

3
00:00:13.850 --> 00:00:17.550 
This is the message queueing product from IBM.

4
00:00:19.230 --> 00:00:25.470 
And just to give you a short overview IT environments today are heterogeneous and

5
00:00:25.780 --> 00:00:29.940 
mostly very complex. And that's why we need middleware

6
00:00:30.370 --> 00:00:35.330 
for integration and for simplification. And one of the solutions

7
00:00:35.360 --> 00:00:40.900 
especially because it's an asynchronous technique is in fact messaging and

8
00:00:41.040 --> 00:00:43.700 
queuing. And IBM

9
00:00:45.610 --> 00:00:52.440 
has this product line for many many years and it started with naming it

10
00:00:52.730 --> 00:00:58.870 
MQ Series. Some people today are still say MQ Series but in

11
00:00:58.870 --> 00:01:05.250 
between it's changed. It changed to Websphere MQ and it changed again just to

12
00:01:05.440 --> 00:01:11.330 
IBM MQ. MQ stands of course for messaging and queuing.

13
00:01:11.880 --> 00:01:15.630 
And it is a messaging backbone for transferring messages.

14
00:01:16.050 --> 00:01:22.900 
And one of the key issues especially when we talk about the IBM product,

15
00:01:23.150 --> 00:01:26.450 
it supports really many, many platforms.

16
00:01:27.320 --> 00:01:30.150 
In most cases each and every hardware platform

17
00:01:30.640 --> 00:01:35.840 
that is available today is supported by IBM MQ.

18
00:01:37.810 --> 00:01:41.850 
The idea is to have a really big

19
00:01:44.130 --> 00:01:50.480 
reliability and security. So as example information is delivered exactly once

20
00:01:50.630 --> 00:01:53.960 
and really only once with high qualities of service.

21
00:01:54.540 --> 00:01:59.280 
Data integrity is in each and every time frame guaranteed.

22
00:02:02.060 --> 00:02:07.570 
The data that is transferred is reliable, means without any

23
00:02:07.570 --> 00:02:09.560 
data losses or duplication.

24
00:02:10.170 --> 00:02:15.850 
And another issue is that security mechanisms are implemented for data protection

25
00:02:16.090 --> 00:02:21.050 
and compliance. And the authentication as example can be based on

26
00:02:21.630 --> 00:02:26.920 
system related techniques like especially in a COS environment like

27
00:02:27.960 --> 00:02:30.030 
or can be LDAP based.

28
00:02:31.080 --> 00:02:34.590 
And LDAP again can also have access to archive

29
00:02:34.990 --> 00:02:39.480 
databases. Encryption possibilities include "on the fly" and "on

30
00:02:39.480 --> 00:02:44.740 
rest". On the fly means data set is transferred and on rest is data set is

31
00:02:45.010 --> 00:02:47.710 
hold on the operating system somewhere.

32
00:02:49.920 --> 00:02:55.010 
Some terms and definitions we talk about messages. Messages

33
00:02:55.010 --> 00:02:58.310 
are just bytes to be transferred between applications.

34
00:02:58.770 --> 00:03:02.100 
And messages exists of a header and user data

35
00:03:02.580 --> 00:03:06.520 
and the maximum length is four megabyte.

36
00:03:07.740 --> 00:03:14.630 
We have to have queues. It's the first in first out buffer

37
00:03:14.950 --> 00:03:19.210 
assigned to a queue manager. And the queue manager as the name already states

38
00:03:19.420 --> 00:03:24.760 
manages these queues and executes the MQI requests. MQI-

39
00:03:25.240 --> 00:03:29.860 
message queuing interface is the API for the programmers to

40
00:03:30.520 --> 00:03:37.100 
use these techniques. And the channels is the point-to-point communication link

41
00:03:37.220 --> 00:03:41.710 
between two queue managers and its unidirectional. It means

42
00:03:41.740 --> 00:03:45.280 
for one direction you have to define a channel and for the

43
00:03:45.280 --> 00:03:47.880 
other direction you have to define another channel.

44
00:03:48.570 --> 00:03:50.430 
You see it on the picture on the right side

45
00:03:51.200 --> 00:03:54.900 
all the key terms I just mentioned

46
00:03:55.920 --> 00:04:02.520 
which have to be available and up and online in such an MQ environment.

47
00:04:04.170 --> 00:04:09.970 
To have look in a little more detail on these messages

48
00:04:10.430 --> 00:04:12.230 
are already set.

49
00:04:13.700 --> 00:04:16.300 
A message has a header and has user data.

50
00:04:16.760 --> 00:04:21.000 
And in the header as example, there is a name of the target queue where

51
00:04:22.100 --> 00:04:27.230 
the message is transferred to. We have priority techniques available.

52
00:04:27.900 --> 00:04:34.170 
We have "reply to" queues information and we have sequence and correlation number,

53
00:04:34.440 --> 00:04:40.310 
and persistence. We can have different types of messages. I don't go into

54
00:04:40.420 --> 00:04:47.420 
more details here because it would be beyond our time we have for

55
00:04:48.390 --> 00:04:52.460 
dealing with MQ in this case in our MOOC.

56
00:04:53.490 --> 00:04:58.900 
One important technique I want to mention here is the triggering idea.

57
00:04:59.470 --> 00:05:00.500 
Because this

58
00:05:01.910 --> 00:05:03.700 
contradicts to

59
00:05:05.360 --> 00:05:12.030 
synchronous techniques I talked in the last video clip about the synchronous

60
00:05:12.490 --> 00:05:16.710 
technique that is used as example with RPC. IMI or CORBA

61
00:05:17.500 --> 00:05:23.210 
where the sylva i want to reach and the application i

62
00:05:23.210 --> 00:05:27.670 
want to talk to have both be already up and running and this

63
00:05:27.670 --> 00:05:31.940 
is not necessarily true in an mq environment so there's a triggering

64
00:05:31.940 --> 00:05:37.280 
mechanism it means that if a certain message comes into a target queue

65
00:05:38.130 --> 00:05:44.180 
human nature can implement a trigger event it means if a message

66
00:05:44.180 --> 00:05:48.480 
comes in for a certain application and this application is not

67
00:05:49.460 --> 00:05:51.050 
up and running the

68
00:05:52.430 --> 00:05:57.130 
trigger message in this case can trigger a monitor and the

69
00:05:57.130 --> 00:06:01.040 
monitor starts the application and afterwards the application

70
00:06:01.590 --> 00:06:06.010 
can be reached and c a request can be processed this is really

71
00:06:06.540 --> 00:06:08.310 
i think a very interesting and important

72
00:06:08.760 --> 00:06:14.360 
thing especially when we compare it to the synchronous techniques we

73
00:06:14.790 --> 00:06:17.420 
talked in the last video clip about

74
00:06:19.780 --> 00:06:25.010 
going interface is the api we have not too much but some

75
00:06:25.970 --> 00:06:29.390 
important interfaces and and

76
00:06:30.530 --> 00:06:36.060 
possibilities we have first we have to a connection to our human nature

77
00:06:36.360 --> 00:06:41.030 
means m q connect or disconnect with m q disconnect we have

78
00:06:41.040 --> 00:06:45.440 
a connection to a queue with open and close we put messages

79
00:06:45.440 --> 00:06:51.430 
in a queue with put we kept message out of queues with get we can

80
00:06:51.620 --> 00:06:57.820 
change attributes and we have the possibility to do commits

81
00:06:57.830 --> 00:07:01.420 
on end holbeck for transaction support

82
00:07:04.610 --> 00:07:09.280 
administration we have a lot of possibilities and commands available for the

83
00:07:09.920 --> 00:07:16.590 
two manager interface four general commands four utility commands and four

84
00:07:19.610 --> 00:07:24.790 
other commands concerning administration of such a queue environment

85
00:07:28.330 --> 00:07:31.780 
this was very short i know that concerning

86
00:07:32.940 --> 00:07:37.320 
ibm mq for questions and remarks please use

87
00:07:37.720 --> 00:07:39.970 
as always the discussion forum

88
00:07:40.780 --> 00:07:46.560 
and i hope to see you in one of our next video clips and thank

89
00:07:46.560 --> 00:07:47.970 
you for attending
