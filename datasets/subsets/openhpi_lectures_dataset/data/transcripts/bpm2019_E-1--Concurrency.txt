WEBVTT

1
00:00:01.150 --> 00:00:05.310 
Welcome to extra video clip e1 in
which we discuss concurrency.

2
00:00:06.560 --> 00:00:11.910 
When we want to discuss concurrency we first
have to look at sequential executions.

3
00:00:12.700 --> 00:00:17.320 
A set of process activities are
sequential if the process model

4
00:00:17.320 --> 00:00:21.630 
prescribes that they are always
executed in a sequential order. So

5
00:00:21.740 --> 00:00:24.460 
one process activity
after the other.

6
00:00:25.520 --> 00:00:30.960 
So at each point in time at most
one process activity is running.

7
00:00:32.340 --> 00:00:37.970 
Here we just use sequence flow to define
sequential execution of activities

8
00:00:38.080 --> 00:00:43.540 
A B and C and as we discussed
earlier on this execution of

9
00:00:43.540 --> 00:00:48.130 
A B C is conducted sequentially first
A is executed, when A is finished

10
00:00:48.140 --> 00:00:51.800 
only then B can start, when B is
finished, only then C can start.

11
00:00:55.050 --> 00:01:01.040 
Still we can further illustrate sequential
executions using time diagrams.

12
00:01:01.350 --> 00:01:05.760 
And I'd like to introduce now the
concept of a time diagram by

13
00:01:06.900 --> 00:01:11.580 
the following sketch. So in time
diagrams time proceeds from

14
00:01:11.580 --> 00:01:12.660 
left to right.

15
00:01:16.350 --> 00:01:21.780 
So time t proceeds from left to
right and on this time axis

16
00:01:21.870 --> 00:01:26.520 
we can capture the duration of
the activities A B and C.

17
00:01:27.330 --> 00:01:31.840 
So at some point in time
activity A starts.

18
00:01:33.030 --> 00:01:38.480 
When A finishes B can start. Thus
that does not mean that immediately

19
00:01:38.480 --> 00:01:44.410 
after A B starts but it can stay for
a while in the enabled state before

20
00:01:44.590 --> 00:01:48.710 
some person decides to
now execute activity B.

21
00:01:49.410 --> 00:01:53.400 
So assume here B
starts, here B

22
00:01:54.410 --> 00:02:00.010 
terminates and afterwards C is executed
which might take a bit longer.

23
00:02:01.120 --> 00:02:08.690 
And we can even say well they
running phase of A started

24
00:02:09.070 --> 00:02:14.010 
maybe at eight o'clock
sharp, A terminated

25
00:02:14.560 --> 00:02:15.570 
maybe at eight

26
00:02:16.850 --> 00:02:19.560 
twenty in the morning.

27
00:02:20.360 --> 00:02:25.100 
So B started a bit
later at eight forty,

28
00:02:26.880 --> 00:02:29.510 
B terminated maybe
nine o'clock.

29
00:02:30.480 --> 00:02:37.120 
C started at nine ten and C
terminated maybe at nine thirty.

30
00:02:38.090 --> 00:02:41.920 
So that gives you an idea of
the execution ordering of

31
00:02:41.920 --> 00:02:46.590 
A B and C and also we added time here.
But it's important to see here that

32
00:02:46.870 --> 00:02:51.790 
that the time in which the
activities are executed

33
00:02:51.980 --> 00:02:56.480 
are let's say stressed here
so there is first a time

34
00:02:56.480 --> 00:03:00.220 
in which is A is executed, then a
time in which B is executed and

35
00:03:00.220 --> 00:03:03.240 
then a time in which C is
executed and of course A

36
00:03:03.460 --> 00:03:04.690 
B and C are sequential.

37
00:03:07.410 --> 00:03:11.850 
Alright when we analyze
processes we look at traces.

38
00:03:11.850 --> 00:03:14.930 
We investigated this in
week three of our course

39
00:03:15.510 --> 00:03:19.030 
and there we abstract from
the concrete running phase.

40
00:03:19.100 --> 00:03:23.150 
We do not look at the running
phase but we just look

41
00:03:23.150 --> 00:03:26.810 
at the traces and to be able to
look at the traces we have

42
00:03:26.810 --> 00:03:29.050 
to abstract from the
concrete running phase.

43
00:03:29.690 --> 00:03:33.440 
So we now discuss how we come from
the time diagram to the traces.

44
00:03:33.840 --> 00:03:36.970 
Again we have the sequential
ordering A B and C

45
00:03:38.020 --> 00:03:40.820 
and so we first
have the A

46
00:03:43.140 --> 00:03:46.130 
then we have the B

47
00:03:46.840 --> 00:03:48.580 
and then we have
activity C.

48
00:03:49.370 --> 00:03:55.040 
We can now somehow shrink the
running time to zero to

49
00:03:55.040 --> 00:03:58.930 
just abstract from the state
running of the activity instance

50
00:03:59.080 --> 00:04:02.870 
and just look at the activity
itself. So in that case is very

51
00:04:02.870 --> 00:04:04.800 
simple the trace
would look like

52
00:04:05.410 --> 00:04:10.570 
first A then B then C. And
that's the only trace that

53
00:04:10.570 --> 00:04:13.940 
is produced by this by
this process model.

54
00:04:15.160 --> 00:04:18.700 
Often we look at the termination
times. So the time when A terminates

55
00:04:18.940 --> 00:04:23.410 
that's the point where the
activity A is conducted

56
00:04:23.630 --> 00:04:26.290 
and then we would write
an A B and C the same.

57
00:04:28.880 --> 00:04:33.690 
Ok but we can have sequential
executions not only if we have

58
00:04:33.820 --> 00:04:37.140 
sequences that we look at but
also when we have XOR splits

59
00:04:37.140 --> 00:04:41.170 
in our process model. Even if we
when we just have XOR splits

60
00:04:41.180 --> 00:04:43.540 
we also end up with a
sequential execution.

61
00:04:44.460 --> 00:04:49.070 
In order to investigate these in a bit
more detail there is the following

62
00:04:49.480 --> 00:04:54.260 
diagram that we see here. And now
let's look at the time diagrams

63
00:04:54.270 --> 00:04:58.430 
we have. Well there are three options
of executing this process obviously.

64
00:04:58.540 --> 00:05:01.860 
Either the upper branch is taken,
the middle branch is taken

65
00:05:01.960 --> 00:05:03.560 
or the lower
branch is taken.

66
00:05:05.090 --> 00:05:07.380 
So therefore we have
three times diagrams.

67
00:05:09.690 --> 00:05:11.580 
The first one
is first A

68
00:05:13.050 --> 00:05:16.880 
then B and then the
final activity E.

69
00:05:18.320 --> 00:05:22.790 
Now this is the case when the upper
branch is taken where B is executed

70
00:05:24.060 --> 00:05:28.470 
and the other time diagrams would look
like this. So again there is an A

71
00:05:29.450 --> 00:05:33.080 
but then there can be a C which can
also be a bit longer of course

72
00:05:33.410 --> 00:05:34.890 
and afterwards
we have E.

73
00:05:36.800 --> 00:05:41.100 
Another type of a time
diagram is first the A

74
00:05:41.530 --> 00:05:42.690 
and then we have the D.

75
00:05:43.800 --> 00:05:48.600 
In this case the lower branch is taken
and finally we have the E again.

76
00:05:50.850 --> 00:05:54.380 
Ok this is the time diagram view
and now of course we can do

77
00:05:54.380 --> 00:05:58.410 
the same. We abstract from the
runtime state or from the running

78
00:05:58.410 --> 00:06:01.840 
state of activity instance and
just look at the termination

79
00:06:02.040 --> 00:06:07.640 
and there we have traces A B E that
would reflect the first time diagram.

80
00:06:08.780 --> 00:06:12.360 
First A then B then E.

81
00:06:13.460 --> 00:06:16.450 
But we could also
execute A C E.

82
00:06:17.870 --> 00:06:22.400 
First A C and E and
finally A D E

83
00:06:24.060 --> 00:06:28.960 
is also valid trace for this
process model. In any case it's

84
00:06:28.960 --> 00:06:32.510 
still sequential so all activities
are executed sequentially

85
00:06:32.730 --> 00:06:38.340 
and at each point in time there is
at most one activity running. So

86
00:06:38.480 --> 00:06:42.590 
often we have just one activity
running but in the gaps

87
00:06:42.590 --> 00:06:46.910 
between the no activities running
therefore we say up to one activity

88
00:06:47.040 --> 00:06:49.960 
can be running in case of
sequential executions.

89
00:06:53.310 --> 00:06:55.880 
So let's now look at
concurrent executions.

90
00:06:56.970 --> 00:06:59.610 
A set of process activities
are concurrent

91
00:07:00.030 --> 00:07:04.770 
if the process model prescribes that
they can be executed independently

92
00:07:05.070 --> 00:07:10.150 
from each other with an arbitrary interleaving.
Of course also arbitrary ordering.

93
00:07:11.650 --> 00:07:15.790 
At each point in time multiple concurrent
activities might be running.

94
00:07:17.580 --> 00:07:22.810 
We have concurrency in our process
model when of course when

95
00:07:22.810 --> 00:07:27.520 
for example we have an AND split
and an AND join and splits.

96
00:07:28.440 --> 00:07:30.660 
So these three activities
are concurrent

97
00:07:31.060 --> 00:07:34.260 
because they can be executed in
any ordering with every any

98
00:07:34.260 --> 00:07:38.330 
interleaving or concurrently
at the same time as we like.

99
00:07:40.050 --> 00:07:45.950 
To stress this in a bit more detail
we also look at time diagrams.

100
00:07:46.120 --> 00:07:49.570 
In this context and we see that
time diagrams for concurrent

101
00:07:49.670 --> 00:07:53.010 
processes or concurrent activities
look a bit different from

102
00:07:53.010 --> 00:07:54.240 
the ones we've
seen before.

103
00:07:55.980 --> 00:07:57.930 
So what is the
difference in detail?

104
00:07:59.550 --> 00:08:03.350 
Alright so the time diagram
each time diagram starts with

105
00:08:03.350 --> 00:08:06.640 
executing activity A since this
is the first activity that is

106
00:08:06.640 --> 00:08:08.250 
executed for this
process model.

107
00:08:09.800 --> 00:08:12.130 
That's activity
A. Alright

108
00:08:13.190 --> 00:08:19.560 
so after activity A is executed
what can happen? B C and D all

109
00:08:19.560 --> 00:08:23.940 
three are executed for each process
instance. So an AND split

110
00:08:23.940 --> 00:08:29.320 
when we have an AND split all outgoing
sequence flows are signaled.

111
00:08:29.620 --> 00:08:32.500 
So in any case B C and
D can be executed.

112
00:08:33.810 --> 00:08:37.210 
So for instance B is
executed immediately. Then

113
00:08:39.600 --> 00:08:43.520 
also almost at the same time
maybe a bit later C is executed

114
00:08:43.600 --> 00:08:47.480 
very fast and then maybe the
execution of D starts here

115
00:08:47.480 --> 00:08:48.270 
takes a bit longer.

116
00:08:49.480 --> 00:08:54.620 
So what we see here is that B C and D are
concurrent, they are independent, they are

117
00:08:54.880 --> 00:08:56.280 
executed at the
same time,

118
00:08:56.910 --> 00:08:59.820 
almost at the same time. C a bit
shorter, starts a bit later

119
00:08:59.940 --> 00:09:04.110 
so there is an arbitrary interleaving this is
what we meant by arbitrary interleaving.

120
00:09:04.550 --> 00:09:09.540 
Of course C can also be executed a
bit before B or a bit after B or

121
00:09:09.760 --> 00:09:13.180 
in any interleaving with
B and also with D.

122
00:09:14.440 --> 00:09:19.040 
However E can only be executed
when all of these B C and D

123
00:09:19.040 --> 00:09:22.850 
have completed have terminated.
This is the semantics of the AND

124
00:09:22.990 --> 00:09:24.840 
join on the right
hand side here.

125
00:09:25.850 --> 00:09:29.030 
So after all these activities have
been completed we have the E

126
00:09:30.410 --> 00:09:33.020 
and that is one sample
time diagram.

127
00:09:34.880 --> 00:09:39.040 
When we look now at the traces
we also have to shrink the

128
00:09:39.180 --> 00:09:43.610 
interval in which the activities
are executed together. So

129
00:09:44.070 --> 00:09:46.570 
we can look at the
termination to do that.

130
00:09:47.260 --> 00:09:51.380 
And what do we see? Well the first
thing, let's first look at the

131
00:09:51.570 --> 00:09:54.350 
ordering of the termination
of the activities here.

132
00:09:54.990 --> 00:09:59.400 
and that would give us the first
trace and that is the first

133
00:09:59.940 --> 00:10:02.680 
activity that terminates.
Then we have C,

134
00:10:04.520 --> 00:10:07.940 
then we have B, then we have
D and then we have E.

135
00:10:09.460 --> 00:10:12.250 
That's the first trace, its one
trace that is possible here.

136
00:10:13.770 --> 00:10:16.700 
C B D E that's the
order of termination.

137
00:10:18.820 --> 00:10:24.020 
But there are quite some more.
So we can let's see if

138
00:10:24.020 --> 00:10:27.430 
we can put them all together
here maybe I write the traces

139
00:10:27.430 --> 00:10:29.670 
here on the right
hand side.

140
00:10:30.610 --> 00:10:36.440 
We have A then B might be the
next one then we have C D

141
00:10:38.240 --> 00:10:44.640 
and E but we can also have A B
and then A B and then D C.

142
00:10:47.570 --> 00:10:49.310 
That's also a valid
trace here.

143
00:10:51.150 --> 00:10:55.970 
Ok we can have A C first A then
C then we have B D we had

144
00:10:55.970 --> 00:11:00.080 
this already but we
can also have D B

145
00:11:02.280 --> 00:11:08.900 
and then we have A D and
A D we can have a B C

146
00:11:10.690 --> 00:11:13.960 
but we also can
have A D C.

147
00:11:15.450 --> 00:11:23.170 
We have here
we go A D C

148
00:11:29.890 --> 00:11:33.690 
B and then the E.

149
00:11:35.040 --> 00:11:39.510 
So we have overall we have these
six traces that are created

150
00:11:39.520 --> 00:11:41.740 
that are allowed by
this process model.

151
00:11:44.130 --> 00:11:48.940 
Alright but in the example also the
homework we investigated the OR split.

152
00:11:49.210 --> 00:11:53.260 
And the OR split allows any
number of branches outgoing

153
00:11:53.260 --> 00:11:54.570 
branches to be
signaled.

154
00:11:55.720 --> 00:11:59.770 
So that means that we have to
in order to investigate what

155
00:11:59.770 --> 00:12:03.620 
the OR split does we have to
investigate all possible executions.

156
00:12:04.520 --> 00:12:07.650 
Since we don't have too much
space to discuss a time diagram

157
00:12:07.650 --> 00:12:10.490 
and all the traces
I'd like to

158
00:12:11.260 --> 00:12:16.480 
assume that here the first branch
is taken the second branch is

159
00:12:16.480 --> 00:12:19.700 
taken but that branch is not
taken. So that's a particular

160
00:12:20.110 --> 00:12:24.220 
assumption here but we can easily
extend it also to a case where

161
00:12:24.490 --> 00:12:27.880 
another subset of the
branches is signaled.

162
00:12:29.440 --> 00:12:32.500 
Alright let's now look
at the time diagram.

163
00:12:33.080 --> 00:12:36.980 
So the first two branches are
executed concurrently however

164
00:12:36.980 --> 00:12:40.550 
we have of course to make sure
that B can only start after

165
00:12:40.550 --> 00:12:44.530 
A has finished. Of course we have
to make sure that this is true.

166
00:12:45.400 --> 00:12:49.650 
So we can have a sample
time diagram here

167
00:12:50.080 --> 00:12:53.730 
that maybe starts
with the A

168
00:12:56.120 --> 00:13:01.480 
and then maybe B is not immediately
starting but there can be the C,

169
00:13:01.610 --> 00:13:07.090 
C can be executed and only
then the B can start.

170
00:13:07.190 --> 00:13:11.180 
Now that would be a a valid
trace. So one trace would be A

171
00:13:11.850 --> 00:13:20.290 
C B. First A, then C, then B. Actually
we would come to the same trace

172
00:13:20.510 --> 00:13:24.190 
if there was an overlap if we
have something like this.

173
00:13:24.690 --> 00:13:26.380 
We have the A here,

174
00:13:27.960 --> 00:13:30.780 
and then we have
maybe the C here,

175
00:13:31.840 --> 00:13:35.180 
and then here we have the B. Also
in that case when there is

176
00:13:35.180 --> 00:13:41.100 
a real overlap in time between
activities A C and B C we would

177
00:13:41.100 --> 00:13:44.960 
come to the same trace since we look at the
termination operations. Also that would

178
00:13:45.150 --> 00:13:48.920 
end up the trace that we have here.
First the first finishes the

179
00:13:50.060 --> 00:13:51.480 
A and the Cand
then the B.

180
00:13:53.840 --> 00:14:00.180 
Alright that summarizes the
extra video clip e.1 in

181
00:14:00.180 --> 00:14:04.480 
which we discussed concurrent execution
of concurrency and process models.

182
00:14:05.020 --> 00:14:09.370 
We first looked at sequential
executions in which at each point

183
00:14:09.370 --> 00:14:12.950 
in time at most one
activity is executed.

184
00:14:13.720 --> 00:14:17.440 
We've seen that if we only use
sequence flow and process models

185
00:14:17.710 --> 00:14:21.860 
we end up with sequential executions
but we also end up with

186
00:14:21.870 --> 00:14:25.470 
sequential executions when
we have XOR splits only.

187
00:14:26.780 --> 00:14:31.830 
We looked at time diagrams to
illustrate the temporal aspects of

188
00:14:31.960 --> 00:14:34.820 
activity executions
and process models

189
00:14:35.740 --> 00:14:38.660 
and we abstracted them to traces
where we abstract from the

190
00:14:38.660 --> 00:14:42.730 
running state and just give the name
of the activity when it terminates.

191
00:14:43.420 --> 00:14:47.840 
And traces are very useful when
we analyze business processes.

192
00:14:49.650 --> 00:14:53.330 
We looked at concurrent execution
or concurrency in process models

193
00:14:53.620 --> 00:14:56.480 
and we see we found out that
whenever we have an AND split

194
00:14:56.490 --> 00:15:00.710 
we find concurrency because all
branches are signaled. So a

195
00:15:00.710 --> 00:15:05.180 
number of activities can be executed in
any order or with any interleaving.

196
00:15:06.030 --> 00:15:10.680 
And we also find the same in
the inclusive OR split where

197
00:15:10.930 --> 00:15:15.580 
any number of outgoing edges of
XOR split can be signalled so

198
00:15:15.890 --> 00:15:19.250 
that the respective branches are
then executed concurrently.
