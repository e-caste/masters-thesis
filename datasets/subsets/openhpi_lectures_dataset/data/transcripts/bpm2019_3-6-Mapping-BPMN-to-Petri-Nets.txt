WEBVTT

1
00:00:00.590 --> 00:00:04.440 
Welcome to video clip 3.6
in which we map BPMN

2
00:00:04.440 --> 00:00:05.940 
process models
to petri nets.

3
00:00:07.610 --> 00:00:10.840 
First of all I'd like to discuss
the relationship between

4
00:00:10.840 --> 00:00:12.490 
petri nets and
soundness. I was

5
00:00:13.110 --> 00:00:16.970 
mentioning earlier that
petrinets are used as a formal

6
00:00:16.970 --> 00:00:22.760 
vehicle to precisely specify soundness
property of process models

7
00:00:22.760 --> 00:00:24.030 
of petri nets in
particular.

8
00:00:24.930 --> 00:00:28.870 
The idea is here to use the
reachability graph to determine

9
00:00:28.880 --> 00:00:30.380 
the soundness of
a petri net.

10
00:00:31.110 --> 00:00:34.830 
However we have modelled
the petri net with BPMN,

11
00:00:34.850 --> 00:00:38.820 
So there is a gap in the notations
used. So we have on the one hand

12
00:00:39.130 --> 00:00:42.830 
side we have the BPM process
models which we like to analyze

13
00:00:42.840 --> 00:00:46.780 
on the other hand our techniques,
our formal notations

14
00:00:46.780 --> 00:00:51.580 
use petri nets. So there was a gap and
we in this video clip like to bridge

15
00:00:51.870 --> 00:00:57.990 
this gap. So how we do this on the
next steps we provide a mapping from

16
00:00:58.000 --> 00:01:02.760 
BPMN to petri nets from a
subset of BPMN, a widely used

17
00:01:02.760 --> 00:01:05.590 
subset but not lets say
the complete BPMN set.

18
00:01:06.900 --> 00:01:11.000 
We checked soundness properties one two
and three that we learned already

19
00:01:11.340 --> 00:01:15.290 
using the reachability graph of
the corresponding petri net, can

20
00:01:15.420 --> 00:01:18.720 
use the reachability
graph. We we just

21
00:01:19.430 --> 00:01:22.650 
we just took a look at
to analyze soundness.

22
00:01:23.630 --> 00:01:28.800 
Though of course we also need
the concept of structural

23
00:01:28.800 --> 00:01:31.380 
soundness or petri net
is structurally sound

24
00:01:31.850 --> 00:01:35.930 
if it has one dedicated initial
place that has no incoming arc.

25
00:01:36.430 --> 00:01:40.810 
That's the initial place i. If it
has one dedicated final place

26
00:01:40.820 --> 00:01:44.740 
o that has no outgoing arc and
if each node in the net lies

27
00:01:44.740 --> 00:01:48.560 
from i to o. So that's
basically the same definition

28
00:01:48.560 --> 00:01:54.190 
is that we borrowed actually for BPMN process
models regarding structural soundness.

29
00:01:54.580 --> 00:01:57.730 
And in this case the petri net
is also called a workflow net.

30
00:01:57.730 --> 00:02:03.060 
Workflow net is also very used very
often in the academic BPM community.

31
00:02:05.540 --> 00:02:10.440 
So how can we translate BPMN process
models to petrinets? The idea is

32
00:02:10.790 --> 00:02:17.240 
we take BPMN activities, events and
gateways and map these to petrinet

33
00:02:17.670 --> 00:02:23.870 
sub-nets to using this structures using
places and transitions from petri nets.

34
00:02:24.150 --> 00:02:26.800 
In the example we did that already
so we add the activities

35
00:02:26.800 --> 00:02:30.760 
and then we add the transitions for
checking in order something like that.

36
00:02:31.610 --> 00:02:35.510 
These subunits are connected such
that a that they represent

37
00:02:35.520 --> 00:02:37.770 
the behavior of the
business process model.

38
00:02:40.540 --> 00:02:44.570 
Intermediate events and tasks
are mapped to transitions

39
00:02:45.090 --> 00:02:50.710 
and the bipartite structure of petrinets
also requires some additional transitions.

40
00:02:51.490 --> 00:02:54.620 
For instance transitions that
do not have an activity or an

41
00:02:54.620 --> 00:02:58.500 
intermediate event associate
in the BPMN process model.

42
00:02:59.000 --> 00:03:01.750 
This transitional called silent
transition because they are

43
00:03:01.750 --> 00:03:06.750 
not represented in the process model but
they need to be represented in the

44
00:03:07.040 --> 00:03:12.340 
process model. And we also see that
not only intermediate events

45
00:03:12.340 --> 00:03:16.320 
as written here but also start
events and end events will

46
00:03:16.320 --> 00:03:20.240 
also be represented as
transition the same as tasks

47
00:03:20.250 --> 00:03:22.470 
obviously also represented
as transitions.

48
00:03:24.170 --> 00:03:27.480 
Ok so we have a number of
mapping of translation rules.

49
00:03:28.120 --> 00:03:31.540 
First of all the execution of
an activity is represented by

50
00:03:31.540 --> 00:03:37.380 
firing of a transition. So if
we have here one activity

51
00:03:37.620 --> 00:03:42.400 
t, or task process task t
but it's embedded in x and

52
00:03:42.400 --> 00:03:48.890 
y or always shows how to
relate the resulting BPMN or

53
00:03:49.290 --> 00:03:53.330 
petrinet fragment with the rest so
this is let's say the context

54
00:03:53.580 --> 00:03:57.560 
of the task t. Task t is
represented by a transition.

55
00:03:58.090 --> 00:04:03.320 
If we look closely then
we see also a mismatch

56
00:04:03.330 --> 00:04:07.330 
conceptual mismatch between the two.
The one inside well they both

57
00:04:08.030 --> 00:04:12.740 
incur activities or activity is
executed, is enabled, starts

58
00:04:12.740 --> 00:04:15.570 
running, at some point in time
it is finished, it terminates.

59
00:04:16.260 --> 00:04:19.830 
However on the other hand a
transition just happened.

60
00:04:19.830 --> 00:04:23.580 
So it has also an activity, it
changes the state of a system, also

61
00:04:23.580 --> 00:04:25.050 
that is the same
as a task.

62
00:04:25.730 --> 00:04:29.550 
However it does not take
time. So the firing of

63
00:04:29.560 --> 00:04:32.730 
this transition is an atomic
step, mentioning that before.

64
00:04:33.460 --> 00:04:37.320 
It does not take time so we have
a similar situation with a

65
00:04:37.320 --> 00:04:41.590 
trace semantic. Hope you remember that, we
were discussing this earlier this week.

66
00:04:42.040 --> 00:04:46.910 
So that we actually the petri
net just has a transition.

67
00:04:47.330 --> 00:04:52.730 
So, merges somehow the begin and
terminate state transition,

68
00:04:52.730 --> 00:04:55.230 
it just has this state
transition from ready

69
00:04:55.870 --> 00:05:01.770 
to terminated. So we just have this term
this state transition. So a transition

70
00:05:02.210 --> 00:05:05.290 
is enabled and if a transition
fires it's terminated. So it

71
00:05:05.290 --> 00:05:10.200 
goes from ready from enabled
immediately to terminated.

72
00:05:13.570 --> 00:05:17.680 
We need to map also events and
this slide shows you how

73
00:05:17.680 --> 00:05:20.190 
to map events from
BPMN to petri nets.

74
00:05:21.240 --> 00:05:24.950 
First of all start
events are

75
00:05:25.610 --> 00:05:29.690 
represented by a fragment. a
petrinet fragment consisting of

76
00:05:30.020 --> 00:05:33.670 
so that's at the left-hand we have
the BPMN, just the start event s,

77
00:05:33.770 --> 00:05:38.980 
continuation with y and here on the
right-hand side we have a start

78
00:05:39.120 --> 00:05:43.320 
or we have a place i and that is
the place i that is important,

79
00:05:43.320 --> 00:05:46.620 
so the initial place. And the
occurrence of the start event

80
00:05:46.620 --> 00:05:51.010 
is represented by a transition
s. So s is that transition.

81
00:05:51.620 --> 00:05:57.680 
And once s fires, so once
the process starts then

82
00:05:57.870 --> 00:06:02.490 
also there is a transition in the
petri net transition s fires so that

83
00:06:03.000 --> 00:06:06.820 
so that the petrinet also then
reflects the starting of the

84
00:06:07.230 --> 00:06:08.200 
process instance.

85
00:06:09.460 --> 00:06:13.240 
In terms of intermediate events
we have here we don't look

86
00:06:13.240 --> 00:06:16.250 
at the internal structure of the
intermediate events, we don't

87
00:06:16.250 --> 00:06:19.290 
care about it. It is just important
that something needs to happen

88
00:06:19.290 --> 00:06:21.950 
there and something needs to
happen is again represented

89
00:06:22.480 --> 00:06:27.620 
by a transition and just the
firing of a transition e. So

90
00:06:28.010 --> 00:06:31.410 
if the previous activity
is completed then

91
00:06:31.910 --> 00:06:35.350 
of course the intermediate
event happens.

92
00:06:37.070 --> 00:06:40.690 
It's also abstracted from the type
of the intermediate event. So

93
00:06:40.690 --> 00:06:43.620 
when a wait for a message of the
message would not would not

94
00:06:43.620 --> 00:06:47.430 
come we cannot handle that on the
former level. So we assume that

95
00:06:47.800 --> 00:06:52.200 
intermediate events will always
occur because we can only analyze

96
00:06:52.380 --> 00:06:55.800 
the behavior of a particular
process model, we cannot analyze

97
00:06:55.800 --> 00:07:00.170 
the complete environments. So we assume
the environment behaves as specified,

98
00:07:00.500 --> 00:07:03.010 
though that we can

99
00:07:03.620 --> 00:07:08.090 
map this intermediate event
just to one transition.

100
00:07:09.580 --> 00:07:14.400 
Regarding the final event
in BPMN, is represented

101
00:07:14.660 --> 00:07:18.540 
by the output place o, so by the
final place of the petri net.

102
00:07:21.130 --> 00:07:25.390 
I also mentioned that petrinets
are very good at expressing

103
00:07:25.390 --> 00:07:30.040 
split and join behavior. At least
regarding the AND and XOR.

104
00:07:30.050 --> 00:07:33.290 
So the AND split, on the left hand
side here we have the AND split

105
00:07:35.760 --> 00:07:37.850 
and the AND split well

106
00:07:38.730 --> 00:07:43.900 
it's called A here, comes from X and
it has two concurrent branches

107
00:07:44.060 --> 00:07:48.450 
opening branches to y1 and y2
and that's represented by

108
00:07:48.550 --> 00:07:51.870 
the normal split behavior of a transitions.
So when the transition fires

109
00:07:52.120 --> 00:07:54.590 
it put the token in each
of its outgoing places

110
00:07:55.610 --> 00:07:58.450 
and that's exactly what
represents the AND split.

111
00:07:59.340 --> 00:08:02.210 
AND join is the same.

112
00:08:02.920 --> 00:08:06.830 
So that it's also represented
by a transition.

113
00:08:07.720 --> 00:08:11.030 
However at this point in time the
transition has input places

114
00:08:11.030 --> 00:08:14.080 
from all the joins that need to
be synchronized by the AND

115
00:08:14.570 --> 00:08:18.240 
join and only
if all of the

116
00:08:18.890 --> 00:08:24.590 
BPMN speech all incoming sequence
flows needs to be signalled

117
00:08:25.040 --> 00:08:29.990 
if all incoming sequence flows
are signaled the AND join

118
00:08:29.990 --> 00:08:34.080 
fires. On the patrinet we have
the same behavior so if

119
00:08:34.080 --> 00:08:38.670 
each input place of the
transition a prime has a token

120
00:08:38.670 --> 00:08:42.430 
then the transition can fire. That's
exactly what happens here. So A

121
00:08:42.550 --> 00:08:46.490 
prime transition a prime can only
fire if I have a token here

122
00:08:46.560 --> 00:08:50.250 
and here. In this case a token is
put on the next follow up place.

123
00:08:53.600 --> 00:08:56.840 
A splitting behavior regarding
the XOR split. So there

124
00:08:56.840 --> 00:08:59.990 
is a decision
D and either

125
00:09:05.370 --> 00:09:09.000 
the process continued
with y1 or with y2.

126
00:09:09.620 --> 00:09:15.800 
We can represent this behavior by two
transitions. So we need two transitions

127
00:09:16.320 --> 00:09:21.020 
and we need two transitions
called D1 and D2.

128
00:09:21.650 --> 00:09:26.160 
So why is this exclusive OR behavior
representative and I assume

129
00:09:26.160 --> 00:09:27.460 
we have a token in X

130
00:09:28.720 --> 00:09:34.120 
and now D1 and D2 are enabled
but as soon as one fires

131
00:09:34.120 --> 00:09:36.860 
for instance D1 fires,
puts a token here.

132
00:09:37.830 --> 00:09:42.390 
What it also does it erases
the token here so that D2

133
00:09:42.390 --> 00:09:46.980 
can no longer fire. So by this
structure exactly the XOR

134
00:09:46.980 --> 00:09:50.940 
semantics exclusive split semantics
is realized exactly by this.

135
00:09:51.670 --> 00:09:55.590 
Again there are no conditions
attached because

136
00:09:56.240 --> 00:10:00.290 
we are not looking into specific
data as well we just look at the

137
00:10:00.390 --> 00:10:03.320 
set of possible behavior. The
possible behavior regardless of

138
00:10:03.320 --> 00:10:06.980 
the conditions is either
I go for y1 or I go for

139
00:10:06.980 --> 00:10:13.000 
y2. And this either I go for y1 or go
for y2 is represented by the petrinet

140
00:10:13.210 --> 00:10:14.670 
fragment on the
right hand side.

141
00:10:16.120 --> 00:10:17.510 
The merging behavior -

142
00:10:19.330 --> 00:10:25.530 
the merging behavior of this XOR join
is represented by this structure.

143
00:10:26.270 --> 00:10:31.350 
So if I have let's say X1
is signalled and the BPMN

144
00:10:31.430 --> 00:10:35.910 
levels, so X1 is signaled then
that means X1 has a token here

145
00:10:36.750 --> 00:10:40.950 
and then D1 can fire put the token
here, process continues. The same

146
00:10:41.050 --> 00:10:44.600 
holds for X2 so if either
one of the inputs

147
00:10:45.040 --> 00:10:46.730 
of let's say this

148
00:10:47.610 --> 00:10:53.230 
incoming sequence flow to the
XOR join is triggered and then

149
00:10:53.300 --> 00:10:58.760 
the XOR join let's say signals
its outgoing edge and the same

150
00:10:59.150 --> 00:11:01.660 
same behavior we can
achieve the same behavior

151
00:11:02.070 --> 00:11:04.500 
of the petri net with
the structure that

152
00:11:05.230 --> 00:11:09.860 
either there is a token X1 or
an X2. In both cases or the

153
00:11:09.970 --> 00:11:14.720 
first case D1 prime fires, in
the second case D2 prime

154
00:11:14.720 --> 00:11:18.600 
fires in any case there is a token
and y which allows the process

155
00:11:18.600 --> 00:11:19.250 
to continue.

156
00:11:22.030 --> 00:11:28.630 
Ok now let's try to to apply these
transformations to our model.

157
00:11:29.340 --> 00:11:32.780 
That would be a bit too much
if I would try to start

158
00:11:32.790 --> 00:11:36.830 
drawing this. So I took the
shorthand so to speak,

159
00:11:36.840 --> 00:11:42.250 
I just put it here but as an exercise you
will be invited to apply these rules

160
00:11:43.070 --> 00:11:47.780 
and you'll see that will come to the
structure, to this petrinet structure that

161
00:11:48.470 --> 00:11:52.250 
represents the BPMN process
model. That's of course as the

162
00:11:52.580 --> 00:11:57.000 
BPMN process model that we
achieved earlier this week

163
00:11:57.000 --> 00:11:59.060 
by making it
structurally sound.

164
00:12:00.110 --> 00:12:03.210 
So how is that done? First of
all we have the initial place

165
00:12:03.210 --> 00:12:06.660 
here that reflects this
new newly created start

166
00:12:07.100 --> 00:12:12.220 
event. We have the decision and this XOR
decision is represented by the structure.

167
00:12:13.460 --> 00:12:18.460 
So either of these three
transition fires, so only one

168
00:12:18.460 --> 00:12:21.890 
of these three transitions. So this one,
that one, or that one. These are the

169
00:12:22.430 --> 00:12:26.720 
also the silent transitions.
Therefore they are

170
00:12:26.720 --> 00:12:30.650 
represented by these black structure
with this black little box.

171
00:12:31.030 --> 00:12:35.450 
So either of these three silent
transitions can fire and then

172
00:12:35.500 --> 00:12:38.870 
token is in p2,
p3 or p4.

173
00:12:41.530 --> 00:12:47.880 
Assume the BPMN level the
process goes receives

174
00:12:48.350 --> 00:12:52.480 
the claim by surface mail, goes
here then continues like that.

175
00:12:52.820 --> 00:12:55.630 
Let's try to mimic that here.
So what happens is that

176
00:12:56.480 --> 00:12:59.510 
first of all make some
space by raising

177
00:13:00.200 --> 00:13:01.460 
these. So the process

178
00:13:02.140 --> 00:13:03.160 
starts

179
00:13:05.100 --> 00:13:10.630 
starts here and p1 goes here, that
is receive a transition receive

180
00:13:10.630 --> 00:13:15.330 
claim by the office mail occurs so the state
transitions from enable immediately to terminate

181
00:13:15.600 --> 00:13:17.390 
to represent the
conduction

182
00:13:18.040 --> 00:13:23.140 
of this activity. Then we
have this silent transition

183
00:13:23.140 --> 00:13:27.220 
putting a token in p7. Then
register claim can occur

184
00:13:27.360 --> 00:13:30.390 
putting a token here, then decide
claim coverage can occur

185
00:13:30.390 --> 00:13:33.430 
putting the token here. So we
see that the behavior we could

186
00:13:33.430 --> 00:13:37.650 
do that for for the other two
and will see that the behavior

187
00:13:37.850 --> 00:13:40.160 
that we have exactly the
same behavior in the

188
00:13:40.620 --> 00:13:43.510 
petri net as we have in
the BPMN process model.

189
00:13:44.780 --> 00:13:48.860 
That concludes video clip
3.6 in which we translated

190
00:13:48.870 --> 00:13:53.080 
BPMN to petri nets. We've seen
how to translate activities

191
00:13:53.080 --> 00:13:57.260 
events and gateways and we
illustrated that using an example.
