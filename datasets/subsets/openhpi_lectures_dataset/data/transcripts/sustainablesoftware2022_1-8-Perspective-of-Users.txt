WEBVTT

1
00:00:00.820 --> 00:00:04.980 
Hi in this video we're going to look at the perspective of users

2
00:00:05.100 --> 00:00:06.740 
on sustainable software.

3
00:00:09.560 --> 00:00:14.170 
Reviewing our example model of a software engineering team and its environment,

4
00:00:14.320 --> 00:00:20.190 
the user is on the outside. Why do we start with the perspective of the user?

5
00:00:21.190 --> 00:00:24.510 
Let's look at the greensoft model that I introduced previously

6
00:00:24.840 --> 00:00:27.660 
to understand where where does the user come in.

7
00:00:29.180 --> 00:00:34.190 
The user is responsible for a very important and I would argue

8
00:00:34.190 --> 00:00:39.590 
the most important stakeholder during two thirds of a product's life cycle-

9
00:00:39.920 --> 00:00:43.630 
the usage phase and the end of use of a software.

10
00:00:44.530 --> 00:00:48.650 
End users do care about the software that they use after all.

11
00:00:48.650 --> 00:00:52.670 
If a software does not satisfy its users, it's most likely not

12
00:00:52.670 --> 00:00:56.110 
going to be commercially successful and development of the

13
00:00:56.110 --> 00:00:58.080 
software will more or less end.

14
00:00:59.390 --> 00:01:04.120 
What do users care about when we talk about sustainable software?

15
00:01:04.830 --> 00:01:09.230 
First and foremost, users want to use the software, so they do

16
00:01:09.230 --> 00:01:14.190 
care a lot about whether the software satisfies its functional requirement,

17
00:01:14.480 --> 00:01:19.920 
whether it's fit for its purpose. So looking at the Greensoft model,

18
00:01:20.210 --> 00:01:24.960 
we're really looking at the phases of usage, we're looking at

19
00:01:24.960 --> 00:01:30.750 
common quality criteria for software like it does not crash, it's bug free

20
00:01:31.480 --> 00:01:34.620 
and we're looking at all the procedures that happen during

21
00:01:34.620 --> 00:01:36.210 
use of the software.

22
00:01:38.180 --> 00:01:42.490 
Let's take a look at the software update example that I was

23
00:01:42.950 --> 00:01:47.620 
giving and introducing for using throughout this perspective videos.

24
00:01:48.870 --> 00:01:53.120 
As a user what do I want from my software update service-

25
00:01:53.830 --> 00:01:56.000 
one thing that is very

26
00:01:56.770 --> 00:02:02.060 
well, very easy to understand is that users want updates to be quick.

27
00:02:02.490 --> 00:02:06.610 
There is no no value in the update process itself.

28
00:02:07.010 --> 00:02:10.850 
So users might want for example that it's very lightweight

29
00:02:10.850 --> 00:02:14.630 
on the network that it's very fast to download and that when

30
00:02:14.640 --> 00:02:19.720 
an update installs, that it uses very little CPU and also IOPS, so

31
00:02:19.970 --> 00:02:22.740 
IO operations writing to disk

32
00:02:23.660 --> 00:02:28.940 
which means that the software will need very little time to install the update.

33
00:02:29.390 --> 00:02:33.360 
Why do users want that? Well updating is typically a hassle.

34
00:02:33.360 --> 00:02:38.060 
So it means they want updates to be so fast that they are lightweight,

35
00:02:38.060 --> 00:02:40.690 
and they don't notice stop date really.

36
00:02:41.470 --> 00:02:45.360 
And if we think about it, this makes sense. We don't want to

37
00:02:45.360 --> 00:02:50.030 
interrupt user's work flow with running updates that take ages to install

38
00:02:50.230 --> 00:02:53.100 
if you would imagine yourself using a software like that, it's

39
00:02:53.100 --> 00:02:55.560 
very likely you would not be very satisfied with it.

40
00:02:56.730 --> 00:03:00.850 
But there are also very clear energy or resource consumption

41
00:03:00.850 --> 00:03:05.120 
concerns associated with it. So imagine running a mobile device

42
00:03:05.120 --> 00:03:08.150 
for example running a software update there is going to use

43
00:03:08.150 --> 00:03:13.830 
mobile data which is more costly than like a fixed cable internet connection.

44
00:03:14.290 --> 00:03:17.560 
And also energy consumption. Installing an update that makes

45
00:03:17.560 --> 00:03:22.110 
your computer's fan spin up and uses a lot of energy, creates

46
00:03:22.110 --> 00:03:24.190 
a lot of noise and might be disturbing.

47
00:03:27.020 --> 00:03:30.760 
What else do we have about updates, especially when we look at a bit

48
00:03:31.240 --> 00:03:36.180 
the other aspects of do I even want updates for my software?

49
00:03:36.930 --> 00:03:41.730 
So users want updates to be frequent nowadays. It's the established

50
00:03:41.730 --> 00:03:45.630 
convention that software is continuously developed and continuously

51
00:03:45.630 --> 00:03:49.860 
improved and users appreciate new functionality with every release.

52
00:03:50.680 --> 00:03:54.740 
However users also want updates not only for new functionality

53
00:03:54.740 --> 00:03:58.240 
but they also want to prevent a premature end of life of their

54
00:03:58.240 --> 00:04:01.470 
software, for example if the software is no longer compatible

55
00:04:01.780 --> 00:04:05.180 
with a new version of an operating system or if the software

56
00:04:05.470 --> 00:04:08.900 
is no longer usable because it contains security issues that

57
00:04:08.900 --> 00:04:10.110 
are not being patched.

58
00:04:10.950 --> 00:04:15.580 
On the other hand users also do not want software updates to be too frequent,

59
00:04:16.120 --> 00:04:19.740 
for example studies have found that software that is asking

60
00:04:19.740 --> 00:04:24.400 
its users to update very often confuses people and they are

61
00:04:24.400 --> 00:04:27.410 
his system to actually install updates.

62
00:04:28.150 --> 00:04:31.740 
Another thing that people report is that for example if

63
00:04:32.470 --> 00:04:36.850 
updating the software requires restarting it, that people are

64
00:04:36.850 --> 00:04:41.870 
not so sure anymore if their device or if their software is

65
00:04:41.870 --> 00:04:42.930 
working properly.

66
00:04:47.530 --> 00:04:51.100 
Why does it matter? Why should a software team that is in this

67
00:04:51.100 --> 00:04:54.810 
case building this update service concern itself with the update

68
00:04:54.810 --> 00:04:59.660 
experience of it and of its end users, and especially if we look at

69
00:04:59.830 --> 00:05:04.860 
the sustainability aspect of it. We previously discussed what the

70
00:05:05.410 --> 00:05:11.230 
installation time and how much resources it uses CPU, IOPS -how

71
00:05:11.230 --> 00:05:14.150 
does that even matter to an end user in any way?

72
00:05:15.490 --> 00:05:19.900 
So let's look at a case study that is using a back of the envelope

73
00:05:20.520 --> 00:05:24.160 
calculation for what happens for a very popular update service

74
00:05:24.160 --> 00:05:25.840 
which is windows updates.

75
00:05:26.880 --> 00:05:31.010 
So if we assume for example that an update for windows takes

76
00:05:31.010 --> 00:05:36.570 
ten minutes to install and consumes on an average PC fifty watts

77
00:05:36.690 --> 00:05:41.120 
of power for this ten minutes, we arrive at like about eight

78
00:05:41.390 --> 00:05:43.980 
hours used for one update process.

79
00:05:44.970 --> 00:05:48.450 
We also do assume that this update requires a restart. So it

80
00:05:48.450 --> 00:05:51.720 
installs while nothing else can run on the computer which means

81
00:05:51.720 --> 00:05:55.240 
that the computer is unusable for any other task and we can

82
00:05:55.240 --> 00:05:59.340 
exclusively attribute this energy consumption to the update process.

83
00:06:00.790 --> 00:06:04.290 
If we assume conservatively that is like one update per month,

84
00:06:04.580 --> 00:06:08.490 
for example containing security fixes and new features,

85
00:06:08.940 --> 00:06:14.850 
we arrive at one hundred watt hours per year for a single device updating

86
00:06:15.360 --> 00:06:20.340 
the software, that this team develops just for installing updates.

87
00:06:21.180 --> 00:06:25.030 
And if we multiply this one hundred watt hours with the number

88
00:06:25.030 --> 00:06:27.690 
of devices that is running windows, which is

89
00:06:28.390 --> 00:06:33.870 
one point three billion devices, we suddenly arrive at one hundred and thirty

90
00:06:33.980 --> 00:06:37.270 
gigawatt hours per year of energy usage.

91
00:06:37.900 --> 00:06:42.080 
And if you put that into a co two equivalent calculator that

92
00:06:42.280 --> 00:06:46.640 
tries to approximate how much co two emissions producing this

93
00:06:46.640 --> 00:06:51.660 
amount of energy causes, we arrive at ninety two thousand tonnes

94
00:06:51.950 --> 00:06:56.510 
of co two, which is about the equivalent of driving twenty thousand

95
00:06:56.510 --> 00:06:58.760 
passenger cars for an entire year.

96
00:07:00.160 --> 00:07:04.120 
So with this back of the envelope calculation, we can see that

97
00:07:04.120 --> 00:07:09.060 
on a global scale the impact of this update service is quite

98
00:07:09.060 --> 00:07:11.130 
relevant and worth optimising.

99
00:07:11.910 --> 00:07:19.760 
However is it optimising or is optimising it worth it for the individual user.

100
00:07:20.520 --> 00:07:24.450 
So if the individual user for one device has to

101
00:07:24.880 --> 00:07:28.010 
spend one hundred watts hours of energy

102
00:07:28.560 --> 00:07:33.070 
to install the updates and we assume an energy price of thirty cents

103
00:07:33.470 --> 00:07:36.840 
per kilowatt hour which is typically for Germany and it's one

104
00:07:36.840 --> 00:07:40.980 
of the higher prices worldwide that's just three cents per year.

105
00:07:41.630 --> 00:07:45.090 
It's very unlikely that users are going to make a purchasing

106
00:07:45.090 --> 00:07:48.390 
decision for software based on the update functionality which

107
00:07:48.390 --> 00:07:50.320 
is costing them three cents per year.

108
00:07:51.360 --> 00:07:56.930 
So we must find something more suitable for incentivizing users to

109
00:07:57.100 --> 00:07:59.900 
care for sustainability of the software.

110
00:08:00.930 --> 00:08:04.850 
One thing we might find here is the opportunity cost for the user.

111
00:08:05.020 --> 00:08:09.100 
If the user can't use their device for ten minutes each time

112
00:08:09.100 --> 00:08:14.160 
they install an update suddenly right we arrive at two hours lost

113
00:08:14.330 --> 00:08:18.740 
productivity and opportunity per year. Again if we take a relatively

114
00:08:18.740 --> 00:08:23.330 
low and conservative estimation of opportunity cost of fifteen euros an hour

115
00:08:23.570 --> 00:08:27.260 
suddenly that's thirty hours. Still much better than the three

116
00:08:27.260 --> 00:08:32.950 
cents just for the energy but still not quite much on on a grand scale.

117
00:08:34.170 --> 00:08:37.320 
However what we can see here is the principle

118
00:08:38.560 --> 00:08:44.010 
that applies and allows us to to take sustainability requirements

119
00:08:44.310 --> 00:08:48.000 
into functional and non-functional requirements for software.

120
00:08:48.790 --> 00:08:52.940 
For example if we put into our non functional requirements

121
00:08:52.940 --> 00:08:56.770 
to build better quality software that requires less patching,

122
00:08:57.010 --> 00:09:01.820 
we need to ship less updates. We get a better user experience.

123
00:09:02.050 --> 00:09:05.940 
Remember users are confused by updates, they're annoyed by it

124
00:09:06.310 --> 00:09:10.270 
requiring less updates it's probably a good idea not to upset your users.

125
00:09:11.490 --> 00:09:13.640 
And the other thing that we can see is that

126
00:09:14.190 --> 00:09:19.420 
since the energy impact on a global scale of this update process is so huge,

127
00:09:19.670 --> 00:09:22.900 
that actually having higher performance updates.

128
00:09:23.500 --> 00:09:25.380 
So updates that install quicker,

129
00:09:26.060 --> 00:09:29.570 
means less energy consumption on a global scale which might

130
00:09:29.570 --> 00:09:33.410 
not matter as much for the energy part alone to the end user,

131
00:09:33.790 --> 00:09:37.130 
but it might matter to the user experience in terms of using

132
00:09:37.910 --> 00:09:41.840 
wasting less time waiting for the device to install updates.

133
00:09:46.240 --> 00:09:52.700 
Ok so what can we recommend to users to care more for sustainable software.

134
00:09:53.500 --> 00:09:57.390 
So users should try and leverage existing forms of functional

135
00:09:57.390 --> 00:10:00.510 
and non-functional requirements, for example performance of

136
00:10:00.520 --> 00:10:04.930 
the software or the user experience to communicate transparently

137
00:10:04.930 --> 00:10:10.090 
to the vendor about their expectations and setting the expectations

138
00:10:10.290 --> 00:10:12.670 
they have for it for these requirements.
