WEBVTT

1
00:00:04.570 --> 00:00:08.289 
Now, let's focus in more detail on JavaScript.

2
00:00:10.120 --> 00:00:15.039 
Here are some of the language basics: javaScript is a dynamically

3
00:00:15.040 --> 00:00:19.749 
typed language. There are the following primary

4
00:00:19.750 --> 00:00:24.189 
data types: String, Number, Boolean, Function, and

5
00:00:24.190 --> 00:00:28.659 
object. the control structures of JavaScript

6
00:00:28.660 --> 00:00:31.539 
are conditions and loops.

7
00:00:31.540 --> 00:00:36.369 
there are functions away available, objects and

8
00:00:36.370 --> 00:00:39.579 
inheritance that is organized by so-called prototypes.

9
00:00:41.080 --> 00:00:45.321 
JavaScript provides some pre-defined objects, for example, Array, Date, Math, Window,

10
00:00:47.740 --> 00:00:52.749 
Document, as well as object from the document object

11
00:00:52.750 --> 00:00:53.750 
model (DOM).

12
00:00:54.860 --> 00:00:59.419 
Very important for the functionality of JavaScript are the so-called event

13
00:00:59.420 --> 00:01:04.609 
handlers, event handlers that allow

14
00:01:04.610 --> 00:01:09.529 
on mouse click of the user the script to interact with

15
00:01:09.530 --> 00:01:10.530 
the DOM elements.

16
00:01:11.690 --> 00:01:16.489 
And here, it is the source of the official reference

17
00:01:16.490 --> 00:01:21.219 
of JavaScript in the web from the W3C school's

18
00:01:21.220 --> 00:01:24.338 
webpage or the Mozilla's

19
00:01:27.170 --> 00:01:28.170 
webpage.

20
00:01:29.840 --> 00:01:33.859 
Let's look to the variables into the types of JavaScript.

21
00:01:33.860 --> 00:01:38.569 
The variables allow to store value for a program and

22
00:01:38.570 --> 00:01:43.339 
to access them later or by the identifier.

23
00:01:43.340 --> 00:01:47.899 
Here is an example The variable for a hello

24
00:01:47.900 --> 00:01:51.709 
is Hello World, this is a key word.

25
00:01:51.710 --> 00:01:56.329 
Hello is the identifier, and the Hello World,

26
00:01:56.330 --> 00:02:00.019 
that is the value of that variable.

27
00:02:01.760 --> 00:02:07.439 
Types define what sort of values can be stored in a variable.

28
00:02:07.440 --> 00:02:11.029 
Are they strings, are they numbers or others.

29
00:02:12.050 --> 00:02:16.759 
The concept of dynamic typing this is

30
00:02:16.760 --> 00:02:21.769 
characteristic of JavaScript is in contrast

31
00:02:21.770 --> 00:02:25.505 
to the static typing that's, for example, applied

32
00:02:27.860 --> 00:02:28.939 
in Java.

33
00:02:30.140 --> 00:02:34.122 
In the dynamic typing, dynamic typing language,there the

34
00:02:35.780 --> 00:02:40.699 
variables can change their type over the time.

35
00:02:40.700 --> 00:02:45.169 
Functions can return values from any time, and

36
00:02:45.170 --> 00:02:48.769 
the functions can also take parameters of any type.

37
00:02:48.770 --> 00:02:53.419 
This is characteristic of this dynamic typing

38
00:02:53.420 --> 00:02:54.420 
concept.

39
00:02:55.400 --> 00:03:00.529 
In contrast to this is the concept of static typing

40
00:03:00.530 --> 00:03:05.569 
and in the static typing the variables can only store values of

41
00:03:05.570 --> 00:03:07.699 
that of the declared type.

42
00:03:07.700 --> 00:03:12.649 
So, functions can only return values of the declared type

43
00:03:12.650 --> 00:03:17.089 
and functions can only take parameters of the declared type.

44
00:03:17.090 --> 00:03:21.619 
Since our principles of programing languages each side has an

45
00:03:21.620 --> 00:03:23.629 
advantage, has its disadvantages.

46
00:03:23.630 --> 00:03:28.429 
Important to remember that JavaScript works with dynamic

47
00:03:28.430 --> 00:03:33.169 
typing and always dynamic typing, and Java allows

48
00:03:33.170 --> 00:03:34.170 
static typing.

49
00:03:36.800 --> 00:03:41.539 
Variables in JavaScript are only accessible within a certain area

50
00:03:41.540 --> 00:03:44.360 
of the code, this is the so-called Scope.

51
00:03:46.730 --> 00:03:51.259 
One can distinguish between the global scope

52
00:03:51.260 --> 00:03:56.269 
and the local scope. These are the two kind of scopes available

53
00:03:56.270 --> 00:04:00.919 
in JavaScript, and generally it holds the following that readability

54
00:04:00.920 --> 00:04:05.719 
of the variable trigger down, but not

55
00:04:05.720 --> 00:04:08.089 
triggered up. What does it mean?

56
00:04:08.090 --> 00:04:12.889 
A variable that's declared in the global scope

57
00:04:12.890 --> 00:04:16.699 
is available also in the local scope.

58
00:04:19.040 --> 00:04:23.629 
But a variable that is declared in the local

59
00:04:23.630 --> 00:04:27.319 
scope is not available in the global scope.

60
00:04:28.670 --> 00:04:32.899 
So, these are the scopes of variables.

61
00:04:32.900 --> 00:04:37.459 
Let's consider a small example here is this example of an HTML

62
00:04:37.460 --> 00:04:42.229 
document with a variable, hello variable and then there is a function

63
00:04:42.230 --> 00:04:46.909 
defined and in the function, there is a new variable

64
00:04:46.910 --> 00:04:51.619 
defined. So, the definition of the function

65
00:04:51.620 --> 00:04:56.599 
in JavaScript that defines a local scope,

66
00:04:56.600 --> 00:05:01.579 
a local scope for that variable. So the variable is only

67
00:05:01.580 --> 00:05:05.364 
a usable valid here inside of these

68
00:05:06.740 --> 00:05:08.077 
curly brackets.

69
00:05:10.640 --> 00:05:15.739 
The control structures, they do not define

70
00:05:15.740 --> 00:05:20.569 
a scope and the global scope is defined

71
00:05:20.570 --> 00:05:25.459 
by the document, by the &lt;HTML&gt; and the &lt;/HTML&gt;.

72
00:05:25.460 --> 00:05:29.213 
So, this variable hello is also well inside

73
00:05:30.840 --> 00:05:36.109 
that local scope, but the variable world is not accessible

74
00:05:36.110 --> 00:05:38.079 
in the global document.

75
00:05:40.940 --> 00:05:46.489 
Let's look at functions, functions in JavaScript are small

76
00:05:46.490 --> 00:05:50.989 
reusable blocks of code to store a certain type of behavior.

77
00:05:52.160 --> 00:05:56.899 
They can be customized by means of parametres, they can

78
00:05:56.900 --> 00:06:01.489 
return a value, and they should be designed

79
00:06:01.490 --> 00:06:05.359 
to execute exactly one action.

80
00:06:08.820 --> 00:06:13.649 
The functions should be given an identifier

81
00:06:13.650 --> 00:06:18.239 
that reflects this action, and they

82
00:06:18.240 --> 00:06:21.660 
should not have any kind of side effects.

83
00:06:23.710 --> 00:06:29.499 
In JavaScript, the functions can be stored in variables.

84
00:06:29.500 --> 00:06:32.469 
In our examples, we used already.

85
00:06:32.470 --> 00:06:37.419 
Here is another example, add is a function

86
00:06:37.420 --> 00:06:42.069 
from A to B and from the user parameters A and B and what's

87
00:06:42.070 --> 00:06:46.899 
given back is the sum of this two numbers.

88
00:06:46.900 --> 00:06:52.299 
So here is the definition and then later on, this

89
00:06:52.300 --> 00:06:56.979 
can be called inside of a script, when

90
00:06:56.980 --> 00:07:01.789 
the sum is needed, there are debug

91
00:07:01.790 --> 00:07:06.279 
console available for JavaScript, which support in

92
00:07:06.280 --> 00:07:07.540 
designing applications.

93
00:07:08.620 --> 00:07:12.369 
Typically, you can access this inside the browser.

94
00:07:12.370 --> 00:07:17.829 
Sometimes you have to switch to the developer mode

95
00:07:17.830 --> 00:07:21.549 
and then here a JavaScript console is available.

96
00:07:23.840 --> 00:07:28.869 
The Java script console, then allows

97
00:07:28.870 --> 00:07:30.960 
to observe the

98
00:07:34.480 --> 00:07:38.379 
code and the performance of the code, execution of the code.

99
00:07:38.380 --> 00:07:42.195 
So it prints and shows the different

100
00:07:44.020 --> 00:07:48.939 
lines of code. It shows, the different actions inside

101
00:07:48.940 --> 00:07:53.559 
this program, so that the designer can

102
00:07:53.560 --> 00:07:59.049 
control and can see what's going on if the system

103
00:07:59.050 --> 00:08:01.779 
executes the code.

104
00:08:03.400 --> 00:08:07.690 
If we look to conditions, then here is an example, if

105
00:08:09.580 --> 00:08:12.819 
{X} { do Y } else { do z }.

106
00:08:12.820 --> 00:08:16.995 
What's interesting here is that there's a shortcut for this type of conditions,

107
00:08:18.490 --> 00:08:22.649 
Ternery operator, which asked if X then Y else Z.

108
00:08:22.650 --> 00:08:26.272 
What is important is that

109
00:08:27.460 --> 00:08:32.168 
JavaScript allows the multiple conditions and

110
00:08:32.169 --> 00:08:37.029 
allows this to describe such conditions by means

111
00:08:37.030 --> 00:08:41.619 
else if. They are switch and case

112
00:08:41.620 --> 00:08:46.359 
statements, which allow it to provide more complex

113
00:08:46.360 --> 00:08:49.209 
decisions, there are loops.

114
00:08:49.210 --> 00:08:53.829 
Here are 3 examples of such loops while "{ X } { do something"

115
00:08:53.830 --> 00:08:57.312 
"as long as X is true }, for { i = 0; i&lt;10; i++ }"

116
00:09:04.370 --> 00:09:09.129 
{ do something 10 times}. So, for example, this loop is performed exactly ten times.

117
00:09:09.130 --> 00:09:13.959 
First Loop is performed as long as X is true, typically

118
00:09:13.960 --> 00:09:19.179 
then the X is changed during the working here and the last example for

119
00:09:19.180 --> 00:09:24.159 
{ X in array } { do something for each element

120
00:09:24.160 --> 00:09:29.319 
of the array }. Data structures

121
00:09:29.320 --> 00:09:34.119 
which are provided in JavaScript, important data structures are Arrays.

122
00:09:34.120 --> 00:09:38.589 
arrays allow to store multiple elements, allow to iterate

123
00:09:38.590 --> 00:09:41.879 
over the elements of the array, the arrays

124
00:09:43.450 --> 00:09:47.409 
allow random access to the elements.

125
00:09:47.410 --> 00:09:52.329 
But what's important to mention, JavaScript only supports numerical arrays

126
00:09:52.330 --> 00:09:54.579 
and not associative arrays.

127
00:09:54.580 --> 00:09:59.169 
Here, for example, a variable birds

128
00:09:59.170 --> 00:10:03.699 
and there are eagle, parrots and sparrow in

129
00:10:03.700 --> 00:10:06.086 
this array.

130
00:10:06.087 --> 00:10:10.689 
Now objects, objects can serve as an associative

131
00:10:10.690 --> 00:10:15.279 
array. Here's an example, now, for example, the

132
00:10:15.280 --> 00:10:19.719 
object sparrow, the variable sparrow, which

133
00:10:19.720 --> 00:10:25.029 
characterized the weight of a sparrow as well the lifetime.

134
00:10:28.420 --> 00:10:33.459 
Objects in Java scripts are defined by means of the keyword

135
00:10:33.460 --> 00:10:37.329 
Function. Function is used to define objects.

136
00:10:38.840 --> 00:10:42.309 
The state is added in the constructor here.

137
00:10:42.310 --> 00:10:46.899 
For example, a function to an object Ball,

138
00:10:46.900 --> 00:10:51.789 
which is described by its coordinates X and Y,

139
00:10:51.790 --> 00:10:56.319 
and then the behavior is added to this object

140
00:10:56.320 --> 00:10:58.560 
by means of the prototype keyword.

141
00:10:59.830 --> 00:11:04.329 
So, Ball prototype move = function(), and now it's explained

142
00:11:04.330 --> 00:11:06.736 
how this coordinates are changing.

143
00:11:09.220 --> 00:11:15.099 
How HTML elements are addressed by means of JavaScript,

144
00:11:15.100 --> 00:11:20.229 
you remember there is a root element of the document object model (DOM), that's

145
00:11:20.230 --> 00:11:21.230 
a document node.

146
00:11:23.080 --> 00:11:28.149 
And starting with this, all other HTML elements can be addressed, for example,

147
00:11:28.150 --> 00:11:32.649 
by their ID, get element by ID, and then

148
00:11:32.650 --> 00:11:37.539 
this element is returned or the elements can be addressed by that name,

149
00:11:37.540 --> 00:11:42.879 
get element by name and then the array is

150
00:11:42.880 --> 00:11:44.980 
returned, which is described there,

151
00:11:47.350 --> 00:11:52.119 
or the HTML elements can be addressed by their HTML tech.

152
00:11:53.290 --> 00:11:57.819 
These are the possibilities. So, there are shortcuts to some elements

153
00:11:57.820 --> 00:12:02.679 
possible, for example, a document.forms and then

154
00:12:02.680 --> 00:12:06.066 
all the forms in the document are returned or documente.image

155
00:12:07.190 --> 00:12:10.600 
then all the images in the document are returned.

156
00:12:11.890 --> 00:12:16.299 
By means of frameworks, frameworks such as JQuerry

157
00:12:18.670 --> 00:12:23.349 
and more simplified accessing of HTML elements is

158
00:12:23.350 --> 00:12:28.090 
possible. We will speak later about such frameworks.

159
00:12:29.800 --> 00:12:33.730 
Very important for the functionality of JavaScript are the event handlers.

160
00:12:34.750 --> 00:12:39.279 
Here HTML elements are what is

161
00:12:39.280 --> 00:12:43.839 
by means of event handlers HTML elements can be supplied

162
00:12:43.840 --> 00:12:45.700 
with additional interactivity.

163
00:12:46.840 --> 00:12:52.179 
So a user interaction with an HTML element, calls

164
00:12:52.180 --> 00:12:57.059 
a JavaScript function here as an example,

165
00:12:57.060 --> 00:13:01.479 
there is the word displayed and

166
00:13:01.480 --> 00:13:06.429 
then there is an action on click

167
00:13:06.430 --> 00:13:09.399 
and then we get to Hello.

168
00:13:09.400 --> 00:13:14.529 
So, we start here with the Hello which is which is shown,

169
00:13:14.530 --> 00:13:19.239 
then there is a possibility to click and on the click, then

170
00:13:19.240 --> 00:13:23.709 
the web page Java script alert

171
00:13:23.710 --> 00:13:25.479 
word is displayed.
