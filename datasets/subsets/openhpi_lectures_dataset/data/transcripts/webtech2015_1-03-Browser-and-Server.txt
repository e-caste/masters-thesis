WEBVTT

1
00:00:04.430 --> 00:00:10.940 
Now let's have a closer look to Browser and Server. Let's start with a web browser.

2
00:00:11.820 --> 00:00:16.760 
Web browser is a tool the user is using to

3
00:00:17.190 --> 00:00:19.110 
navigate through the World Wide Web.

4
00:00:19.830 --> 00:00:23.740 
So is a data, a web document are

5
00:00:24.740 --> 00:00:28.920 
requested by means of the browser and they are displayed

6
00:00:29.560 --> 00:00:31.290 
by the help of the browser.

7
00:00:32.760 --> 00:00:38.830 
Recent browsers, they have this Graphical User Interface.

8
00:00:38.990 --> 00:00:44.880 
And this simply means that it's possible to navigate and to use and

9
00:00:44.890 --> 00:00:51.130 
to control the browser by moving a mouse and click in certain places.

10
00:00:51.910 --> 00:00:54.510 
This simple point and click action

11
00:00:55.220 --> 00:01:01.250 
that makes browsers so easy to use even for inexperienced users.

12
00:01:01.610 --> 00:01:03.740 
And this was the,

13
00:01:05.130 --> 00:01:10.230 
when the first browser came up with such a graphical user interface,

14
00:01:10.530 --> 00:01:14.970 
was at the beginning when the web became popular.

15
00:01:16.900 --> 00:01:21.840 
The browser is a relatively complicated piece of software because

16
00:01:21.840 --> 00:01:26.010 
the browser has to understand a web page. The poser

17
00:01:26.430 --> 00:01:32.280 
has to interpret the HTML language and

18
00:01:33.450 --> 00:01:39.060 
to be able to document, to display the web document in the right way.

19
00:01:39.870 --> 00:01:44.480 
The document consists typically of text, of graphics, of images, videos

20
00:01:45.050 --> 00:01:49.740 
on certain places and positions and the browser has to

21
00:01:50.490 --> 00:01:55.300 
reconstruct this display to display the document,

22
00:01:55.810 --> 00:01:59.330 
has to understand the document structure, has to understand

23
00:01:59.620 --> 00:02:04.990 
the HTML and the CSS comments to be able to display the document

24
00:02:04.990 --> 00:02:05.940 
in the right way.

25
00:02:07.590 --> 00:02:12.700 
There are some famous browsers widely used, for example Chrome,

26
00:02:13.180 --> 00:02:16.110 
Internet Explorer, Firefox, Safari, Opera,

27
00:02:17.140 --> 00:02:25.260 
which are available on almost all platforms and even typically it's also

28
00:02:26.380 --> 00:02:27.930 
accessible for free.

29
00:02:29.480 --> 00:02:37.140 
For each device, PC, mainframe, smartphone for each such platform,

30
00:02:38.990 --> 00:02:42.050 
implementation of such a browser is needed.

31
00:02:44.530 --> 00:02:47.570 
These browsers are really widely distributed.

32
00:02:48.570 --> 00:02:53.490 
Typically browsers do not differ very much in the guidance.

33
00:02:54.340 --> 00:02:59.130 
So modern browsers behave in the same way for the same reaction.

34
00:02:59.490 --> 00:03:02.860 
But it was not true years ago.

35
00:03:03.610 --> 00:03:06.980 
In the beginning of the development of the World Wide Web, the

36
00:03:08.550 --> 00:03:11.210 
red nose assault that

37
00:03:12.120 --> 00:03:14.540 
if they are able to provide the browser

38
00:03:15.100 --> 00:03:18.570 
then they can gate the

39
00:03:19.260 --> 00:03:20.570 
different applications in the web.

40
00:03:21.820 --> 00:03:27.750 
The idea was to, when a user use a browser and then

41
00:03:27.910 --> 00:03:33.460 
this browser has some specific properties and users that have

42
00:03:33.460 --> 00:03:38.010 
learned to deal with these properties, then the user can see

43
00:03:38.050 --> 00:03:41.690 
data in a good way and if it uses another browser.

44
00:03:42.160 --> 00:03:46.630 
But there was a very strong competition in the early nineteenths.

45
00:03:48.610 --> 00:03:56.310 
This competition was known as "browser war" and from that time it results that

46
00:03:57.190 --> 00:04:03.160 
in some details there are differences in the usage of the different browsers.

47
00:04:03.650 --> 00:04:10.850 
Fortunately the browser vendors have understood that it does not make sense

48
00:04:10.990 --> 00:04:16.740 
to artificially create differences between the different browsers.

49
00:04:17.010 --> 00:04:21.540 
They learned that the browser is merely a tool to access web

50
00:04:21.540 --> 00:04:27.640 
pages and web services and that to make value by use of the Web.

51
00:04:27.760 --> 00:04:32.860 
It's not which browser is used. The value comes from the application

52
00:04:32.980 --> 00:04:34.000 
that are used.

53
00:04:36.140 --> 00:04:39.540 
We already mentioned the client/server paradigm,

54
00:04:41.650 --> 00:04:46.390 
which organizes the communication in the World Wide Web and

55
00:04:46.390 --> 00:04:53.460 
in the internet world. So typically the user requests a web document

56
00:04:53.730 --> 00:04:59.220 
over his client and his client is web client as that is a browser.

57
00:05:00.130 --> 00:05:05.720 
The typical way is to click on a link but it's also possible

58
00:05:05.720 --> 00:05:06.990 
to enter an URL.

59
00:05:08.190 --> 00:05:10.960 
Then the browser knows exactly

60
00:05:11.690 --> 00:05:15.790 
from the URL, from the part of the URL, the browser knows exactly

61
00:05:16.320 --> 00:05:19.810 
which document on which server the

62
00:05:20.250 --> 00:05:25.450 
user want to see. So the browser contacts that web server

63
00:05:25.870 --> 00:05:34.350 
and is specified by the URL and it frequently requests

64
00:05:34.350 --> 00:05:35.590 
the desired document.

65
00:05:37.710 --> 00:05:44.280 
Then the server accesses its local system, its local file system and it sends back

66
00:05:44.470 --> 00:05:49.980 
the files specified in the URL, at least if this document

67
00:05:50.660 --> 00:05:59.470 
is free to use. Then the browser receives this document over the internet,

68
00:06:00.740 --> 00:06:07.750 
transported by the HTTP protocol and then the browser has the task to interpret

69
00:06:08.180 --> 00:06:12.970 
the document. To interpret the document that means to understand the

70
00:06:13.530 --> 00:06:18.870 
construction of the web page and then to display it, to see

71
00:06:18.870 --> 00:06:22.660 
which part is a photo, which part is a video, to see where they

72
00:06:22.660 --> 00:06:25.720 
are placed, how they are placed to each other and then

73
00:06:26.180 --> 00:06:30.030 
to bring it to display for the user.

74
00:06:31.600 --> 00:06:35.300 
I already mentioned that the web document requested by the

75
00:06:35.300 --> 00:06:41.620 
web client from the web server is transported by means of the Hypertext Transfer Protocol.

76
00:06:41.750 --> 00:06:47.910 
Not only the document is transported by http but also the request of the client.

77
00:06:48.270 --> 00:06:52.850 
So the protocol that is used to communicate between the client

78
00:06:53.270 --> 00:06:56.570 
and the server is the Hypertext Transfer Protocol.

79
00:06:57.320 --> 00:07:01.630 
The Hypertext Transfer Protocol is a very simple protocol. It is a

80
00:07:02.500 --> 00:07:05.990 
stateless protocol. Stateless means there is no memory

81
00:07:06.580 --> 00:07:08.590 
of earlier data exchange.

82
00:07:09.520 --> 00:07:12.720 
The reason is that the HTTP protocol

83
00:07:13.370 --> 00:07:15.590 
should be very fast.

84
00:07:16.370 --> 00:07:21.810 
It should be possible to request the document in a short time

85
00:07:21.810 --> 00:07:28.200 
and then to receive it back. So the more simple the HTTP protocol is,

86
00:07:28.630 --> 00:07:35.350 
the more speed is possible in this communication. And if one looks to the

87
00:07:36.160 --> 00:07:42.860 ,:
construction of the protocol,then it realizes a simple question/

88
00:07:43.030 --> 00:07:48.500 
answer procedure. The question is a request of the client for document

89
00:07:48.910 --> 00:07:54.220 
and the answer is the reply of the document or the reply of the

90
00:07:54.390 --> 00:07:59.610 
error message, and then finish. Then a new request, a new question

91
00:08:00.470 --> 00:08:02.820 
answer cycle starts.

92
00:08:04.530 --> 00:08:09.270 
The efficiency of the HTTP communication can be increased and can be

93
00:08:09.420 --> 00:08:16.290 
even significantly increased with the help of intermediate systems.

94
00:08:16.760 --> 00:08:20.310 
And there are different such intermediate systems, for example there are

95
00:08:20.410 --> 00:08:25.320 
proxy service, there are gateways. Very important for efficiency are cache

96
00:08:25.530 --> 00:08:29.090 
storages. We will discuss later in more detail

97
00:08:29.980 --> 00:08:31.530 
the role of the systems.

98
00:08:33.210 --> 00:08:39.050 
HTTP protocol over the year was subject to a development process.

99
00:08:40.030 --> 00:08:44.050 
The First Version today is called HTTP/0.9

100
00:08:45.250 --> 00:08:49.900 
emerged in 1989/90 at sometime

101
00:08:50.390 --> 00:08:52.510 
when the web was

102
00:08:54.050 --> 00:09:00.440 
first time developed. Currently we are using the HTTP/1.1

103
00:09:01.070 --> 00:09:06.690 
This is in place since about fifteen years since 1999.

104
00:09:07.100 --> 00:09:12.660 
And in this days HTTP/2.0 is in the

105
00:09:13.150 --> 00:09:17.900 
process of being standardized. So it was developed with new features

106
00:09:18.160 --> 00:09:21.370 
and now it needs to be standardized

107
00:09:22.150 --> 00:09:28.050 
that the browser and the servers are able to understand.

108
00:09:29.210 --> 00:09:36.500 
The new developed HTTP version is based on a research project "Speedy"

109
00:09:36.850 --> 00:09:41.470 
and this research project was in a project initially

110
00:09:42.780 --> 00:09:46.550 
organized and initiated by Google and

111
00:09:47.660 --> 00:09:52.630 
if all works fine then it will be probably be finished this year

112
00:09:52.930 --> 00:09:57.710 
and comes into place end of the year or next year.

113
00:10:00.440 --> 00:10:04.380 
When we use the web, we do also sometimes

114
00:10:05.930 --> 00:10:11.810 
data transfer, for example when we perform, when we use an online banking service

115
00:10:11.980 --> 00:10:13.790 
or other things.

116
00:10:15.690 --> 00:10:18.560 
There are two ways to make such an

117
00:10:19.330 --> 00:10:26.230 
HTTP communication secure. The one this is what really is in place in practice

118
00:10:26.730 --> 00:10:31.790 
is the use of the intermediate protocols, TLS

119
00:10:32.260 --> 00:10:34.710 
Transport Layer Security

120
00:10:35.830 --> 00:10:39.180 
or its predecessor SSL

121
00:10:40.550 --> 00:10:46.030 
as a Secure Sockets Layer. This provides a possibility for a secure,

122
00:10:46.210 --> 00:10:51.040 
common for securing the HTTP communication as SSL originally

123
00:10:51.040 --> 00:10:53.420 
was developed by Netscape and

124
00:10:54.350 --> 00:10:59.010 
was in place very successfully, in place to

125
00:11:00.180 --> 00:11:03.190 
secure HTTP and

126
00:11:04.030 --> 00:11:06.940 
more general communication in the internet.

127
00:11:07.350 --> 00:11:12.950 
The TLS now is a standardized version of the SSL. As a

128
00:11:14.580 --> 00:11:15.860 
second approach to

129
00:11:17.210 --> 00:11:19.570 
secure HTTP protocol.

130
00:11:20.560 --> 00:11:23.720 
This offers an independent communication protocol

131
00:11:24.130 --> 00:11:30.160 
based on HTTP and entailing several security features, but this

132
00:11:30.490 --> 00:11:36.370 
protocol has not been able to establish itself and so its barely used.

133
00:11:40.120 --> 00:11:42.600 
Let's have a look to the other side, to the side of the web server.

134
00:11:43.460 --> 00:11:47.010 
The task and the architecture of a web server is quite simple.

135
00:11:47.660 --> 00:11:52.870 
The server waits for the opening of a connection through the browser and then

136
00:11:53.210 --> 00:11:59.080 
the server receives the request of the browser and it tries to answer

137
00:11:59.450 --> 00:12:00.950 
that browser's request.

138
00:12:02.610 --> 00:12:05.960 
When the answer is sent back to the browser, the server ends

139
00:12:06.840 --> 00:12:10.280 
the connection and waits for a new request.

140
00:12:11.480 --> 00:12:16.270 
So the web server today, a web service is a served software program,

141
00:12:16.460 --> 00:12:21.010 
but typically it runs on a special type of computer, so many

142
00:12:21.010 --> 00:12:25.890 
people call the computer itself where such a server program is running,

143
00:12:26.250 --> 00:12:29.040 
or calls the computer itself a server.

144
00:12:30.040 --> 00:12:34.910 
They fulfill many tasks beyond this, so say

145
00:12:36.010 --> 00:12:41.660 
session management. A keyboard is cookies here. We

146
00:12:41.660 --> 00:12:44.690 
will discuss it later in more detail. They

147
00:12:46.030 --> 00:12:51.570 
entail script interpreter for dynamic web applications. We have

148
00:12:51.570 --> 00:12:56.670 
to discuss this when we discuss server-side web applications. So

149
00:12:57.720 --> 00:13:02.990 
this is a task that needs to be solved by a servers.

150
00:13:06.150 --> 00:13:10.970 
Coming back to a browser and having a look to the browser architecture,

151
00:13:12.640 --> 00:13:16.530 
we already discuss the tasks and the architecture of a browser

152
00:13:16.570 --> 00:13:22.520 
which are considerably more complex than the tasks and architecture of a server.

153
00:13:24.500 --> 00:13:27.020 
After a user input,

154
00:13:29.540 --> 00:13:31.680 
for example requesting a page

155
00:13:32.300 --> 00:13:37.510 
connection to the selected server has to be established to the P connection,

156
00:13:37.990 --> 00:13:41.130 
then the information needs to be read

157
00:13:42.020 --> 00:13:47.120 
from the resources, then sent back by the server,

158
00:13:47.540 --> 00:13:53.190 
then the information has to processed and the display has to

159
00:13:54.440 --> 00:13:56.850 
displayed,

160
00:13:58.760 --> 00:14:05.030 
presented so an interpretation is needed of the structure of the

161
00:14:05.140 --> 00:14:11.920 
HTML document and then the browser has to observe user reactions,

162
00:14:12.290 --> 00:14:15.530 
has to see on which point the user is clicking,

163
00:14:16.020 --> 00:14:19.290 
what he is doing on the graphical interface.

164
00:14:21.740 --> 00:14:26.560 
To solve all these tasks the browser consists conceptually of

165
00:14:26.660 --> 00:14:29.580 
different clients and interpreters

166
00:14:30.460 --> 00:14:34.690 
and all is controlled by a controller.

167
00:14:35.360 --> 00:14:40.500 
So the controller, this is a central instance of the browser architecture.

168
00:14:40.720 --> 00:14:45.900 
It manages and coordinates the actions to be performed. Then

169
00:14:47.110 --> 00:14:52.190 
what are these actions are that mouse clicks needs to be interpreted,

170
00:14:52.440 --> 00:14:56.590 
key strokes need to be understood as the controller

171
00:14:57.510 --> 00:15:03.640 
activates other components of the browser for performing requested operations.

172
00:15:04.040 --> 00:15:09.360 
Beside of the controller, the

173
00:15:10.040 --> 00:15:12.800 
browser needs an HTML interpreter.

174
00:15:13.620 --> 00:15:19.930 
HTML interpreter serves to display the user requested HTML documents

175
00:15:19.940 --> 00:15:26.370 
in a correct way.The interpretation of the HTML text in the HTML document

176
00:15:26.720 --> 00:15:30.330 
needs to be performed by the HTML interpreter.

177
00:15:30.990 --> 00:15:39.190 
the document, information has to processed to be able to present the document

178
00:15:39.510 --> 00:15:45.700 
in the right way as the on-screen display needs to be done by the browser.

179
00:15:46.010 --> 00:15:50.330 
And although the correct interpretation of the user

180
00:15:51.090 --> 00:15:54.990 
elected active elements of the HTML document

181
00:15:55.940 --> 00:16:00.540 
starting from recognizing what is a mouse click to receiving another

182
00:16:00.990 --> 00:16:07.970 
document, up to managing of the relationship between the different displayed and

183
00:16:08.300 --> 00:16:16.400 
android elements, to understand what the user wants to do when user does

184
00:16:16.500 --> 00:16:18.880 
a certain action on the screen.

185
00:16:21.750 --> 00:16:28.430 
We have the controller, we have HTML. Cache is another important component

186
00:16:28.750 --> 00:16:34.480 
of a browser. And cache is a special kind of a memory and the cache serves

187
00:16:34.690 --> 00:16:38.150 
to increase the performance and the throughput of the browser,

188
00:16:38.640 --> 00:16:45.250 
with by the way and by the idea to intermediately store pages

189
00:16:45.480 --> 00:16:51.430 
which are already visited by the user. So if the user wants to go back

190
00:16:51.560 --> 00:16:55.860 
to a document, an HTML document he already has visited

191
00:16:56.340 --> 00:17:01.280 
then it's not requested by original server. No typically, it's

192
00:17:01.280 --> 00:17:06.330 
taken out of the cache, at least as long as the document in the cache

193
00:17:06.810 --> 00:17:10.680 
is similar to the document on the web server.

194
00:17:12.420 --> 00:17:15.060 
So the browser puts a copied copy of the

195
00:17:16.010 --> 00:17:24.090 
read HTML pages in the cache and if the page is requested again,

196
00:17:24.500 --> 00:17:31.170 
then to save time and bandwith the copy is displayed out of the cache

197
00:17:31.410 --> 00:17:35.860 
and not as the new request of the page is done.

198
00:17:36.770 --> 00:17:42.620 
Of course it is only allowed to behave in this way as long as a copy

199
00:17:42.870 --> 00:17:47.360 
in the cache is still valid. So it's an interesting question

200
00:17:48.900 --> 00:17:50.770 
we have to discuss later in more detail.

201
00:17:51.870 --> 00:17:54.760 
So here is all on one glance-

202
00:17:55.860 --> 00:17:58.830 
the input from the mouse or from the keyboard, here's the

203
00:18:01.570 --> 00:18:04.800 
controller, there is an HTML interpreter

204
00:18:05.830 --> 00:18:11.800 
by which it is possible to understand and to process and display

205
00:18:13.450 --> 00:18:16.170 
web page and display on the monitor.

206
00:18:17.250 --> 00:18:19.780 
The HTTP client

207
00:18:20.530 --> 00:18:27.930 
is the one who requests the document from the HTML server. So

208
00:18:28.300 --> 00:18:33.010 
here is a network interface needed to use internet infrastructure

209
00:18:33.010 --> 00:18:34.540 
for requesting the page,

210
00:18:35.340 --> 00:18:41.220 
for sending the request and receiving the answer, and what we also mentioned is

211
00:18:41.390 --> 00:18:47.840 
that modern browser also provides access to other internet services,

212
00:18:47.950 --> 00:18:52.210 
for example two mail service authors, so beside of the HTML,

213
00:18:52.340 --> 00:18:55.780 
HTTP client although other clients placed

214
00:18:56.580 --> 00:19:03.880 
in are components of modern browser, and for the other services also

215
00:19:04.770 --> 00:19:07.310 
corresponding in the pre-desk needed.

216
00:19:08.580 --> 00:19:16.970 
So this is the structure of a browser, you know. To fulfill its service, browser

217
00:19:17.530 --> 00:19:23.810 
need some plug-ins. Plug-ins to enhance the work of a browser.

218
00:19:24.330 --> 00:19:25.980 
Why such plug-ins are needed?

219
00:19:26.970 --> 00:19:31.790 
Plug-ins allow the browser to process and display all the data

220
00:19:32.510 --> 00:19:39.430 
within own data format. Data that does not correspond to the typical formats

221
00:19:39.800 --> 00:19:45.180 
as HTML, CSS pictures and so this is immediately understood

222
00:19:45.190 --> 00:19:50.180 
by the browser. But for example if there are special video or special images,

223
00:19:50.980 --> 00:19:56.260 
and data have special images or video formats then a plug-in is needed,

224
00:19:56.580 --> 00:20:01.620 
so that the browser is able to also display this type of data.

225
00:20:02.290 --> 00:20:08.370 
Here are some prominent examples of such plug-ins Java (Applets), Adobe Flash,

226
00:20:08.630 --> 00:20:13.370 
Microsoft Silverlight, PDF, various audio and video formats

227
00:20:14.300 --> 00:20:20.290 
which can be part of a web document and such plug-ins make

228
00:20:20.290 --> 00:20:26.500 
it possible that the browser is able also to display these type of data.

229
00:20:28.600 --> 00:20:34.370 
There is conceptually different between plug-ins and browser extensions.

230
00:20:35.160 --> 00:20:40.560 
The browser plug-ins are only allowed to display a plug-in specific content

231
00:20:40.790 --> 00:20:44.870 
in a webpage while enhance interpreter

232
00:20:45.490 --> 00:20:48.240 
rendering components,

233
00:20:48.750 --> 00:20:53.560 
and the extensions which are sometimes also called add-ons,

234
00:20:54.390 --> 00:20:58.690 
they modify or extend the functionality of the browser itself.

235
00:20:59.080 --> 00:21:02.790 
So for example ad blocker download helps us

236
00:21:04.280 --> 00:21:09.450 
extend the functionality of the browser. So here we have the two

237
00:21:09.740 --> 00:21:14.910 
differences in extending the browser and their abilities to do.

238
00:21:17.230 --> 00:21:21.930 
The first overview about the inter game between

239
00:21:22.540 --> 00:21:26.510 
browsers and servers, how they work, how they interact which is other.

240
00:21:27.410 --> 00:21:30.380 
Later on in the course, we will go in more details.
