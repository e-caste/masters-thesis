WEBVTT

1
00:00:01.200 --> 00:00:03.359 
Hello, welcome to part two

2
00:00:03.360 --> 00:00:05.549 
of the lesson about IBM i

3
00:00:05.550 --> 00:00:06.550 
architecture.

4
00:00:07.770 --> 00:00:09.719 
In module one, I covered the

5
00:00:09.720 --> 00:00:11.519 
object based architecture and the

6
00:00:11.520 --> 00:00:13.109 
technology independent machine

7
00:00:13.110 --> 00:00:14.009 
interface.

8
00:00:14.010 --> 00:00:16.049 
Now I want to show you some details

9
00:00:16.050 --> 00:00:17.969 
about the single level store

10
00:00:17.970 --> 00:00:19.289 
and the work management.

11
00:00:21.420 --> 00:00:23.379 
At first, have in mind that

12
00:00:23.380 --> 00:00:25.289 
the AS/400 was

13
00:00:25.290 --> 00:00:26.579 
at the time of announcement our

14
00:00:26.580 --> 00:00:29.429 
hosts centric server environment.

15
00:00:29.430 --> 00:00:32.129 
So it's also coming today

16
00:00:32.130 --> 00:00:35.129 
to run more than one application

17
00:00:35.130 --> 00:00:36.959 
inside one operating system

18
00:00:36.960 --> 00:00:37.960 
environment.

19
00:00:38.910 --> 00:00:41.219 
So you use a single

20
00:00:41.220 --> 00:00:43.259 
system instance for

21
00:00:43.260 --> 00:00:45.359 
running mostly all

22
00:00:45.360 --> 00:00:47.009 
applications of company.

23
00:00:48.030 --> 00:00:50.669 
To decide which approach is better

24
00:00:50.670 --> 00:00:52.619 
to run a single application

25
00:00:52.620 --> 00:00:54.809 
in a single operating system

26
00:00:54.810 --> 00:00:56.699 
instance, or to run all

27
00:00:56.700 --> 00:00:58.949 
applications in the same operating

28
00:00:58.950 --> 00:01:00.119 
systems.

29
00:01:00.120 --> 00:01:02.009 
You have to decide a lot

30
00:01:02.010 --> 00:01:03.509 
of questions. You have to answer

31
00:01:03.510 --> 00:01:05.039 
questions about the performance.

32
00:01:05.040 --> 00:01:06.449 
You have to answer questions about

33
00:01:06.450 --> 00:01:07.979 
security. You have to answer

34
00:01:07.980 --> 00:01:09.809 
questions about the availability

35
00:01:09.810 --> 00:01:11.189 
and also question about the

36
00:01:11.190 --> 00:01:13.439 
maintenance effort you need

37
00:01:13.440 --> 00:01:14.440 
and a lot more.

38
00:01:16.260 --> 00:01:18.869 
The scheduling in

39
00:01:18.870 --> 00:01:20.699 
IBM i and

40
00:01:20.700 --> 00:01:23.249 
the scheduling of AS/400, of course,

41
00:01:23.250 --> 00:01:24.719 
was a free level scheduling.

42
00:01:26.010 --> 00:01:27.010 
It's

43
00:01:28.610 --> 00:01:29.989 
at first, a high level

44
00:01:31.280 --> 00:01:33.319 
scheduling which allows

45
00:01:33.320 --> 00:01:35.389 
jobs to compete for the same

46
00:01:35.390 --> 00:01:37.279 
resources and the

47
00:01:37.280 --> 00:01:39.679 
low level scheduling which

48
00:01:39.680 --> 00:01:41.659 
allows processors to

49
00:01:41.660 --> 00:01:43.819 
compete for the CPU

50
00:01:43.820 --> 00:01:45.439 
cycles.

51
00:01:45.440 --> 00:01:46.849 
This is common also in other

52
00:01:46.850 --> 00:01:48.319 
architectures.

53
00:01:48.320 --> 00:01:50.149 
One important difference is the

54
00:01:50.150 --> 00:01:52.129 
intermediate scheduler, the

55
00:01:52.130 --> 00:01:54.379 
intermediate scheduler inside IBM

56
00:01:54.380 --> 00:01:56.749 
i was implemented

57
00:01:56.750 --> 00:01:58.310 
to control the number of

58
00:01:59.870 --> 00:02:01.309 
processes which have access to main

59
00:02:01.310 --> 00:02:02.310 
memory.

60
00:02:02.870 --> 00:02:05.119 
IBM i decided

61
00:02:05.120 --> 00:02:07.459 
to divide main memory

62
00:02:07.460 --> 00:02:09.228 
into pools.

63
00:02:09.229 --> 00:02:11.869 
So with a default configuration

64
00:02:11.870 --> 00:02:14.029 
for pools were created.

65
00:02:14.030 --> 00:02:15.576 
There's a machine pool for system

66
00:02:16.890 --> 00:02:19.379 
processes, there is a

67
00:02:19.380 --> 00:02:20.849 
base pool for batch processes and

68
00:02:20.850 --> 00:02:23.339 
search of jobs, there's an

69
00:02:23.340 --> 00:02:25.199 
interact pool for interactive

70
00:02:25.200 --> 00:02:26.804 
workload and there's a spool pool

71
00:02:26.805 --> 00:02:27.805 
for printing jobs.

72
00:02:28.740 --> 00:02:30.179 
So at the end of the day, they

73
00:02:30.180 --> 00:02:32.039 
separate the environment

74
00:02:32.040 --> 00:02:34.079 
for separate

75
00:02:34.080 --> 00:02:35.969 
workloads, special

76
00:02:35.970 --> 00:02:36.970 
characteristics.

77
00:02:39.450 --> 00:02:41.099 
For each pool, a number

78
00:02:42.210 --> 00:02:44.549 
exist, which controls

79
00:02:44.550 --> 00:02:47.459 
the maximum amount of processes

80
00:02:47.460 --> 00:02:49.559 
which can use this pool.

81
00:02:49.560 --> 00:02:51.779 
This number is called activity level

82
00:02:51.780 --> 00:02:53.699 
and this is the main part of the

83
00:02:53.700 --> 00:02:55.090 
intermediate scheduler.

84
00:02:56.370 --> 00:02:58.469 
So you have these pools,

85
00:02:58.470 --> 00:02:59.939 
you can create more than one, you

86
00:02:59.940 --> 00:03:02.069 
can create up to 64,

87
00:03:02.070 --> 00:03:04.499 
and you can change the pool sizes

88
00:03:04.500 --> 00:03:06.509 
and the activity levels

89
00:03:06.510 --> 00:03:07.979 
if you want.

90
00:03:07.980 --> 00:03:09.359 
If you don't have the knowledge

91
00:03:09.360 --> 00:03:11.309 
about this, you can

92
00:03:11.310 --> 00:03:13.229 
use functionality inside

93
00:03:13.230 --> 00:03:15.479 
IBM i, which is called Performance

94
00:03:15.480 --> 00:03:16.480 
Adjuster.

95
00:03:18.720 --> 00:03:20.669 
Furthermore, the developers of

96
00:03:20.670 --> 00:03:22.529 
IBM i decided to

97
00:03:22.530 --> 00:03:24.299 
use a single level store, which

98
00:03:24.300 --> 00:03:26.699 
mainly means that all processors

99
00:03:26.700 --> 00:03:28.559 
runs in the same virtual address

100
00:03:28.560 --> 00:03:29.560 
space.

101
00:03:29.850 --> 00:03:31.589 
Since all processors runs in the

102
00:03:31.590 --> 00:03:33.179 
same virtual address space.

103
00:03:33.180 --> 00:03:35.009 
There's no need to

104
00:03:35.010 --> 00:03:37.049 
translate an effective address

105
00:03:37.050 --> 00:03:39.089 
of a process to a virtual address

106
00:03:39.090 --> 00:03:41.429 
because they are the same.

107
00:03:41.430 --> 00:03:43.319 
So at the end of the day,

108
00:03:43.320 --> 00:03:45.149 
you have two parts of

109
00:03:45.150 --> 00:03:47.439 
the play,

110
00:03:47.440 --> 00:03:49.559 
you have the good part,

111
00:03:49.560 --> 00:03:51.269 
which means performance and you have

112
00:03:51.270 --> 00:03:53.789 
a bad side, which means security,

113
00:03:53.790 --> 00:03:55.649 
but you can trust me that IBM

114
00:03:55.650 --> 00:03:58.020 
i is very secure.

115
00:04:00.620 --> 00:04:02.479 
There are a lot of work management

116
00:04:02.480 --> 00:04:04.399 
and configurations objects, which is

117
00:04:04.400 --> 00:04:06.439 
necessary for

118
00:04:06.440 --> 00:04:08.689 
the work management

119
00:04:08.690 --> 00:04:10.585 
of IBM i

120
00:04:10.586 --> 00:04:12.219 
to process the jobs,

121
00:04:13.310 --> 00:04:15.259 
one main important thing is

122
00:04:15.260 --> 00:04:17.018 
the subsystem.

123
00:04:17.019 --> 00:04:19.569 
A subsystem is a runtime environment

124
00:04:19.570 --> 00:04:21.369 
which controls the workflow and

125
00:04:21.370 --> 00:04:23.319 
resource usage.

126
00:04:23.320 --> 00:04:24.969 
That can be configured by a

127
00:04:24.970 --> 00:04:26.799 
subsystem description

128
00:04:26.800 --> 00:04:29.049 
so you can tell

129
00:04:29.050 --> 00:04:31.149 
a subsystem, which is

130
00:04:31.150 --> 00:04:34.179 
a job to

131
00:04:34.180 --> 00:04:36.729 
control the pools,

132
00:04:36.730 --> 00:04:38.799 
which process has to go to

133
00:04:38.800 --> 00:04:40.659 
which pool before routing

134
00:04:40.660 --> 00:04:42.519 
entry, you can

135
00:04:42.520 --> 00:04:43.520 
tell

136
00:04:44.580 --> 00:04:46.769 
the subsystem

137
00:04:46.770 --> 00:04:48.299 
which program is

138
00:04:49.740 --> 00:04:51.659 
the right one for executing the

139
00:04:51.660 --> 00:04:54.479 
task, and you can also

140
00:04:54.480 --> 00:04:56.369 
give them a class

141
00:04:56.370 --> 00:04:58.469 
where other parameters

142
00:04:58.470 --> 00:05:00.509 
are defined, like the

143
00:05:00.510 --> 00:05:02.849 
CPU priority.

144
00:05:02.850 --> 00:05:05.039 
Knowledge about these environments

145
00:05:05.040 --> 00:05:06.389 
is very important for getting

146
00:05:06.390 --> 00:05:07.390 
performance.
