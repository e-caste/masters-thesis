WEBVTT

1
00:00:04.790 --> 00:00:10.170 
Now let's start to consider the hypertext transfer protocol HTTP.

2
00:00:11.420 --> 00:00:12.190 
The World Wide Web

3
00:00:13.560 --> 00:00:18.860 
this is a giant hypermedia system with world wide distributed resources

4
00:00:20.370 --> 00:00:26.310 
and web resources can be accessed by means of the HTTP protocol.

5
00:00:27.020 --> 00:00:32.510 
The HTTP protocol provides procedures for the retrieval of resources

6
00:00:32.960 --> 00:00:37.690 
and the resources need to be identified by URIs.

7
00:00:39.590 --> 00:00:44.280 
The HTTP is a Hypertext Transfer Protocol

8
00:00:44.740 --> 00:00:50.390 
regulates communication between the information requesting web browser,

9
00:00:50.710 --> 00:00:56.580 
that is the HTTP client, and the information providing web server, this is the

10
00:00:56.710 --> 00:01:04.610 
HTTP server. Users do not get in touch with HTTP typically they do not

11
00:01:05.030 --> 00:01:09.980 
because the HTTP is run behind the scene of

12
00:01:10.850 --> 00:01:15.490 
using a browser the browser provides possibilities for the user

13
00:01:15.810 --> 00:01:20.920 
to intuitively request the resource, for example, by underlining a word and

14
00:01:21.180 --> 00:01:25.190 
the user can make a mouse click and then automatically the

15
00:01:26.210 --> 00:01:30.880 
browser interprets this as a request of a resource,

16
00:01:31.370 --> 00:01:35.990 
behind that there is a link and the link exactly described

17
00:01:36.060 --> 00:01:38.190 
which is a resource the user want to see

18
00:01:38.710 --> 00:01:44.710 
and then the HTTP protocol is started to request this resource

19
00:01:45.100 --> 00:01:48.680 
and then the browser after responding the resource after

20
00:01:49.100 --> 00:01:50.430 
receiving the resource,

21
00:01:51.100 --> 00:01:53.740 
this browser displays it to the user.

22
00:01:55.210 --> 00:01:59.980 
So the HTTP protocol is one of the very important part of the web.

23
00:02:02.080 --> 00:02:07.590 
The protocol and it relies on a reliable connection based transport

24
00:02:07.590 --> 00:02:09.010 
service of the internet

25
00:02:09.610 --> 00:02:11.650 
that is a TCP protocol

26
00:02:12.530 --> 00:02:15.200 
and the HTTP protocol

27
00:02:16.170 --> 00:02:20.710 
is based on this TCP protocol it is a very

28
00:02:21.480 --> 00:02:25.090 
very fast protocol so it is state less

29
00:02:25.990 --> 00:02:31.040 
and it follows a very simple request/response scheme,

30
00:02:33.050 --> 00:02:37.290 
and this is how the request/response procedure looks like: the browser

31
00:02:37.540 --> 00:02:43.110 
is the HTTP client and the browser indicates a communication

32
00:02:43.580 --> 00:02:47.430 
by requesting information resource

33
00:02:48.150 --> 00:02:52.730 
from HTTP server, the information resource is characterized

34
00:02:52.740 --> 00:02:59.610 
by URI, typically URL informal resource locator and

35
00:03:00.240 --> 00:03:05.510 
the server is exactly described in that URL and

36
00:03:05.920 --> 00:03:08.820 
the resource is stored at this HTTP server.

37
00:03:10.120 --> 00:03:14.820 
If the web server receives such an request from a client

38
00:03:15.290 --> 00:03:19.830 
the web server accepts this request and processes it.

39
00:03:20.810 --> 00:03:26.040 
If the resource is available and if the browser can gain access to it

40
00:03:26.510 --> 00:03:30.400 
the server sends the resource together with a positive status code

41
00:03:30.680 --> 00:03:33.780 
back to the requesting client

42
00:03:34.470 --> 00:03:39.910 
and if the resource is not available or if an access is prohibited

43
00:03:40.160 --> 00:03:44.850 
the server sends a negative status code back to the requesting client.

44
00:03:46.390 --> 00:03:50.910 
HTTP requests can be triggered in different way: they can be

45
00:03:50.910 --> 00:03:55.730 
triggered by an explicit user action, for example, clicking an

46
00:03:55.730 --> 00:03:58.360 
hyperlink or entering an URL but

47
00:03:59.540 --> 00:04:04.030 
HTTP request can also be triggered implicitly by the browser,

48
00:04:04.150 --> 00:04:07.820 
for example, to load an embedded resource, for example,

49
00:04:08.430 --> 00:04:11.540 
an image or other things.

50
00:04:12.780 --> 00:04:19.560 
And this is how a simple client server architecture looks like for HTTP.

51
00:04:19.790 --> 00:04:24.840 
We have the client, client is a browser and we have the HTTP server

52
00:04:25.170 --> 00:04:32.790 
and then the request/response scheme is that the client initiates

53
00:04:33.290 --> 00:04:38.510 
to request a document from the HTTP server and then the HTTPs server

54
00:04:38.710 --> 00:04:39.990 
delivers the document

55
00:04:40.660 --> 00:04:44.570 
or delivers a status code to inform the client,

56
00:04:45.870 --> 00:04:48.380 
that for example the document is not available .

57
00:04:49.690 --> 00:04:56.400 
Client/server interaction in a very simple way and the request/response scheme

58
00:04:56.540 --> 00:05:01.650 
as the basic structure of the HTTP protocol.

59
00:05:03.710 --> 00:05:07.570 
HTTP has a number of basic comments and

60
00:05:08.560 --> 00:05:12.950 
HTTP is based on a defined message format,

61
00:05:13.820 --> 00:05:21.060 
for example, GET is used to describe request of a web

62
00:05:21.300 --> 00:05:28.710 
resource, HAD - a request request web resource but expect only header

63
00:05:29.320 --> 00:05:32.880 
information in the response, then we have PUT -

64
00:05:33.790 --> 00:05:42.050 
a request to write a web resource, we have a component POST - request to append

65
00:05:42.250 --> 00:05:48.030 
information to a web server, we have method DELETE requesting

66
00:05:48.030 --> 00:05:51.990 
and to remove a web resource and this are the

67
00:05:52.720 --> 00:05:58.860 
basic components and until the emergency of REST-style web services,

68
00:05:59.360 --> 00:06:02.840 
we will discuss this later in other weeks,

69
00:06:03.440 --> 00:06:10.470 
only GET and POST where used and implemented widely by browsers and HTTP servers.

70
00:06:12.340 --> 00:06:17.030 
The HTTP request as well as the HTTP response

71
00:06:18.410 --> 00:06:21.730 
has an header and a body section

72
00:06:23.900 --> 00:06:29.280 
in their message format which is defined for HTTP.

73
00:06:30.240 --> 00:06:35.720 
HTTP responses always have a status, for example, 200 OK

74
00:06:35.770 --> 00:06:39.400 
or 404 for Resource not found.

75
00:06:41.910 --> 00:06:46.010 
In practical application the interaction between the browser and the server

76
00:06:46.150 --> 00:06:47.990 
is much more complicated,

77
00:06:49.020 --> 00:06:53.930 
because there are many intermediate systems. Intermediate systems -

78
00:06:53.990 --> 00:06:56.080 
proxy servers or gateways

79
00:06:56.700 --> 00:07:02.930 
which are designed to make the communication more efficient,

80
00:07:03.950 --> 00:07:08.620 
so for example proxy server. Proxy servers are intermediate systems and

81
00:07:08.770 --> 00:07:13.190 
proxy servers play a hybrid role in the communication between

82
00:07:13.190 --> 00:07:14.250 
the client and server.

83
00:07:15.250 --> 00:07:19.330 
A proxy server works as a server to the client

84
00:07:19.980 --> 00:07:23.940 
if it can carry out a request based on an earlier communication,

85
00:07:24.020 --> 00:07:28.860 
which is stored in the cache of the proxy server. A cache is an intermediate

86
00:07:29.310 --> 00:07:36.160 
memory and we will discuss this later, it's used to

87
00:07:37.710 --> 00:07:41.900 
make the communication more efficient in a sense that if

88
00:07:42.550 --> 00:07:45.940 
a web resource was already in the intermediate

89
00:07:46.490 --> 00:07:51.150 
memory then it is not requested from the origin server it's

90
00:07:51.180 --> 00:07:52.610 
sent back to the client.

91
00:07:54.350 --> 00:07:58.970 
Compared to the server, the proxy server works as a client.

92
00:07:59.960 --> 00:08:03.450 
A client in forwarding a client's request

93
00:08:06.070 --> 00:08:10.020 
when the proxy server, for example, has not cached

94
00:08:10.430 --> 00:08:13.150 
that document that's requested by the client.

95
00:08:14.170 --> 00:08:18.510 
So in the simple client-server model I showed in

96
00:08:19.370 --> 00:08:24.070 
the last slide, here we have intermediate systems. Intermediate

97
00:08:24.070 --> 00:08:28.290 
system and proxy server is one example of such an intermediate systems.

98
00:08:30.050 --> 00:08:34.610 
One can configure it in a way that all browser requests can

99
00:08:34.610 --> 00:08:36.450 
be routed over a proxy server

100
00:08:37.550 --> 00:08:40.090 
particularly when we discuss about caches

101
00:08:40.500 --> 00:08:44.790 
and a very important method to make the traffic in the World

102
00:08:44.790 --> 00:08:49.580 
Wide Web more efficient then we see that it makes sense, for example, to

103
00:08:50.760 --> 00:08:56.740 
root all the request out of an internet over such a proxy server.

104
00:08:58.140 --> 00:09:02.670 
If we look to the illustration then we see it's a little bit

105
00:09:02.670 --> 00:09:08.800 
more complicated than the image before. We have the HTTP client

106
00:09:08.830 --> 00:09:14.220 
that's our web browser, we have see HTTP server (origin server)

107
00:09:14.670 --> 00:09:20.090 
where the documents are placed and then in the middle we have a proxy server

108
00:09:20.280 --> 00:09:21.780 
and a proxy server which

109
00:09:22.540 --> 00:09:25.840 
is a typical application with such an cache storage.

110
00:09:26.310 --> 00:09:32.670 
So now if the browser sent the request to the server the request is routed

111
00:09:32.900 --> 00:09:38.140 
over the proxy server, so if the request for that document is

112
00:09:38.140 --> 00:09:42.150 
reaching the proxy server and then the proxy server checks whether

113
00:09:42.290 --> 00:09:47.240 
it is able to respond directly back to the browser, so whether

114
00:09:47.240 --> 00:09:51.350 
the document is stored in the cache. If that's the case then the proxy server

115
00:09:51.530 --> 00:09:57.330 
sends the document to the client without forwarding the request

116
00:09:57.340 --> 00:09:58.310 
to the origin server.

117
00:09:59.170 --> 00:10:01.670 
If the proxy server is not able to

118
00:10:02.310 --> 00:10:07.240 
answer the request of the client then it forwards the request

119
00:10:07.250 --> 00:10:10.070 
to the origin server and the origin server

120
00:10:10.780 --> 00:10:15.050 
resent the response, not directly to the browser, it's a

121
00:10:16.030 --> 00:10:18.040 
response to the proxy server.

122
00:10:19.120 --> 00:10:23.510 
The reason is simple that the request was coming from the proxy server

123
00:10:23.850 --> 00:10:30.190 
and then the proxy server puts the resource in its cache and forwards the resource

124
00:10:30.520 --> 00:10:36.190 
to the web browser, to the client, then it has a possibility

125
00:10:36.190 --> 00:10:38.380 
of next time this resource is requested

126
00:10:38.810 --> 00:10:42.090 
the proxy server can answer this directly out of its cache,

127
00:10:42.200 --> 00:10:45.920 
without forwarding is this request to the origin server.

128
00:10:47.700 --> 00:10:50.530 
There are more intermediate systems - gateways.

129
00:10:52.060 --> 00:10:56.550 
Gateways work like proxy server but the client does not

130
00:10:56.960 --> 00:11:03.600 
know this. The gateways are located upstream web servers and

131
00:11:03.610 --> 00:11:09.660 
ease their load or implement some security related access restrictions.

132
00:11:10.140 --> 00:11:13.390 
So also this intermediate systems are used to make

133
00:11:13.900 --> 00:11:16.170 
web traffic more efficient.

134
00:11:17.020 --> 00:11:19.440 
A very known example of such an gateway

135
00:11:21.130 --> 00:11:26.910 
is a load balancers. Load balancers which help to use the resources

136
00:11:27.680 --> 00:11:30.510 
in the web in a balanced way.
