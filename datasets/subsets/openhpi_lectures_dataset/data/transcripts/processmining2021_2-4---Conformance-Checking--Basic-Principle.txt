WEBVTT

1
00:00:00.750 --> 00:00:05.118 
Welcome to this video clip in which we discuss the basic principle behind conformance

2
00:00:05.430 --> 00:00:06.430 
checking.

3
00:00:07.890 --> 00:00:11.761 
So the question we would like to answer in this clip is how to detect violation

4
00:00:12.420 --> 00:00:16.193 
patterns. So we have discussed three different violation patterns in the last

5
00:00:16.890 --> 00:00:21.510 
clip, and now we would like to detect them, of course, in an automated fashion.

6
00:00:22.560 --> 00:00:26.710 
But what is important to realize is that this is not straightforward.

7
00:00:26.730 --> 00:00:30.601 
This can be actually quite complicated because we do not directly observe these

8
00:00:31.170 --> 00:00:34.520 
patterns. So this might be counter-intuitive in the beginning.

9
00:00:34.530 --> 00:00:39.239 
So of course, we observe when activity is missing, but

10
00:00:39.240 --> 00:00:44.130 
then an activity is missing is something that we have to conclude from comparing actually

11
00:00:44.460 --> 00:00:48.821 
the blueprint model and the event log, if we just look at the event log, there is nothing

12
00:00:48.840 --> 00:00:53.399 
missing. There are simply a number of events and that actually something is missing is

13
00:00:53.400 --> 00:00:55.859 
something that we have to conclude from a comparison.

14
00:00:55.890 --> 00:01:00.359 
So what we need to do is just try to explain is we need to

15
00:01:00.360 --> 00:01:03.809 
compare the event log traces against the model traces.

16
00:01:04.200 --> 00:01:07.260 
And this, again, is not particularly trivial.

17
00:01:08.680 --> 00:01:11.669 
So to illustrate this, let's take a look at our claim process

18
00:01:13.150 --> 00:01:15.310 
model that we have used many times before.

19
00:01:15.910 --> 00:01:20.260 
So if I ask you how many traces are allowed according to this model

20
00:01:20.830 --> 00:01:24.400 
and you think about it a little bit, you may realize

21
00:01:25.270 --> 00:01:27.400 
quite a lot. So let's take a look.

22
00:01:28.540 --> 00:01:30.941 
So this is one of probably the expected execution

23
00:01:33.400 --> 00:01:38.139 
path in the sense that we received the claim, we checked claim completeness.

24
00:01:38.410 --> 00:01:40.479 
Then there are these three review steps.

25
00:01:40.480 --> 00:01:44.290 
We take a decision and then in this case, we accept

26
00:01:45.130 --> 00:01:47.410 
the claim and send the approval letter.

27
00:01:49.510 --> 00:01:54.060 
This is a variation of the same trace where the activities

28
00:01:54.070 --> 00:01:58.088 
here in this end split fragment are simply executed in a different order, which is

29
00:01:58.480 --> 00:02:00.489 
completely in line with our expectations.

30
00:02:00.640 --> 00:02:05.049 
As we have explained before, these two branches in this split are

31
00:02:05.170 --> 00:02:07.865 
independent from each other. So this activity reviewing

32
00:02:09.729 --> 00:02:12.370 
the claim internally at any given moment.

33
00:02:13.510 --> 00:02:17.470 
So we simply have to expect that there are a number of different variations.

34
00:02:19.000 --> 00:02:23.799 
So the very same variance we can observe

35
00:02:23.800 --> 00:02:28.030 
just with the difference that the claim is rejected at the end.

36
00:02:28.060 --> 00:02:30.969 
So these are these two variants here. These are trace variants.

37
00:02:31.420 --> 00:02:36.159 
And this just shows, OK, whatever

38
00:02:36.160 --> 00:02:40.621 
trace we have that ends with acceptance emails and with the rejections of course.

39
00:02:42.490 --> 00:02:46.410 
If we look at the loop here in the beginning, we realize that, of course, we can

40
00:02:46.990 --> 00:02:51.189 
go through this loop if we realize, after checking claim completeness, that the claim is

41
00:02:51.190 --> 00:02:55.629 
indeed incomplete. We ask for an update and we receive the update.

42
00:02:55.870 --> 00:03:00.360 
So in this is variant, we just do that once and

43
00:03:00.380 --> 00:03:04.240 
end up with this transparent where in the end the claim is still rejected.

44
00:03:04.330 --> 00:03:07.490 
So again, when we observe the same variant with accepting the claim.

45
00:03:09.370 --> 00:03:11.869 
As I've also explained before, this loop here might

46
00:03:13.840 --> 00:03:17.907 
be executed several times. So here you see an example where we go through this loop

47
00:03:18.310 --> 00:03:22.132 
twice. So we have asked for additional material and then we realized the claim

48
00:03:22.990 --> 00:03:27.129 
is still incomplete. So we go through this iteration once again.

49
00:03:27.700 --> 00:03:32.619 
And as we've also explained before, this loop technically

50
00:03:32.620 --> 00:03:34.539 
can be executed many, many, many times.

51
00:03:34.810 --> 00:03:38.485 
So if you want a proper answer to the question, how many traces are allowed

52
00:03:39.310 --> 00:03:42.780 
according to this model? The answer is an infinite number of traces.

53
00:03:43.240 --> 00:03:46.834 
And this makes the comparison of event log traces and model traces

54
00:03:47.950 --> 00:03:52.599 
quite complicated because we obviously have to first make a choice when

55
00:03:52.600 --> 00:03:56.949 
we have one particular event log trace to which model tries do we actually

56
00:03:57.250 --> 00:03:58.250 
compare it to?

57
00:04:02.160 --> 00:04:06.660 
So the idea is yet that we compare,

58
00:04:06.690 --> 00:04:10.680 
what then we can detect violation patterns by comparing a considered trace from the event

59
00:04:11.010 --> 00:04:12.592 
log with the closest race from the log.

60
00:04:13.020 --> 00:04:17.759 
So we have just seen, many traces that the model allows for

61
00:04:18.180 --> 00:04:21.689 
and we now take the closest trace.

62
00:04:21.690 --> 00:04:25.708 
So the trace that is most similar to the event log trace that we are analyzing and

63
00:04:26.250 --> 00:04:27.589 
compare those two.

64
00:04:28.680 --> 00:04:31.699 
So let's look at an example to illustrate this a little bit.

65
00:04:32.670 --> 00:04:35.779 
So this is one trace from event log.

66
00:04:35.790 --> 00:04:39.079 
So nothing exceptional happening here.

67
00:04:39.090 --> 00:04:43.199 
And we received the claim check for completeness, received the

68
00:04:43.560 --> 00:04:48.249 
reviews, decide on the coverage and accept the case and

69
00:04:48.300 --> 00:04:50.500 
claim and send out the approval letter.

70
00:04:52.020 --> 00:04:56.639 
So if we now look into the model and try to find the trace, the model

71
00:04:56.640 --> 00:05:00.658 
trace that is closest to this event log trace, we realized that we actually find a

72
00:05:01.020 --> 00:05:05.089 
perfect match. So this event log trace here, there is a perfect match.

73
00:05:05.100 --> 00:05:08.432 
So this is traced to the model number of them here, respectively, to

74
00:05:09.540 --> 00:05:13.558 
illustrate this a little bit. And what you see is that these two traces, the model

75
00:05:14.220 --> 00:05:16.470 
trace and event log trace perfectly match.

76
00:05:16.920 --> 00:05:21.359 
And if we put them here in such a so-called

77
00:05:21.360 --> 00:05:25.259 
alignment, we see that all the activities from the model

78
00:05:26.010 --> 00:05:30.020 
can be perfectly aligned with the events from the event log.

79
00:05:30.420 --> 00:05:33.003 
Yes, there are no differences, they perfectly match.

80
00:05:34.530 --> 00:05:38.159 
Of course, in the context of conformance checking this is not what we always expect to

81
00:05:38.160 --> 00:05:41.639 
find conformance checking we do, because we suspect at least that there

82
00:05:42.720 --> 00:05:45.959 
are differences between the event log trace and model trace.

83
00:05:46.200 --> 00:05:49.860 
So let's look at an event log trace where this does not work.

84
00:05:50.340 --> 00:05:54.899 
So here you see that we received the claim, then check

85
00:05:54.900 --> 00:05:59.429 
for completeness and then we conduct at least two of these three

86
00:05:59.580 --> 00:06:02.128 
activities that we have done here in this AND split.

87
00:06:03.450 --> 00:06:06.590 
Then we take a decision and we observe another.

88
00:06:06.870 --> 00:06:10.589 
Then we receive the claim review actually and then we accept the claim.

89
00:06:11.250 --> 00:06:14.631 
And now the question is, of course, what you already probably figured

90
00:06:15.690 --> 00:06:17.850 
from my explanation that something is wrong here.

91
00:06:18.150 --> 00:06:20.170 
The question is, of course, what exactly is wrong.

92
00:06:20.190 --> 00:06:24.629 
So what the procedure would be is to look for the most similar

93
00:06:24.630 --> 00:06:29.040 
trace from the model and compare it to this particular event log trace here.

94
00:06:30.060 --> 00:06:34.679 
So if you want to identify the closest model trace,

95
00:06:34.680 --> 00:06:38.299 
we realized that this is actually the very same trace we've just looked at.

96
00:06:38.310 --> 00:06:40.379 
So this is the most similar trace.

97
00:06:41.520 --> 00:06:45.989 
And if we compare the two, you can see that the comparison, of course,

98
00:06:45.990 --> 00:06:47.264 
has a number of gaps here.

99
00:06:48.990 --> 00:06:52.559 
In the beginning, we can simply align everything perfectly.

100
00:06:52.560 --> 00:06:57.089 
We see that we recievei the claim here and in the model trace this works as

101
00:06:57.090 --> 00:07:01.420 
well. So just after reviewing the claim internally, there is a problem.

102
00:07:01.440 --> 00:07:04.429 
So what happens? Well, here we have a misalignment because in

103
00:07:06.060 --> 00:07:10.679 
the model trace, we expect it to receive the claim review, but this

104
00:07:10.680 --> 00:07:12.260 
did not happen in the event log trace.

105
00:07:13.530 --> 00:07:18.209 
So in the event log trace, we take a decision right after

106
00:07:18.450 --> 00:07:22.979 
reviewing the claim internally without waiting for actually receiving

107
00:07:23.160 --> 00:07:27.188 
the review. And this is something that according to the model trace is

108
00:07:28.650 --> 00:07:30.806 
simply not allowed. When we continue further

109
00:07:33.300 --> 00:07:37.709 
to the right, we see that after making the decision the model then

110
00:07:38.460 --> 00:07:43.579 
asks us to send out either acceptance or the rejections

111
00:07:44.130 --> 00:07:48.899 
and what we see here instead in the event log trace, is that after the decision,

112
00:07:49.260 --> 00:07:51.269 
we actually received the claim review.

113
00:07:51.840 --> 00:07:55.429 
So this is another gap here in this alignment.

114
00:07:55.440 --> 00:07:57.694 
So this is something that happened in the event log trace.

115
00:07:58.290 --> 00:08:00.374 
We cannot argue about this, we observed it.

116
00:08:00.780 --> 00:08:03.989 
But the model trace does not allow for that answer.

117
00:08:04.050 --> 00:08:08.249 
Once we have taken the decision, we no longer expect to receive anything

118
00:08:08.670 --> 00:08:10.169 
from the reviews.

119
00:08:11.220 --> 00:08:13.670 
Finally, we see that after approving the claim, in

120
00:08:15.810 --> 00:08:20.171 
the model trace we also send the acceptance letter, which is something that obviously did

121
00:08:20.370 --> 00:08:21.595 
not happen here in the event log trace.

122
00:08:22.890 --> 00:08:27.316 
So what you see here is that by comparing the event log trace

123
00:08:27.830 --> 00:08:31.950 
to the actual behavior is something that we have observed in real life

124
00:08:32.309 --> 00:08:35.298 
with the model trace that is closest to this, we can identify

125
00:08:36.960 --> 00:08:38.899 
a number of gaps.

126
00:08:39.120 --> 00:08:42.629 
So this construct here is called an alignment in academic literature.

127
00:08:42.929 --> 00:08:46.653 
But the important aspect in this, or we are interested in for today, is that

128
00:08:47.370 --> 00:08:51.809 
there are these pairs where we don't have a

129
00:08:51.810 --> 00:08:53.743 
corresponding event in either the event log.

130
00:08:53.744 --> 00:08:57.398 
So here's something happened in the model that did not happen in the event log.

131
00:08:57.840 --> 00:09:02.359 
And here something happened in the event log that we did

132
00:09:02.360 --> 00:09:05.119 
not expect to happen in the model.
