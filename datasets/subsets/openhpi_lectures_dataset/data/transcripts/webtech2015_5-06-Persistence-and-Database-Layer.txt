WEBVTT

1
00:00:04.790 --> 00:00:08.780 
Now we want to speak about the Persistence and the Database Layer.

2
00:00:10.720 --> 00:00:15.740 
Question is how is data of a web application accessed and stored

3
00:00:16.310 --> 00:00:17.110 
on the web server.

4
00:00:18.680 --> 00:00:21.910 
The web applications typically are designed

5
00:00:22.340 --> 00:00:24.520 
in different layers to

6
00:00:25.500 --> 00:00:30.130 
make this more clear and structured. There is a presentation layer

7
00:00:30.340 --> 00:00:31.500 
that cares how the

8
00:00:32.750 --> 00:00:35.800 
data, how the results are presented to the user.

9
00:00:36.390 --> 00:00:41.570 
There's a so-called web service layer that contains the application logic

10
00:00:42.080 --> 00:00:46.340 
and there is a data persistence layer and the database layer.

11
00:00:46.870 --> 00:00:51.840 
And the id of this data persistence layer separated from

12
00:00:51.840 --> 00:00:56.320 
the database layer is to increase the efficiency of the database access.

13
00:00:56.930 --> 00:00:59.510 
So originally this was one-

14
00:01:00.890 --> 00:01:04.690 
access of the database but to make this more easy,

15
00:01:05.330 --> 00:01:09.670 
it separated in two layers- in the data persistence layer and

16
00:01:09.670 --> 00:01:10.840 
in the database layer.

17
00:01:12.430 --> 00:01:18.100 
So the data persistent layer also called data access layer

18
00:01:18.960 --> 00:01:23.640 
is an intermediate layer between the application logic layer

19
00:01:23.780 --> 00:01:26.890 
and the database layer with the database.

20
00:01:27.350 --> 00:01:30.590 
And the idea is to reduce the coupling

21
00:01:31.320 --> 00:01:37.730 
by isolating the rest of the application layers from the database layer.

22
00:01:39.290 --> 00:01:43.690 
So here we have the presentation layer, we have the web service layer

23
00:01:44.030 --> 00:01:49.870 
and then we have this data persistence layer. So the idea, later

24
00:01:49.870 --> 00:01:53.530 
we will see, that the service interface, the

25
00:01:55.920 --> 00:02:01.900 
application logic is not necessary every time to interact with the database,

26
00:02:02.440 --> 00:02:07.430 
but to provide the data here in a persistent way

27
00:02:07.910 --> 00:02:09.680 
on the data persistence layer.

28
00:02:12.110 --> 00:02:12.540 
The

29
00:02:14.580 --> 00:02:19.480 
idea is that the data persistence layer must be able to support

30
00:02:19.610 --> 00:02:25.820 
the complex data requirements of an application. So

31
00:02:27.190 --> 00:02:29.370 
precompute data

32
00:02:30.200 --> 00:02:36.590 
that are accessed by the application can be provided more efficiently

33
00:02:36.590 --> 00:02:41.580 
by the data persistence layer then directly out of a database.

34
00:02:42.630 --> 00:02:47.780 
So the introduction of such a data persistence layer- the idea is

35
00:02:47.930 --> 00:02:53.720 
to increase the scalability and to improve the performance

36
00:02:54.410 --> 00:02:56.280 
of the web data access.

37
00:02:57.670 --> 00:03:03.590 
So a well designed data persistence layer can drastically improve the performance

38
00:03:03.810 --> 00:03:05.620 
of the entire application.

39
00:03:06.330 --> 00:03:11.320 
So the success factors for building such a data persistence layer are

40
00:03:12.120 --> 00:03:17.670 
to improve the built in runtime performance and to

41
00:03:18.180 --> 00:03:24.740 
improve scalability of the application. Then to raise developer productivity

42
00:03:25.030 --> 00:03:28.990 
and code maintainability, and to write the high

43
00:03:29.700 --> 00:03:33.980 
availability features for the deployment of the application.

44
00:03:35.060 --> 00:03:40.490 
Such a data persistence layer and the idea behind came from

45
00:03:40.970 --> 00:03:45.330 
object orientation. So the object oriented data persistence layer

46
00:03:45.770 --> 00:03:50.470 
uses persistent objects for data access on storage.

47
00:03:51.140 --> 00:03:55.770 
It improves in this way the usability and maintainability,

48
00:03:56.340 --> 00:04:02.000 
and treats persistent objects the same as any other type of object.

49
00:04:02.810 --> 00:04:09.820 
A data persistence layer applies the object or in the data persistence layer

50
00:04:10.520 --> 00:04:14.560 
the object relational mapping is applied

51
00:04:15.120 --> 00:04:19.270 
to take advantage from the object oriented programming and

52
00:04:19.270 --> 00:04:22.490 
from the ideas behind the object oriented programming.

53
00:04:24.230 --> 00:04:27.590 
So the OO subject oriented programming concepts

54
00:04:28.840 --> 00:04:30.300 
which are very useful

55
00:04:31.270 --> 00:04:37.260 
that of encapsulation, that of abstraction and reusability and

56
00:04:38.720 --> 00:04:43.330 
by means of introducing such object oriented data persistent layers.

57
00:04:43.810 --> 00:04:49.060 
These concepts can be applied which allow

58
00:04:49.490 --> 00:04:55.680 
to make it easier and to make it easier to manipulate the data.

59
00:04:57.140 --> 00:05:03.780 
The obtained information in the related tables becomes as simple

60
00:05:03.790 --> 00:05:08.270 
as accessing an object attribute. So this is an

61
00:05:08.720 --> 00:05:13.580 
explanation why the performance may be increased so much.

62
00:05:14.280 --> 00:05:19.530 
So the object relational mapping tools

63
00:05:20.250 --> 00:05:25.010 
are available for almost all mainstream programming languages.

64
00:05:25.460 --> 00:05:29.690 
So for example the Hibernate for java, the

65
00:05:30.140 --> 00:05:33.060 
Nhibernate for .NET, in the framework

66
00:05:34.390 --> 00:05:38.140 
the Django for Python languages.

67
00:05:38.690 --> 00:05:40.220 
These are available.

68
00:05:41.790 --> 00:05:47.890 
If we look for mechanisms to improve the performance and the scalability

69
00:05:48.140 --> 00:05:52.210 
by using such persistence data layer, the

70
00:05:53.070 --> 00:05:55.410 
caching provides keyword.

71
00:05:56.570 --> 00:06:01.490 
Caching, Server-side caching is the most common and effective solution

72
00:06:01.900 --> 00:06:05.390 
for performance enhancements of web applications.

73
00:06:06.680 --> 00:06:11.510 
The idea of the sketching is that it works by moving the data

74
00:06:11.830 --> 00:06:17.620 
closer to the application logic layer, and hence reducing the number

75
00:06:18.010 --> 00:06:22.940 
of database request. The factors for designing

76
00:06:23.880 --> 00:06:26.050 
efficient cache solutions are

77
00:06:27.420 --> 00:06:32.380 
how much data can be cached, which data should be cached, what

78
00:06:32.380 --> 00:06:37.450 
kind of caching method should be used- a more static one or dynamic one,

79
00:06:37.760 --> 00:06:40.330 
what are the caching relationships,

80
00:06:41.030 --> 00:06:44.520 
will the cached data remain consistent- that's very important

81
00:06:44.770 --> 00:06:48.370 
because we do not want to work with outdated data.

82
00:06:49.190 --> 00:06:51.950 
We want to work with consistent cache

83
00:06:52.350 --> 00:07:00.130 
and accurate data, if it is distributed across multiple applications.

84
00:07:00.690 --> 00:07:03.620 
So these all are questions which

85
00:07:04.620 --> 00:07:09.680 
are answered by the right caching strategies.

86
00:07:11.710 --> 00:07:15.100 
There are mainly three different caching strategies. The first

87
00:07:15.100 --> 00:07:18.480 
caching strategy is a so-called Static Caching.

88
00:07:19.720 --> 00:07:25.320 
A static cache or also called read-only cache is suited for

89
00:07:25.320 --> 00:07:28.570 
data that remains unchanged during its life cycle.

90
00:07:29.320 --> 00:07:34.130 
So it's not necessary to modify data. Sata as they are

91
00:07:34.840 --> 00:07:38.520 
can be accessed and so in a static cache or

92
00:07:38.980 --> 00:07:42.940 
read only cache, this data are placed for

93
00:07:44.100 --> 00:07:46.750 
to be accessible for the application logic.

94
00:07:47.810 --> 00:07:52.690 
So instead of retrieving the requested data from the database every time,

95
00:07:52.910 --> 00:07:55.850 
the client can simply query the server-side cache

96
00:07:56.260 --> 00:07:59.480 
which in return reduces the overhead of the database calls.

97
00:07:59.500 --> 00:08:03.740 
So first time of course the data has to take out of the database, but

98
00:08:03.910 --> 00:08:09.360 
in a second and third request, the data can immediately provide

99
00:08:09.360 --> 00:08:14.240 
out of the cache at least as long as its data are fresh.

100
00:08:16.440 --> 00:08:22.970 
So the cache only serves performance problems for such read only data.

101
00:08:24.040 --> 00:08:27.540 
At least in the case of the static cache, which may be a portion

102
00:08:27.540 --> 00:08:30.390 
of the entire data model of an application.

103
00:08:32.490 --> 00:08:32.970 
Beside of the

104
00:08:35.610 --> 00:08:39.060 
static cache, there are Dynamic Caches.

105
00:08:39.770 --> 00:08:47.430 
And dynamic cache allows to read and as important also to update the data

106
00:08:47.670 --> 00:08:48.380 
in the cache.

107
00:08:50.160 --> 00:08:54.570 
So in this way it provides an increased performance benefit as it

108
00:08:54.730 --> 00:08:58.850 
immediately impacts response of the updated data.

109
00:09:00.100 --> 00:09:02.750 
What is needed are versioning mechanisms

110
00:09:03.420 --> 00:09:07.700 
which need to be applied for solving the multiple access problem.

111
00:09:08.110 --> 00:09:11.480 
If data are modified

112
00:09:12.480 --> 00:09:16.730 
it's very important to see whether the old data need to be

113
00:09:16.730 --> 00:09:21.010 
accessed or whether the updated data need to be accessed, and to help this

114
00:09:21.440 --> 00:09:24.520 
versioning mechanisms can be used.

115
00:09:25.210 --> 00:09:28.310 
And the idea behind is to assign a version number

116
00:09:28.780 --> 00:09:35.080 
to the different revisions of the data. So every time via this version number,

117
00:09:35.540 --> 00:09:39.730 
it can be clarified which version of the data

118
00:09:40.320 --> 00:09:41.330 
are requested.

119
00:09:43.170 --> 00:09:45.060 
The cache need to know

120
00:09:46.280 --> 00:09:49.300 
if a threat is attempting the update

121
00:09:50.300 --> 00:09:55.530 
stated data and improves the performance since the data in

122
00:09:55.530 --> 00:09:57.270 
the cache will not be locked.

123
00:09:59.750 --> 00:10:04.440 
Beside of the static and the dynamic cache, there is a third type

124
00:10:04.440 --> 00:10:06.310 
of cache- this is a Distributed Cache.

125
00:10:07.520 --> 00:10:13.210 
Distributed caches are simply a cluster of dynamic cache, dynamic cache

126
00:10:13.500 --> 00:10:16.850 
for distributed applications.

127
00:10:17.450 --> 00:10:22.820 
And the idea of a distributed cache is that they address the

128
00:10:22.820 --> 00:10:28.720 
scalability and the high availability of enterprise, particular of enterprise applications

129
00:10:28.850 --> 00:10:35.850 
which run on different places, and then for example the place

130
00:10:36.310 --> 00:10:38.570 
data can be accessed at that place,

131
00:10:39.500 --> 00:10:44.860 
performance and communication can be organized in a most efficient way.

132
00:10:45.680 --> 00:10:51.430 
What is important here is that all application catches need to be synchronized

133
00:10:51.780 --> 00:10:55.040 
because it's important that the data are the same

134
00:10:55.460 --> 00:10:58.310 
even if they are cached on different places.

135
00:10:59.360 --> 00:11:02.650 
That means when one single server goes down

136
00:11:03.070 --> 00:11:08.480 
then the other servers are easily able to

137
00:11:09.080 --> 00:11:16.050 
take over the work of the server and can provide data

138
00:11:16.780 --> 00:11:21.290 
in the same way. So this is a picture of the distributed cache.

139
00:11:21.290 --> 00:11:25.250 
We have our database, we have the different servers and on the

140
00:11:25.250 --> 00:11:27.500 
different servers are the different caches

141
00:11:28.240 --> 00:11:33.970 
of the data, and the client can access the data over a different servers.

142
00:11:34.260 --> 00:11:39.890 
And so it's very important to make sure that the data that

143
00:11:39.890 --> 00:11:43.450 
are cached on the different places, on the different servers

144
00:11:44.430 --> 00:11:48.950 
are synchronized and are available in the same way, in

145
00:11:49.520 --> 00:11:51.450 
the same version way.
