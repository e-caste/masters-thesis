WEBVTT

1
00:00:01.030 --> 00:00:04.800 
Welcome to video clip 3.7 in
which we check soundness.

2
00:00:06.710 --> 00:00:11.610 
So how do we check soundness? What we
did so far is we have transformed

3
00:00:11.960 --> 00:00:14.460 
our BPMN process
model to petrinets.

4
00:00:15.790 --> 00:00:20.440 
We learned how to create a
reachability graph from a petri net.

5
00:00:21.310 --> 00:00:25.100 
And now we want to use the reachability
graph to check soundness

6
00:00:26.140 --> 00:00:30.140 
and of course we need to check each
of the three soundness properties.

7
00:00:30.840 --> 00:00:35.610 
First we need to check if starting
is in state i so that's one

8
00:00:35.610 --> 00:00:39.120 
token in the net exactly
on this place i.

9
00:00:39.720 --> 00:00:44.610 
All paths will reach a state in which
there is one token on place o.

10
00:00:45.110 --> 00:00:47.810 
Regardless of what I do I will
always reach a state in which

11
00:00:47.810 --> 00:00:49.200 
there is a token on o.

12
00:00:50.380 --> 00:00:55.020 
If a state is reached with a token on
place o, all other places are empty

13
00:00:55.160 --> 00:00:57.780 
to avoid remaining
activities and livelock.

14
00:00:58.840 --> 00:01:02.970 
Three for each transition t the
petri net there is an arc in

15
00:01:02.970 --> 00:01:06.080 
the reachability graph that is
marked t. So there are no dead

16
00:01:06.180 --> 00:01:06.880 
transitions.

17
00:01:09.130 --> 00:01:12.000 
There is a fairness property
that means all decisions that

18
00:01:12.000 --> 00:01:15.640 
a process can take will be taken
eventually. So transitions

19
00:01:15.640 --> 00:01:20.030 
do not start. That's a a typical
fairness property that we also

20
00:01:20.030 --> 00:01:21.600 
assume here for
the analysis.

21
00:01:22.970 --> 00:01:27.000 
Ok so first we translate the
process model to petrinet.

22
00:01:27.000 --> 00:01:30.700 
This is what we did in
the previous video clip

23
00:01:31.370 --> 00:01:35.440 
and we did this for this
register claim process where

24
00:01:35.680 --> 00:01:39.880 
we can receive a claim by
surface mail, fax or website.

25
00:01:40.310 --> 00:01:42.100 
And then we have

26
00:01:42.810 --> 00:01:46.550 
in some cases we need to register
the claim, in all cases

27
00:01:46.550 --> 00:01:50.200 
we decide on the claim
coverage either prepare

28
00:01:50.640 --> 00:01:54.360 
send and prepare letter of approval,
prepare letter of rejection

29
00:01:54.360 --> 00:01:56.990 
and the process
then terminates.

30
00:01:58.240 --> 00:02:00.850 
And we discussed
previously that

31
00:02:01.620 --> 00:02:05.170 
how the petrinet the respect
of petrinets looks like.

32
00:02:06.230 --> 00:02:09.460 
Now we can we need to

33
00:02:10.440 --> 00:02:14.870 
create the reachability graph
of the base of this petrinet

34
00:02:14.870 --> 00:02:17.230 
and I try to do this.

35
00:02:18.020 --> 00:02:20.220 
So I will

36
00:02:21.740 --> 00:02:25.110 
first of all the initial
state is the state i.

37
00:02:28.740 --> 00:02:32.100 
And in this state i only one
transition can fire that is a

38
00:02:32.100 --> 00:02:35.910 
silent transition that we see
here and we are in state p1.

39
00:02:38.370 --> 00:02:43.030 
State p1 either of the three
transitions can fire so we have a

40
00:02:43.670 --> 00:02:45.720 
either the upper
transition can fire

41
00:02:47.280 --> 00:02:48.930 
bringing us to
state p2.

42
00:02:50.230 --> 00:02:53.430 
A middle transition can fire
bringing us to state p3.

43
00:02:55.150 --> 00:02:58.350 
The lower transition can fire
bringing us to state p4.

44
00:03:02.100 --> 00:03:05.040 
P2 we can only reach

45
00:03:05.740 --> 00:03:07.170 
state p5, and we

46
00:03:10.490 --> 00:03:15.230 
reach that by executing the
receive claim by surface mail.

47
00:03:16.340 --> 00:03:22.050 
I'll represent this receive
claim surface mail RCS should

48
00:03:22.540 --> 00:03:25.350 
read receive claim
by surface mail.

49
00:03:26.790 --> 00:03:28.640 
Brings us to p5.

50
00:03:30.260 --> 00:03:35.460 
These two other alternative,
so from p3 I come to p6

51
00:03:38.120 --> 00:03:43.410 
with receive claim by fax
message so that's RCF.

52
00:03:45.560 --> 00:03:52.880 
Ok then from p5 and
p6 I come to p7

53
00:03:55.330 --> 00:03:58.430 
by either of this side and
transition they have here.

54
00:03:59.580 --> 00:04:01.610 
Then we can go to p9,

55
00:04:05.430 --> 00:04:10.290 
by receive claim by register
sorry by register claim.

56
00:04:11.080 --> 00:04:15.550 
From p4 I can execute
I can come to p8

57
00:04:20.160 --> 00:04:25.270 
by register claim by website, so
that's register claim by website

58
00:04:27.360 --> 00:04:31.970 
and from p8 by firing of this
silent transition I can

59
00:04:31.970 --> 00:04:33.380 
come to p9 as well.

60
00:04:35.140 --> 00:04:38.770 
Alright so I'm
now at p9. From

61
00:04:41.150 --> 00:04:46.780 
p9 I will continue
here with so

62
00:04:49.130 --> 00:04:52.820 
that brings us to p10.

63
00:04:53.440 --> 00:04:55.950 
From p9 I come to p10

64
00:04:58.790 --> 00:05:03.660 
with decide on claim coverage.
So that a DCC, so that's

65
00:05:04.290 --> 00:05:06.930 
exactly where it
continues there,

66
00:05:08.230 --> 00:05:12.440 
brings us to p10. In p10 I
have again two alternatives.

67
00:05:12.440 --> 00:05:15.090 
I can go the upper or
the lower branch here.

68
00:05:15.570 --> 00:05:18.030 
So I can go to p11

69
00:05:21.970 --> 00:05:24.120 
or I can go to p12.

70
00:05:27.350 --> 00:05:31.040 
In p11 I can a prepare
a letter of approval

71
00:05:37.260 --> 00:05:39.990 
bringing us to p13.

72
00:05:41.950 --> 00:05:43.740 
Prepare letter
of approval.

73
00:05:45.110 --> 00:05:47.970 
Then in p12 I can prepare
a letter of rejection.

74
00:05:48.900 --> 00:05:51.140 
Prepare a letter
of rejection,

75
00:05:51.980 --> 00:05:53.430 
and in p13

76
00:05:54.780 --> 00:05:56.830 
I can reach the final

77
00:05:57.510 --> 00:06:00.680 
place o. That should
be the complete

78
00:06:01.380 --> 00:06:03.610 
reachability graph
of this model.

79
00:06:04.910 --> 00:06:09.890 
Now we can try to think about
soundness. So can we use

80
00:06:09.890 --> 00:06:13.830 
this reachability graph to check
soundness? Well first property is

81
00:06:14.220 --> 00:06:18.640 
regardless of what I do from
the initial state I will

82
00:06:18.640 --> 00:06:24.030 
always come to the final states or from
the state i could always regardless of

83
00:06:24.140 --> 00:06:27.940 
what I do regardless of which path
through the reachability graph I take

84
00:06:28.260 --> 00:06:32.850 
I reach o, and that is perfectly
true as we see easily. So

85
00:06:33.510 --> 00:06:36.950 
I don't need to go through all
these. So regardless of which

86
00:06:36.950 --> 00:06:41.660 
path is taken in the reachability
graph I will always come from

87
00:06:41.940 --> 00:06:46.250 
state i to state o. It's important
to stress that because

88
00:06:46.250 --> 00:06:49.470 
the reachability graph and the
petrinet look quite similar.

89
00:06:49.780 --> 00:06:53.800 
It's a completely different
concepts here because each

90
00:06:53.800 --> 00:06:57.370 
node in the graph represents
a state of the petrinet.

91
00:06:58.650 --> 00:07:02.560 
And for instance looking at
state p2 where there is one

92
00:07:02.560 --> 00:07:08.880 
token on p2. So the state where one token
on p2 is represented by exactly this

93
00:07:09.350 --> 00:07:13.810 
state p2 and then by executing
receive claim by surface

94
00:07:13.810 --> 00:07:17.090 
mail I can reach a new state. So
reachability graph is really

95
00:07:17.090 --> 00:07:21.420 
about states and state transition petri net
could assume. Therefore it's very useful

96
00:07:21.740 --> 00:07:26.140 
for checking soundness. So we already
check the first soundness property,

97
00:07:26.540 --> 00:07:30.060 
second soundness property is if
there is a token on the place

98
00:07:30.070 --> 00:07:32.950 
then there is no other token in
the net. So we need to check

99
00:07:32.960 --> 00:07:37.230 
each state whether there is a
token on o. Well we just find

100
00:07:37.230 --> 00:07:41.250 
one and that is the last one
and in this state there

101
00:07:41.250 --> 00:07:44.380 
is only a token o there is no
other token in the net therefore

102
00:07:44.380 --> 00:07:46.170 
the property
two is true.

103
00:07:47.610 --> 00:07:51.080 
Finally we need to check for dead
transitions? How can we now

104
00:07:51.080 --> 00:07:56.410 
check for dead transitions?
Well we need to look if

105
00:07:56.840 --> 00:08:00.180 
for each transition
that is in the

106
00:08:00.750 --> 00:08:05.660 
that is in a in the petrinet if
there is a state transition

107
00:08:05.660 --> 00:08:06.760 
in the reachability
graph.

108
00:08:07.430 --> 00:08:12.350 
So we can check that for let's
make it the highlighter

109
00:08:12.630 --> 00:08:15.980 
receive claim by surface mail
yes we have it here, receive

110
00:08:15.980 --> 00:08:20.540 
claim by a fax message we have it here,
that one we have here register claim.

111
00:08:21.310 --> 00:08:25.490 
Where is register claim? Here is register
claim, decide on claim coverage

112
00:08:25.520 --> 00:08:28.020 
we have we have prepare
letter of approval,

113
00:08:28.650 --> 00:08:30.660 
we have prepare
letter of rejection

114
00:08:31.420 --> 00:08:35.290 
and we also of course have the silent
transitions which I didn't go through.

115
00:08:35.840 --> 00:08:39.880 
So obviously each and that's
also clear when I explained

116
00:08:39.960 --> 00:08:45.030 
the scenario each activity can
participate in a correct process

117
00:08:45.280 --> 00:08:48.480 
instance. Therefore

118
00:08:49.150 --> 00:08:53.230 
I can say that the petrinet is
sound and since properties one

119
00:08:53.230 --> 00:08:56.880 
two or three are made the petri
net is sound and we can deduce

120
00:08:56.890 --> 00:09:01.280 
by the transformation that also
the BPMN model is also sound.

121
00:09:01.860 --> 00:09:05.630 
And I don't think we need to
discuss it here but it should

122
00:09:05.630 --> 00:09:11.120 
be clear that once we start the process
here we can take any decision

123
00:09:11.320 --> 00:09:15.650 
afterwards we end up here. So the
concepts are very let's say

124
00:09:15.650 --> 00:09:20.380 
the petri nets are very similar
in this respect as the behavior

125
00:09:20.820 --> 00:09:25.230 
to describe the behavior and
therefore the petrinets

126
00:09:25.230 --> 00:09:27.860 
are very useful also of course
for this formal analysis.

127
00:09:30.320 --> 00:09:34.590 
Ok the second example that I like
to briefly discuss with you

128
00:09:34.950 --> 00:09:39.590 
is the one which does not work so nicely
where we spotted these incorrect

129
00:09:39.750 --> 00:09:44.790 
behavior in the first place. What
we did is we mapped this also

130
00:09:44.800 --> 00:09:49.720 
this BPMN diagram to petrinet and end
up with this petrinet structure.

131
00:09:50.690 --> 00:09:54.260 
There is some concurrency therefore
the reachability graph would

132
00:09:54.450 --> 00:10:00.090 
definitely not fit on one slide and I
would not go through. Therefore I will

133
00:10:00.450 --> 00:10:05.360 
try to use the tool, try to
use the Signavio tool which

134
00:10:05.360 --> 00:10:10.280 
we see here now. So that is the same
petrinet that we need before and

135
00:10:10.580 --> 00:10:15.020 
this tool allows to simulate
the petrinet, to work through

136
00:10:15.020 --> 00:10:18.360 
the petrinet and see all the
different possible behaviors.

137
00:10:18.940 --> 00:10:21.040 
And I try to
start this now.

138
00:10:22.290 --> 00:10:26.430 
And you see here that the first transition
is now the silent transition is

139
00:10:26.780 --> 00:10:30.670 
marked in green, so by clicking
on that we can execute it.

140
00:10:31.080 --> 00:10:36.480 
So the transition removes token from the
place I, puts the token on place p1

141
00:10:36.790 --> 00:10:41.050 
so that receive order is enabled or
enabled transitions are represented

142
00:10:41.050 --> 00:10:46.360 
in green. So I can click on
that meaning it now fires

143
00:10:46.450 --> 00:10:47.960 
putting a token in p2.

144
00:10:49.160 --> 00:10:53.710 
Here the concurrency starts so
two tokens are put one token

145
00:10:53.710 --> 00:10:57.310 
on p3, one token on p4,
and this is where the

146
00:10:58.420 --> 00:11:00.100 
where the concurrency
starts.

147
00:11:00.930 --> 00:11:05.180 
So we can I can execute them
in any order, let's say

148
00:11:05.820 --> 00:11:07.120 
I sent the invoice,

149
00:11:08.750 --> 00:11:13.010 
I execute this one, I
received the payment.

150
00:11:13.670 --> 00:11:20.480 
So no other transition is enabled,
only the package products is

151
00:11:20.760 --> 00:11:23.870 
transition is enabled if
I execute it, I can

152
00:11:24.330 --> 00:11:29.150 
the transition issue shipment
can fire and now there

153
00:11:29.150 --> 00:11:32.840 
are tokens on p5 and p10 allowing
this silent transition

154
00:11:32.840 --> 00:11:38.580 
to fire as well. Putting a token on
p9 which enables a cheque payment.

155
00:11:39.830 --> 00:11:45.930 
And well now we have a situation that
two transitions are enabled so here

156
00:11:46.030 --> 00:11:49.460 
when there is a token p13, two
transitions are enabled.

157
00:11:50.180 --> 00:11:54.030 
We could select the upper one
which is a nice case and then

158
00:11:54.040 --> 00:11:57.180 
there's a token in o and the
process comes to a standstill

159
00:11:57.180 --> 00:11:58.290 
so that is a
nice behavior.

160
00:11:59.310 --> 00:12:05.390 
That is a nice behavior
but we are learned that

161
00:12:05.400 --> 00:12:09.200 
in any behavior so any decision
is taken that behavior

162
00:12:09.200 --> 00:12:11.830 
should be correct therefore
I can step back

163
00:12:12.690 --> 00:12:14.890 
so I use this to step

164
00:12:15.580 --> 00:12:21.710 
back a little bit. Ok so again this
join transition is performed,

165
00:12:22.020 --> 00:12:26.210 
check payment is concerned is
check payment transition fires,

166
00:12:26.890 --> 00:12:32.800 
and now there I select
this situation where

167
00:12:33.380 --> 00:12:37.820 
the payment is not correct, therefore I
need to send an update with the invoice.

168
00:12:38.190 --> 00:12:42.960 
the update with the invoice put here, is
executed, the silent transition is executed.

169
00:12:45.270 --> 00:12:50.210 
If I this one is executed, receive
payment is executed and then

170
00:12:50.210 --> 00:12:52.060 
the process comes
to a halt. So

171
00:12:52.860 --> 00:12:56.760 
this transition the join transition
transition can no longer execute

172
00:12:57.220 --> 00:13:00.630 
and therefore there is an
execution in which I do not

173
00:13:00.630 --> 00:13:03.740 
reach the final place o. You see
the final place o is empty

174
00:13:03.890 --> 00:13:07.770 
and there is a token on p10 and
the process is stuck. Therefore

175
00:13:08.160 --> 00:13:13.110 
we see this behavior faulty
behavior here and if I

176
00:13:13.550 --> 00:13:18.070 
could use also this animation to
really draw draw the reachability

177
00:13:18.070 --> 00:13:21.240 
graph and we'll see also the
reachability graph that

178
00:13:21.250 --> 00:13:25.430 
we reach the state p10. So the
reachability graph there is a state p10

179
00:13:25.640 --> 00:13:29.510 
does not have any outgoing
edges. Therefore you are

180
00:13:30.060 --> 00:13:34.370 
you show we have shown that
the petrinet is not sound

181
00:13:34.370 --> 00:13:37.410 
and therefore that the BPMN
process model is also not sound.

182
00:13:40.060 --> 00:13:44.940 
Alright so here we will I think
by discussion you are with me

183
00:13:45.220 --> 00:13:49.220 
that if I sketch like this so
there is a whole reachability

184
00:13:49.220 --> 00:13:53.190 
graph which has a certain structure
and there is a place p10.

185
00:13:53.360 --> 00:13:57.920 
And this place p10 is the
final state or the state p10

186
00:13:57.920 --> 00:14:00.640 
I have to say not the
place but the state p10

187
00:14:01.120 --> 00:14:06.790 
is deadlock so the system can no
longer so token is here at p10.

188
00:14:07.260 --> 00:14:11.340 
That's exactly the state
indicated here by p10, the

189
00:14:11.340 --> 00:14:17.810 
process of the petrinet cannot fire
and the output output in place

190
00:14:18.110 --> 00:14:20.880 
is not reached and therefore
of course this violates

191
00:14:21.050 --> 00:14:22.000 
the soundness property.

192
00:14:23.870 --> 00:14:28.280 
Especially it violates properties
one two and three so

193
00:14:28.700 --> 00:14:33.000 
three is violated because
send updated invoice

194
00:14:34.350 --> 00:14:39.830 
so send updated invoice cannot
participate in a correct execution so

195
00:14:39.970 --> 00:14:44.190 
also property three is violated.
Property one is violated because

196
00:14:44.190 --> 00:14:48.210 
not in all decisions
i reach o. And

197
00:14:49.190 --> 00:14:52.260 
therefore the process model cannot
be sound and therefore the

198
00:14:52.260 --> 00:14:55.340 
BPMN process model can
also not to be sound.

199
00:14:56.930 --> 00:15:02.130 
Ok so we we all witness that
the sound is checking using

200
00:15:02.130 --> 00:15:05.530 
reachability graphs can be quite
cumbersome especially when

201
00:15:05.530 --> 00:15:09.700 
we have large process models with
concurrency in it or the state

202
00:15:10.040 --> 00:15:13.040 
the reachability graph in the
number of states we say the state

203
00:15:13.040 --> 00:15:17.430 
space can be very large, therefore
we cannot do it of course by hand.

204
00:15:17.630 --> 00:15:21.460 
But there is a nice set of tools
available and provided by

205
00:15:21.460 --> 00:15:25.610 
service-technology.org. So
soundness checking can be done by

206
00:15:25.620 --> 00:15:32.220 
software tools and also these tools are
embedded in the Signavio process modeler,

207
00:15:32.790 --> 00:15:36.800 
Service-technology.org provides
powerful tools to analyze

208
00:15:36.800 --> 00:15:39.560 
formeal properties of services
and business processes.

209
00:15:40.240 --> 00:15:44.080 
It was developed by academic
partners from the University of

210
00:15:44.200 --> 00:15:49.350 
Rostock from the Humboldt University
Berlin and from the Technical University

211
00:15:49.770 --> 00:15:53.390 
in Eindhoven and the tools are also
available for download. So if you

212
00:15:53.720 --> 00:15:55.670 
are interested
in the formal

213
00:15:56.280 --> 00:16:01.440 
analysis of process and models or of
services of composed services where

214
00:16:01.710 --> 00:16:05.900 
this systems can also be applied
you are very welcome to

215
00:16:05.900 --> 00:16:07.210 
take a look at
this website.

216
00:16:09.200 --> 00:16:13.760 
This concludes videoclip 3.7 in
which we checked soundness.

217
00:16:14.380 --> 00:16:18.040 
We use the translation of a
BPMN process model to a petri

218
00:16:18.040 --> 00:16:21.880 
net, we developed build
its reachability graph,

219
00:16:22.340 --> 00:16:26.960 
we used this graph and checked
the petri net for soundness.

220
00:16:26.960 --> 00:16:32.790 
We could check for all three
properties and if all properties

221
00:16:32.790 --> 00:16:35.980 
are met the petrinet is sound and
the BPMN process model is sound.

222
00:16:36.790 --> 00:16:41.010 
If one of the properties is
violated then the petri net is

223
00:16:41.010 --> 00:16:45.000 
not sound and the BPMN process
model can also not to be sound.

224
00:16:45.470 --> 00:16:51.130 
And finally i I gave you a link of
reference tools of a technology.org

225
00:16:51.350 --> 00:16:55.400 
where you find software tools
to analyze processes from

226
00:16:55.670 --> 00:16:56.940 
the behavioral site.

227
00:16:58.240 --> 00:17:01.160 
In this short video I'd like
to summarize week three.

228
00:17:01.920 --> 00:17:05.660 
So we started with taking a look
at process behavior. So what

229
00:17:05.660 --> 00:17:08.120 
is the semantics of a
business process model,

230
00:17:08.590 --> 00:17:10.730 
especially the
execution behavior.

231
00:17:11.720 --> 00:17:17.940 
We designed a business process that has
a behavior anomaly that got stuck

232
00:17:18.240 --> 00:17:23.070 
and therefore to detect
these kinds of situations

233
00:17:23.070 --> 00:17:26.590 
processes getting stuck or
processes are not able to

234
00:17:26.600 --> 00:17:31.060 
reach the defined
end. We looked

235
00:17:31.060 --> 00:17:34.790 
at soundness properties. First
we took a look at structural

236
00:17:34.790 --> 00:17:39.530 
soundness, so that is a structural
property of business process models.

237
00:17:39.780 --> 00:17:46.190 
And we showed away how to achieve it even
if the business process has several

238
00:17:46.370 --> 00:17:49.210 
start events on and
several end events.

239
00:17:50.650 --> 00:17:54.990 
We investigated soundness as
a correctness criterion

240
00:17:54.990 --> 00:17:57.890 
also discussed why soundness is
useful and what are the specific

241
00:17:57.890 --> 00:18:02.520 
properties. We learned three properties
and that's contributing to soundness.

242
00:18:03.820 --> 00:18:08.180 
In terms of simulation we showed
a step through simulation

243
00:18:08.520 --> 00:18:14.140 
that provides a nice means to
validate a business process model.

244
00:18:14.470 --> 00:18:19.450 
We also analyze the performance
by quantitative simulation

245
00:18:19.460 --> 00:18:22.760 
limited to the scope of one
process instance and we made

246
00:18:22.760 --> 00:18:26.260 
a few remarks on multiple
instances simulation as well.

247
00:18:27.090 --> 00:18:32.360 
In the bonus material we took a bit
more formal look at soundness

248
00:18:32.820 --> 00:18:37.880 
and first of all we mapped BPMN models
to the formal model of petri nets.

249
00:18:38.650 --> 00:18:42.280 
We discussed the reachability
graph of a petri net, so what

250
00:18:42.280 --> 00:18:45.480 
are the states that are reachable
from the initial state of the

251
00:18:45.480 --> 00:18:49.270 
petri net and we used the reachability
graph to check soundness.

252
00:18:49.830 --> 00:18:53.350 
This bonus material has a
bit more formal flavor but

253
00:18:53.350 --> 00:18:58.430 
I encourage all of you to do really
spend some time and look into

254
00:18:58.610 --> 00:19:01.900 
also this bonus material, you
may find it interesting.
