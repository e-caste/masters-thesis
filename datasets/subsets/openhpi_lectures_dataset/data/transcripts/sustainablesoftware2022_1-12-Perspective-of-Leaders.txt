WEBVTT

1
00:00:00.560 --> 00:00:04.420 
Hi. In this lecture, we're going to look at the perspective of leaders

2
00:00:04.590 --> 00:00:06.810 
in a sustainable software engineering team.

3
00:00:08.130 --> 00:00:12.390 
Leaders can come in many forms. If we look at our example team

4
00:00:12.390 --> 00:00:13.960 
that we're using in this course,

5
00:00:14.830 --> 00:00:18.630 
a common role for a leader would be for example a product owner.

6
00:00:19.730 --> 00:00:25.880 
A product owner in the agile sense is the proxy of the customer and users' interest

7
00:00:26.750 --> 00:00:30.350 
in the product. So, they are involved in making the decisions

8
00:00:30.350 --> 00:00:34.640 
on the priority of development work for example by sorting

9
00:00:34.900 --> 00:00:38.280 
the backlog of user stories, making sure that there's a good

10
00:00:38.280 --> 00:00:43.270 
process for developing the user stories and having good requirements engineering.

11
00:00:44.210 --> 00:00:48.140 
And product owners also of course are responsible for the budget of the team.

12
00:00:48.520 --> 00:00:51.940 
And that comes usually in the dimensions of time. So when is

13
00:00:51.940 --> 00:00:54.240 
the product ready or when are certain features shipped

14
00:00:54.670 --> 00:00:58.060 
as well as the dimension of cost; how long does it take to develop the

15
00:00:58.930 --> 00:01:02.350 
product. And if it's a product that needs infrastructure to

16
00:01:02.350 --> 00:01:05.370 
run also of course the cost for running the software.

17
00:01:07.940 --> 00:01:12.530 
In leading the team, the product owner needs to resolve

18
00:01:12.950 --> 00:01:15.590 
the classical goal conflicts that happen

19
00:01:16.020 --> 00:01:18.390 
between the different stakeholders of a

20
00:01:19.150 --> 00:01:23.940 
product and we previously introduced the example of the iron

21
00:01:23.940 --> 00:01:29.510 
triangle between quality, cost and time which are often conflicting goal dimensions.

22
00:01:30.420 --> 00:01:36.050 
And when it comes to designing a process that enables a software

23
00:01:36.050 --> 00:01:40.950 
engineering team to practice sustainable software engineering, it's important that

24
00:01:41.100 --> 00:01:45.190 
the sustainability goal is not just another dimension on the

25
00:01:45.190 --> 00:01:49.060 
goal matrix because that will create even more goal conflicts

26
00:01:49.060 --> 00:01:53.950 
and make the job of actually aligning these goals even more complex.

27
00:01:54.700 --> 00:01:59.330 
And there are very good examples of how it is easy for leaders

28
00:01:59.330 --> 00:02:00.480 
or how it is possible

29
00:02:01.200 --> 00:02:06.570 
for leaders to align sustainability with existing goal dimensions.

30
00:02:06.730 --> 00:02:10.910 
And especially most of the time either the costs or the quality dimension.

31
00:02:11.390 --> 00:02:15.020 
For example by designing a system

32
00:02:15.670 --> 00:02:19.950 
and we have this example of the update service for an application,

33
00:02:20.120 --> 00:02:24.110 
designing this to be scalable will not only save costs

34
00:02:24.780 --> 00:02:28.730 
for the team running the service but it will also improve the quality,

35
00:02:29.010 --> 00:02:32.160 
because for example when there's lots of users requesting updates

36
00:02:32.160 --> 00:02:34.190 
from the service, the service will scale up.

37
00:02:34.670 --> 00:02:37.540 
And when there's less users requesting updates it will

38
00:02:37.550 --> 00:02:41.890 
scale down, it will save cost but it will also free unused resources

39
00:02:41.900 --> 00:02:43.860 
and thereby be more sustainable.

40
00:02:45.340 --> 00:02:50.660 
How can lead us identify this opportunities for creating goal alignment

41
00:02:50.830 --> 00:02:55.140 
and also help getting help in creating this alignment from the team?

42
00:02:56.240 --> 00:02:59.140 
One of the most important methods to do this is to foster a

43
00:02:59.140 --> 00:03:02.920 
culture of transparency around the key performance indicators

44
00:03:02.920 --> 00:03:06.030 
for the infrastructure used versus the business performance

45
00:03:06.030 --> 00:03:09.770 
delivered by the system. So, if we take our update service for

46
00:03:09.770 --> 00:03:13.810 
example, we could quantify how much resources the service used

47
00:03:13.820 --> 00:03:16.700 
versus how many updates it actually delivered to users.

48
00:03:17.180 --> 00:03:22.190 
And that enables stakeholders in the team; the engineers, the architects, the operators

49
00:03:22.350 --> 00:03:25.730 
to make better engineering decisions based on actual data.

50
00:03:28.150 --> 00:03:33.130 
The software engineering team is usually not on its own

51
00:03:33.350 --> 00:03:36.840 
but its part and embedded of a larger organization.

52
00:03:37.530 --> 00:03:40.380 
And there might be different stakeholders in that organization

53
00:03:40.430 --> 00:03:43.890 
not just software engineering teams. Sales teams, marketing

54
00:03:43.890 --> 00:03:46.960 
team there's all sorts of different stakeholders surrounding

55
00:03:47.050 --> 00:03:48.330 
the software engineering team.

56
00:03:49.170 --> 00:03:52.190 
And what leaders need to pay close attention to is how this

57
00:03:52.210 --> 00:03:56.530 
structure that surrounds the team also creates incentives or

58
00:03:56.530 --> 00:04:00.050 
miss incentives for practicing sustainable software engineering.

59
00:04:01.630 --> 00:04:04.540 
One of those incentive structures that leaders should be aware

60
00:04:04.540 --> 00:04:08.720 
of because it creates many pitfalls is the structure of running

61
00:04:08.720 --> 00:04:11.870 
IT as a cost center. What does that mean?

62
00:04:12.660 --> 00:04:16.880 
In finance terms running a department in an organization as

63
00:04:16.880 --> 00:04:20.590 
a cost center means that this department is responsibility

64
00:04:20.590 --> 00:04:25.390 
for the costs that it incurs. Whereas, if you had a profit center

65
00:04:25.640 --> 00:04:28.510 
that department is not only responsible for the costs that

66
00:04:28.510 --> 00:04:33.040 
it incurs but also for the revenue it generates and the product of that is

67
00:04:33.260 --> 00:04:38.250 
the profit. If you structure It as a cost center,

68
00:04:38.860 --> 00:04:43.570 
it has some problems in terms of the incentive structure that it creates.

69
00:04:43.830 --> 00:04:47.160 
For example if the organization takes all the cost that it

70
00:04:47.160 --> 00:04:50.780 
has for running infrastructure; be that on-premise infrastructure,

71
00:04:50.990 --> 00:04:53.190 
cost from running the cloud on the cloud,

72
00:04:53.710 --> 00:04:58.020 
licenses services and puts that into a big bucket called IT costs,

73
00:04:58.480 --> 00:05:00.360 
and then you have a controlling department that

74
00:05:00.860 --> 00:05:04.260 
makes different pools of that costs and then, you know, gives

75
00:05:04.270 --> 00:05:07.850 
gives teams a share of that cost to cover,

76
00:05:09.480 --> 00:05:13.390 
you have a couple of problems. For example, it's very difficult

77
00:05:13.390 --> 00:05:17.450 
to do this. So most organizations only do it like annually or quarterly,

78
00:05:17.700 --> 00:05:22.280 
which means that for a software team there's a very long feedback

79
00:05:22.280 --> 00:05:27.510 
cycle on how much cost running these resources actually incur.

80
00:05:28.210 --> 00:05:31.470 
And it splits the responsibility because the team that's actually

81
00:05:31.470 --> 00:05:34.410 
incurring the cost might not be the team that actually gets

82
00:05:34.410 --> 00:05:38.270 
to fully bear the cost. And that leads to a sense of like shared

83
00:05:38.620 --> 00:05:42.730 
irresponsibility because everyone feels like hey, it's not my

84
00:05:42.730 --> 00:05:46.930 
job to do something about saving cost here! And

85
00:05:48.150 --> 00:05:51.180 
when it comes to sustainability, we previously identified that

86
00:05:51.180 --> 00:05:54.120 
the amount of resources that an application consume

87
00:05:54.870 --> 00:05:57.740 
correlate with the cost that that incurs and that creates a

88
00:05:57.740 --> 00:06:01.290 
problem for incentivizing sustainable engineering as well.

89
00:06:03.120 --> 00:06:06.050 
Now if we look at a different structure as the profit center

90
00:06:06.050 --> 00:06:09.910 
structure for IT, how are the incentives stacked in this

91
00:06:10.650 --> 00:06:15.050 
structure. So, suppose we still have our IT cost but instead

92
00:06:15.050 --> 00:06:18.790 
of charging that back based on a percentage to the teams

93
00:06:19.070 --> 00:06:23.350 
we try to establish pay per use. So if an application team runs

94
00:06:23.350 --> 00:06:26.350 
three service in the on-premise data center for example, we

95
00:06:26.350 --> 00:06:30.090 
make them pay by the hour for the VMs they actually used.

96
00:06:30.520 --> 00:06:33.820 
And the same goes for the public cloud platforms. Only here

97
00:06:33.820 --> 00:06:37.130 
it's easier because that's the default mode that a public cloud operates

98
00:06:38.140 --> 00:06:41.630 
and that makes then every team responsibility for its profit

99
00:06:41.630 --> 00:06:45.170 
and loss in terms of how much revenue did we generate

100
00:06:46.070 --> 00:06:49.320 
with this product and how much infrastructure did we use. And

101
00:06:49.320 --> 00:06:52.850 
the same goes for the teams running the on-premise infrastructure.

102
00:06:52.850 --> 00:06:55.640 
How much revenue did they generate from internal customers

103
00:06:55.660 --> 00:06:57.150 
versus how much cost did they incur.

104
00:06:58.420 --> 00:07:03.250 
And running this requires a lot of automation and doing this

105
00:07:03.380 --> 00:07:06.260 
will also enable you to have a monthly charge back cycle. Like

106
00:07:06.260 --> 00:07:08.970 
the public cloud does and that will lead to a fast feedback

107
00:07:08.970 --> 00:07:11.770 
cycle for your software engineering teams because they know

108
00:07:11.770 --> 00:07:13.530 
every month what exactly they spent.

109
00:07:14.210 --> 00:07:17.250 
And it also brings together the responsibility for incurring

110
00:07:17.250 --> 00:07:21.370 
cost by, for example, launching new infrastructure and then getting

111
00:07:21.520 --> 00:07:23.570 
to be at the cost at the end of the month.

112
00:07:27.710 --> 00:07:33.090 
Another aspect, now that we also already talked about transparency that

113
00:07:33.260 --> 00:07:36.940 
the cost structure or how cost is served in an organization,

114
00:07:37.810 --> 00:07:42.830 
brings let's look at how you can make other things transparent

115
00:07:42.840 --> 00:07:45.660 
to your engineering teams when choosing infrastructure.

116
00:07:46.420 --> 00:07:50.070 
There was a study done by Google cloud where they

117
00:07:50.650 --> 00:07:54.040 
put up on the Google cloud console where you can launch workloads

118
00:07:54.290 --> 00:07:58.910 
a dialogue for picking a region. And certain regions they figured out

119
00:07:59.170 --> 00:08:04.560 
are lower carbon intensity than others because in these regions, for example,

120
00:08:04.840 --> 00:08:07.700 
pick a country like in the northern hemisphere like Norway,

121
00:08:07.950 --> 00:08:10.350 
there's a lot of water power available in the grid

122
00:08:10.770 --> 00:08:13.760 
versus other countries like in Germany still there's a lot

123
00:08:13.760 --> 00:08:18.220 
of coal power in the grid and that makes the energy that's

124
00:08:18.220 --> 00:08:19.670 
used more carbon intensive.

125
00:08:20.300 --> 00:08:24.360 
And when users get to pick a region, they experimented with

126
00:08:24.360 --> 00:08:27.340 
showing certain regions with a green marker saying they are

127
00:08:27.340 --> 00:08:30.090 
low carbon regions and they found that new users were more

128
00:08:30.090 --> 00:08:33.120 
than fifty percent more likely to select a low carbon region

129
00:08:33.210 --> 00:08:34.740 
when faced with the data.

130
00:08:36.210 --> 00:08:42.210 
And we can use as leaders this principle of of making things transparent and thereby

131
00:08:42.410 --> 00:08:46.630 
incentivizing good decision making for sustainability. For example

132
00:08:46.630 --> 00:08:52.140 
by establishing this into the charge back process as we had previously discussed with

133
00:08:52.240 --> 00:08:54.180 
the cost centres and the profit centres.

134
00:08:55.160 --> 00:09:00.720 
We cannot only give our customers the hourly use of the computer

135
00:09:01.140 --> 00:09:05.510 
instances and the paper use for that but we can also tell them how much

136
00:09:06.070 --> 00:09:09.390 
carbon emissions this running this instance generated.

137
00:09:10.140 --> 00:09:14.260 
And calculating this is of course a challenging task and involves

138
00:09:14.260 --> 00:09:18.830 
quite a bit of calculations going from the hourly energy usage

139
00:09:18.830 --> 00:09:23.180 
of the data centre and how the grid carbon intensity, the energy

140
00:09:23.180 --> 00:09:26.650 
grid carbon intensity was composed at that time, breaking that

141
00:09:26.650 --> 00:09:30.560 
down then by individual services, aggregating that up to

142
00:09:31.090 --> 00:09:34.070 
the services used by a customer and then surfacing it.

143
00:09:34.590 --> 00:09:38.580 
However that can lead to a charge back statement that looks like this,

144
00:09:39.010 --> 00:09:42.100 
in the example here below, where customers see every month how

145
00:09:42.100 --> 00:09:46.690 
much cost they incurred in the cloud platform not only in Euros

146
00:09:46.700 --> 00:09:50.320 
and in cost to the budget but also in cost to the environment.

147
00:09:51.050 --> 00:09:52.580 
And this is a critical thing

148
00:09:53.270 --> 00:09:57.460 
that leaders can do that really makes the usage and carbon

149
00:09:57.460 --> 00:10:01.990 
intensity of an application transparent to the teams and enables better decision making.

150
00:10:03.460 --> 00:10:08.650 
So to summarize, what are the key actions for leaders to facilitate sustainable software engineering.

151
00:10:09.210 --> 00:10:12.870 
The first is to create goal alignment and very often good software

152
00:10:12.870 --> 00:10:15.690 
implies also that the software is built sustainably.

153
00:10:16.580 --> 00:10:20.450 
The second is to involve all stakeholders in your team and in your organization

154
00:10:20.640 --> 00:10:24.530 
and set clear goals. We discuss for example for the architects

155
00:10:24.530 --> 00:10:29.010 
the relevance of non-functional requirements and setting and communicating clear

156
00:10:29.170 --> 00:10:32.630 
non-functional requirements allows better sustainable engineering.

157
00:10:33.620 --> 00:10:36.780 
And the third aspect is to review the incentives that

158
00:10:37.330 --> 00:10:41.590 
are happening in the team and surrounding the team and review

159
00:10:41.590 --> 00:10:45.220 
them and maybe change them so that they empower sustainable

160
00:10:45.220 --> 00:10:46.080 
software engineering.
