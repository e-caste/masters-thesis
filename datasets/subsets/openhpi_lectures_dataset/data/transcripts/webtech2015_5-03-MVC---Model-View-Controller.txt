WEBVTT

1
00:00:04.840 --> 00:00:09.240 
I have already mentioned several times the Model View Controller Architecture pattern.

2
00:00:11.410 --> 00:00:13.150 
Let's have a closer look to it.

3
00:00:15.230 --> 00:00:20.090 
It is the Model View Controller architect important principle from software engineering.

4
00:00:20.760 --> 00:00:25.520 
And meanwhile when the web application become more and more

5
00:00:26.210 --> 00:00:29.040 
extensive and more and more complicated,

6
00:00:29.570 --> 00:00:33.920 
this principle also is used to design web applications.

7
00:00:34.520 --> 00:00:40.790 
So most of the current web frameworks are based on one of the

8
00:00:40.790 --> 00:00:45.790 
many manifestations of this model viwe controller architecture pattern.

9
00:00:48.550 --> 00:00:50.880 
The idea of this principle is

10
00:00:51.670 --> 00:00:54.970 
of this architecture is to separate the data,

11
00:00:55.510 --> 00:00:56.560 
that is called the 'model'.

12
00:00:57.170 --> 00:01:02.600 
To separate the data from the display, that's called 'view', and

13
00:01:03.850 --> 00:01:07.520 
to separate both from the controller logic

14
00:01:08.140 --> 00:01:11.840 
which is called the 'controller'. So here is such an

15
00:01:13.620 --> 00:01:15.560 
illustration of this principle.

16
00:01:16.280 --> 00:01:19.330 
So we have the browser and the browser is interacting

17
00:01:19.330 --> 00:01:26.950 
with a web server by means of http. It hands over a data which the http server

18
00:01:27.260 --> 00:01:32.020 
hands over to the controller of the web application.

19
00:01:33.370 --> 00:01:36.390 
Then the web application- the controller

20
00:01:37.070 --> 00:01:40.300 
receives the data and knows what

21
00:01:41.040 --> 00:01:47.230 
to do with this data, and it hands over the data to this program part which

22
00:01:49.100 --> 00:01:52.810 
executes a computations on the data.

23
00:01:53.570 --> 00:01:58.250 
Perhaps there is a request on database- important and necessary and all

24
00:01:58.620 --> 00:02:00.710 
things are handed and then the results

25
00:02:02.090 --> 00:02:05.390 
are sent back to the controller, and then

26
00:02:05.930 --> 00:02:11.570 
the controller hands over this data to the part of the program,

27
00:02:11.640 --> 00:02:16.310 
which is responsible for the display of the data. And then, it

28
00:02:16.310 --> 00:02:20.880 
gets back this graphic user interface, the dynamically generated

29
00:02:21.420 --> 00:02:26.070 
html document, which then the controller hands over to the server,

30
00:02:26.540 --> 00:02:29.390 
which sends them back to the browser.

31
00:02:30.110 --> 00:02:35.730 
So the goal of this architectural pattern of this model view controller pattern

32
00:02:36.000 --> 00:02:43.350 
is to support re-usability. Re-usability and easy replacement of code

33
00:02:43.570 --> 00:02:44.330 
components.

34
00:02:45.750 --> 00:02:52.030 
The idea is simple. If some code, some piece of code has to be proved to work well,

35
00:02:52.410 --> 00:02:57.350 
then it makes sense to use and apply this piece of code in all places

36
00:02:57.670 --> 00:03:04.150 
where the same activity, the same computation needs to be done. This avoids

37
00:03:04.590 --> 00:03:12.240 
errors, this make it easy to program, and it make it also easy to

38
00:03:12.640 --> 00:03:16.900 
make a change to replace, for example one of this code by another.

39
00:03:17.990 --> 00:03:23.580 
Then the separation of tasks is important. So concentrate on the computation of

40
00:03:24.350 --> 00:03:26.360 
the modification of the data, of

41
00:03:27.080 --> 00:03:31.610 
the database and all what's done. This is one task. And this task

42
00:03:31.720 --> 00:03:36.840 
should not be interlinked with an other task, for example thinking

43
00:03:36.840 --> 00:03:38.840 
about how to display the results.

44
00:03:40.150 --> 00:03:43.070 
It should not be

45
00:03:44.730 --> 00:03:51.430 
mixed with the controller task. So to concentrate, certain tasks

46
00:03:51.770 --> 00:03:57.400 
also helps to provide a better structure of the code, to provide

47
00:03:57.420 --> 00:04:04.900 
code with a higher quality, and same is true for maintainability. It becomes easier

48
00:04:05.020 --> 00:04:10.370 
if one has such clearly structured applications. When one wants to

49
00:04:10.540 --> 00:04:15.650 
maintain it or when want to adapt such an application to new

50
00:04:16.390 --> 00:04:17.220 
things.

51
00:04:18.960 --> 00:04:26.900 
Before the web application did not completely use this model view controller, which were

52
00:04:28.080 --> 00:04:31.190 
propagated by the software engineering

53
00:04:31.960 --> 00:04:37.940 
by software engineers because web application often were very simple applications.

54
00:04:38.210 --> 00:04:44.730 
So what was done before was to work with so called template engines.

55
00:04:45.730 --> 00:04:48.890 
There was also already a separation but only a separation

56
00:04:49.940 --> 00:04:56.780 
of the view, but the model and the controller part- they are still meshed.

57
00:04:57.860 --> 00:05:02.420 
But meanwhile all the web application become more

58
00:05:03.020 --> 00:05:09.080 
expensive, more, more extensive, more complex. So all this

59
00:05:09.630 --> 00:05:13.280 
ideas proven ideas from software engineering

60
00:05:13.770 --> 00:05:17.870 
should also be applied in the case of designing web applications

61
00:05:17.870 --> 00:05:23.890 
and this model view controller principle is implemented in the reasons

62
00:05:25.150 --> 00:05:28.470 
web frameworks to support the design of

63
00:05:28.880 --> 00:05:29.700 
web applications.

64
00:05:30.980 --> 00:05:33.480 
This MVC is not

65
00:05:34.270 --> 00:05:40.930 
a single pattern. It is typically when we speak from MVC, it

66
00:05:40.930 --> 00:05:45.700 
is an aggregation of several such design patterns. We will later

67
00:05:45.700 --> 00:05:50.650 
also see a little bit more simplified model view controller pattern, but

68
00:05:50.900 --> 00:05:55.560 
all are called together this Model View Pattern.

69
00:05:56.660 --> 00:06:03.420 
In this model view control architectural principle, we have different design

70
00:06:03.550 --> 00:06:08.260 
patterns, and the general concept of such design patterns

71
00:06:08.990 --> 00:06:13.650 
originated in the architecture. There was an early

72
00:06:14.090 --> 00:06:17.480 
book from the Nineteens from Christopher Alexander

73
00:06:18.220 --> 00:06:24.790 
titled 'A Pattern Language' where these design patterns are introduced and then

74
00:06:24.930 --> 00:06:28.710 
they are propagated for software engineering.

75
00:06:29.670 --> 00:06:34.180 
And they become popular with textbook design patterns elements

76
00:06:34.180 --> 00:06:39.140 
of reusable object oriented software in the nineteenth written

77
00:06:39.140 --> 00:06:46.100 
by the Gang of Four. The design patterns describe simple, elegant

78
00:06:46.390 --> 00:06:52.050 
reusable solutions to common problems in software design. So if you analyze

79
00:06:52.890 --> 00:06:55.740 
software programs, then you see there are

80
00:06:56.660 --> 00:07:00.040 
different things to be done ever and ever.

81
00:07:00.640 --> 00:07:05.100 
And the idea to solve these things, to describe a pattern

82
00:07:06.140 --> 00:07:07.420 
and to apply this pattern

83
00:07:08.530 --> 00:07:13.520 
if the situation allows to do it, it helps to make the

84
00:07:14.370 --> 00:07:18.300 
software reusable pieces of the components of the software

85
00:07:18.300 --> 00:07:21.940 
usable and to avoid failures and increase

86
00:07:22.610 --> 00:07:26.980 
quality. So describing the simple, elegant

87
00:07:27.640 --> 00:07:31.600 
reusable solutions in software design,

88
00:07:32.250 --> 00:07:36.450 
that is applicable in particular for object oriented languages.

89
00:07:38.460 --> 00:07:43.560 
The model view control architecture pattern and this design patterns, they

90
00:07:44.620 --> 00:07:48.500 
origin in classical software engineering and

91
00:07:49.180 --> 00:07:54.060 
more recently they are also adopted in the context of web application.

92
00:07:55.430 --> 00:07:58.740 
One of the main goals in this

93
00:07:59.470 --> 00:08:02.250 
approach is to encapsulate

94
00:08:02.890 --> 00:08:04.060 
responsibilities.

95
00:08:06.070 --> 00:08:11.840 
This helps that elements and components can be reused, can be easily reused,

96
00:08:12.010 --> 00:08:17.390 
and it makes it possible to replace one element by another

97
00:08:18.410 --> 00:08:23.940 
as long as one follows the principle that certain responsibilities, certain tasks

98
00:08:24.270 --> 00:08:27.880 
are served in a concentrated way.

99
00:08:29.790 --> 00:08:34.340 
Here is a simple implementation of the Model View Controller

100
00:08:34.340 --> 00:08:37.220 
Pattern. I mentioned this is a title. There was

101
00:08:37.680 --> 00:08:41.960 
an aggregation of several patterns behind. Here is a simple

102
00:08:41.960 --> 00:08:45.760 
one. We have our model view, we have the controller and we have the user.

103
00:08:46.140 --> 00:08:48.590 
The user interacts with the

104
00:08:49.380 --> 00:08:54.590 
display, he has forms, he filled in forms. So in this way,

105
00:08:54.960 --> 00:08:59.940 
the parameters are collected, the parameters are handed over

106
00:08:59.940 --> 00:09:02.210 
to the controller, the controller triggers

107
00:09:03.090 --> 00:09:06.290 
the computation, the computation with the data,

108
00:09:07.110 --> 00:09:13.300 
the interaction with the database and then the result is sent back

109
00:09:13.530 --> 00:09:20.210 
to the viewer, and the viewer displays the results to the user.

110
00:09:21.460 --> 00:09:24.750 
In the end we see architectural pattern aggregates

111
00:09:24.760 --> 00:09:27.950 
multiple design patterns. I mentioned this. This is a simple one.

112
00:09:28.260 --> 00:09:34.570 
In the first slide I showed a more complex one where the controller was much more

113
00:09:34.820 --> 00:09:36.570 
in the middle of the architecture.

114
00:09:37.620 --> 00:09:44.470 
One of the key elements in this design pattern is the so-called observer pattern.

115
00:09:44.970 --> 00:09:48.710 
and the subject is considered by an observer and

116
00:09:49.870 --> 00:09:54.000 
the observer observes certain aspects of this subject.

117
00:09:54.870 --> 00:10:00.080 
The observer pattern- it defines the relation between the model

118
00:10:00.230 --> 00:10:01.180 
and the view.

119
00:10:03.720 --> 00:10:11.030 
The views register as observers to the model and every time if

120
00:10:11.450 --> 00:10:15.280 
that was done is done a change with the data. So although the

121
00:10:15.280 --> 00:10:17.340 
view is changed, the observer

122
00:10:18.010 --> 00:10:22.560 
observes the change the update in the data.

123
00:10:24.040 --> 00:10:29.540 
So whenever the model data are updated, all the views are notified

124
00:10:29.540 --> 00:10:35.480 
about the change and then they update themselves accordingly and show

125
00:10:36.250 --> 00:10:39.290 
this new situation to the user.

126
00:10:40.210 --> 00:10:47.570 
So here we have this observer pattern and to see the subject pattern and

127
00:10:48.960 --> 00:10:54.020 
to explain this principle here in the subject, the subject has a certain state.

128
00:10:54.300 --> 00:10:56.970 
A certain state could be, for example, a color.

129
00:10:57.810 --> 00:11:02.820 
This subject has a certain color, and then there are observers.

130
00:11:03.470 --> 00:11:08.440 
Different observers concentrating on different aspects of the subject

131
00:11:08.950 --> 00:11:15.230 
and there is a list observer here. We see some of them and they are

132
00:11:15.470 --> 00:11:18.220 
assigned to the subject.

133
00:11:19.530 --> 00:11:24.330 
It's possible to add a new observer to the list. It's possible

134
00:11:24.870 --> 00:11:31.570 
to detach. Here is the attach functionality. Different observers

135
00:11:33.310 --> 00:11:37.060 
observe different aspects of the subject.

136
00:11:37.970 --> 00:11:40.240 
And I mentioned, one can also remove

137
00:11:41.010 --> 00:11:46.470 
observers from the list, and then one can call an update method

138
00:11:46.710 --> 00:11:49.390 
on all attached observers.

139
00:11:50.180 --> 00:11:56.820 
And then the observers are updated. You see the color is changed

140
00:11:56.890 --> 00:12:01.440 
and now is the different observers are updated and they

141
00:12:02.870 --> 00:12:09.270 
display the different as a new color, which is now a yellow one.

142
00:12:13.030 --> 00:12:17.260 
There are frameworks which implement the MVC architecture.

143
00:12:18.390 --> 00:12:25.120 
A traditional way for such frameworks was to have Thin Clients. Thin Client means

144
00:12:25.280 --> 00:12:29.270 
all the computation is done on the server side, on

145
00:12:29.680 --> 00:12:34.620 
the application side a framework that follows this principles

146
00:12:34.730 --> 00:12:37.590 
are Java, ServerFaces, Spring are

147
00:12:38.640 --> 00:12:45.120 
the frameworks for PHP. The frameworks Cake, Symfony, the Django

148
00:12:45.120 --> 00:12:49.240 
framework for python programming languages and

149
00:12:49.690 --> 00:12:54.160 
Sinatra, Ruby and Rails for the Ruby script.

150
00:12:55.390 --> 00:13:00.910 
The more recent frameworks, they follow the concept of Rich Client.

151
00:13:00.950 --> 00:13:05.210 
So many of the computation is done on the client side and

152
00:13:05.210 --> 00:13:09.660 
not on the server side. So to mention two frameworks here

153
00:13:10.160 --> 00:13:13.810 
which implement the MVC architecture is AngularJS

154
00:13:14.850 --> 00:13:16.250 
and Ember.js.
