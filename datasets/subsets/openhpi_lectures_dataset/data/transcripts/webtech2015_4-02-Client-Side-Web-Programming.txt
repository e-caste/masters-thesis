WEBVTT

1
00:00:04.750 --> 00:00:08.382 
Now, let's have a closer look at the Client-Side Web Programming.

2
00:00:10.120 --> 00:00:14.619 
You remember client-side web programming means that

3
00:00:14.620 --> 00:00:19.449 
embedded in the HTML document, there is executable

4
00:00:19.450 --> 00:00:23.949 
or interpretable program code that is passed together with

5
00:00:23.950 --> 00:00:28.539 
a web document to the client-side and then this code

6
00:00:28.540 --> 00:00:33.369 
is executed or interpreted on the client computer.

7
00:00:34.930 --> 00:00:39.729 
To be able to do this the web client needs the corresponding

8
00:00:39.730 --> 00:00:44.769 
interpreter. Typically, such an interpreter is available as plugin

9
00:00:44.770 --> 00:00:49.239 
for the browser and this interpreter is needed to

10
00:00:49.240 --> 00:00:53.770 
interpret and to execute the transferred program code.

11
00:00:54.920 --> 00:00:58.083 
There are different approaches, so originally

12
00:00:59.350 --> 00:01:01.659 
people worked with Java applets.

13
00:01:01.660 --> 00:01:06.309 
Now JavaScript programs or scripts are the

14
00:01:06.310 --> 00:01:10.779 
typical way and we also mentioned Microsoft, Silverlight and

15
00:01:10.780 --> 00:01:14.447 
Adobe Flash as possibilities for such client-side web programming.

16
00:01:16.600 --> 00:01:21.219 
Let's start with a short look on Java applets, that's

17
00:01:21.220 --> 00:01:23.949 
necessary for historical reasons.

18
00:01:23.950 --> 00:01:28.371 
Applets are interactive graphical user interface

19
00:01:28.372 --> 00:01:33.039 
(GUI) elements that are executed in a secure browser

20
00:01:33.040 --> 00:01:37.659 
environment. So, the web document by means

21
00:01:37.660 --> 00:01:42.249 
of the Java applets can be adapted to the wishes, to

22
00:01:42.250 --> 00:01:47.139 
the desires of the user, and of course, in the moment

23
00:01:47.140 --> 00:01:52.089 
program code is transferred to a computer

24
00:01:52.090 --> 00:01:57.189 
over the web one needs very carefully designed environment

25
00:01:57.190 --> 00:02:01.839 
for which is provided to execute such code, because

26
00:02:01.840 --> 00:02:05.769 
it could also be a malware that is transported.

27
00:02:05.770 --> 00:02:10.299 
To be a little bit more precise, the applets that are Java

28
00:02:10.300 --> 00:02:15.399 
classes that are embedded in an HTML documents and

29
00:02:15.400 --> 00:02:18.496 
inherit from the java.applet.Applet.

30
00:02:20.440 --> 00:02:25.749 
And here is such an example, short example which

31
00:02:25.750 --> 00:02:29.229 
shows how such Java applets look like.

32
00:02:30.610 --> 00:02:35.559 
The Java code, applet code,

33
00:02:35.560 --> 00:02:38.659 
is embedded in the HTML document.

34
00:02:38.660 --> 00:02:40.147 
It's done by means of markup's, the applet markup,

35
00:02:45.100 --> 00:02:47.229 
it was the parameter.

36
00:02:47.230 --> 00:02:51.789 
I want to underline the end mark up

37
00:02:51.790 --> 00:02:56.409 
and then inside this brackets, this markup brackets, the

38
00:02:56.410 --> 00:02:58.389 
code is transferred.

39
00:03:00.010 --> 00:03:04.929 
Today such Java applets are considered obsolete.

40
00:03:04.930 --> 00:03:09.369 
So, often it's very clear that one sees, Oh, that's

41
00:03:09.370 --> 00:03:14.049 
an applet, it feels slow, it feels

42
00:03:14.050 --> 00:03:18.789 
sluggish and today they are replaced, for example, by

43
00:03:18.790 --> 00:03:22.180 
Dynamic HTML pages or by flash.

44
00:03:23.740 --> 00:03:29.289 
More important for this client-side programming are Java Scripts

45
00:03:29.290 --> 00:03:31.389 
or ECMA script.

46
00:03:32.800 --> 00:03:37.539 
Also here we have our HTML document and embedded

47
00:03:37.540 --> 00:03:41.589 
in the HTML document, there is a script.

48
00:03:41.590 --> 00:03:46.089 
The script here written in Java

49
00:03:46.090 --> 00:03:47.139 
script language.

50
00:03:48.190 --> 00:03:51.552 
So here, for example, example is a welcome,

51
00:03:56.350 --> 00:04:01.028 
which leads the browser to display this Hello

52
00:04:01.029 --> 00:04:05.619 
World!. This Java script was originally

53
00:04:05.620 --> 00:04:10.119 
introduced by Netscape. You remember Netscape, it was a producer of

54
00:04:10.120 --> 00:04:14.739 
a very important browser in the early days of the internet,

55
00:04:14.740 --> 00:04:19.629 
and they were thinking how it's possible to make the internet

56
00:04:19.630 --> 00:04:24.309 
a bit more lively, how to being not

57
00:04:24.310 --> 00:04:28.959 
only able to display a static web pages, but also

58
00:04:28.960 --> 00:04:34.599 
to adapt such web pages to the vicious end need of the customers.

59
00:04:34.600 --> 00:04:39.819 
So, this was the idea to introduce such mechanisms, such script mechanism,

60
00:04:39.820 --> 00:04:43.629 
this was considered by the community as a very good approach.

61
00:04:43.630 --> 00:04:48.339 
So, it was later standardized, this JavaScript was

62
00:04:48.340 --> 00:04:53.619 
later standardized as ECMA script and

63
00:04:53.620 --> 00:04:57.009 
classical application is the client-side scripting.

64
00:04:58.780 --> 00:05:03.069 
Now the question is how this script programs

65
00:05:04.230 --> 00:05:09.239 
interact with the document, how they are able to modify

66
00:05:09.240 --> 00:05:13.529 
or do something special in a certain part of the document.

67
00:05:13.530 --> 00:05:18.239 
And for that reason we need the document

68
00:05:18.240 --> 00:05:22.769 
object model. So, on the basis of this document object

69
00:05:22.770 --> 00:05:27.329 
model, we will have a closer look later on this document object

70
00:05:27.330 --> 00:05:31.949 
model. It is possible for such a JavaScript to

71
00:05:31.950 --> 00:05:35.850 
access and modify document contents.

72
00:05:37.170 --> 00:05:42.320 
And this is also very important for such JavaScript

73
00:05:43.530 --> 00:05:48.419 
for separate application is that it is possible to react

74
00:05:48.420 --> 00:05:53.039 
on user actions and this is done by means

75
00:05:53.040 --> 00:05:55.979 
of so-called event handler.

76
00:05:55.980 --> 00:06:00.989 
But it's important to note this JavaScript

77
00:06:00.990 --> 00:06:03.119 
has nothing to do with Java.

78
00:06:03.120 --> 00:06:07.680 
It was only for marketing reasons at that stage they chose this name.

79
00:06:11.250 --> 00:06:16.049 
JavaScript, if we have a closer look is a dynamically typed

80
00:06:16.050 --> 00:06:20.879 
language and it offers its primary data types String,

81
00:06:20.880 --> 00:06:23.909 
Number, Boolean, Function, and Object.

82
00:06:23.910 --> 00:06:28.499 
It provides control structures, conditions and

83
00:06:28.500 --> 00:06:32.430 
loops. A JavaScript provides functions

84
00:06:33.600 --> 00:06:37.499 
as well as objects, and inheritance.

85
00:06:37.500 --> 00:06:40.965 
Inheritance is organized via so-called prototypes.

86
00:06:43.020 --> 00:06:47.699 
Predefined objects that are, for example, Array, Date, Math, window,

87
00:06:47.700 --> 00:06:52.649 
document, as well as objects from the document object

88
00:06:52.650 --> 00:06:53.650 
model.

89
00:06:56.730 --> 00:07:02.189 
The use of pure JavaScript is rare today

90
00:07:02.190 --> 00:07:06.749 
instead today, people work with powerful

91
00:07:06.750 --> 00:07:11.549 
JavaScript libraries with powerful JavaScript frameworks,

92
00:07:11.550 --> 00:07:13.805 
for example, JQuery, React.js, AngularJS,

93
00:07:17.340 --> 00:07:21.300 
Ember.js, Raphael.js and many more.

94
00:07:22.800 --> 00:07:27.629 
Languages that are compiled to JavaScript, for example,

95
00:07:27.630 --> 00:07:29.820 
are CoffeeScript and Dart.

96
00:07:32.700 --> 00:07:35.099 
Let's have a look at the safety mechanisms.

97
00:07:35.100 --> 00:07:39.569 
I already mentioned, if code is run

98
00:07:39.570 --> 00:07:44.699 
on my side on the client computer that comes from

99
00:07:44.700 --> 00:07:49.439 
any place in the World Wide Web, it's a very risky thing.

100
00:07:50.700 --> 00:07:55.299 
For that reason the Java interpreter, the

101
00:07:56.550 --> 00:08:01.619 
software that helps to execute or to interpret the JavaScript

102
00:08:01.620 --> 00:08:04.380 
runs in a so-called sandbox.

103
00:08:06.180 --> 00:08:11.009 
This sandbox only has access to browser

104
00:08:11.010 --> 00:08:15.839 
object and not to the local hardware or the file system

105
00:08:15.840 --> 00:08:17.789 
of the client computer.

106
00:08:17.790 --> 00:08:20.908 
So, the idea is that if there are bad

107
00:08:22.230 --> 00:08:26.969 
malware transferred inside a web page, this cannot

108
00:08:26.970 --> 00:08:31.403 
cause big damage because it will not be able to access

109
00:08:33.690 --> 00:08:38.639 
the local hardware or the local file system for manipulation or

110
00:08:38.640 --> 00:08:39.929 
performing bad things.

111
00:08:42.090 --> 00:08:47.010 
The web applications, the websites are separate in the browser.

112
00:08:48.420 --> 00:08:53.249 
So, they can only access resources

113
00:08:53.250 --> 00:08:55.989 
that come from the same domain.

114
00:08:55.990 --> 00:08:59.278 
This is the so-called Same Origin Policy (SOP).

115
00:09:01.890 --> 00:09:06.959 
This is a safety mechanism, so to allow

116
00:09:06.960 --> 00:09:11.579 
website only to access things and to deal

117
00:09:11.580 --> 00:09:15.179 
with things that are coming from the same sources.

118
00:09:17.190 --> 00:09:21.959 
By the way, same mechanism, same architecture are applied

119
00:09:21.960 --> 00:09:26.134 
to Flash, to Java or to other languages.

120
00:09:27.690 --> 00:09:32.249 
But here, the separation is not so

121
00:09:32.250 --> 00:09:34.139 
strictly organized.

122
00:09:34.140 --> 00:09:39.059 
So, for example, with Java, it's possible under certain circumstances to get

123
00:09:39.060 --> 00:09:41.190 
access to local resources.

124
00:09:43.140 --> 00:09:46.786 
It's very important, the same origin policy can

125
00:09:48.060 --> 00:09:52.529 
be bypassed in the Internet Explorer when Active X

126
00:09:52.530 --> 00:09:57.539 
components are used. So here you should be very careful and

127
00:09:57.540 --> 00:10:02.129 
recent developments such as the access to webcams, local storage

128
00:10:02.130 --> 00:10:06.899 
and so on, might break the sandbox principle because the user wants

129
00:10:06.900 --> 00:10:11.519 
to have more sophisticated applications also involving

130
00:10:11.520 --> 00:10:15.776 
data from webcam or from local storage and this can only

131
00:10:17.610 --> 00:10:19.694 
be realized by

132
00:10:22.390 --> 00:10:27.609 
changing this, by modifying the sandbox principle and allow

133
00:10:27.610 --> 00:10:30.910 
also access to a local resources.

134
00:10:32.830 --> 00:10:37.389 
So to remind, it's very important to run such safety

135
00:10:37.390 --> 00:10:41.949 
mechanisms, also applied in your browser

136
00:10:41.950 --> 00:10:47.289 
because one does not know what kind of code is embedded

137
00:10:47.290 --> 00:10:48.290 
in a webpage.

138
00:10:50.800 --> 00:10:55.629 
Finally, let's have a short look on Adobe Flash,

139
00:10:55.630 --> 00:11:00.939 
Silverlight. Originally, the Adobe Flash was an animation tool,

140
00:11:00.940 --> 00:11:05.499 
and later on because it was so successful, scripting

141
00:11:05.500 --> 00:11:07.720 
support was added.

142
00:11:08.800 --> 00:11:13.509 
So the Adobe Flash is a proprietary authoring environment that's

143
00:11:13.510 --> 00:11:18.070 
needed and also a special browser plug-ins are requested.

144
00:11:19.270 --> 00:11:24.009 
Scripting language that they used in Adobe Flash is the ActionScript.

145
00:11:24.010 --> 00:11:28.209 
ActionScript exist in different versions.

146
00:11:28.210 --> 00:11:32.769 
ActionScript 1, there was a close relation

147
00:11:32.770 --> 00:11:37.329 
to the JavaScript syntax and the JavaScript concepts,

148
00:11:37.330 --> 00:11:41.949 
for example, the objects are used by means of

149
00:11:41.950 --> 00:11:42.950 
prototypes.

150
00:11:44.200 --> 00:11:48.849 
Later in the ActionScript 2 &amp; 3 syntax

151
00:11:48.850 --> 00:11:53.559 
concepts were more closely related to Java.

152
00:11:55.210 --> 00:11:59.259 
The authoring tool exports, such

153
00:12:00.890 --> 00:12:05.589 
.swf files, which contains the animation, or which contains

154
00:12:05.590 --> 00:12:10.539 
a script. Here, these are the tags, embed

155
00:12:10.540 --> 00:12:15.399 
tags, all the object tags that can be used to embed

156
00:12:15.400 --> 00:12:20.289 
the .swf in code and files

157
00:12:20.290 --> 00:12:22.269 
in an HTML page.

158
00:12:23.800 --> 00:12:29.079 
It is better to use JavaScript, the .swf object

159
00:12:29.080 --> 00:12:33.609 
described here on the website from Google, it's an open source

160
00:12:33.610 --> 00:12:35.589 
JavaScript library.

161
00:12:35.590 --> 00:12:40.089 
It's compatible with the most browsers, and it detects

162
00:12:40.090 --> 00:12:42.840 
automatically as a Flash Player version.

163
00:12:46.360 --> 00:12:51.369 
I close this insight into

164
00:12:51.370 --> 00:12:56.679 
client-side programming by a few remarks about Microsoft Silverlight.

165
00:12:56.680 --> 00:13:00.759 
This is very equivalent to Adobe Flash.

166
00:13:00.760 --> 00:13:05.259 
It's an proprietary authoring environment

167
00:13:05.260 --> 00:13:10.089 
browser, special browser plug-ins are requested, and it was the idea

168
00:13:10.090 --> 00:13:13.774 
from Microsoft to support this client-side programming.

169
00:13:15.100 --> 00:13:19.449 
First version of Silverlight was released in 2007.

170
00:13:19.450 --> 00:13:24.009 
Meanwhile, we have the fifth version version

171
00:13:25.510 --> 00:13:27.190 
until 2013.

172
00:13:29.290 --> 00:13:34.059 
Microsoft Silverlight as well as Flash have been very popular

173
00:13:34.060 --> 00:13:39.009 
on the web, so particularly for the video streaming

174
00:13:39.010 --> 00:13:42.279 
applied for Netflix or Amazon Prime.

175
00:13:42.280 --> 00:13:46.909 
But if we look today, it has a drastically

176
00:13:46.910 --> 00:13:51.399 
reduced significance, as well in the

177
00:13:51.400 --> 00:13:54.609 
use of Silverlight, as well as in the use of Flash.

178
00:13:54.610 --> 00:13:59.109 
There are different reasons, most important are that there are

179
00:13:59.110 --> 00:14:04.479 
more and more powerful Java frameworks and libraries are available,

180
00:14:04.480 --> 00:14:09.429 
which make it much easier to design a nice

181
00:14:09.430 --> 00:14:14.049 
client-side web application. Another important reason for this drastically

182
00:14:14.050 --> 00:14:18.969 
reduced significance of Silverlight and Flash is the HTML,

183
00:14:18.970 --> 00:14:22.410 
the development of HTML, and particularly the

184
00:14:23.440 --> 00:14:26.950 
availability of this HTML 5 video.

185
00:14:28.000 --> 00:14:31.756 
So in 2010, as there was

186
00:14:33.040 --> 00:14:37.749 
no support for Flash, as well for Flash video on

187
00:14:37.750 --> 00:14:41.679 
the Apple iPhone and Chrome

188
00:14:42.700 --> 00:14:47.199 
said that they will stop is a support for Silverlight

189
00:14:47.200 --> 00:14:48.520 
in 2015.

190
00:14:52.780 --> 00:14:57.759 
Most important for client-side application is JavaScript,

191
00:14:57.760 --> 00:15:03.399 
JavaScript libraries. And the very reason why JavaScript frameworks,

192
00:15:03.400 --> 00:15:05.529 
that we will discuss in the next medium.
