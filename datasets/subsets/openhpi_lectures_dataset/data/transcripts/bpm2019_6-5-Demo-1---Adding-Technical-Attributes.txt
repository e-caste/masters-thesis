WEBVTT

1
00:00:00.400 --> 00:00:04.750 
Hello and welcome back. So now after
learning all the theoretical

2
00:00:04.750 --> 00:00:07.960 
background how to make your model
technical we actually would

3
00:00:07.960 --> 00:00:11.510 
like to apply that. And for that we are
going to take a model you already know

4
00:00:11.770 --> 00:00:14.950 
you have built that together in
week five with Johannes from

5
00:00:14.950 --> 00:00:18.360 
Signavio. So we take the insurance
application and we are going

6
00:00:18.360 --> 00:00:23.220 
to automate that right now. Actually
also welcome back on a better

7
00:00:23.370 --> 00:00:26.710 
operating system. Say different
operating system let's

8
00:00:26.710 --> 00:00:27.780 
not say better,
like you know

9
00:00:28.480 --> 00:00:30.730 
opinion. Ok fine it's
better. Thanks.

10
00:00:31.610 --> 00:00:35.100 
So let's have a look into our model
that's the thing you already

11
00:00:35.100 --> 00:00:38.670 
know, that the thing that you
build in week five. And let's

12
00:00:38.670 --> 00:00:41.920 
have a closer look here because
what is the first thing you

13
00:00:41.920 --> 00:00:45.790 
notice here if you look at the
tasks? Well being someone who

14
00:00:45.800 --> 00:00:49.430 
generally makes executable models
I would say that we are missing

15
00:00:49.630 --> 00:00:52.580 
some task types and that's really
important because the engine

16
00:00:52.580 --> 00:00:56.730 
will not know what to do unless
every task has a task type. Yes

17
00:00:57.020 --> 00:00:59.810 
and what I also noticed here is
that we have a customer who

18
00:00:59.810 --> 00:01:03.600 
sends us some documents and then
actually before we enter that

19
00:01:03.640 --> 00:01:07.580 
or the thing that will start the
execution actually is not our customer

20
00:01:07.800 --> 00:01:11.860 
it is more our employee here, the
case worker who needs to validate

21
00:01:11.860 --> 00:01:15.550 
and record the insurance information
to prove if everything is correct.

22
00:01:15.670 --> 00:01:18.590 
So from that point I would say
we don't need that task here

23
00:01:18.840 --> 00:01:21.550 
because actually it's not the
customer who start the process

24
00:01:21.580 --> 00:01:24.690 
and we want to give the engine the
information who is communicating

25
00:01:24.780 --> 00:01:27.750 
with the engine and that the
caseworker in the case.

26
00:01:28.000 --> 00:01:32.160 
So we will delete the record insurance
information here and actually

27
00:01:32.360 --> 00:01:38.270 
our caseworker would start
by entering the data our

28
00:01:38.280 --> 00:01:41.690 
insurance application and to have
that link back for business

29
00:01:41.690 --> 00:01:45.340 
users we would leave the data
object here so we tell him ok

30
00:01:45.340 --> 00:01:48.460 
insurance information are still
saved by our caseworker.

31
00:01:48.880 --> 00:01:51.370 
Ok let's go on.

32
00:01:52.060 --> 00:01:55.820 
If we talk about automation as
thing if I see something like

33
00:01:55.820 --> 00:01:58.670 
create and send an insurance contract
what would you do with that Natal?

34
00:01:59.140 --> 00:02:02.630 
Create and send insurance contract.
Well I guess that would probably

35
00:02:02.630 --> 00:02:06.890 
be an automated task of some kind so
either a send task or a service task.

36
00:02:07.420 --> 00:02:10.890 
Yeah maybe a send task because we have
the word send here. So seems to be

37
00:02:11.030 --> 00:02:13.270 
an indicator. That's very, yeah
thanks for the reminder.

38
00:02:13.900 --> 00:02:17.110 
And what you notice now as we
imported from signavio and

39
00:02:17.110 --> 00:02:19.770 
the shapes are looking a little bit
different that's also defined

40
00:02:19.770 --> 00:02:24.730 
in the xml. So the outlines of our
BPMN shapes but for the execution

41
00:02:24.730 --> 00:02:27.940 
it doesn't matter. It just means
after changing all these things

42
00:02:27.940 --> 00:02:31.680 
we have a funny combination
of Signavio outlines and

43
00:02:31.680 --> 00:02:36.210 
Camunda outlines that will look a
little bit hilarious. But yeah ok.

44
00:02:36.340 --> 00:02:40.340 
So something else I have noticed
on here as we have a manager

45
00:02:40.430 --> 00:02:44.730 
and we need that manager
once his table has the

46
00:02:44.730 --> 00:02:48.330 
review necessary or what one that
variable is produced and I

47
00:02:48.330 --> 00:02:52.300 
see here we need to check the case
and then if it is acceptable

48
00:02:52.300 --> 00:02:55.910 
we approve and of its not we
decline the case. Actually if

49
00:02:55.910 --> 00:02:58.510 
we leave through tasks that would
mean the manager gets three

50
00:02:58.540 --> 00:03:02.020 
different tasks on his task list
and I don't think that so nice.

51
00:03:02.170 --> 00:03:05.380 
So I just would give him on.
So I would give him one that

52
00:03:05.390 --> 00:03:08.000 
shows all the details about that
and then he will have the

53
00:03:08.000 --> 00:03:11.150 
option to approve or to decline
the case. What do you

54
00:03:11.150 --> 00:03:14.650 
think? Yeah it makes a lot of sense. Now it
makes sense from a business perspective

55
00:03:14.810 --> 00:03:18.690 
that maybe it might be more easy to read
to have those three different tasks.

56
00:03:18.880 --> 00:03:21.560 
But far as a UI is concerned
you want a user to have as

57
00:03:21.560 --> 00:03:25.720 
few front ends to deal with as
possible. It's a better experience.

58
00:03:25.950 --> 00:03:29.300 
So that's why it's usually
a good idea, yeah we want

59
00:03:29.300 --> 00:03:33.100 
to try and combine as many user
tasks into one as makes sense.

60
00:03:33.700 --> 00:03:35.010 
So let's get

61
00:03:37.480 --> 00:03:41.300 
rid of our whole subprocess here,
so this will be just one

62
00:03:41.830 --> 00:03:44.880 
and now I need to
connect that nicely.

63
00:03:45.500 --> 00:03:49.700 
Well ok I imagine that's nice,
well its artwork somehow.

64
00:03:49.980 --> 00:03:53.300 
Ok and then there's one more
thing I spotted one I saw this

65
00:03:53.300 --> 00:03:56.580 
model is actually here we have
some end events and some send

66
00:03:56.580 --> 00:04:00.730 
something out oops sorry. And
I'm actually from a business

67
00:04:00.730 --> 00:04:04.080 
perspective really fine because
you send a message to some other

68
00:04:04.240 --> 00:04:07.680 
party and you want to inform them
from a technical perspective.

69
00:04:07.680 --> 00:04:11.230 
I would just use it if I would
trigger a new process with this

70
00:04:11.230 --> 00:04:15.350 
message in my system. And I don't do
that here so I would rather say ok

71
00:04:15.560 --> 00:04:19.440 
I have a normal end event and maybe
before I will include a sending

72
00:04:19.440 --> 00:04:24.720 
task if I really want to send something.
Of course we also need to add

73
00:04:25.070 --> 00:04:28.880 
all variables that we need
actually and this is

74
00:04:29.670 --> 00:04:33.220 
very important because otherwise
as soon as we arrived at the

75
00:04:33.220 --> 00:04:38.000 
table we can't run them and I think
you still remember that we had

76
00:04:38.130 --> 00:04:42.320 
more informations than just the
tables. So we can go and look

77
00:04:42.320 --> 00:04:44.410 
into the whole
DRD structure.

78
00:04:45.280 --> 00:04:49.010 
And here we see the whole DRD
structure of our process and

79
00:04:49.020 --> 00:04:52.430 
in the end all those things
are the variables we inquire

80
00:04:52.430 --> 00:04:55.450 
or we need to executed. So we
need to make sure at the start

81
00:04:55.450 --> 00:04:59.310 
event that this variables has
been given to the engine. And

82
00:05:00.160 --> 00:05:02.890 
to do that actually we go back
to our process and we would

83
00:05:02.890 --> 00:05:06.740 
click here on our start event and
then go to the properties panel

84
00:05:07.030 --> 00:05:11.180 
select here the forms and then
create a new tab here and then

85
00:05:11.180 --> 00:05:14.080 
we could say maybe we need a
name and we could say the

86
00:05:14.080 --> 00:05:17.590 
ID name, it is a type of string.
Actually I prepared something

87
00:05:17.590 --> 00:05:19.850 
because it is a little bit
boring to step through this

88
00:05:20.510 --> 00:05:24.250 
or variable by variable. So let's have
a look at the ready process here.

89
00:05:24.500 --> 00:05:28.220 
So if I click here on my start
event and I click here on forms

90
00:05:28.400 --> 00:05:31.240 
you see I created all bunch of
things that we need to enter.

91
00:05:31.240 --> 00:05:34.060 
It's not just about this first
table, we also know there is a

92
00:05:34.060 --> 00:05:37.150 
second table that also requires
data. So we need to make sure

93
00:05:37.300 --> 00:05:40.400 
that is also there. Actually
there's one handy thing I

94
00:05:40.400 --> 00:05:43.140 
would like to show you. I think
we should see that here airbag

95
00:05:43.320 --> 00:05:46.640 
here we select an airbag
as the enum that means

96
00:05:46.640 --> 00:05:49.890 
actually we will have a drop down
for the user to select because

97
00:05:49.890 --> 00:05:54.200 
imagine our caseworker starts to write
things he would make tables definitely

98
00:05:54.300 --> 00:05:57.760 
and then as soon as we arrived
there the table would not found

99
00:05:58.000 --> 00:06:01.510 
the inputs. So it's good to give
enums here so he just selects one

100
00:06:01.510 --> 00:06:06.300 
of those options and by selecting
them the variable is created and

101
00:06:06.880 --> 00:06:11.420 
we can run through the table. Another
thing we need to do of course is

102
00:06:12.050 --> 00:06:16.350 
is taking care of all of our
sequence flows after a data-base

103
00:06:16.360 --> 00:06:19.940 
XOR gateway we have of course
we've done that already

104
00:06:19.940 --> 00:06:23.310 
too. So if you see here we have
the condition type expression

105
00:06:23.450 --> 00:06:26.470 
and then here that the expression
that the variable and that

106
00:06:26.490 --> 00:06:30.350 
will store this value and then
we go this sequence flow.

107
00:06:30.740 --> 00:06:32.520 
And a few

108
00:06:34.590 --> 00:06:38.280 
if we go a little bit to that you
see also we changed the end

109
00:06:38.280 --> 00:06:41.710 
points here to normal ends, we
have more sending tasks involved

110
00:06:41.710 --> 00:06:44.610 
and actually one service tasks
where we want to archive the

111
00:06:44.610 --> 00:06:48.610 
contract in the system and
that's how we start to add

112
00:06:48.620 --> 00:06:51.700 
the technical attributes. And there
is one more important thing.

113
00:06:52.160 --> 00:06:55.250 
If we import
from Signavio

114
00:06:55.930 --> 00:07:00.510 
let's select the pool because
otherwise we won't see anything.

115
00:07:01.270 --> 00:07:04.860 
No no it's a lane, that is the pool.
Ok important is that you tick

116
00:07:04.860 --> 00:07:07.940 
the box here executable because
if you don't tick it the engine

117
00:07:07.950 --> 00:07:11.620 
would not be able to execute your
model and then it's important

118
00:07:11.820 --> 00:07:15.400 
that you have a name and that name
will show up as your process

119
00:07:15.400 --> 00:07:19.710 
name in the end. So let's call that
also openHPI to be consistent here.

120
00:07:21.270 --> 00:07:26.920 
If you don't actually if
you don't put the name

121
00:07:26.950 --> 00:07:30.500 
the pool or the ID name would show
up. But actually we want the name.

122
00:07:30.700 --> 00:07:34.070 
Ok now there's one more thing
we should take care of. What

123
00:07:34.070 --> 00:07:37.970 
do you think? Well I mean generally
speaking if you're going to

124
00:07:38.180 --> 00:07:41.650 
have this thing executable we are
missing some of the important

125
00:07:41.650 --> 00:07:45.620 
things about execution which are
actually attaching the business logic

126
00:07:45.730 --> 00:07:49.970 
to our our code. So far we've
added a whole bunch of

127
00:07:49.970 --> 00:07:53.120 
nice bits of logic feed the
properties panel but we also will

128
00:07:53.120 --> 00:07:56.360 
we haven't done as we haven't
thought about how we will actually

129
00:07:56.470 --> 00:07:59.380 
interact to their technical
code in our business logic.

130
00:07:59.420 --> 00:08:02.330 
Yeah that's true and don't be
afraid. I opened eclipse now. You

131
00:08:02.330 --> 00:08:06.930 
might like it, you might hate
it. That's ok so don't feel

132
00:08:06.930 --> 00:08:10.220 
overwhelmed with the structure. Here
you see we created a project.

133
00:08:10.370 --> 00:08:13.070 
Actually if you want to get more
information on that visit

134
00:08:13.070 --> 00:08:15.960 
our website we have some starting
tutorial there so you can

135
00:08:15.960 --> 00:08:19.500 
see how you can build a project
with a maven architecture and

136
00:08:19.510 --> 00:08:23.000 
that is kind of handy
because it creates

137
00:08:23.010 --> 00:08:25.930 
lot of stuff for you already. What's
important here what I would

138
00:08:25.930 --> 00:08:29.730 
like to show you if you go
to sources main resources

139
00:08:29.890 --> 00:08:33.070 
we will see all the three models
we have been created so this

140
00:08:33.070 --> 00:08:38.340 
lies together in our project. And
also if we now go on to the

141
00:08:38.930 --> 00:08:44.510 
java resources main here yes and
then we click here on the class

142
00:08:44.850 --> 00:08:49.760 
on the LoggerDelegate. Here there's a
class actually it's here opened already.

143
00:08:49.890 --> 00:08:52.990 
So here we write the business
logic for sending. We won't send

144
00:08:52.990 --> 00:08:57.530 
a real email because we will just
print something through the

145
00:08:57.790 --> 00:09:00.570 
to the console. I didn't want to
give you my credentials for

146
00:09:00.570 --> 00:09:04.970 
my e-mail, he thought it was a good
idea but I kind of disagree to that.

147
00:09:05.280 --> 00:09:09.100 
Oh yeah I don't fear security.
Well so what's important here

148
00:09:09.100 --> 00:09:12.910 
now we want to attach this class
to our model. So we need

149
00:09:12.910 --> 00:09:17.820 
actually to copy here the qualified
name of it. So we copy it here

150
00:09:17.980 --> 00:09:20.620 
and then we can go
back to our model.

151
00:09:21.290 --> 00:09:26.310 
That's here and actually if we
click on our service task

152
00:09:27.300 --> 00:09:31.210 
maybe this one here. Well
here it is already

153
00:09:31.210 --> 00:09:35.000 
implemented but imagine you would select
it again. And then we could just

154
00:09:35.270 --> 00:09:39.130 
paste it here. Then of course
you save your model and then

155
00:09:39.130 --> 00:09:43.160 
you attach your classes as well
to the model. Ok another thing

156
00:09:43.160 --> 00:09:45.950 
that is really handy and I talked
about it already what he

157
00:09:45.950 --> 00:09:48.870 
likes about the eclipsing is
testing, right? Oh yeah. Do you

158
00:09:48.870 --> 00:09:52.150 
want to say something to testing?
And how! So very important thing

159
00:09:52.150 --> 00:09:54.900 
about being able to make these
models is of course making

160
00:09:54.900 --> 00:09:58.230 
sure that if they are executable
and running that you before

161
00:09:58.230 --> 00:10:01.140 
they actually go live you would like
to make sure they actually run

162
00:10:01.340 --> 00:10:05.650 
correctly. Now if you are doing a
real project you need to write

163
00:10:05.650 --> 00:10:08.830 
test cases if not you're just
playing around you can deploy

164
00:10:08.830 --> 00:10:11.350 
and step through it manually.
But right now you can see that

165
00:10:11.350 --> 00:10:18.340 
Nela showing a test

166
00:10:18.340 --> 00:10:22.400 
a class. And this thing actually
starts up the process and the engine

167
00:10:22.520 --> 00:10:25.620 
and then it sees could we deploy
this? And it'll basically make

168
00:10:25.620 --> 00:10:29.330 
sure that when you actually go to the
player model you won't have a problem

169
00:10:29.730 --> 00:10:32.910 
when it gets the server that it will
break. So its way of ensuring

170
00:10:32.910 --> 00:10:36.480 
that our model is correctly
implemented before we need to have

171
00:10:36.480 --> 00:10:39.410 
it leave this the confines of
our development environment.

172
00:10:40.130 --> 00:10:44.840 
Yep but I think we are fine to go
because we tested kind of already.

173
00:10:44.880 --> 00:10:47.700 
Well we built a little test
luckily so we'll find out.

174
00:10:47.700 --> 00:10:52.240 
We will see. So we can go here
to one and we do a mavel

175
00:10:52.240 --> 00:10:55.240 
install here this time.
So let's do that.

176
00:10:57.060 --> 00:10:59.960 
So this guy here is running the
test you can see right there

177
00:11:00.130 --> 00:11:03.100 
starting the engine trying to
deploy it but the real purpose

178
00:11:03.100 --> 00:11:06.490 
of the this is to as Nela showed
in a few minutes is to create

179
00:11:06.640 --> 00:11:09.320 
a specific war file. We have a
build success, We have a success.

180
00:11:09.320 --> 00:11:13.170 
That looks good. So what we do
here? I will smallen that so we

181
00:11:13.170 --> 00:11:15.880 
have a target folder here and we
talked about the WAR file deployment

182
00:11:15.880 --> 00:11:18.490 
right? So we packed everything
together now in our WAR file.

183
00:11:18.910 --> 00:11:21.910 
And we can give that to the engine
right now. So here is our

184
00:11:21.920 --> 00:11:26.840 
openHPI WAR file and we are going
to copy this one here. And

185
00:11:26.840 --> 00:11:30.410 
then we are going to our server.
So this is where Camunda

186
00:11:30.410 --> 00:11:34.570 
is unpacked at my local machine here
now. So if you were to download

187
00:11:34.580 --> 00:11:37.720 
the Camunda platform and unzip
it, this is basically where

188
00:11:37.720 --> 00:11:40.620 
you would end up. And this is a
wildfly. So this is basically

189
00:11:40.620 --> 00:11:44.280 
the structure how a wildfly look
like. If I go here on server now I

190
00:11:44.280 --> 00:11:47.370 
have the wildfly file
system here kind of.

191
00:11:47.630 --> 00:11:51.310 
I go to a stand alone this time,
I go to deployments and I see

192
00:11:51.310 --> 00:11:55.510 
some stuff is already here but I
just can paste my WAR file here.

193
00:11:55.550 --> 00:12:00.040 
And then it will deploy automatically.
So you see this one is

194
00:12:00.040 --> 00:12:03.930 
created here the deployment and
then I can go to my front and

195
00:12:03.930 --> 00:12:08.610 
actually from the engine. So if I opened
the local host Camunda welcome index page

196
00:12:08.770 --> 00:12:13.310 
I would see all the four applications
I have to interact with the

197
00:12:13.470 --> 00:12:16.340 
with the engine and now I would
like to see if everything went

198
00:12:16.340 --> 00:12:19.580 
well. So I go to
cockpit here actually

199
00:12:20.110 --> 00:12:24.110 
and I see I have two process
definitions, that looks good. If

200
00:12:24.110 --> 00:12:27.010 
I go here for deployment I see my
last deployment. Here is the

201
00:12:27.010 --> 00:12:30.470 
openHPI but this is kind of not
so handy so I would rather

202
00:12:30.470 --> 00:12:34.250 
go to processes because here I will
see the real processes running.

203
00:12:34.410 --> 00:12:39.330 
I go to openHPI and yeah I see
everything is here. And I will

204
00:12:39.330 --> 00:12:43.060 
step through that process with you
and see how the automation goes.
