WEBVTT

1
00:00:01.140 --> 00:00:05.530 
In our openHPI course - A Half
Century of Internet, now I want

2
00:00:05.530 --> 00:00:08.460 
to introduce the concept
of Hybrid Encryption.

3
00:00:11.280 --> 00:00:15.740 
You remember, we have two classes of
encryption methods - the symmetric

4
00:00:15.740 --> 00:00:22.280 
ones and the asymmetric ones and both
have their advantages and both have

5
00:00:22.410 --> 00:00:28.300 
their disadvantages. Now the idea of
hybrid encryption is to combine

6
00:00:28.870 --> 00:00:33.950 
two methods in such a way that
the advantages are combined

7
00:00:34.470 --> 00:00:37.000 
and the disadvantages

8
00:00:37.110 --> 00:00:38.020 
are addressed.

9
00:00:40.150 --> 00:00:41.940 
How does this
combination work?

10
00:00:42.700 --> 00:00:45.140 
Symmetric encryption
is very efficient

11
00:00:45.960 --> 00:00:53.570 
it's very efficient so it fits for
encrypting long messages but

12
00:00:54.110 --> 00:00:58.730 
it requires a secure exchange
of the secret key.

13
00:00:59.340 --> 00:01:04.970 
This was the big drawback of the
symmetric encryption methods.

14
00:01:05.520 --> 00:01:08.930 
On the other side, asymmetric
encryption methods do

15
00:01:08.930 --> 00:01:14.450 
not require a secure
key exchange but they

16
00:01:14.450 --> 00:01:20.590 
are very complex and slow and they
are not suited for encrypting

17
00:01:20.590 --> 00:01:21.960 
large amount of data.

18
00:01:22.840 --> 00:01:28.020 
So, the idea of this hybrid encryption
is to combine the efficiency

19
00:01:28.020 --> 00:01:33.000 
of a symmetric encryption with
the security of the asymmetric

20
00:01:33.000 --> 00:01:34.170 
encryption methods.

21
00:01:36.380 --> 00:01:43.150 
How does it work? Let's look to scenario
how this hybrid encryption is applied.

22
00:01:44.180 --> 00:01:50.490 
First, the two communication partners agree
on a symmetric encryption algorithm X,

23
00:01:50.940 --> 00:01:53.580 
and an asymmetric
encryption algorithm Y.

24
00:01:55.000 --> 00:01:58.830 
And then procedure works
as follows - sender

25
00:01:59.490 --> 00:02:03.690 
generates a secret
session key S

26
00:02:04.100 --> 00:02:10.880 
that's used later when a symmetric
encryption algorithm X is applied

27
00:02:11.610 --> 00:02:15.350 
and then sender encrypt
this session key

28
00:02:15.830 --> 00:02:22.220 
with a public key
of the receiver

29
00:02:22.480 --> 00:02:25.190 
with an asymmetric
encryption algorithm Y.

30
00:02:26.080 --> 00:02:31.840 
And then this encrypted session key
is sent over the open internet.

31
00:02:32.690 --> 00:02:39.430 
No one is able to decrypt with exception
of the receiver. The receiver can

32
00:02:39.730 --> 00:02:43.540 
decrypt the session key
with his private key

33
00:02:44.030 --> 00:02:48.570 
that belonged to this public
key so with the private key

34
00:02:48.930 --> 00:02:54.990 
the receiver can decrypt the session
key and then both can switch

35
00:02:55.260 --> 00:02:58.110 
to the symmetric
encryption algorithm X

36
00:02:58.510 --> 00:03:02.990 
and work with the secret session
key which was transmitted

37
00:03:03.110 --> 00:03:07.230 
by means of the asymmetric encryption
method in a very secure way.

38
00:03:08.930 --> 00:03:15.450 
How to start it? The sender
needs to know the public

39
00:03:15.450 --> 00:03:20.670 
key of the receiver and you know
exactly this was a disadvantage,

40
00:03:20.850 --> 00:03:24.640 
so this was a trust problem of the
asymmetric encryption methods

41
00:03:24.870 --> 00:03:32.360 
because it needs certificates
to assign public key

42
00:03:32.660 --> 00:03:38.820 
to receive in a secure way. So, here
in our hybrid encryption scenario,

43
00:03:39.110 --> 00:03:42.130 
the sender needs the public
key of the receiver.

44
00:03:43.830 --> 00:03:45.650 
So, the receiver sends

45
00:03:46.290 --> 00:03:47.920 
his or her certificate

46
00:03:48.800 --> 00:03:53.300 
and you remember this certificate,
it was signed by a trust centre

47
00:03:54.300 --> 00:03:57.050 
and the trust centre
guarantees that

48
00:03:58.530 --> 00:04:02.210 
this public key belongs
to this person.

49
00:04:03.060 --> 00:04:06.120 
So, as the sender now
validates a certificate,

50
00:04:06.710 --> 00:04:12.660 
checks the signature of the trust centre
and then he takes out of the certificate

51
00:04:13.140 --> 00:04:19.730 
the public key of the receiver
and now the hybrid encryption

52
00:04:19.730 --> 00:04:24.050 
methods we described in the
last slide, can start to work

53
00:04:25.930 --> 00:04:28.990 
but how is it implemented
on the internet?

54
00:04:30.260 --> 00:04:34.790 
You remember, for the communication
in the World Wide Web,

55
00:04:35.190 --> 00:04:41.600 
the HTTP protocol is the
protocol that is used

56
00:04:42.970 --> 00:04:49.690 
so, HTTP is responsible for connecting
the World Wide Web to the internet

57
00:04:50.150 --> 00:04:56.550 
so, the typical use-case of using
any internet service is realized

58
00:04:56.700 --> 00:04:59.220 
by means of this
HTTP protocol.

59
00:05:00.180 --> 00:05:06.400 
So, HTTP controls the communication between
the web browser and the webserver,

60
00:05:06.620 --> 00:05:09.960 
between the sender
and the receiver,

61
00:05:09.960 --> 00:05:12.790 
of the service
provider.

62
00:05:10.650 --> 00:05:11.460 
uh uh uh uh uh uh uh uh uh uh
uh uh uh uh uh uh uh uh uh uh

63
00:05:11.470 --> 00:05:12.790 
uh uh uh uh uh uh
service providers

64
00:05:13.750 --> 00:05:19.850 
But you remember, we discussed
HTTP. HTTP does not provide

65
00:05:21.120 --> 00:05:22.570 
any security mechanism.

66
00:05:25.210 --> 00:05:28.640 
The network packets
are sent unencrypted

67
00:05:29.330 --> 00:05:35.820 
and in this way be read by
anyone who has access to

68
00:05:35.820 --> 00:05:38.010 
the internet, who has
access to the network

69
00:05:38.550 --> 00:05:43.180 
and there are authentication
methods but no strong ones

70
00:05:43.790 --> 00:05:46.410 
so, no strong authentication
is possible.

71
00:05:47.570 --> 00:05:50.880 
If you think about what kind of services
we want to use on the internet,

72
00:05:50.880 --> 00:05:54.880 
for example, online banking
or e-shopping orders,

73
00:05:55.410 --> 00:06:00.970 
then we need urgently a
secure variant of HTTP

74
00:06:01.370 --> 00:06:04.680 
and this is the
HTTPS protocol.

75
00:06:06.000 --> 00:06:10.080 
And if you use or

76
00:06:10.080 --> 00:06:12.950 
interact with
internet services

77
00:06:14.340 --> 00:06:19.240 
whenever it's possible, you
should be careful to use HTTPS

78
00:06:19.710 --> 00:06:21.560 
instead of HTTP.

79
00:06:22.870 --> 00:06:27.990 
How do you know which protocol is used?
You can see it in your browser.

80
00:06:28.490 --> 00:06:34.170 
So, you see it here whether the
communication is encrypted and secured,

81
00:06:34.540 --> 00:06:41.530 
this is a sign that HTTPS is used and
if HTTPS is not used only HTTP,

82
00:06:41.680 --> 00:06:48.500 
then you get the hint
"Not Secured".

83
00:06:49.000 --> 00:06:55.440 
How does HTTPS work? It is
a secure variant of HTTP

84
00:06:56.140 --> 00:07:02.540 
and it makes use of TLS, remember
this? With the security protocols

85
00:07:02.790 --> 00:07:08.150 
on the layer between
the transport

86
00:07:08.150 --> 00:07:18.450 
layer and the application layer. So, HTTPS
is using this TLS to provide all these

87
00:07:18.550 --> 00:07:24.470 
security features. So, TSL encrypts the
communication between browser and server

88
00:07:25.040 --> 00:07:33.300 
to ensure the confidentiality and TLS
provides secure mutual authentication

89
00:07:33.630 --> 00:07:36.020 
by means of
certificates.

90
00:07:38.570 --> 00:07:44.860 
TCP works with such a hybrid
encryption scenario.

91
00:07:45.280 --> 00:07:48.040 
It works in a very
efficient way.

92
00:07:49.810 --> 00:07:54.060 
Let's have a closer look at this.
So, the additional security

93
00:07:54.060 --> 00:07:56.020 
performance of HTTPS

94
00:07:57.460 --> 00:08:03.810 
automatically achieved by means
of the following TLS handshake.

95
00:08:04.940 --> 00:08:08.720 
So, we have the customer,
here we have the service

96
00:08:09.270 --> 00:08:15.260 
and the client's (customer is the
client) browser sends "Hello"

97
00:08:15.260 --> 00:08:21.550 
to the webserver. "Hello, I want to use
your service. I want to contact you".

98
00:08:22.830 --> 00:08:27.670 
To secure this communication, the
sender's browser needs to know

99
00:08:28.050 --> 00:08:31.170 
the public key of
the service.

100
00:08:31.860 --> 00:08:34.600 
So, the server says,
"Ok, hello!"

101
00:08:35.370 --> 00:08:41.940 
"Here I am willing to communicate with
you" and service since its certificate

102
00:08:43.530 --> 00:08:50.180 
because to encrypt the communication,
the browser (the user) needs the

103
00:08:50.600 --> 00:08:52.440 
public key of
service and

104
00:08:53.080 --> 00:08:57.250 
you know, the public can found
out from the certificate.

105
00:08:58.020 --> 00:09:02.470 
So, the browser verifies the certificate,
checks the signature of the

106
00:09:02.480 --> 00:09:09.450 
trust centre and then extracts the
public key and then the browser sends

107
00:09:09.710 --> 00:09:16.050 
a "Pre-Master Secret". This is
encrypted with the public key

108
00:09:16.050 --> 00:09:23.230 
to the server and this
"Pre-Master Secret" is a mean

109
00:09:23.420 --> 00:09:28.560 
for changing the session key
for the communication. So,

110
00:09:28.560 --> 00:09:33.400 
the server decrypts the "Pre-Master
Secret" by means of its private

111
00:09:33.400 --> 00:09:38.820 
key, you remember, it was encrypted
by means of an asymmetric

112
00:09:38.830 --> 00:09:42.760 
encryption algorithm with a public
key of the server and though

113
00:09:42.760 --> 00:09:47.250 
the server can decrypt by
means of its private key

114
00:09:48.380 --> 00:09:53.750 
and then the browser and server
calculate the session keys; later on

115
00:09:53.980 --> 00:09:58.920 
from the "Pre-Master Secret" they
calculate the session key and

116
00:09:58.930 --> 00:10:05.500 
then they communicate, encrypted
with symmetric encryption methods

117
00:10:05.850 --> 00:10:08.860 
and working with
the session key.

118
00:10:09.690 --> 00:10:14.600 
And then secure communication is
possible, you can do your online

119
00:10:14.600 --> 00:10:17.380 
banking or you can do
your e-shopping.

120
00:10:18.480 --> 00:10:23.300 
So, HTTPS offers efficient and
confidential communication

121
00:10:23.730 --> 00:10:30.850 
with strong authentication and definitely
should be used for any communication

122
00:10:30.980 --> 00:10:35.380 
of sensitive data as it should be
used in case of online banking,

123
00:10:35.380 --> 00:10:40.270 
it should be used in case of online
shopping, it should be used

124
00:10:40.270 --> 00:10:44.330 
for all social media log in, for
all kind of log in and it should

125
00:10:44.330 --> 00:10:50.490 
be used for e-learning applications,
for all you can do on the internet.

126
00:10:51.480 --> 00:10:58.130 
So, in this way hybrid encryption
provides a very efficient way

127
00:10:58.470 --> 00:11:05.030 
that we can use the internet in
a secure way that services

128
00:11:05.310 --> 00:11:08.820 
we are using, the data we are
sending to the service, we are

129
00:11:08.820 --> 00:11:13.690 
exchanging with the service are
encrypted and only can be

130
00:11:13.830 --> 00:11:16.230 
understood by the
involved parties.
