WEBVTT

1
00:00:00.400 --> 00:00:06.100 
Since I left the management
position at SAP, I concentrated

2
00:00:06.100 --> 00:00:09.130 
on, actually on research
and that was very fruitful

3
00:00:10.140 --> 00:00:14.180 
because we could develop something
here, some ideas at the HPI

4
00:00:14.180 --> 00:00:22.260 
which I can nearly say
became industry standard

5
00:00:23.270 --> 00:00:26.300 
because all major database
vendors in the world

6
00:00:26.300 --> 00:00:29.330 
are moving now in the same
direction like what we proposed

7
00:00:29.330 --> 00:00:34.380 
here, actually over
seven a-half years ago.

8
00:00:38.420 --> 00:00:44.480 
So there is success, great
success but there is one problem

9
00:00:45.490 --> 00:00:49.530 
it is difficult, what seems
to be difficult to explain

10
00:00:50.540 --> 00:00:55.590 
why is an in-memory database
using columnar store so superior?

11
00:00:57.610 --> 00:01:03.670 
There are comments like, do
we really need that speed?

12
00:01:05.690 --> 00:01:10.740 
It's ongoing in, I think
it's Forbes magazine.

13
00:01:12.760 --> 00:01:17.810 
What is really different? Wasn't
everything invented already

14
00:01:17.810 --> 00:01:18.820 
twenty years ago

15
00:01:20.840 --> 00:01:21.850 
this is all
partially true

16
00:01:23.870 --> 00:01:28.920 
and despite that it's the
biggest revolution in enterprise

17
00:01:28.920 --> 00:01:34.980 
computing since the mid '60s,
that's quite a while ago.

18
00:01:34.980 --> 00:01:38.102 
66, 34 years + 14

19
00:01:38.102 --> 00:01:41.105 
is 48 years,
nearly 50 years ago

20
00:01:46.110 --> 00:01:50.114 
In order to understand the
achievement I have to go back to

21
00:01:50.114 --> 00:01:53.117 
1966,

22
00:01:56.120 --> 00:01:59.123 
that's when I was still
studying so like you

23
00:02:01.125 --> 00:02:05.129 
how enterprise computing
worked in those days

24
00:02:06.130 --> 00:02:10.134 
then we have to go through very
quickly what happened in the

25
00:02:10.134 --> 00:02:16.140 
following, nearly 50 years, in
order to understand and appreciate

26
00:02:16.140 --> 00:02:23.147 
why the change is so
big. So we are in 1966

27
00:02:25.149 --> 00:02:31.155 
we take an average let's
say manufacturing company

28
00:02:32.156 --> 00:02:35.159 
2,000 employees, something
like that that you

29
00:02:36.160 --> 00:02:41.000 
this is a sizable company, it's
not a start-up company or mom

30
00:02:41.000 --> 00:02:46.170 
and pop shop and they
have installed IBM,

31
00:02:48.172 --> 00:02:53.177 
IBM systems to manage
their enterprise.

32
00:02:55.179 --> 00:02:58.182 
Every single meaningful
activity in the company

33
00:02:58.182 --> 00:03:01.185 
in those days was
recorded on punch cards.

34
00:03:02.186 --> 00:03:05.189 
So we have punch cards,
they looked like this.

35
00:03:06.190 --> 00:03:08.192 
Has anybody seen
a punch card?

36
00:03:11.195 --> 00:03:16.200 
How many columns does
a punch card have?

37
00:03:21.205 --> 00:03:22.205 
Next one.

38
00:03:24.208 --> 00:03:25.209 
no idea, how many?

39
00:03:29.213 --> 00:03:34.218 
80, so 80 columns and

40
00:03:37.221 --> 00:03:41.225 
from 0 to 9 and
then they had a few

41
00:03:42.226 --> 00:03:43.227 
few extra ones

42
00:03:48.232 --> 00:03:54.238 
in order to express any
alphanumeric character.

43
00:03:55.239 --> 00:03:57.241 
So we record
the transaction

44
00:04:01.245 --> 00:04:04.248 
in punch cards and we
have many of those.

45
00:04:10.254 --> 00:04:13.257 
They were stored in boxes
like this, 2,000 punch cards

46
00:04:13.257 --> 00:04:20.264 
in a box. If we sold 10,000
items per day then we have

47
00:04:20.264 --> 00:04:23.267 
created five boxes of punch
cards just to get a feeling.

48
00:04:24.268 --> 00:04:28.272 
Now we want to do a report,
what did we sell today.

49
00:04:28.272 --> 00:04:32.276 
We have to run these punch cards
through a punch card reader

50
00:04:33.277 --> 00:04:39.283 
and probably sort them first
by item if we want to know

51
00:04:40.284 --> 00:04:43.287 
how many of a certain
type of item did we sell

52
00:04:44.288 --> 00:04:47.291 
then the item number is somewhere
here, coded in the punch card

53
00:04:50.294 --> 00:04:54.298 
we go with this to a machine,
they had round edges that's the

54
00:04:54.298 --> 00:04:58.302 
only thing I can and the
punch cards go in here

55
00:04:59.303 --> 00:05:04.308 
we can do sort,
filter, merge

56
00:05:08.312 --> 00:05:11.315 
then we need actually a
punch card reader with two

57
00:05:13.317 --> 00:05:15.319 
and we can aggregate.

58
00:05:19.323 --> 00:05:23.327 
Sounds relatively familiar,
it's not much more what sql can

59
00:05:23.327 --> 00:05:28.332 
do, we will come to that.
So this is how it started

60
00:05:31.335 --> 00:05:35.339 
you can already understand
number 10,000 is not very

61
00:05:35.339 --> 00:05:40.344 
high, Walmart is probably selling
several millions a day, line

62
00:05:40.344 --> 00:05:44.348 
items, so he cannot do this
with punch cards anymore.

63
00:05:46.350 --> 00:05:50.354 
Here, physically you can not lift
them, put them on tak tak tak

64
00:05:51.355 --> 00:05:55.359 
read them and every, probably,
every 5,000 punch card

65
00:05:55.359 --> 00:05:59.363 
there is a breakage in the
machine, a punch card got

66
00:06:00.364 --> 00:06:03.367 
warped and we have to open
the machine and repair it and

67
00:06:05.369 --> 00:06:11.375 
so. But this was how work, that
some some clever people said

68
00:06:12.376 --> 00:06:18.382 
if we want to have statistics
for more then the day

69
00:06:19.383 --> 00:06:23.387 
we cannot read all punch
cards off the month

70
00:06:23.387 --> 00:06:26.390 
in my little case
with the 5,000

71
00:06:26.390 --> 00:06:31.395 
a 5 boxes, 10,000 per
day, this is already

72
00:06:32.396 --> 00:06:36.400 
300,000 a month. So the
clever IBM people came

73
00:06:36.400 --> 00:06:41.405 
up with the idea that we
can use other machines

74
00:06:42.406 --> 00:06:44.408 
on top of that and
you know them when you

75
00:06:44.408 --> 00:06:46.410 
watch an older movie

76
00:06:52.416 --> 00:06:53.417 
and we had
these machines.

77
00:07:01.425 --> 00:07:05.429 
Computer tapes, this was the
storage of, we are in the year

78
00:07:06.430 --> 00:07:10.434 
'66, this was the main
storage in those days.

79
00:07:11.435 --> 00:07:18.442 
Transactions in punch cards,
so new items in punch cards and

80
00:07:23.447 --> 00:07:24.448 
history and aggregation

81
00:07:27.451 --> 00:07:32.456 
on tapes. How did
this work? We take,

82
00:07:34.458 --> 00:07:38.462 
we want to aggregate
per item, per product.

83
00:07:39.463 --> 00:07:43.467 
We take the aggregates from up to
yesterday, add the transactions

84
00:07:43.467 --> 00:07:48.472 
from today and we take
the yesterday's tape

85
00:07:53.477 --> 00:07:56.480 
plus the punch
cards of the day

86
00:07:59.483 --> 00:08:00.484 
and we get two days

87
00:08:02.486 --> 00:08:10.494 
data. Typically, we kept the
punch card line items on a tape

88
00:08:11.495 --> 00:08:16.500 
and we kept the aggregates on a tape,
so in my case we just aggregated

89
00:08:16.500 --> 00:08:18.502 
by product.

90
00:08:21.505 --> 00:08:25.509 
You see already only a few
aggregations can be done this way,

91
00:08:25.509 --> 00:08:30.514 
theoretically many, technically
for each aggregation

92
00:08:31.515 --> 00:08:34.518 
which is carried forward
from an old tape to new tape.

93
00:08:36.520 --> 00:08:39.523 
We have to read all the punch
cards, at least, of the day.

94
00:08:40.524 --> 00:08:42.526 
The delta, this
is the delta.

95
00:08:46.530 --> 00:08:49.533 
If we want to have two
different aggregations

96
00:08:50.534 --> 00:08:53.537 
we have to repeat the process.
We have to take another tape

97
00:08:54.538 --> 00:08:58.542 
read the punch cards again, merge
this, and produce a new tape.

98
00:08:59.543 --> 00:09:03.547 
The actual process as a little
bit more complicated, data on the

99
00:09:03.547 --> 00:09:07.551 
tape the sorted by a sorting
criteria, so we have to sort the

100
00:09:07.551 --> 00:09:11.555 
punch cards first, then we have
to merge them with the old tape

101
00:09:11.555 --> 00:09:12.556 
and we get the new tape.

102
00:09:14.558 --> 00:09:17.561 
This is how all applications,
basically, were built.

103
00:09:21.565 --> 00:09:24.568 
When you think about an
accounting application

104
00:09:25.569 --> 00:09:29.573 
we have to produce a monthly
reporting, a quarterly reporting,

105
00:09:29.573 --> 00:09:33.000 
a year end reporting, and
then some extra reporting.

106
00:09:33.577 --> 00:09:39.583 
So most of the applications,
application functions, were built

107
00:09:39.583 --> 00:09:43.587 
in this way. The transactions
recorded in punch cards

108
00:09:44.588 --> 00:09:49.593 
and we carry forward aggregates
from an old tape to new tape.

109
00:09:51.595 --> 00:09:55.599 
Did you understand that? It's
pretty easy, kids can do that.

110
00:09:56.600 --> 00:09:59.603 
So that's what we did,
we professionals with

111
00:10:00.604 --> 00:10:03.607 
degrees and you need a degree
in electrical engineering for

112
00:10:03.607 --> 00:10:09.613 
that. This is how the landscape
looked when I joined IBM.

113
00:10:14.618 --> 00:10:19.623 
That's the later '60s,
this thing was introduced

114
00:10:20.624 --> 00:10:24.628 
and you're still using it
today as a symbol, the disk.

115
00:10:29.633 --> 00:10:33.637 
The main difference between the
tape storage and the disk storage

116
00:10:33.637 --> 00:10:40.644 
is, disk storage is directly
accessible, direct accessible storage.

117
00:10:43.647 --> 00:10:50.654 
Both on magnetic stores, just
for fun the capacity when

118
00:10:50.654 --> 00:10:55.659 
I started up that IBM
was 7 megabyte per disk.

119
00:10:57.661 --> 00:11:01.665 
The disks were removable,
so you could replace them,

120
00:11:02.666 --> 00:11:07.671 
very little storage. I
think when I left IBM

121
00:11:09.673 --> 00:11:14.678 
it was 200, 200
megabyte per disk.

122
00:11:15.679 --> 00:11:17.681 
I don't know what is,
what is on a normal

123
00:11:18.682 --> 00:11:20.684 
where we still
have disks,

124
00:11:21.685 --> 00:11:24.688 
phone is disk-less.
What is the last,

125
00:11:28.692 --> 00:11:32.696 
yeah what's the last the
device where we have a disk in?

126
00:11:33.697 --> 00:11:38.702 
Has an iPad a disk? No,
the last when you know.

127
00:11:39.703 --> 00:11:43.707 
Ok that's good, they are
still. What is the disk size?

128
00:11:46.710 --> 00:11:49.713 
That is a little
bit over size.

129
00:11:51.715 --> 00:11:54.718 
Is that ordinary all have
four terabyte on your laptop?

130
00:11:55.719 --> 00:11:59.723 
Who has less than four
terabyte? Ok, I got you.

131
00:12:00.724 --> 00:12:05.729 
So let me do one terabyte,
amazing development

132
00:12:06.000 --> 00:12:09.733 
but in those days we
had to live with that.

133
00:12:10.734 --> 00:12:17.741 
So what happened when we
started working at IBM

134
00:12:18.742 --> 00:12:21.745 
and this is where
I already met my

135
00:12:22.746 --> 00:12:26.750 
co-founders, Dietmar Hopp, Klaus Tschira and
Hans-Werner Hector and Claus Wellenreuther.

136
00:12:26.750 --> 00:12:31.755 
We thought
this is pretty

137
00:12:32.756 --> 00:12:37.761 
pretty ancient, like in the
movies, James Bond, still

138
00:12:38.000 --> 00:12:41.765 
in the '60s. When they show a
computer room they showed this

139
00:12:41.765 --> 00:12:44.768 
because it's not much to see on
the disk and now there's nothing

140
00:12:44.768 --> 00:12:48.772 
to see anymore when you want
to show what a computer does.

141
00:12:51.775 --> 00:12:55.779 
We stored the totals,

142
00:13:00.784 --> 00:13:08.792 
the aggregates. We stored them on
disk and we had the line items,

143
00:13:09.793 --> 00:13:10.794 
the line items

144
00:13:12.796 --> 00:13:18.802 
both on disk. So probably we
still the punch cards to record

145
00:13:18.802 --> 00:13:22.806 
the daily transactions
and it then straight

146
00:13:23.807 --> 00:13:26.810 
when into here and
now we did something.

147
00:13:28.812 --> 00:13:32.816 
This is actually the
main invention SAP did in

148
00:13:33.817 --> 00:13:37.821 
1970, still at
IBM and 1972

149
00:13:37.821 --> 00:13:40.824 
then as a
separate company.

150
00:13:45.829 --> 00:13:47.831 
We do this here

151
00:13:51.000 --> 00:13:51.835 
as a transaction

152
00:13:57.841 --> 00:14:01.845 
and we called
it real time,

153
00:14:03.847 --> 00:14:04.848 
real time transaction.

154
00:14:07.851 --> 00:14:13.857 
What we did was, we still
kept the same aggregates

155
00:14:15.859 --> 00:14:22.866 
for bearers of enterprise systems
developed, we kept the same ones.

156
00:14:23.867 --> 00:14:28.872 
But we updated them with every
single transaction, whenever

157
00:14:28.872 --> 00:14:32.876 
we got a line item in
the system we updated

158
00:14:33.877 --> 00:14:34.878 
our aggregate.

159
00:14:36.880 --> 00:14:40.884 
Do you understand what aggregates
are? Have you ever seen aggregates

160
00:14:40.884 --> 00:14:44.888 
in your life, have you ever
done aggregation in your life?

161
00:14:46.890 --> 00:14:51.895 
If you kept them or did you just
produce them for a result and

162
00:14:53.897 --> 00:14:55.899 
threw them away?
Who kept aggregates?

163
00:14:58.902 --> 00:15:02.906 
Who maintained aggregates so you use
the aggregates and you maintain them.

164
00:15:06.910 --> 00:15:08.912 
Three already, so you want to
do enterprise computing you have

165
00:15:08.912 --> 00:15:10.914 
to learn about
aggregates.

166
00:15:12.916 --> 00:15:14.918 
Very simple, lets
take financials.

167
00:15:20.924 --> 00:15:23.927 
We have in our company 2,000
people. we have probably

168
00:15:25.929 --> 00:15:27.931 
500 accounts
in accounting,

169
00:15:29.933 --> 00:15:32.936 
in general ledger
accounting, Hauptbuchhaltung.

170
00:15:35.939 --> 00:15:40.944 
Each of these accounts, we
maintain debit and credit per month

171
00:15:41.945 --> 00:15:42.946 
for the twelve
months of the year

172
00:15:44.948 --> 00:15:48.952 
plus probably one or two
extra periods just for

173
00:15:48.952 --> 00:15:51.955 
specific accounting after
the end of the year so

174
00:15:53.957 --> 00:16:00.964 
let's think about an array
of 12 by 2 credit and debit

175
00:16:03.967 --> 00:16:07.971 
and we maintained
every single activity.

176
00:16:09.973 --> 00:16:14.978 
When we write an invoice
for example then we

177
00:16:15.979 --> 00:16:20.984 
maintain the aggregate for Forderungen,
Auslieferungen und Leistungen.

178
00:16:20.984 --> 00:16:27.991 
And we maintain the aggregate on
a "Erlöse" (revenue)

179
00:16:27.991 --> 00:16:33.997 
aus "Hardwareverkäufen" (sold
hardware) and since typically company separate

180
00:16:33.997 --> 00:16:38.100 
between products and services.
we also have some services in

181
00:16:38.100 --> 00:16:44.100 
the invoice and then we book "Erlöse"
aus "Installationsleistungen".

182
00:16:44.100 --> 00:16:47.101 
So we have already three and
then there's nothing in Germany

183
00:16:47.101 --> 00:16:51.000 
happening without text, there's
always some evaluated text.

184
00:16:51.101 --> 00:16:55.101 
So we have already four
line items we maintain

185
00:16:56.102 --> 00:17:01.102 
with every single invoice. If
we have a few hundred invoices

186
00:17:01.102 --> 00:17:05.000 
per today, then we do
this a few hundred times.

187
00:17:10.103 --> 00:17:16.104 
From carrying forward aggregates on a
daily base, probably even less than daily

188
00:17:16.104 --> 00:17:18.104 
base probably only
weakly in the early days.

189
00:17:19.104 --> 00:17:24.104 
We do this in real time with
every single transaction

190
00:17:25.104 --> 00:17:28.105 
that was what
SAP did in '72,

191
00:17:30.105 --> 00:17:35.105 
first for financials, then
for sales, then for purchasing

192
00:17:36.106 --> 00:17:42.106 
then for warehousing, stock
movement, stockholding

193
00:17:43.106 --> 00:17:47.107 
and later for projects
and manufacturing.

194
00:17:49.107 --> 00:17:53.107 
The technique how we did it
was always the same, we record

195
00:17:53.107 --> 00:17:59.108 
the individual transactions, what is
happening in a company and we keep

196
00:18:02.108 --> 00:18:06.109 
well defined aggregates
updated within the transaction.

197
00:18:08.109 --> 00:18:13.109 
When you look at any database
book, when you look at any

198
00:18:15.109 --> 00:18:22.110 
benchmark, database benchmark, it
always has the element of entering data,

199
00:18:25.110 --> 00:18:27.111 
updating totals
or aggregates,

200
00:18:29.111 --> 00:18:35.111 
sometimes the data entered
will also be updated.

201
00:18:36.112 --> 00:18:40.112 
So we enter an order, it's not
shipped yet, as long as is not

202
00:18:40.112 --> 00:18:43.112 
shipped yet we can change the
order, so we have changes.

203
00:18:46.113 --> 00:18:48.113 
But we all, everybody who
build enterprise systems

204
00:18:51.113 --> 00:18:53.113 
followed this path to
build aggregations.

205
00:18:58.114 --> 00:19:01.114 
We did not build too
many different ones,

206
00:19:02.114 --> 00:19:05.114 
different to the old
punch card model,

207
00:19:07.115 --> 00:19:12.115 
in this model we can do already
parallel aggregations so we

208
00:19:12.115 --> 00:19:16.116 
can do an aggregation for that
purpose and an aggregation for

209
00:19:16.116 --> 00:19:21.116 
another purpose. We can have
multiple aggregations, we did this.

210
00:19:27.117 --> 00:19:29.117 
How many different
aggregations can we have?

211
00:19:32.117 --> 00:19:37.118 
Every single new aggregation we
invent slows down the process of

212
00:19:37.118 --> 00:19:42.118 
data entry, if we want to
keep this paradigm we update

213
00:19:42.118 --> 00:19:44.118 
in real time.

214
00:19:47.119 --> 00:19:52.119 
So what happened, what
happened was, looks actually

215
00:19:53.119 --> 00:19:59.120 
already forward, now
I say '90s, '90s.

216
00:19:59.120 --> 00:20:04.120 
We have a system, our line
items are transactions

217
00:20:04.120 --> 00:20:09.121 
are still going in here
and we keep the aggregates

218
00:20:11.121 --> 00:20:12.121 
and we keep
the line items

219
00:20:17.122 --> 00:20:21.122 
and since we can do only certain,
a certain number of aggregation

220
00:20:24.122 --> 00:20:28.123 
we call this here the online
transactional processing. We invented

221
00:20:28.123 --> 00:20:29.123 
a new system

222
00:20:31.123 --> 00:20:34.123 
the online analytical processing
system and we put the same

223
00:20:34.123 --> 00:20:35.123 
line items in here

224
00:20:37.124 --> 00:20:38.124 
and we did many more

225
00:20:41.124 --> 00:20:47.125 
aggregations here. Since we did
this, since we did not operate

226
00:20:47.125 --> 00:20:51.125 
on the system, so only, we
did only reporting here.

227
00:20:55.125 --> 00:20:58.126 
These systems could
be in size much bigger

228
00:20:59.126 --> 00:21:03.126 
and we could have many more
aggregate this is typically

229
00:21:03.126 --> 00:21:07.127 
what happened. So we kept here
only the necessary aggregates

230
00:21:08.127 --> 00:21:12.127 
for conducting the business.
We have to know how much we

231
00:21:12.127 --> 00:21:16.128 
have on stock. We have to know
how much we produced in the

232
00:21:16.128 --> 00:21:19.128 
last month in order
to be able to sell it.

233
00:21:20.128 --> 00:21:25.128 
We have to know how much we have
to pay, how much money we will

234
00:21:25.128 --> 00:21:29.129 
get, etc. So these are all
functions which are necessary

235
00:21:29.129 --> 00:21:31.129 
for the transactional
processing.

236
00:21:34.129 --> 00:21:38.130 
This is for statistics,
when we look back

237
00:21:39.130 --> 00:21:44.130 
over a longer period of times when
we do different aggregations not

238
00:21:44.130 --> 00:21:48.131 
the ones which are necessary
to conduct the business

239
00:21:48.131 --> 00:21:51.131 
actually the database folks
developed two different systems

240
00:21:52.131 --> 00:21:58.132 
for this scenario. They
said these typically,

241
00:21:59.132 --> 00:22:03.132 
these databases
are write optimized

242
00:22:05.132 --> 00:22:08.133 
and these here are
read optimized.

243
00:22:14.133 --> 00:22:19.134 
And actually this is where
we start 2000 and when was

244
00:22:19.134 --> 00:22:20.134 
it, 2006

245
00:22:25.134 --> 00:22:27.135 
to question whether that
whole scenario is true.
