WEBVTT

1
00:00:00.550 --> 00:00:04.580 
Welcome to knowledge graphs lecture
two - basic semantic technologies.

2
00:00:04.910 --> 00:00:07.900 
Today in this lecture we are going
to talk about how to build

3
00:00:07.910 --> 00:00:10.300 
a model with the
help of rdfs.

4
00:00:11.400 --> 00:00:15.770 
So let's get back to our usual
example of green house effect.

5
00:00:15.970 --> 00:00:22.280 
So we have one resource greenhouse
gas which is a contributing

6
00:00:22.280 --> 00:00:27.490 
factor of greenhouse effect and
it has a discoverer Joseph Fourier.

7
00:00:27.810 --> 00:00:30.550 
Now the point is what
does that really mean?

8
00:00:30.990 --> 00:00:34.610 
So now what do I mean by
what does that really mean?

9
00:00:35.130 --> 00:00:40.360 
So what is the where is this meaning
actually coming from? So let's take

10
00:00:40.520 --> 00:00:46.640 
the same example greenhouse gas is a
contributing factor of greenhouse effect.

11
00:00:47.140 --> 00:00:52.410 
Here greenhouse effect and greenhouse
gas both are represented

12
00:00:52.410 --> 00:00:53.870 
with the help
of URIs

13
00:00:55.220 --> 00:00:59.410 
which can also be something like
this where we have the

14
00:00:59.450 --> 00:01:04.130 
identifiers like IDs for each
of these entities like Q142

15
00:01:04.130 --> 00:01:09.300 
for greenhouse effect, Q141
for greenhouse gas.

16
00:01:09.950 --> 00:01:13.920 
Now the point is what does that
really mean now in this case

17
00:01:13.920 --> 00:01:18.070 
we cannot read the names so we don't
know what these IDs stand for.

18
00:01:19.090 --> 00:01:22.070 
In order to get the correct
meaning of these

19
00:01:22.600 --> 00:01:25.850 
we need more
semantic expressivity.

20
00:01:26.700 --> 00:01:30.620 
For doing so we are going
to talk about rdf schema.

21
00:01:32.380 --> 00:01:36.610 
So rdf schema officially called
rdf vocabulary description

22
00:01:36.610 --> 00:01:42.960 
language actually defines
some constructs. So rdf schema allows

23
00:01:43.670 --> 00:01:47.580 
us to define a class with
the help of rdfs class,

24
00:01:48.210 --> 00:01:53.910 
it also helps us in defining class
instantiations in rdf with rdf type.

25
00:01:54.230 --> 00:01:59.970 
For example greenhouse gas is a
class and carbon dioxide is

26
00:01:59.980 --> 00:02:05.030 
a greenhouse gas where carbon
dioxide is an instance of

27
00:02:05.040 --> 00:02:06.660 
the class
greenhouse gas.

28
00:02:07.870 --> 00:02:12.590 
In the set theory you can represent it this
way that the element carbon dioxide

29
00:02:12.850 --> 00:02:17.200 
is an element of the
set greenhouse gas.

30
00:02:19.500 --> 00:02:24.520 
We can further on define the properties
with the help of rdf property

31
00:02:24.740 --> 00:02:29.440 
where we can define restrictions on the
domain and the range of the properties

32
00:02:29.780 --> 00:02:32.990 
with the help of rdfs
domain and rdfs range.

33
00:02:33.460 --> 00:02:37.700 
Now for example we have two class
definitions. Person is a class

34
00:02:37.810 --> 00:02:44.110 
thing is a class. Now discoverer here
is a property whose domain is

35
00:02:44.650 --> 00:02:49.610 
a thing which is a class as we said
before and the range is the person.

36
00:02:50.260 --> 00:02:54.700 
So here in this case the relation
the property discoverer will

37
00:02:54.700 --> 00:02:57.720 
be the cartesian product
of thing and person.

38
00:03:00.150 --> 00:03:05.490 
So here everything in rdf model
is a resource. So rdfs class,

39
00:03:05.580 --> 00:03:09.640 
property, literal, XMLLiteral,
DataType they're all

40
00:03:10.470 --> 00:03:15.250 
ardfs resource. Now how do we
define more complex constructs

41
00:03:15.250 --> 00:03:18.820 
in rdfs, for example the
hierarchical relationships?

42
00:03:19.450 --> 00:03:23.150 
So we can define hierarchical
relationships on the level of

43
00:03:23.150 --> 00:03:29.790 
classes such as subclasses super classes
with the help of rdfs subclassof.

44
00:03:30.020 --> 00:03:34.790 
For example greenhouse gas is
a sub-class of air pollutant.

45
00:03:35.510 --> 00:03:38.180 
So now when we look
at the set theory

46
00:03:38.600 --> 00:03:41.320 
greenhouse gas is a
subset of air pollutant.

47
00:03:44.060 --> 00:03:47.650 
Similarly the hierarchical
relationship can also be defined

48
00:03:47.970 --> 00:03:51.740 
on the level of properties, like sub
properties and super properties

49
00:03:52.080 --> 00:03:58.320 
with the help of sub-property of. So now here is
another example that sublimation temperature

50
00:03:58.500 --> 00:04:00.460 
is the sub-property
of temperature.

51
00:04:01.760 --> 00:04:05.420 
So here as we said before
that everything in rdf

52
00:04:05.830 --> 00:04:12.250 
is an rdf resource. So literal, data type,
property, class they're all instance

53
00:04:12.610 --> 00:04:14.200 
of rdf resource.

54
00:04:15.960 --> 00:04:20.690 
Then all of them literal, data
type, property and resource are

55
00:04:20.690 --> 00:04:22.460 
the instance
of the class.

56
00:04:24.630 --> 00:04:29.920 
Rdfs domain, range, sub-property
of, sub-class and so on are the

57
00:04:30.070 --> 00:04:34.900 
rdf property and then we look
into the subclass

58
00:04:34.900 --> 00:04:38.640 
relation. So XMLliteral
is a subclass of literal,

59
00:04:39.100 --> 00:04:42.050 
data type is a subclass
of a class and so on.

60
00:04:44.910 --> 00:04:48.790 
There are further more properties
defined in rdfs for example

61
00:04:49.000 --> 00:04:55.640 
rdfs:SeeAlso. So what happens in SeeAlso
it there is that it defines a relation

62
00:04:55.810 --> 00:05:00.530 
of one resource to another resource which
is actually explaining the first resource.

63
00:05:01.170 --> 00:05:06.100 
Then we have rdfs is defined by which
points to the definition of a resource.

64
00:05:06.710 --> 00:05:11.130 
Then we have comment which keeps
the textual comments of a

65
00:05:11.140 --> 00:05:15.110 
which helps in defining the textual
commands. Then we have rdfs

66
00:05:15.110 --> 00:05:17.910 
label which is the readable
name of a resource

67
00:05:18.580 --> 00:05:20.970 
as compared to the ideas
that we saw before.

68
00:05:22.670 --> 00:05:26.850 
So now putting it all together in
this format we can see that the

69
00:05:27.070 --> 00:05:30.460 
the part at the top part
represents the class definitions,

70
00:05:31.960 --> 00:05:35.160 
then it defines the property
definition such as discoverer

71
00:05:35.160 --> 00:05:36.470 
has a type property,

72
00:05:38.050 --> 00:05:42.060 
and then we have the instance
level definitions. Based on these

73
00:05:42.060 --> 00:05:45.540 
kinds of definitions further
inferences can be drawn with the

74
00:05:45.540 --> 00:05:50.000 
help of rdf schema which
you will see in the next lecture

75
00:05:50.240 --> 00:05:52.540 
logical inference
with rdfs.
