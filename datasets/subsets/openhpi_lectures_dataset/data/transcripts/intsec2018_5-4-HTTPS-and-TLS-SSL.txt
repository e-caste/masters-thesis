WEBVTT

1
00:00:00.310 --> 00:00:03.390 
Now let's consider a very
important protocol,

2
00:00:03.750 --> 00:00:07.150 
the security protocol in
the internet in the web

3
00:00:07.400 --> 00:00:13.120 
say HTTPs protocol, the
secure HTTP protocol.

4
00:00:15.320 --> 00:00:19.110 
You remember the TCP/IP
protocol stack,

5
00:00:19.330 --> 00:00:24.040 
this is the internet protocols
in that protocol stack, the HTTP

6
00:00:24.040 --> 00:00:28.600 
protocol is responsible for
the connection of the web

7
00:00:28.850 --> 00:00:32.640 
to the internet. In the protocol
stack for each of applications

8
00:00:32.640 --> 00:00:37.480 
theer are application
protocol HTTP is the protocol

9
00:00:37.720 --> 00:00:40.870 
that makes it possible
that the world wide web

10
00:00:41.220 --> 00:00:46.610 
can make use of internet. HTTP
controls to communication between

11
00:00:46.610 --> 00:00:50.560 
the web browser and
internet service provider.

12
00:00:50.890 --> 00:00:55.500 
The internet service provider
that runs the web server.

13
00:00:55.830 --> 00:01:00.180 
And you remember client server
interaction as the principle

14
00:01:00.190 --> 00:01:05.130 
of the HTTP of world wide web and
HTTP is the protocol between

15
00:01:05.130 --> 00:01:09.330 
the browser it's a web
client and the web server.

16
00:01:10.730 --> 00:01:16.550 
HTTP a a provides no security,
although it's important

17
00:01:16.880 --> 00:01:21.350 
it only a sends the request of
the client to the server

18
00:01:21.590 --> 00:01:25.500 
and the servers sends back the response
all is standing clear text

19
00:01:25.750 --> 00:01:29.790 
almost authentication
in others. So network

20
00:01:30.170 --> 00:01:34.800 
packets are sent unencrypted,
everyone who has access to the

21
00:01:34.800 --> 00:01:37.900 
internet can see that communication
can see that communication

22
00:01:37.900 --> 00:01:43.020 
in clear text and it is
readable for everyone

23
00:01:43.280 --> 00:01:45.950 
who has access to the
internet. And then

24
00:01:46.100 --> 00:01:51.170 
second missing
part as so there is no

25
00:01:51.450 --> 00:01:54.550 
strong authentication
possible and if you

26
00:01:54.700 --> 00:01:59.340 
think for example for online
shopping or online banking,

27
00:01:59.560 --> 00:02:06.080 
ofcourse we need both. We need as well
the encryption confidentiality

28
00:02:06.390 --> 00:02:09.270 
realized by encryption,
and we need strong authentication.

29
00:02:09.270 --> 00:02:16.310 
For that reason, HTTP
should not be used if you do

30
00:02:16.430 --> 00:02:19.240 
serious things in the
internet, if you

31
00:02:19.570 --> 00:02:24.730 
use web services which
gets any personal data from you

32
00:02:24.730 --> 00:02:25.640 
or other things.

33
00:02:28.070 --> 00:02:33.950 
The HTTP protocol, there is a secure
variant and the HTTPs protocol

34
00:02:34.430 --> 00:02:40.010 
this every time should be used
if a make use of an internet

35
00:02:40.010 --> 00:02:44.540 
service which needs confidentiality,
which needs are authentication.

36
00:02:44.970 --> 00:02:51.020 
So HTTPs is a secure version
of HTTP protocol in the web,

37
00:02:51.250 --> 00:02:55.810 
all you can do with HTTP you
can do with HTTPs, but you can

38
00:02:55.810 --> 00:03:01.690 
do this in a
secure way. HTTP

39
00:03:01.990 --> 00:03:06.370 
provides the security, makes
use of TLS/SSL protocol

40
00:03:06.740 --> 00:03:11.130 
in TCP/IP stack,
in the in the internet stack.

41
00:03:11.340 --> 00:03:16.420 
You remember TLS provides security,

42
00:03:16.790 --> 00:03:21.420 
the transport layer. The internet
packages.

43
00:03:21.800 --> 00:03:24.640 
All the
communication is encrypted

44
00:03:24.890 --> 00:03:28.720 
and before the communications,
the connection

45
00:03:28.940 --> 00:03:34.430 
is started, and there are
certificate exchanges to

46
00:03:34.740 --> 00:03:40.630 
provide a strong authentication.
So TLS ensures the

47
00:03:40.630 --> 00:03:43.050 
encryption of the
communication connection

48
00:03:43.320 --> 00:03:47.550 
and in this way the
confidentiality is created

49
00:03:47.840 --> 00:03:51.760 
and a TLS/SSL
provides secure

50
00:03:52.030 --> 00:03:56.710 
mutual secure authentication
by means of certificates.

51
00:03:57.070 --> 00:04:04.920 
So we discussed this
already, TLS SSL is using hybrid

52
00:04:04.920 --> 00:04:10.170 
encryption, that means for
the exchange of the session key

53
00:04:10.170 --> 00:04:14.680 
, key encryption
method is used and then for

54
00:04:14.840 --> 00:04:19.300 
encrypting the content
of the message itself

55
00:04:19.450 --> 00:04:24.150 
a one-key encryption method is
used with that session key.

56
00:04:25.570 --> 00:04:28.880 
Now HTTPs it
can be used

57
00:04:29.140 --> 00:04:34.500 
to ensure secure communication
with strong authentication.

58
00:04:35.150 --> 00:04:40.690 
So with HTTPs, the weaknesses
of the HTTP protocol

59
00:04:40.960 --> 00:04:47.200 
can be overcome.
With HTTP, you can

60
00:04:47.390 --> 00:04:52.170 
do online banking, you can be
do e-shopping, you can do

61
00:04:52.180 --> 00:04:57.520 
government communication, send
your tax declaration

62
00:04:57.520 --> 00:05:04.320 
or others. So this is secured
and this

63
00:05:04.590 --> 00:05:10.200 
needs to be a applied when you
use and perform such services

64
00:05:10.790 --> 00:05:13.910 
which needs a data
protection and privacy.

65
00:05:15.330 --> 00:05:18.560 
What are the working
principles of HTTPs?

66
00:05:19.600 --> 00:05:23.080 
The additional security performance
I already mentioned this

67
00:05:23.090 --> 00:05:28.920 
of HTTPs is achieved via the
automaticaly initiated

68
00:05:29.120 --> 00:05:34.330 
TLS/SSL. As a user of
HTTPs you have nothing

69
00:05:34.330 --> 00:05:38.220 
to do automatically initiated
TLS/SSL of the is integrated in this

70
00:05:38.220 --> 00:05:45.740 
is HTTPs such a TLS/SSL
connection is established.

71
00:05:46.380 --> 00:05:51.700 
In detail that means the browser,
the client and then hello message

72
00:05:51.740 --> 00:05:56.350 
for example to the online bank
and then the web server of say

73
00:05:56.350 --> 00:06:02.840 
online bank replies with hello
and in that had a message to

74
00:06:02.840 --> 00:06:07.540 
parents that are defined as such
as for example what kind of

75
00:06:07.550 --> 00:06:12.920 
encryption procedures can
be used, what session idea

76
00:06:12.930 --> 00:06:18.280 
can be used, what TLS/SSL
version can be used.

77
00:06:18.900 --> 00:06:23.050 
So it is an offering to
the client to select

78
00:06:23.560 --> 00:06:27.110 
the security

79
00:06:27.280 --> 00:06:33.620 
methods he wants to apply in a
communication with the online bank.

80
00:06:34.210 --> 00:06:38.110 
Together with this hello message,
the web server also sends

81
00:06:38.420 --> 00:06:42.660 
it's certificate to the
client for authentication.

82
00:06:45.300 --> 00:06:48.720 
Then the browser starts to
verify the certificate,

83
00:06:49.220 --> 00:06:52.790 
and the most important message
into certificated is

84
00:06:53.050 --> 00:07:01.740 
the public key of the web server.
So the client wants to send

85
00:07:01.750 --> 00:07:07.600 
encrypted messages to the server
to the online bank for example

86
00:07:07.890 --> 00:07:12.040 
and to be able to encrypt as
with the two encryption method

87
00:07:12.200 --> 00:07:17.300 
he needs to know the public
key, the public key of the online

88
00:07:17.300 --> 00:07:21.390 
bank of the web server. And
this is what the browser

89
00:07:21.390 --> 00:07:25.880 
takes first and then the
session key.

90
00:07:26.220 --> 00:07:30.370 
The browser sends a pre master
secret to the web server

91
00:07:30.800 --> 00:07:33.360 
encrypted with the
public key of the web server.

92
00:07:34.120 --> 00:07:38.850 
So nobody as a of today decrypts
this pre master key,

93
00:07:39.200 --> 00:07:44.860 
with the exception of the web
server, the owner of the web server

94
00:07:45.300 --> 00:07:50.360 
of the online bank. And
then the web server

95
00:07:50.680 --> 00:07:55.880 
decrypts the pre master secret
and on the basis of the pre master secret

96
00:07:55.880 --> 00:08:00.510 
on both sides they
can compute the session key.

97
00:08:00.990 --> 00:08:03.840 
So is from that the pre master.

98
00:08:04.590 --> 00:08:09.860 
All the steps are done automatically
so user has nothing

99
00:08:09.860 --> 00:08:14.560 
to do,the user if he starts
an HTTPs a communication

100
00:08:14.930 --> 00:08:22.220 
this work flow is starting.
So the TLS protocols

101
00:08:22.460 --> 00:08:27.940 
used by this HTTPs of whole range
of different cryptographic

102
00:08:27.940 --> 00:08:31.550 
methods. So reason this
online bank does not know

103
00:08:31.690 --> 00:08:35.090 
is a very high-level
computer in connect, is

104
00:08:35.390 --> 00:08:39.460 
low level what are the
cryptographic a abilities

105
00:08:39.680 --> 00:08:46.930 
of the user. So you see TLS
offers a kind of negotiation

106
00:08:47.170 --> 00:08:51.900 
of the of procedures, the
cryptographic procedures

107
00:08:51.900 --> 00:08:56.110 
that are used. So TLS
protocol offers

108
00:08:56.750 --> 00:09:01.190 
different two key encryption methods.
To create encryption methods

109
00:09:01.190 --> 00:09:05.100 
for exchanging session key,
for example RSA

110
00:09:05.100 --> 00:09:07.800 
with Diffie
key exchange,

111
00:09:08.130 --> 00:09:11.020 
RSA with hellmann
based on the elliptic curves.

112
00:09:11.170 --> 00:09:14.580 
Digital signature algorithms
with development so is is a

113
00:09:14.580 --> 00:09:19.900 
number of two key encryption
methods. TLS protocol

114
00:09:19.910 --> 00:09:23.660 
also offers one key
encryption methods that

115
00:09:23.990 --> 00:09:27.780 
can be later used for
data traffic protection.

116
00:09:28.130 --> 00:09:33.650 
For example AES, Camellia,
IDEA, 3DES

117
00:09:33.900 --> 00:09:37.250 
so different one key
encryption method and

118
00:09:38.480 --> 00:09:43.540 
TLS also offers
different hash methods

119
00:09:43.950 --> 00:09:49.010 
different hash methods which
later on our use to ensure data

120
00:09:49.010 --> 00:09:54.400 
integrity. So for example the
HMAC based on SHA-1

121
00:09:54.420 --> 00:09:57.030 
SHA-256, MD5

122
00:09:57.540 --> 00:10:01.260 
here about this hash
functions are we already

123
00:10:01.260 --> 00:10:05.910 
discussed and where these
hash functions are needed

124
00:10:06.470 --> 00:10:09.100 
to create

125
00:10:09.380 --> 00:10:12.220 
the two signatures we
will discuss in a later

126
00:10:12.470 --> 00:10:19.000 
version. So these are the offerings
of the TLS SSL protocol,

127
00:10:19.190 --> 00:10:23.550 
there are some more parameters
that need to be negotiated

128
00:10:23.840 --> 00:10:26.390 
between sender and
the receiver

129
00:10:26.650 --> 00:10:31.770 
to agree on a common encryption
methods

130
00:10:31.770 --> 00:10:35.430 
for securing
the communication between them.

131
00:10:37.020 --> 00:10:41.830 
There are pros and cons
of HTTP, pros

132
00:10:41.980 --> 00:10:46.820 
is every internet protocol of
application layer can use TLS

133
00:10:46.820 --> 00:10:51.380 
SSL and their security features
so it's not necessary

134
00:10:51.560 --> 00:10:56.760 
for HTTP design in a
in a secure version,

135
00:10:57.210 --> 00:11:02.770 
because HTTP in connection
with this TLS SSL

136
00:11:02.940 --> 00:11:06.160 
layer provides all
securities needed.

137
00:11:07.070 --> 00:11:10.960 
TLS provides in
addition an independent

138
00:11:10.960 --> 00:11:14.570 
layer between the transport-layer
and the application layer

139
00:11:14.890 --> 00:11:19.460 
into tcp ip protocol stack and in
this way it remains transparent

140
00:11:19.460 --> 00:11:23.050 
and offers different application.
So in this case,

141
00:11:23.290 --> 00:11:28.360 
if we apply HTTPs
it's used for the

142
00:11:28.580 --> 00:11:34.610 
communication in the web. This is
huge advantages to be able

143
00:11:34.620 --> 00:11:40.310 
in a very simple way to secure
communication between web client

144
00:11:40.310 --> 00:11:43.310 
and web server, it
costs something.

145
00:11:44.130 --> 00:11:46.970 
It costs the connection

146
00:11:47.300 --> 00:11:52.320 
of set a security settings,
it takes more time

147
00:11:52.460 --> 00:11:57.440 
on the server side, so this
exchange of message which

148
00:11:57.440 --> 00:12:00.580 
tells what kind of cryptographic
methods are available,

149
00:12:00.890 --> 00:12:05.960 
the answer such kind of
negotiation it costs bandwidth, it

150
00:12:05.960 --> 00:12:10.160 
costs time.

151
00:12:10.310 --> 00:12:14.530 
Also the encrypted data offers
an additional option

152
00:12:14.700 --> 00:12:18.150 
of data compression increase
the throughput.

153
00:12:20.410 --> 00:12:25.520 
Another disadvantage is TLS
provides an end to end encryption

154
00:12:25.520 --> 00:12:30.780 
between two parties, so it's not
possible that this mechanism

155
00:12:30.780 --> 00:12:37.530 
is used for multi party
services. It is needed to read

156
00:12:37.740 --> 00:12:43.700 
packages. So TLS works
fine for two parties,

157
00:12:43.900 --> 00:12:48.010 
but it's not applicable
for multi-party services.

158
00:12:48.670 --> 00:12:51.640 
This are the pros and
cons of HTTPs,

159
00:12:51.860 --> 00:12:52.870 
but of course

160
00:12:55.900 --> 00:13:00.680 
we said that HTTPs provides
confidentiality as well as authenrication

161
00:13:00.680 --> 00:13:05.620 
makes it a must for usage

162
00:13:05.770 --> 00:13:08.800 
of a cipher of sensible
web services.

163
00:13:10.980 --> 00:13:16.610 
If we look at the development
of HTTPS and it is a development

164
00:13:16.650 --> 00:13:21.580 
of tls ssl.

165
00:13:21.990 --> 00:13:27.150 
The first version was developed
1994,

166
00:13:27.460 --> 00:13:31.940 
and released by netscape, so
netscape came with this idea

167
00:13:32.230 --> 00:13:36.730 
to a secure communication
in the web

168
00:13:37.020 --> 00:13:41.050 
and developed this for
example 1995

169
00:13:41.320 --> 00:13:46.080 
a second version
was integrated

170
00:13:46.090 --> 00:13:50.740 
into netscape navigator.
So it was in that

171
00:13:50.750 --> 00:13:55.890 
version the same key used for in
encryption and integrity test

172
00:13:56.280 --> 00:14:02.260 
and it was used MD5
for integrity test. So MD5

173
00:14:02.260 --> 00:14:06.550 
hash functions and which
is considered nowadays

174
00:14:06.710 --> 00:14:11.710 
as unsafe. Then the third
version of SSl

175
00:14:11.970 --> 00:14:17.020 
is a start to integrate
certificate validation,

176
00:14:17.470 --> 00:14:21.040 
this is an important characteristic
and needed for secure

177
00:14:21.040 --> 00:14:26.260 
authentication, it is used instead
of MD%, usied SHA-1

178
00:14:26.260 --> 00:14:30.970 
algorithm offered the
usage of SHA-1 algorithm

179
00:14:31.110 --> 00:14:35.990 
for hashing and half of the
master key depends on the MD5

180
00:14:35.990 --> 00:14:40.580 
hash function which is
considered a unsafe now.

181
00:14:40.830 --> 00:14:44.430 
And it also
provides vulnerability

182
00:14:44.850 --> 00:14:49.490 
for creating collisions. So
this was SSL 3.0

183
00:14:49.790 --> 00:14:55.610 
and but in all the time it was
offered on netscape

184
00:14:55.610 --> 00:15:00.290 
and it was proprietary software of netscape

185
00:15:00.530 --> 00:15:03.690 
and then the
internation standardization

186
00:15:03.930 --> 00:15:08.420 
community said it is
a very good mechanism

187
00:15:08.740 --> 00:15:13.630 
and we should not only use it for
a netscape navigator, we should

188
00:15:13.780 --> 00:15:19.180 
provides is as a mean to
secure other applications

189
00:15:19.180 --> 00:15:23.660 
too. So they start
from SSL 3.0

190
00:15:23.820 --> 00:15:29.750 
and developed TLS and
TLS 1999

191
00:15:30.040 --> 00:15:34.480 
was standardised by a the
internet engineering task force

192
00:15:34.670 --> 00:15:39.100 
as the successor of SSl
and the indegree

193
00:15:39.240 --> 00:15:44.270 
protection here was
improved with addition keys.

194
00:15:44.450 --> 00:15:48.900 
So that's different
to TLS 3.0.

195
00:15:54.920 --> 00:16:00.650 
If we look for implementations
ofTLS SSL protocol

196
00:16:00.910 --> 00:16:05.050 
there we have to mention
open SSL, open SSL is a

197
00:16:05.050 --> 00:16:11.020 
very widely popular version
with public source

198
00:16:11.020 --> 00:16:16.090 
code. OpenSSL
became famous

199
00:16:16.350 --> 00:16:21.350 
because of the heart bleed
bug here which will be

200
00:16:21.450 --> 00:16:26.310 
caused a sensation that in
this security software

201
00:16:26.570 --> 00:16:31.770 
ther was a big and
important vulnerability.

202
00:16:32.200 --> 00:16:37.200 
Meanwhile, it's closed so if
you're using openSSL, definitely

203
00:16:37.200 --> 00:16:42.310 
you need to use an updated version.
Another implementation of

204
00:16:42.310 --> 00:16:47.820 
TLS is provided by LipreSSL
which emerges from an open

205
00:16:47.820 --> 00:16:51.820 
project and now for
also development

206
00:16:52.010 --> 00:16:57.660 
in the OpenBSD project. Microsoft
provides an implementation

207
00:16:57.660 --> 00:17:03.560 
of TLS SSL, the microsoft
secure channel package,

208
00:17:04.030 --> 00:17:07.780 
OS X provides secure
transport package,

209
00:17:08.050 --> 00:17:12.980 
GnuTLS so you see  there are
different other

210
00:17:12.980 --> 00:17:17.770 
possibilities different
implementation of the TLS SSL

211
00:17:18.010 --> 00:17:23.070 
protocol. Gnu TLS for example is
a freely available implementation

212
00:17:23.270 --> 00:17:25.300 
under the GNU license.

213
00:17:31.130 --> 00:17:38.900 
I mentioned that also HTTPs
attacker tries

214
00:17:39.300 --> 00:17:45.980 
to attack us, TLS SSL,
so here are some of the

215
00:17:46.190 --> 00:17:51.820 
famous attacks, for example BEAST
browser exploit against

216
00:17:51.830 --> 00:17:58.590 
tls ssl. The is a prerequisite was
violation of same origin

217
00:17:58.590 --> 00:18:04.110 
policy. When we discussed
injection, then we said to secure

218
00:18:04.390 --> 00:18:10.080 
it to to defend against such
attacks, such injection attacks

219
00:18:10.460 --> 00:18:14.220 
the same origin policy
is very important.

220
00:18:14.380 --> 00:18:18.540 
And this means that
in a website

221
00:18:18.760 --> 00:18:25.000 
one should only link to
places inside this

222
00:18:25.270 --> 00:18:30.880 
website. So that's not
possible to perform injection

223
00:18:31.140 --> 00:18:35.650 
to get our rate content
into other websites, so

224
00:18:35.660 --> 00:18:38.840 
to perform a
side scripting.

225
00:18:39.690 --> 00:18:44.030 
As the effect of the beast
attacke was that it was possible

226
00:18:44.320 --> 00:18:49.690 
to read cookies and steal
tls sessions, stealing

227
00:18:49.930 --> 00:18:55.560 
hijacking tls sessions. That
means that after the authentication

228
00:18:55.870 --> 00:19:01.710 
was done

229
00:19:01.710 --> 00:19:06.420 
and secure
connection was established,

230
00:19:06.890 --> 00:19:11.740 
an attacker jumps in to
overcome the authentication.

231
00:19:13.460 --> 00:19:18.280 
Renegotiation, this was an
another attack against,

232
00:19:18.280 --> 00:19:22.250 
it was an attack in the middle

233
00:19:22.250 --> 00:19:26.020 
position to combines their own
data traffic with that of the

234
00:19:26.020 --> 00:19:30.770 
client provides, whereby server incorrectly
identifies it's client

235
00:19:30.770 --> 00:19:34.700 
as a sender, so it's
possible for the attacker

236
00:19:34.990 --> 00:19:37.980 
to interfere
with a server

237
00:19:38.350 --> 00:19:42.990 
in the name of the client.
and the server is

238
00:19:43.190 --> 00:19:47.010 
not aware that this
message does not from the client,

239
00:19:47.010 --> 00:19:49.470 
is that this messages
comes from the attacker.

240
00:19:49.870 --> 00:19:54.300 
And then perhaps the
most important attack

241
00:19:54.520 --> 00:19:59.260 
is Heartbleed attack
which allows to read

242
00:19:59.260 --> 00:20:03.750 
tls ssl
applications memory

243
00:20:04.150 --> 00:20:07.930 
with passwords and other
secret information

244
00:20:08.240 --> 00:20:12.730 
which allows a clash of this

245
00:20:12.980 --> 00:20:17.130 
sensitivity of the
data like password,

246
00:20:17.270 --> 00:20:23.230 
certificates, and others. So this
was a problem, this was a successful

247
00:20:23.230 --> 00:20:26.670 
attack against Openssl

248
00:20:27.070 --> 00:20:31.980 
and as a you should be clear
if you're using open

249
00:20:31.980 --> 00:20:37.010 
ssl,so that you have updated
the updates available, they

250
00:20:37.020 --> 00:20:41.970 
make it impossible to a
perform this heartbleed attack

251
00:20:42.310 --> 00:20:47.400 
and if you you remember we
already discussed this heartbleed

252
00:20:47.640 --> 00:20:52.950 
attack, so
here you see a it's not

253
00:20:53.310 --> 00:20:59.760 
attacks against the protocol
itself, these are attacks against

254
00:20:59.770 --> 00:21:02.150 
implementations
of the protocol.
