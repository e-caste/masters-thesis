WEBVTT

1
00:00:04.900 --> 00:00:08.080 
Now we have a closer look to the HTTP message format

2
00:00:08.590 --> 00:00:11.250 
and the HTTP status codes.

3
00:00:12.800 --> 00:00:20.320 
Reminder HTTP client and server communicate by means of request and response messages.

4
00:00:20.580 --> 00:00:25.690 
Client is requesting and resource and server is responding

5
00:00:25.700 --> 00:00:27.120 
with the resource

6
00:00:28.440 --> 00:00:30.810 
and responding with the status code.

7
00:00:31.890 --> 00:00:36.570 
This was very simple interaction model the client-server model,

8
00:00:36.590 --> 00:00:41.650 
HTTP client HTTP server client is initiating the communication,

9
00:00:41.650 --> 00:00:46.510 
client is sending a request and the server answers with the

10
00:00:47.020 --> 00:00:48.870 
with the respond. Now

11
00:00:49.590 --> 00:00:53.930 
in the protocol in the HTTP protocol it needs to be exactly defined

12
00:00:54.080 --> 00:00:56.330 
how the messages look like.

13
00:00:57.550 --> 00:01:03.160 
And the generic message format for HTTP looks as follows.

14
00:01:04.690 --> 00:01:10.500 
It starts with the start line the start line determines

15
00:01:10.850 --> 00:01:15.100 
whether the message is an request or whether the method is an response,

16
00:01:15.240 --> 00:01:21.090 
and the start line contains either request or response specific information.

17
00:01:22.490 --> 00:01:27.690 
Then the generic message format says that then the message header

18
00:01:28.520 --> 00:01:35.850 
is coming, message headers are simple pairs of names and values separated by colons.

19
00:01:36.010 --> 00:01:40.440 
For example header on name, a colon hader a value.

20
00:01:41.140 --> 00:01:46.270 
Then there is an empty line and after the empty line the message body

21
00:01:47.380 --> 00:01:51.700 
is coming and the message body contains the actual information.

22
00:01:52.120 --> 00:01:57.210 
For example the requested resource or a detailed error message.

23
00:01:57.960 --> 00:02:00.340 
The message body is optional

24
00:02:01.080 --> 00:02:06.190 
since not all of the HTTP messages need such a message body.

25
00:02:06.920 --> 00:02:11.190 
This is a generic message format as well for the request as

26
00:02:11.190 --> 00:02:16.260 
well for the response messages start line message header empty line

27
00:02:16.410 --> 00:02:17.220 
message body.

28
00:02:18.560 --> 00:02:24.220 
Now let's consider the request message format of course as follows this is

29
00:02:24.430 --> 00:02:29.890 
a generic format but it needs to specify that this

30
00:02:30.510 --> 00:02:32.470 
message now is a request message.

31
00:02:33.460 --> 00:02:39.590 
So the client starts an http session and it started by establishing

32
00:02:39.590 --> 00:02:44.730 
a TCP connection to the server and then as ending a request message.

33
00:02:45.650 --> 00:02:50.010 
The request messages format looks like follows; there is a start line

34
00:02:50.280 --> 00:02:54.890 
and this time the start line is called a request line, because

35
00:02:54.890 --> 00:03:00.410 
this is a request message. And then c start line contains the method

36
00:03:00.770 --> 00:03:07.880 
the request URI HTTP version for example get causes web

37
00:03:08.750 --> 00:03:10.950 
HTTP/1.1.

38
00:03:12.430 --> 00:03:18.570 
the URLs in the request line are usually relative.

39
00:03:19.700 --> 00:03:23.670 
Then there is a message headers section, the message headers

40
00:03:23.760 --> 00:03:26.820 
section contains different types of errors.

41
00:03:27.440 --> 00:03:32.490 
It starts with a general header generate a header is about the message itself

42
00:03:32.700 --> 00:03:37.680 
and are not specific to a request or response.

43
00:03:38.230 --> 00:03:42.470 
Then there is a request header, the request contains the details

44
00:03:42.810 --> 00:03:45.170 
about the request itself.

45
00:03:46.360 --> 00:03:53.210 
Then there is the entity header, the entity header describes the body content

46
00:03:53.690 --> 00:03:55.770 
if its provided.

47
00:03:57.470 --> 00:04:00.150 
And then we have the empty line and

48
00:04:00.830 --> 00:04:03.100 
eventually the message body.

49
00:04:03.780 --> 00:04:06.810 
This is the request message format;

50
00:04:07.840 --> 00:04:11.530 
for example let's have a closer look to in GET request.

51
00:04:12.680 --> 00:04:17.430 
opening the openHPI course over you at this URL

52
00:04:18.880 --> 00:04:23.930 
To do this, the browser performs a get request like the following; GET

53
00:04:24.310 --> 00:04:29.630 
causes HTTP/1.1 and then we see the different today

54
00:04:29.630 --> 00:04:32.280 
it's a connection that hosts the user agent accept.

55
00:04:34.200 --> 00:04:42.720 
The GET line this is a request line, then the date and the connection is

56
00:04:43.770 --> 00:04:50.070 
parts of the general header and this specifying the host, the user agent,

57
00:04:50.170 --> 00:04:55.730 
the accept encoding, accept language, this are parts that belong

58
00:04:55.920 --> 00:05:01.190 
to a request header. And then the message is completed by an

59
00:05:01.490 --> 00:05:04.770 
entity had an empty line and the message body.

60
00:05:05.780 --> 00:05:11.030 
if you look to the to the internals in this method then here

61
00:05:11.040 --> 00:05:16.420 
a connection keep alive means that this is an persistent http

62
00:05:16.920 --> 00:05:20.590 
those at another

63
00:05:21.780 --> 00:05:29.280 
request response cycle can be performed within one tcp section.

64
00:05:30.080 --> 00:05:35.280 
here it is a domain part of the URL it tells the host it is

65
00:05:35.280 --> 00:05:42.140 
by openHPI and here this tells what is the browser

66
00:05:42.290 --> 00:05:45.700 
and what's the version of the browser that's used

67
00:05:47.100 --> 00:05:53.770 
by the requesting party. And then here is part of the information

68
00:05:53.770 --> 00:05:59.270 
for the content negotiation it tells that the german language version is

69
00:06:00.920 --> 00:06:04.880 
federalized and if it's not available

70
00:06:05.490 --> 00:06:07.660 
then other languages

71
00:06:08.460 --> 00:06:10.790 
an be provided.

72
00:06:12.500 --> 00:06:18.330 
Another example is a post request I want to show supposed method is

73
00:06:18.330 --> 00:06:21.920 
typically being used when the browser should submit a form

74
00:06:22.310 --> 00:06:25.090 
for example when you password is requested

75
00:06:25.490 --> 00:06:29.790 
or when you want to start your openHPI section.

76
00:06:30.560 --> 00:06:37.160 
This is an post message, again the post account reset HTTP/1.1

77
00:06:37.160 --> 00:06:41.640 
this is a request line the general header is a connection

78
00:06:41.820 --> 00:06:44.690 
keep alive then we have a request header

79
00:06:45.100 --> 00:06:50.940 
with the URL of the host and some more content then we have the entity header

80
00:06:51.350 --> 00:06:56.810 
with the application content type the empty line and then the

81
00:06:56.810 --> 00:06:58.330 
message body is coming.

82
00:06:59.760 --> 00:07:06.090 
Here the content type gives the MIME type of the content in the message body

83
00:07:06.240 --> 00:07:11.250 
so that the client is able to interpret this in the right way

84
00:07:11.480 --> 00:07:16.650 
and to display it in the right way. Here it is a information that

85
00:07:17.930 --> 00:07:23.790 
about the length of the message body that's given in a byte

86
00:07:24.230 --> 00:07:29.480 
and here these are the key-value pairs in the form field

87
00:07:30.540 --> 00:07:35.740 
which tells the coding scheme the authentication code,

88
00:07:36.690 --> 00:07:41.900 
the authentication token and addresses and more.

89
00:07:45.620 --> 00:07:50.120 
Two examples four the request messages, now let's consider the

90
00:07:50.120 --> 00:07:53.760 
response message and the response message format.

91
00:07:54.420 --> 00:07:57.730 
The server delivers the requesting resources

92
00:07:58.380 --> 00:08:01.460 
on arrow code as a respond message.

93
00:08:02.060 --> 00:08:06.560 
So as a format of a response message looks like follows as a start line

94
00:08:07.280 --> 00:08:08.520 
of the response.

95
00:08:09.910 --> 00:08:15.940 
Status line in case of response it tells the HTTP version status

96
00:08:15.940 --> 00:08:19.590 
code a reason phrase for example here

97
00:08:20.830 --> 00:08:22.420 
resolves is not found.

98
00:08:23.690 --> 00:08:29.110 
HTTP version may not be greater than the version from the corresponding request

99
00:08:29.470 --> 00:08:34.850 
then we have the general header, the general header and the entity headers

100
00:08:35.260 --> 00:08:39.620 
is they are the same as in the request messages,

101
00:08:40.120 --> 00:08:43.280 
and in between there is a response header.

102
00:08:43.890 --> 00:08:47.690 
The response header contains additional information for the client

103
00:08:48.040 --> 00:08:50.720 
that varies depending on the actual status

104
00:08:51.370 --> 00:08:56.410 
of the message. And then there is empty line and the message body

105
00:08:56.900 --> 00:09:02.190 
either contains the delivered resources or information about an arrow.

106
00:09:02.700 --> 00:09:06.090 
this is how as a response format looks like;

107
00:09:06.700 --> 00:09:10.780 
A first example of a successful response

108
00:09:11.280 --> 00:09:16.290 
when a request can be answered successfully by a server, the server delivers

109
00:09:16.460 --> 00:09:20.350 
the resource together with a 200 OK status code.

110
00:09:21.110 --> 00:09:23.060 
Here is an example of such code

111
00:09:23.720 --> 00:09:28.270 
again the HTTP/1.1 200 OK that's the status line,

112
00:09:28.660 --> 00:09:33.300 
then we have a general header was a date and was a connection type

113
00:09:33.500 --> 00:09:35.370 
we have response header,

114
00:09:36.780 --> 00:09:38.550 
we have the entity had,

115
00:09:39.430 --> 00:09:44.460 
the empty line and then the message body, message body with the

116
00:09:44.910 --> 00:09:47.270 
document with the web document that shown.

117
00:09:47.820 --> 00:09:53.540 
Here in the response header that is  a user agent

118
00:09:53.540 --> 00:09:55.170 
string in the request

119
00:09:56.040 --> 00:10:00.290 
then we have in the content, we have

120
00:10:01.180 --> 00:10:03.880 
information that the content in the message body

121
00:10:04.440 --> 00:10:12.160 
is actually not plain HTTP it is compressed by means of GZIP.

122
00:10:13.020 --> 00:10:15.560 
Here is an example

123
00:10:18.810 --> 00:10:21.530 
that the requested resource

124
00:10:21.940 --> 00:10:26.250 
is not found by the server when the resource

125
00:10:27.460 --> 00:10:32.760 
from the request cannot found by the server then the server will answer

126
00:10:32.860 --> 00:10:37.950 
within a 404 not found status code here.

127
00:10:38.540 --> 00:10:45.610 
An example in the status line you see directly this information not found

128
00:10:45.850 --> 00:10:50.610 
then general response header entity header as we had in the

129
00:10:51.490 --> 00:10:56.630 
positive case. Here you see in the message body,

130
00:10:57.120 --> 00:11:00.650 
as a message body contains the error message

131
00:11:01.490 --> 00:11:05.840 
that may be read by the user that the user knows gets a reaction

132
00:11:06.010 --> 00:11:07.440 
page was not found.

133
00:11:08.730 --> 00:11:10.950 
I guess you know this information from your

134
00:11:12.120 --> 00:11:16.990 
movements in the web. Here is an

135
00:11:19.350 --> 00:11:26.550 
example, about the situation when a requested resource has been moved

136
00:11:26.860 --> 00:11:28.380 
by

137
00:11:30.340 --> 00:11:33.310 
having additional structures or a better

138
00:11:34.260 --> 00:11:36.060 
situation on the server.

139
00:11:37.230 --> 00:11:40.840 
When the site owner moves a resource, he can

140
00:11:42.190 --> 00:11:48.650 
makes it visible by means of a redirect, and the redirect pointing

141
00:11:48.650 --> 00:11:54.610 
to the new location and this can be implemented by means of the status code

142
00:11:56.190 --> 00:11:58.750 
301 moved permanently.

143
00:12:00.140 --> 00:12:03.430 
So for example if we put our

144
00:12:04.260 --> 00:12:11.300 
causes into the archive mode then we move it and we show that it's permanently moved.

145
00:12:12.660 --> 00:12:14.350 
Again here we have our

146
00:12:16.180 --> 00:12:21.550 
respond message and here you see the status line as there is information

147
00:12:21.830 --> 00:12:25.960 
that the resource is permanently moved, and

148
00:12:26.450 --> 00:12:29.340 
here in the response header the new

149
00:12:30.010 --> 00:12:33.080 
you URL is given, so here this is

150
00:12:33.710 --> 00:12:41.150 
the information that shows that the information which was formerly requested under the

151
00:12:41.520 --> 00:12:46.740 
new you URL given by the client, that this information now can be find

152
00:12:46.860 --> 00:12:51.620 
here under this URL and then the browser automatically

153
00:12:52.720 --> 00:12:55.730 
request the resource from the new place.

154
00:12:59.940 --> 00:13:05.540 
Let's have a look to the different HTTP status codes we already saw

155
00:13:05.870 --> 00:13:11.640 
some of this. So HTTP defines different classes of status code.

156
00:13:13.130 --> 00:13:18.690 
First class which starts with a one the status code are three

157
00:13:19.610 --> 00:13:26.720 
digits and those one which start with a one also called informational messages.

158
00:13:27.890 --> 00:13:34.830 
Provisional response just for information for example 101 switching protocols

159
00:13:35.280 --> 00:13:40.870 
here when the client asks to switch protocol the server acknowledges

160
00:13:41.500 --> 00:13:43.450 
this by means of 101

161
00:13:44.450 --> 00:13:46.150 
status code.

162
00:13:46.750 --> 00:13:49.930 
Then there is a class of status code start with a 2

163
00:13:51.660 --> 00:13:57.700 
our success messages. Codes indicate that the server could receive

164
00:13:57.700 --> 00:14:03.480 
and process the requested resource successfully for example

165
00:14:03.800 --> 00:14:07.370 
202 OK status code.

166
00:14:08.170 --> 00:14:11.940 
Then we have a third class of status codes

167
00:14:12.350 --> 00:14:15.920 
starting with a 3 and 3 indicates

168
00:14:16.420 --> 00:14:22.060 
a re-direction. These codes in the class starting with a 3

169
00:14:22.060 --> 00:14:26.080 
indicate that clients must perform an additional action

170
00:14:26.620 --> 00:14:32.120 
or an additional request to receive the actor or resource because

171
00:14:32.120 --> 00:14:35.970 
the actor or resource is no more reachable under the

172
00:14:36.590 --> 00:14:41.800 
given URL by means of the redirect a new URL is given.

173
00:14:42.280 --> 00:14:48.040 
For example resources already at a three or one moved permanently information.

174
00:14:49.900 --> 00:14:53.840 
Then we have the arrow messages,

175
00:14:54.440 --> 00:14:59.730 
status codes which show an arrow start with a 4.

176
00:15:00.940 --> 00:15:06.470 
These are codes indicating that the client request an errors.

177
00:15:07.000 --> 00:15:13.340 
For example malformed or requesting non-existing non also re-sized resource.

178
00:15:13.620 --> 00:15:18.910 
there are different ways, example, 403 bad request here the

179
00:15:18.910 --> 00:15:24.080 
client's request was syntactically malformed.

180
00:15:25.610 --> 00:15:30.020 
Then we have the class of status codes starting with a 5

181
00:15:30.490 --> 00:15:33.610 
and this indicate server arrows.

182
00:15:34.430 --> 00:15:38.730 
So the client's request was valid but the server wasn't able

183
00:15:38.730 --> 00:15:39.990 
to fulfill the request

184
00:15:40.660 --> 00:15:44.160 
and knows that the reason is on server side.

185
00:15:44.640 --> 00:15:49.340 
So for example as a 503 service unavailable status code

186
00:15:49.380 --> 00:15:55.500 
shows that the server could temporarily not answer the request, for example due

187
00:15:55.810 --> 00:15:58.900 
to an overload. Here in the

188
00:16:00.010 --> 00:16:08.150 
URL of the yana page the IANA maintains the official registry for the

189
00:16:08.340 --> 00:16:11.970 
HTTP status codes so is the actual situation

190
00:16:13.530 --> 00:16:17.840 
also resized list can be found under this

191
00:16:18.290 --> 00:16:23.210 
WWW.IANA.ORG assignments HTTP status codes.
