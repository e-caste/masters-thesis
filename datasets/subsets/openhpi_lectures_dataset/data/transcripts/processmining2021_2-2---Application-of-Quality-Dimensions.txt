WEBVTT

1
00:00:00.730 --> 00:00:05.430 
Welcome to this video clip in which we discuss
the application of quality dimensions.

2
00:00:06.360 --> 00:00:10.590 
So, in the last clip we have considered
three basic quality dimensions.

3
00:00:10.820 --> 00:00:13.990 
We have considered fitness
answering the question does the

4
00:00:13.990 --> 00:00:16.160 
model cover the traces
from the event log,

5
00:00:16.930 --> 00:00:20.540 
we have discussed precision - so
does the model allow for traces

6
00:00:20.540 --> 00:00:22.440 
that are not included
in event log,

7
00:00:23.090 --> 00:00:27.160 
and third simplicity - does the model
represent the event log as simple

8
00:00:27.370 --> 00:00:28.090 
as possible.

9
00:00:30.120 --> 00:00:35.370 
So let's take a look at a number of
examples and let's see how they relate

10
00:00:35.550 --> 00:00:39.210 
or how they turn out with
respect to precision,

11
00:00:40.110 --> 00:00:41.730 
fitness and simplicity.

12
00:00:42.420 --> 00:00:47.150 
So what you see here at the top
is a small event log and

13
00:00:47.150 --> 00:00:51.880 
what we have done is that we have
highlighted the three specific activities

14
00:00:52.030 --> 00:00:55.560 
from the highlighted
fragment down here. So

15
00:00:56.540 --> 00:01:01.280 
what we have used here is the sequence
pattern that we looked at before

16
00:01:01.810 --> 00:01:04.680 
and what we are now
interested in is basically

17
00:01:05.090 --> 00:01:11.390 
how this fragment relates to this event log
in terms of fitness, precision and simplicity.

18
00:01:12.350 --> 00:01:14.870 
I think the simplicity here is
rather straightforward because

19
00:01:14.870 --> 00:01:19.010 
the fragment is very simple but of
course we would like to understand

20
00:01:19.300 --> 00:01:23.120 
how does it look for fitness and
precision. So let's take a look

21
00:01:23.340 --> 00:01:26.930 
and if we now try to - the first
thing that we would like to

22
00:01:26.930 --> 00:01:29.950 
do is of course to understand
fitness and to this end we would

23
00:01:29.950 --> 00:01:33.960 
replay each of these traces from
the small log in this model

24
00:01:34.390 --> 00:01:38.340 
and what we then realize is that
actually only one of these

25
00:01:38.340 --> 00:01:42.010 
traces can be replayed in a
model. Well, why is that? Because

26
00:01:42.010 --> 00:01:45.470 
this fragment, this sequence fragment
that we have seen before

27
00:01:45.770 --> 00:01:48.250 
is very strict. It
only allows us to

28
00:01:50.290 --> 00:01:53.500 
review the claim internally,
then invite the claim review

29
00:01:53.510 --> 00:01:56.730 
and then receive the claim review.
So we can only connect these

30
00:01:56.730 --> 00:02:00.510 
three activities in that
particular order, any other order

31
00:02:00.710 --> 00:02:05.300 
and we do observe other orders in the
other three traces is not allowed

32
00:02:05.480 --> 00:02:07.270 
according to
this fragment.

33
00:02:08.210 --> 00:02:12.110 
So that means only one out of four
traces can be replayed in this model.

34
00:02:12.390 --> 00:02:16.410 
For the fitness that means
that the fitness is low.

35
00:02:17.260 --> 00:02:20.700 
From the perspective of precision
we would conclude that the

36
00:02:20.700 --> 00:02:23.370 
precision is high because the
model does not allow for more

37
00:02:23.370 --> 00:02:26.860 
traces than a log which is of
course in case of a sequence

38
00:02:26.860 --> 00:02:30.440 
not very surprising because it
only allows for this very same

39
00:02:30.970 --> 00:02:33.410 
this very specific
activity order.

40
00:02:34.650 --> 00:02:36.880 
As I said,
simplicity is not

41
00:02:37.810 --> 00:02:40.930 
a big concern here because the
model fragment is indeed very

42
00:02:40.930 --> 00:02:42.760 
simple and cannot be
simplified further.

43
00:02:43.650 --> 00:02:47.080 
So let's look at another example.
Let's look at the ad-hoc process

44
00:02:47.080 --> 00:02:51.370 
we have also seen before. So you
remember that the ad-hoc process allows

45
00:02:51.560 --> 00:02:55.670 
to execute allows us to execute
these activities in any given

46
00:02:55.680 --> 00:02:58.650 
order. So we have to execute all of
them that's important. We cannot

47
00:02:58.820 --> 00:03:02.670 
just skip one of these three activities
but the order is not defined.

48
00:03:03.340 --> 00:03:07.060 
So any order is allowed. So if
we now compare this again, if

49
00:03:07.060 --> 00:03:11.680 
we try to replay these traces in this
model we will realize of course

50
00:03:12.530 --> 00:03:17.350 
that all these traces can be replayed
because the ad-hoc process is fine

51
00:03:17.610 --> 00:03:20.670 
with any order. So from the
perspective of fitness we would

52
00:03:20.670 --> 00:03:24.580 
conclude that the fitness is high because all
four traces can be replayed successfully.

53
00:03:25.590 --> 00:03:27.610 
From the perspective
of precision however

54
00:03:28.140 --> 00:03:30.510 
we would conclude that the
precision is rather low

55
00:03:31.160 --> 00:03:36.270 
since the model allows for several
traces that are not included in the log.

56
00:03:36.920 --> 00:03:43.070 
So, because this fragment is
so flexible with respect

57
00:03:43.070 --> 00:03:47.570 
to the allowed execution orders, we
simply have quite some of these

58
00:03:47.750 --> 00:03:52.500 
execution orders that we have not
included here, for instance this one -

59
00:03:53.070 --> 00:03:56.340 
receive the claim, review the
claim internally, receive the

60
00:03:56.340 --> 00:04:00.170 
claim review and invite. This is
allowed according to this fragment

61
00:04:00.330 --> 00:04:04.550 
but not included in our log. If you
think about it, this particular

62
00:04:04.550 --> 00:04:08.350 
example here it also makes sense.
Of course that we here in

63
00:04:08.350 --> 00:04:12.030 
this case receive the claim review
before we actually have invited it it

64
00:04:12.670 --> 00:04:16.330 
also does not make a lot of
sense. However this fragment

65
00:04:16.810 --> 00:04:19.960 
allows us to execute activities
in a particular order.

66
00:04:20.800 --> 00:04:21.820 
This is just one of the

67
00:04:22.510 --> 00:04:25.560 
examples that this fragment allows
for. There are some others.

68
00:04:25.830 --> 00:04:29.340 
So we would conclude that the
precision is low again. From a

69
00:04:29.340 --> 00:04:32.290 
simplicity perspective there is
not much to criticize here

70
00:04:32.530 --> 00:04:34.890 
because the fragment is rather
simple and there is also no

71
00:04:34.890 --> 00:04:38.160 
way to simplify this further at least
from the structural perspective.

72
00:04:39.640 --> 00:04:43.310 
Let's turn to the AND split that we
have also seen before. So this

73
00:04:43.310 --> 00:04:46.210 
is actually the fragment that we have
included in the original model.

74
00:04:47.240 --> 00:04:49.700 
So, how does this fragment
relate to this log?

75
00:04:50.130 --> 00:04:55.040 
So, when we try to replay these traces
in this fragment, we realize that

76
00:04:55.690 --> 00:05:00.860 
all of them can be replayed. So all
traces can be successfully replayed

77
00:05:01.140 --> 00:05:06.240 
in this model. So again the
fitness is high; all four traces

78
00:05:06.500 --> 00:05:10.490 
can be successfully replayed. The
precision is good since the

79
00:05:10.490 --> 00:05:13.100 
model only allows for
one additional trace.

80
00:05:13.530 --> 00:05:16.960 
So there is just a single trace
allowed according to this fragment

81
00:05:16.960 --> 00:05:21.060 
it is not included in our very
small log here and that is

82
00:05:22.970 --> 00:05:25.030 
this sequence

83
00:05:25.720 --> 00:05:30.620 
invite claim review, receive claim review
and then review claim internally.

84
00:05:31.180 --> 00:05:34.940 
So this is a little surprising.
So here this fragment actually

85
00:05:34.940 --> 00:05:38.700 
defines that we always have to invite
review before we can receive it.

86
00:05:38.890 --> 00:05:39.970 
It also makes sense,
of course

87
00:05:40.790 --> 00:05:42.930 
but this activity
is in a,

88
00:05:43.580 --> 00:05:47.900 
so to say, executed independently.
So we can expect that this

89
00:05:48.230 --> 00:05:51.940 
is happening at any given moment.
It could happen before we

90
00:05:51.940 --> 00:05:53.030 
invite the claim review,

91
00:05:53.830 --> 00:05:56.040 
it could happen before
we receive the claim

92
00:05:56.700 --> 00:06:00.080 
review and it can also happen

93
00:06:00.140 --> 00:06:02.710 
after we see if the claim
is received. So at any given moment

94
00:06:03.130 --> 00:06:07.030 
this is how concurrency works
and this is the one additional

95
00:06:07.030 --> 00:06:09.920 
trace that we have not observed
here but is a lot. But since

96
00:06:09.920 --> 00:06:14.070 
it's only one, we would argue okay
there's one more trace the model

97
00:06:15.340 --> 00:06:16.750 
makes a reasonable
precision.

98
00:06:18.960 --> 00:06:22.480 
So, let's look at one more example that
we actually haven't seen before.

99
00:06:22.740 --> 00:06:24.940 
So what you see here
is maybe a bit of a

100
00:06:25.460 --> 00:06:29.300 
clear example. So what we have done
here is that we have created

101
00:06:29.330 --> 00:06:35.070 
an XOR split and for each of these
combinations these highlighted

102
00:06:35.070 --> 00:06:36.470 
activities we
have created

103
00:06:37.090 --> 00:06:42.100 
an extra branch. So what you see
here and the first branch says

104
00:06:42.560 --> 00:06:47.270 
invite claim review, review claim
internally and receive claim review.

105
00:06:47.750 --> 00:06:53.090 
So this branch perfectly replicates
this trace, so this

106
00:06:53.090 --> 00:06:57.660 
order of activities here. The second
branch as you see actually

107
00:06:58.010 --> 00:07:03.530 
the order is actually exactly the same
but yet we have included it separately

108
00:07:03.750 --> 00:07:07.840 
as an extra branch and the same
we have done for the other two

109
00:07:08.730 --> 00:07:11.690 
branches here. So we have four different
traces, we have four different

110
00:07:11.950 --> 00:07:17.030 
branches in the XOR split perfectly
resembling the execution

111
00:07:17.030 --> 00:07:21.410 
orders that we have seen in the log. So what
does it mean for fitness and precision?

112
00:07:21.820 --> 00:07:24.840 
If we take a look at fitness, we
conclude that it's high because

113
00:07:24.840 --> 00:07:28.500 
all four traces can be replayed
successfully, all four traces are covered.

114
00:07:29.170 --> 00:07:31.020 
From a precision
perspective,

115
00:07:32.150 --> 00:07:35.060 
we would also say that the position
is high because the model

116
00:07:35.060 --> 00:07:37.900 
does not allow for more traces
in the log. Because of this

117
00:07:38.660 --> 00:07:43.000 
peculiar construct we cover exactly
what is there and we also

118
00:07:43.000 --> 00:07:44.330 
do not allow for more.

119
00:07:44.930 --> 00:07:46.580 
So the precision
is high as well.

120
00:07:47.240 --> 00:07:51.670 
The question is of course is this a good
fragment then? Well, we would argue

121
00:07:51.790 --> 00:07:53.600 
that from a simplicity
perspective

122
00:07:54.610 --> 00:07:59.050 
this is a very bad example because
it's unnecessarily complex, it

123
00:07:59.160 --> 00:08:02.330 
simply does not abstract
from the behavior

124
00:08:03.010 --> 00:08:06.090 
of the log, from the execution
order of the log at all

125
00:08:06.680 --> 00:08:09.810 
and simply creates a separate
branch for each of these

126
00:08:10.340 --> 00:08:15.460 
different traces. This is possible,
this is not technically wrong

127
00:08:15.790 --> 00:08:19.960 
but of course the simplicity suffers. So
the model becomes unnecessarily complex

128
00:08:21.020 --> 00:08:22.140 
which is the price here.

129
00:08:24.000 --> 00:08:29.490 
So, to summarize - we have looked at
these four different fragments and

130
00:08:30.010 --> 00:08:34.690 
again so here this was
our example for overfitting,

131
00:08:34.690 --> 00:08:37.290 
the sequence. And what
we have seen is

132
00:08:38.010 --> 00:08:41.010 
not very surprisingly that the
fitness is low because it only

133
00:08:41.330 --> 00:08:43.840 
allows for one specific
execution or

134
00:08:44.590 --> 00:08:48.860 
the fitness is low, position is good,
simplicity is good but the fitness suffers.

135
00:08:49.240 --> 00:08:54.440 
So that would be not a very good choice
in practice for this particular log.

136
00:08:55.000 --> 00:08:58.300 
For the ad-hoc process we have
seen the fitness was high but

137
00:08:58.300 --> 00:09:01.120 
the precision was low because
the d-hoc process allows for

138
00:09:01.180 --> 00:09:03.670 
many traces that are actually
not included in our log here.

139
00:09:04.670 --> 00:09:07.220 
So we would argue this is
also not a very good choice.

140
00:09:08.930 --> 00:09:13.740 
The XOR split has a good precision and
a good fitness but the simplicity

141
00:09:13.750 --> 00:09:18.330 
suffered because we have represented
the traces from the log the

142
00:09:18.690 --> 00:09:23.160 
execution orders from the log in a very
complex fashion are unnecessarily complex.

143
00:09:23.680 --> 00:09:28.840 
So, what we would conclude for our event
log here in this specific example is

144
00:09:29.050 --> 00:09:32.870 
from the application of these
three dimensions is that fitness

145
00:09:33.950 --> 00:09:36.980 
and precision and simplicity
are high for this AND split.

146
00:09:37.450 --> 00:09:42.020 
So, it has a good fitness, covers all
the traces. It has a good precision

147
00:09:42.390 --> 00:09:45.530 
because it only allows for one
additional trace and simplicity

148
00:09:45.530 --> 00:09:48.080 
wise we would argue that this
is a reasonable fragment

149
00:09:49.150 --> 00:09:51.330 
which we cannot
simplify further.

150
00:09:51.990 --> 00:09:57.310 
So, what we see here, to summarize that
is that we have used this notion of

151
00:09:57.440 --> 00:10:01.050 
overfitting and underfitting to
define these three different

152
00:10:01.050 --> 00:10:04.610 
quality criteria - fitness and
precision and simplicity which

153
00:10:04.930 --> 00:10:06.060 
only relates
to the model

154
00:10:06.950 --> 00:10:10.960 
but this really helps us to decide
whether a certain fragment or

155
00:10:11.450 --> 00:10:16.030 
an entire model is a good
representation of our event log and

156
00:10:16.170 --> 00:10:20.780 
whether we have used the right discovery
algorithm or whether we should probably

157
00:10:21.140 --> 00:10:23.930 
look for another configuration
or even for another algorithm.
