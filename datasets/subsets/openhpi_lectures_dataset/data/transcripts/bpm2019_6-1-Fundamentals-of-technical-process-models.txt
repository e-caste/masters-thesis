WEBVTT

1
00:00:00.670 --> 00:00:04.480 
Hello and welcome along to this
fundamental series of videos

2
00:00:04.770 --> 00:00:08.600 
about using modeling and execution
with Camunda. My name is

3
00:00:08.600 --> 00:00:12.080 
Natal I'm a consultant with Camunda
and I'm joined here my colleague.

4
00:00:12.240 --> 00:00:15.210 
my name is Neda Uleman I am a
consultant at Camunda too.

5
00:00:15.410 --> 00:00:18.400 
Yeah and we'll hopefully go
through this next videos and be

6
00:00:18.400 --> 00:00:21.840 
able to give you a really good
understanding about how execution

7
00:00:21.840 --> 00:00:24.270 
works and practically speaking
how to make it happen.

8
00:00:24.810 --> 00:00:27.530 
So let's actually talk through
exactly what that is gonna involve.

9
00:00:27.720 --> 00:00:31.060 
Ok first we're going to learn
the fundamentals of technical

10
00:00:31.060 --> 00:00:34.950 
process models and when we know the
fundamentals we are going to add

11
00:00:35.170 --> 00:00:38.840 
technical attributes to our
model that we've built so far.

12
00:00:38.840 --> 00:00:41.770 
And the fourth video we deploy
and run a process so then we

13
00:00:41.770 --> 00:00:45.600 
give the model to the engine and
and in the two last videos we

14
00:00:45.600 --> 00:00:49.390 
are going to demo you the things
we talked about before so

15
00:00:49.390 --> 00:00:55.510 
you see our engine in life. Ok
so let's start with the first

16
00:00:55.510 --> 00:00:59.630 
video. Let's talk a little bit about the
fundamentals of a technical process model.

17
00:00:59.980 --> 00:01:04.000 
So in the previous videos
we've modeled DMN

18
00:01:04.000 --> 00:01:07.940 
tables and we've modelled BPMN
diagrams and most of the time

19
00:01:08.000 --> 00:01:11.540 
we kind of talked about organizational
projects. So we talked

20
00:01:11.540 --> 00:01:15.710 
about the process documentation
and we wanted to bring or we

21
00:01:15.710 --> 00:01:19.360 
did that to have more transparency
inside an organization. We

22
00:01:19.360 --> 00:01:23.100 
also designed the process
because we could improve by

23
00:01:23.110 --> 00:01:26.210 
by modeling the process we could
improve the design but we

24
00:01:26.210 --> 00:01:29.090 
haven't talked that much about
IT projects yet and actually

25
00:01:29.090 --> 00:01:32.710 
BPMN 2.0 has the possibility
to support us in

26
00:01:32.710 --> 00:01:36.470 
IT projects as well because
every technical component has

27
00:01:36.470 --> 00:01:41.140 
a workflow and with BPMN actually
we can model this workflow.

28
00:01:41.300 --> 00:01:45.530 
And that could help us for
requirement management,

29
00:01:45.530 --> 00:01:48.760 
for process execution of course.
That means that we orchestrate

30
00:01:48.770 --> 00:01:53.170 
systems and human workflow and also
for technical implementation

31
00:01:53.330 --> 00:01:57.540 
and if we do both together the organizational
projects and the IT projects

32
00:01:57.730 --> 00:02:00.970 
we could then achieve a
business IT alignment with

33
00:02:00.970 --> 00:02:03.880 
the same language of course
everything in BPMN 2.0.

34
00:02:03.880 --> 00:02:08.040 
And that's a real benefit here.
So what do we need actually

35
00:02:08.040 --> 00:02:11.290 
if we talk about an IT project?
Well if we talk about process

36
00:02:11.290 --> 00:02:14.330 
execution it would be good
that we have something in

37
00:02:14.330 --> 00:02:18.180 
place that could take our BPMN
diagram and execute it.

38
00:02:18.180 --> 00:02:22.170 
For that we have the process
engine actually here. And

39
00:02:22.180 --> 00:02:26.030 
what is the process engine
getting from us. The processor

40
00:02:26.040 --> 00:02:30.160 
engine will get here a technical
model that goes into the process

41
00:02:30.160 --> 00:02:34.650 
engine and then once we have the
model here and the engine deployed

42
00:02:34.900 --> 00:02:38.680 
we will or we can run instances
on it. So that means

43
00:02:38.680 --> 00:02:42.710 
every instance were created one
token here and the process starts

44
00:02:42.820 --> 00:02:46.390 
and here we add the human task and
as soon as the human tell us

45
00:02:46.390 --> 00:02:49.580 
I'm ready with my task the engine
knows that it needs to push

46
00:02:49.580 --> 00:02:54.610 
the token to the next activity. In this case
it's the service task a test service call

47
00:02:54.770 --> 00:02:57.880 
so this would probably involve
some code. So the engine here

48
00:02:57.880 --> 00:03:01.330 
will run some code and so on and
so forth. And that is what

49
00:03:01.330 --> 00:03:06.620 
the engine is doing till the end of
the process or of the instance.

50
00:03:06.810 --> 00:03:09.660 
So that means of course if you
have one model deployed you

51
00:03:09.660 --> 00:03:13.060 
could have multiple instance
running on your process model.

52
00:03:13.460 --> 00:03:18.330 
So the main aspects actually are
for the engine the execution

53
00:03:18.330 --> 00:03:21.820 
of our technical process model
and the measurement of

54
00:03:21.820 --> 00:03:26.790 
technical indicators and of course as we have
seen before the orchestration of human

55
00:03:27.020 --> 00:03:30.060 
work and IT systems.

56
00:03:30.870 --> 00:03:34.500 
In a broader sense of course you can
monitor your running instances

57
00:03:34.510 --> 00:03:38.640 
if you have deployed something,
you can then also have a human

58
00:03:38.640 --> 00:03:42.680 
workflow management and of course
your whole engine wll fit

59
00:03:42.680 --> 00:03:46.720 
somehow in your architecture or
landscape of a company. So it

60
00:03:46.720 --> 00:03:51.320 
is part of your IT architecture
and can be used for example to

61
00:03:51.490 --> 00:03:54.740 
to enable a service orientated
architecture. Also you could

62
00:03:54.740 --> 00:03:59.280 
use it instead of micro services
and other integration. Ok

63
00:03:59.640 --> 00:04:03.010 
so what is important now? I said
that before we give the engine

64
00:04:03.080 --> 00:04:06.810 
the technical process model. So
what is the difference actually

65
00:04:06.820 --> 00:04:09.970 
between the technical process
model and the normal model? Well

66
00:04:10.320 --> 00:04:15.170 
if we have BPMN we have different
stakeholders involved an all

67
00:04:15.540 --> 00:04:19.920 
in all over the BPMN models.
So the process participant

68
00:04:20.170 --> 00:04:24.590 
needs to wander what should I do,
so what is my own orchestration?

69
00:04:24.590 --> 00:04:28.180 
So he doesn't need the technical
process model but the process engine

70
00:04:28.340 --> 00:04:31.600 
actually wants to know or the process
engineer in that case wants

71
00:04:31.600 --> 00:04:34.540 
to know what is the engine doing
exactly. So he takes care about

72
00:04:34.540 --> 00:04:37.900 
the orchestration of the process
model. And we have the process

73
00:04:37.900 --> 00:04:41.420 
analyst in the middle here. He
wants to know how is work done

74
00:04:41.420 --> 00:04:44.770 
in general. So he wants to have
the whole collaboration. Now

75
00:04:44.770 --> 00:04:47.270 
could you imagine that the one
stakeholder is missing here.

76
00:04:47.520 --> 00:04:52.120 
I'd say we have the process
participant, analyst, engineer; well

77
00:04:52.120 --> 00:04:55.010 
I guess we are missing probably
an overview by management I

78
00:04:55.010 --> 00:04:57.900 
guess some kind of managerial sort
of view of what's going on.

79
00:04:58.600 --> 00:05:01.850 
Yeah that's true so sometimes we
also have someone who doesn't

80
00:05:01.850 --> 00:05:04.780 
want to have all the details but
just want to have a quick overview

81
00:05:04.880 --> 00:05:09.060 
and so we can't even bring one more
stakeholder into the whole model

82
00:05:09.320 --> 00:05:12.420 
that will bring us to a model
that looks like this here. We

83
00:05:12.420 --> 00:05:15.780 
call it the Camunda house. So
the first layer actually or

84
00:05:15.780 --> 00:05:19.020 
the overview layer is called the
strategic process model and

85
00:05:19.020 --> 00:05:22.850 
this is just something that should
be logical abstract to give

86
00:05:22.850 --> 00:05:26.440 
us a fast comprehension of what's
going on in our organization

87
00:05:26.440 --> 00:05:29.600 
or what's going on in the process.
If we go one level down

88
00:05:29.600 --> 00:05:32.500 
that the operational process model
and here we need to be very

89
00:05:32.500 --> 00:05:36.580 
precise. So here the goal is
that the human workflow has

90
00:05:36.580 --> 00:05:39.580 
been modeled nicely so that our
human knows what's going on

91
00:05:39.580 --> 00:05:43.150 
exactly. So the process participant
has no doubt of what he

92
00:05:43.150 --> 00:05:46.270 
or she needs to do in the process.
And on the right-hand side

93
00:05:46.490 --> 00:05:49.390 
we have the technical process
model and actually that takes

94
00:05:49.390 --> 00:05:53.100 
care about the automated control
flow and above the code. And

95
00:05:53.160 --> 00:05:56.860 
important is that we want to have a
nice interaction between the human

96
00:05:57.050 --> 00:06:01.180 
process flow or the human process flow
and the technical process flow.

97
00:06:01.480 --> 00:06:04.910 
And that's the interaction between
the user and the system.

98
00:06:05.200 --> 00:06:08.930 
If we talk about BPMN you could
imagine that the human process

99
00:06:08.930 --> 00:06:12.480 
flow has one pool and the technical
process floor so the engine

100
00:06:12.480 --> 00:06:17.630 
has another pool and both are interacting
with message flows for example.

101
00:06:18.020 --> 00:06:23.200 
If we have a look into the
architecture of BPMN 2.0

102
00:06:23.490 --> 00:06:28.270 
that's a thing what we call the
proposed architecture. So what

103
00:06:28.280 --> 00:06:32.160 
we've done so far is we've
modeled our logic in BPMN 2.0

104
00:06:32.160 --> 00:06:35.570 
and what was done automatically
the whole time the

105
00:06:35.570 --> 00:06:39.530 
structure was saved into code
into an xml structure. And that

106
00:06:39.530 --> 00:06:43.420 
is really the benefit
of BPMN 2.0 because

107
00:06:43.500 --> 00:06:46.810 
we have the graphical notation
and behind we already generate

108
00:06:46.830 --> 00:06:51.770 
the xml code for the execution. I
don't know if there is any other

109
00:06:51.920 --> 00:06:55.870 
language that can model processes
and has the same same structure

110
00:06:55.880 --> 00:06:59.290 
of saving code behind it. I'm
not aware of it, are you? No?

111
00:07:00.000 --> 00:07:06.250 
I mean only DMN but
that is really the

112
00:07:06.250 --> 00:07:09.790 
power he and that brings the
point that BPMN is not just

113
00:07:09.790 --> 00:07:13.510 
documentation but it's also
used in IT projects. So once

114
00:07:13.510 --> 00:07:17.100 
we have the xml structure of course
we need one more developer.

115
00:07:17.350 --> 00:07:20.950 
Now again what makes the process
model technical here? The developer

116
00:07:20.950 --> 00:07:24.470 
makes it technical by adding at
technical attributes to it and

117
00:07:24.470 --> 00:07:27.390 
then once we have the technical
attributes we can give the

118
00:07:27.390 --> 00:07:30.550 
model to the engine and then the
engine knows what to do and

119
00:07:30.550 --> 00:07:34.650 
then it can orchestrate the work
between for example services

120
00:07:34.650 --> 00:07:40.520 
or systems and for human tasks as
well. Of course while running

121
00:07:40.520 --> 00:07:45.050 
this whole process model we have
someone who can monitor the process

122
00:07:45.320 --> 00:07:49.810 
that's probably the process
operator or administrator and

123
00:07:49.820 --> 00:07:53.680 
we can generate reports from our
running data. And that could

124
00:07:53.680 --> 00:07:56.740 
be hand over to the process owner
or sometimes also business

125
00:07:56.740 --> 00:08:00.380 
analysts are involved here
to analyze our data.

126
00:08:00.970 --> 00:08:08.190 
Ok so let's have a look at the xml
structure that's generated automatically.

127
00:08:08.380 --> 00:08:12.660 
So if you go to the Camunda
modeller you have at

128
00:08:12.660 --> 00:08:17.960 
the bottom two tabs one is diagram and
one as xml. If you select the xml tab

129
00:08:18.140 --> 00:08:22.150 
you will see something like this
in xml structure. Let's have

130
00:08:22.150 --> 00:08:27.010 
a closer look to it. So let's
look at one element specific

131
00:08:27.010 --> 00:08:31.330 
specifically. Lets take a timer for
example. So if you see here the timer

132
00:08:31.520 --> 00:08:35.260 
we have an opening tag for
intermediate catch event and at

133
00:08:35.260 --> 00:08:38.060 
the end we have the closing tag
for the intermediate catch

134
00:08:38.060 --> 00:08:42.410 
event as well. And you can see also
we have the name. So we named

135
00:08:42.410 --> 00:08:46.060 
it here we put the label five minutes.
Actually we are the designer

136
00:08:46.060 --> 00:08:48.890 
so we know we want to wait here
for five minutes but now we

137
00:08:48.890 --> 00:08:51.430 
need to tell the engine that
needs to wait for five minutes.

138
00:08:51.670 --> 00:08:55.580 
I mean I wrote five minutes here
in english but maybe what as

139
00:08:55.590 --> 00:08:59.250 
if somebody writes that in German
or in French or if I wait

140
00:08:59.250 --> 00:09:02.380 
three hundred seconds how should
the engine really know what's

141
00:09:02.380 --> 00:09:05.940 
going on? So what we need to do
here is actually we need to

142
00:09:05.940 --> 00:09:09.750 
add a tagin that. So we need to
have a tag that says duration

143
00:09:09.880 --> 00:09:13.870 
and give a little bit more precise
details about the time. So

144
00:09:13.870 --> 00:09:16.920 
the engine has a certain
language to understand that.

145
00:09:17.510 --> 00:09:20.460 
Anything else you want to add
about durations? I mean I like

146
00:09:20.460 --> 00:09:24.820 
them I think they're good.
Yeah? Okay. Good perfect.

147
00:09:25.250 --> 00:09:29.720 
So in the end the technical
attributes are the thing

148
00:09:29.720 --> 00:09:34.940 
that makes our BPMN file executable so
the engine can interpret our model.

149
00:09:35.280 --> 00:09:40.060 
The technical attributes were presented
as tags inside the xml structure

150
00:09:40.440 --> 00:09:44.020 
but don't be wary, we don't need
to touch the xml ourselves.

151
00:09:44.020 --> 00:09:49.270 
We can use the property panel and the modeler
to add our technical attributes. And

152
00:09:49.460 --> 00:09:52.650 
now we understand what a technical
process model is because

153
00:09:52.650 --> 00:09:56.000 
the technical process model needs
those technical attributes

154
00:09:56.150 --> 00:10:02.090 
and it is essential for the execution. So
what have we seen in those first video?

155
00:10:02.280 --> 00:10:05.200 
Actually we talked about the
different application areas of

156
00:10:05.200 --> 00:10:10.100 
BPMN, we talked about the documentation
scenario and the IT projects,

157
00:10:10.420 --> 00:10:14.070 
we talked about the principles
of a process engine and we've

158
00:10:14.070 --> 00:10:19.100 
seen the technical process model and know
now that we need technical attributes

159
00:10:19.200 --> 00:10:22.740 
to make the model technical.
We talked about the purpose

160
00:10:22.740 --> 00:10:25.940 
architecture with BPMN
2.0 and we have learned

161
00:10:25.940 --> 00:10:28.850 
that we not just have the
graphical annotation but we have

162
00:10:28.850 --> 00:10:33.130 
the xml structure behind. And we
had a look into the xml meta

163
00:10:33.130 --> 00:10:36.450 
model of BPMN 2.0 and now
know that we need to

164
00:10:36.450 --> 00:10:40.080 
add some information to execute
it. And we are going to do that

165
00:10:40.080 --> 00:10:41.050 
in the next video.
