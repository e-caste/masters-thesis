WEBVTT

1
00:00:00.190 --> 00:00:04.660 
This is knowledge graphs lecture
three querying rdfs which SPARQL.

2
00:00:05.160 --> 00:00:09.090 
So in this lecture we are going
to see more complicated more

3
00:00:09.090 --> 00:00:13.840 
complex SPARQL queries like SPARQL
sub queries and property parts.

4
00:00:14.190 --> 00:00:20.350 
So we are still on the level of the SPARQL
in the semantic web technology stack.

5
00:00:21.100 --> 00:00:24.830 
So now what are the sub queries?
Sub-queries actually

6
00:00:24.840 --> 00:00:29.540 
allow the SPARQL to embed one
query within another query.

7
00:00:30.210 --> 00:00:33.770 
So why is it usually done? This
is usually done in order to

8
00:00:33.770 --> 00:00:37.710 
optimize the query processing
time. however we are not going

9
00:00:37.710 --> 00:00:40.800 
to discuss about the
query optimization here.

10
00:00:41.480 --> 00:00:44.540 
So here let us consider
we have an example

11
00:00:45.040 --> 00:00:50.270 
that what books were written by the
thirty most influential authors?

12
00:00:50.420 --> 00:00:55.200 
So here first we would
look for the answers of the

13
00:00:55.800 --> 00:01:02.550 
a subquery which would be who are the
thirty most influential authors?

14
00:01:02.890 --> 00:01:07.460 
In order to get this information
we will first run we will

15
00:01:07.460 --> 00:01:10.390 
first try to define the
inner sub query.

16
00:01:10.950 --> 00:01:16.740 
So for doing that we have an author
who has or we have an author

17
00:01:17.170 --> 00:01:23.290 
who has some influencer. And then this
influence or should also be an author.

18
00:01:23.740 --> 00:01:29.240 
So we are trying to count the number
of authors that this influencer has

19
00:01:29.830 --> 00:01:34.730 
influenced and then we are going
to order them by the number

20
00:01:34.730 --> 00:01:38.410 
of authors they have influenced.
This is how we get the thirty

21
00:01:38.410 --> 00:01:43.690 
most influential authors here
and after we get the answer to

22
00:01:43.690 --> 00:01:46.430 
our variable influencer,
or so we have here

23
00:01:47.110 --> 00:01:52.070 
top thirty most influential
authors, then we use this result

24
00:01:52.070 --> 00:01:55.360 
for the outer query. So
here then we will

25
00:01:56.080 --> 00:02:01.950 
look for the books which are returned
by thirty most influential authors

26
00:02:02.490 --> 00:02:06.270 
So for doing so, let us consider
this query that you are seeing

27
00:02:06.270 --> 00:02:10.770 
on the screen and we will try to run
this on this query on the SPARQL

28
00:02:10.870 --> 00:02:14.470 
end point. So here you
see the same query,

29
00:02:15.730 --> 00:02:18.100 
and then here
we have the

30
00:02:19.040 --> 00:02:23.310 
thirty most influential authors
along with the

31
00:02:23.310 --> 00:02:25.050 
notable work that
they have done.

32
00:02:29.520 --> 00:02:32.980 
So this is the snapshot of the
query that is of the answers

33
00:02:32.980 --> 00:02:35.230 
of the query that you
have just seen before.

34
00:02:35.830 --> 00:02:41.580 
And then the point
is now we are looking for a

35
00:02:41.930 --> 00:02:45.570 
we're looking for displaying the
answer that you just saw in

36
00:02:45.570 --> 00:02:52.580 
the form of a graph. So in wikidata you
have a very nice a nice functionality

37
00:02:52.730 --> 00:02:56.870 
to view the answers in the form
of a graph like, let's see, how

38
00:02:56.880 --> 00:02:59.410 
can we do that. So here

39
00:03:00.700 --> 00:03:04.490 
you are actually looking directly
at the at the graph. So here

40
00:03:04.490 --> 00:03:08.010 
you have the influencer and then
all the work that have been

41
00:03:08.260 --> 00:03:10.120 
done by this influencer.

42
00:03:12.540 --> 00:03:15.300 
So here in the query
if you have a look

43
00:03:15.810 --> 00:03:19.690 
this graph you can be actually
activated with the help of

44
00:03:19.850 --> 00:03:24.390 
hash default view graph in
the beginning of the query

45
00:03:24.390 --> 00:03:27.690 
and then you will be able to see the
answer in the form of the graphs.

46
00:03:29.130 --> 00:03:34.060 
So now we are going to define a little
bit more complicated kinds of

47
00:03:34.310 --> 00:03:39.550 
SPARQL queries which
utilize the property paths.

48
00:03:39.690 --> 00:03:46.070 
So here we are going to use this rdf
graph notation of this rdf

49
00:03:46.420 --> 00:03:51.830 
where we are going to, as I see,
the path between the two

50
00:03:51.830 --> 00:03:55.980 
two nodes in this rdf graph. So
for example in a very trivial

51
00:03:55.980 --> 00:04:01.830 
case if the length of this path is
one, then it is our triple, so

52
00:04:02.060 --> 00:04:06.020 
it means that the two nodes are
connected with only one edge.

53
00:04:06.620 --> 00:04:10.680 
And then we are also able
to match the alternative,

54
00:04:11.220 --> 00:04:15.940 
match one or both possibilities
with the help of this

55
00:04:15.940 --> 00:04:20.100 
OR operator that you see between
dc:title and rdfs:label.

56
00:04:20.250 --> 00:04:25.740 
So here it says that retrieve the books
for which we have either the property

57
00:04:26.190 --> 00:04:31.980 
dc:title or rdfs:label and
then display the string

58
00:04:33.110 --> 00:04:34.220 
the label of the book.

59
00:04:35.310 --> 00:04:38.670 
And then we can also define the
sequence of parts which can

60
00:04:38.670 --> 00:04:42.760 
be more than one. So the sequence
of part can be given as follows

61
00:04:42.760 --> 00:04:48.110 
with the help of a slash, so alice
knows somebody knows somebody

62
00:04:48.290 --> 00:04:53.190 
has a name, some name. So this way
you can define longer sequences

63
00:04:53.190 --> 00:04:56.440 
as you can find longer
sequences in the SPARQL query.

64
00:04:58.670 --> 00:05:04.150 
Moreover you can also define inverse
properties. So for example if you have

65
00:05:04.360 --> 00:05:12.120 
a relation or a property that x has
mbox Alice x mailto:alice
66
00:05:12.270 --&gt; 00:05:14.140
@example then you can

67
00:05:14.770 --> 00:05:19.090 
define the inverse with the help of
the symbol hash, sorry not hash,

68
00:05:19.360 --> 00:05:23.730 
hat. So you have the mail
the mail information

69
00:05:24.360 --> 00:05:30.970 
hat, the same property and x
and the variable x. So here hat

70
00:05:30.970 --> 00:05:33.840 
is defining the inverse
of a property.

71
00:05:35.320 --> 00:05:39.390 
So now we can actually combine some
of these constructs.

72
00:05:39.390 --> 00:05:45.110 
So we can also go for inverse path
sequences. So if I know someone

73
00:05:45.110 --> 00:05:48.680 
and I want to know
that who else knows

74
00:05:49.490 --> 00:05:55.320 
this same person. So here we
say we start with an x that x

75
00:05:55.440 --> 00:06:01.850 
knows somebody and then we use
the same property but with an

76
00:06:01.850 --> 00:06:05.810 
inverse relation to obtain all the
people who know the same person.

77
00:06:06.180 --> 00:06:11.760 
However if I want to exclude that
this traversal gets back to x again

78
00:06:12.160 --> 00:06:16.160 
we can simply give the filter
that x is not equal to y.

79
00:06:18.360 --> 00:06:24.440 
Similarly we can perform arbitrary
length matches where for example

80
00:06:24.560 --> 00:06:29.190 
if Alice knows somebody who knows
somebody than he has

81
00:06:29.190 --> 00:06:35.340 
a name, then such kind of paths
such kind of we can define

82
00:06:35.340 --> 00:06:38.950 
the length of these kind of
property paths with the help of

83
00:06:38.960 --> 00:06:43.830 
the plus operator which says
one or more existence of one

84
00:06:43.830 --> 00:06:48.950 
or more of this property, in this
case this property is fof:knows.

85
00:06:49.590 --> 00:06:54.690 
So here you can see in this in this
graph here that alice knows y1,

86
00:06:55.160 --> 00:06:58.650 
who knows y2 who
knows y3

87
00:06:59.460 --> 00:07:02.060 
and then it has a
name name3.

88
00:07:04.570 --> 00:07:08.910 
Then we can also combine these
kind of these kind of constructs

89
00:07:08.910 --> 00:07:13.830 
and make some different kind of
queries out of that. So here you have

90
00:07:14.040 --> 00:07:20.870 
these as inverse path sequences.
So there if x knows

91
00:07:21.690 --> 00:07:27.630 
somebody and then this somebody has
he has the inverse properties

92
00:07:27.630 --> 00:07:31.800 
of knows and this way if we want
to avoid to go back to the

93
00:07:31.800 --> 00:07:35.960 
same node we we will say
x is not equal to y.

94
00:07:36.780 --> 00:07:40.410 
Similarly we can
have arbitrary length matches

95
00:07:40.410 --> 00:07:44.570 
where we can we already saw the
plus operator with the sequence

96
00:07:44.880 --> 00:07:48.900 
with the sequence operator and then
we have the negated property

97
00:07:48.900 --> 00:07:53.750 
paths where you have rdf type and
then the inverse of rdf type, so

98
00:07:53.990 --> 00:07:56.930 
which means between the
two nodes you have

99
00:07:57.370 --> 00:08:02.170 
rdf type relation, you can actually
go back from thee from one

100
00:08:02.170 --> 00:08:05.490 
node to another with the help of
the inverse relation and you

101
00:08:05.490 --> 00:08:07.400 
can also give
a negation.

102
00:08:10.050 --> 00:08:14.560 
So now let's consider one of
the small example. So who else

103
00:08:14.560 --> 00:08:18.550 
was influenced by the influencers
of George Orwell?

104
00:08:19.110 --> 00:08:22.800 
So here George
Orwell is the

105
00:08:23.410 --> 00:08:27.660 
is the entity Q335
in wikipedia

106
00:08:28.090 --> 00:08:33.940 
and then there is the
relation of influenced by,

107
00:08:34.400 --> 00:08:38.570 
so it keeps the relation
in one direction and then

108
00:08:38.570 --> 00:08:42.750 
it takes the inverse of the same
property and

109
00:08:42.760 --> 00:08:47.730 
it gives the answers influenced
by influencers. So let us run

110
00:08:47.730 --> 00:08:49.970 
this query over the
SPARQL end point.

111
00:08:52.470 --> 00:08:58.260 
So you have all the influencers who
are influenced by some influencer.

112
00:08:59.430 --> 00:09:03.150 
So actually it's influenced by the
influencers of George Orwell.

113
00:09:04.920 --> 00:09:08.280 
So here is the answer a snapshot
of the answer to this query.

114
00:09:10.610 --> 00:09:14.850 
And now in the next lecture we
are going to see rdf databases.
