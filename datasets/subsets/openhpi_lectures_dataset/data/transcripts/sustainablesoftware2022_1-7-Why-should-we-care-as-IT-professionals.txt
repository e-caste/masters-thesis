WEBVTT

1
00:00:00.640 --> 00:00:04.650 
In this lecture we're going to focus on why we should care as IT

2
00:00:05.490 --> 00:00:09.060 
professionals about sustainable software engineering practices.

3
00:00:11.710 --> 00:00:16.430 
The climate change asks for everyone to act and it's best if

4
00:00:16.430 --> 00:00:18.950 
everyone acts within the capabilities of the

5
00:00:19.680 --> 00:00:21.520 
professional room that they're working in.

6
00:00:22.040 --> 00:00:25.710 
So for us as software engineers or participants or stakeholders

7
00:00:25.710 --> 00:00:29.010 
in the software engineering process, it's important that we

8
00:00:29.010 --> 00:00:32.530 
take up our responsibility and not just kick the can down the

9
00:00:32.530 --> 00:00:33.960 
road and let someone else

10
00:00:34.700 --> 00:00:36.370 
hope that someone else takes care of it.

11
00:00:38.370 --> 00:00:42.840 
So what can we do in practice software engineering does not

12
00:00:42.840 --> 00:00:47.130 
happen in a clean room laboratory. So it's not just possible

13
00:00:47.130 --> 00:00:52.580 
to say well the developers should do this or demand that the

14
00:00:52.580 --> 00:00:55.260 
people running the data centres should do that.

15
00:00:55.690 --> 00:00:58.890 
It's important that we look into this environment and how it

16
00:00:58.890 --> 00:01:03.570 
involves and see how the different roles interact and how they can collaborate

17
00:01:03.810 --> 00:01:07.220 
to work to more sustainable software engineering practices.

18
00:01:08.030 --> 00:01:12.680 
So we are going to look at the organizational aspects of

19
00:01:13.260 --> 00:01:16.710 
product development or software development teams, how are they

20
00:01:16.710 --> 00:01:20.410 
structured how do they work together do they use agile methods,

21
00:01:20.630 --> 00:01:24.990 
do they embrace methods like DevOps where development and operations

22
00:01:24.990 --> 00:01:27.710 
experts are sitting together on the same team.

23
00:01:28.590 --> 00:01:34.500 
We're also going to look at the technology. How does advancements in technology

24
00:01:34.740 --> 00:01:39.980 
enable us for example to build better systems using cloud infrastructure

25
00:01:40.190 --> 00:01:45.740 
or leveraging mobile devices on the edge, for example for IOT applications.

26
00:01:46.310 --> 00:01:50.340 
And we are also looking at the market. How does the market change

27
00:01:50.500 --> 00:01:54.440 
and influence how we are able to do sustainable software engineering.

28
00:01:54.900 --> 00:02:00.410 
For example, we have consumer demands for more applications, more digital applications

29
00:02:00.700 --> 00:02:04.640 
while at the same time we also do have new infrastructure markets for

30
00:02:04.760 --> 00:02:06.800 
example hyper scale cloud providers.

31
00:02:08.170 --> 00:02:12.680 
And what we are going to look at over the next lectures is

32
00:02:12.690 --> 00:02:16.210 
how we can understand and leverage these forces that already

33
00:02:16.210 --> 00:02:20.510 
exist in the environment to the advantage or to the benefit

34
00:02:20.520 --> 00:02:23.160 
of sustainable software engineering practices.

35
00:02:26.850 --> 00:02:32.090 
So what can we do as stakeholders in the software development process?

36
00:02:34.550 --> 00:02:39.610 
One good way of looking at software development for a holistic

37
00:02:40.510 --> 00:02:45.870 
perspective and making sure that we look at all the aspects

38
00:02:45.870 --> 00:02:51.160 
that happen in software development, is to take a model of how

39
00:02:51.160 --> 00:02:56.840 
software is developed and consumed and map this to sustainability.

40
00:02:57.540 --> 00:03:00.630 
One such model that does this is the Greensoft model,

41
00:03:01.400 --> 00:03:05.350 
which is a model of the software development life cycle,

42
00:03:05.750 --> 00:03:09.790 
a model of the effects of software, a model for criteria that

43
00:03:09.790 --> 00:03:14.290 
you can use to measure and evaluate sustainability.

44
00:03:14.710 --> 00:03:19.340 
And it has procedure model. So for things that happen during

45
00:03:19.850 --> 00:03:23.380 
a software's life cycle for example like administrating it.

46
00:03:24.140 --> 00:03:28.710 
And it also has recommendations and tools for what we can do,

47
00:03:28.710 --> 00:03:32.410 
what tools we can leverage to achieve more sustainability.

48
00:03:33.060 --> 00:03:38.520 
And of course this model is not perfect match for every reality

49
00:03:38.520 --> 00:03:41.760 
that you might encounter in a practical software development setting.

50
00:03:42.290 --> 00:03:46.650 
However it's a good approach of being systematic about it and mapping

51
00:03:46.840 --> 00:03:51.320 
all the perspective of stakeholders that we see during software development.

52
00:03:54.580 --> 00:03:59.730 
Okay throughout the next sections we're going to take the perspectives

53
00:03:59.740 --> 00:04:03.530 
of stakeholders in a typical software development setting.

54
00:04:04.090 --> 00:04:08.430 
So this is also a model which means it might not be a perfect

55
00:04:08.430 --> 00:04:12.510 
match for every reality, however we're trying to keep a model

56
00:04:12.510 --> 00:04:16.550 
of typical roles that you encounter in an engineering project,

57
00:04:17.130 --> 00:04:21.810 
and while for example in smaller teams some of the different roles might be

58
00:04:22.140 --> 00:04:26.830 
conflated onto a single person, a single person wearing multiple hats

59
00:04:26.930 --> 00:04:29.760 
like being a developer and architect at the same time,

60
00:04:30.170 --> 00:04:34.440 
it also maps to larger teams where for example also the role

61
00:04:34.440 --> 00:04:38.550 
titles might be slightly different, you might not have a product owner

62
00:04:38.660 --> 00:04:42.530 
but you might just rather have a traditional manager, a product manager

63
00:04:43.130 --> 00:04:47.840 
nonetheless we think this model captures all the relevant perspectives.

64
00:04:49.080 --> 00:04:51.830 
Apart from the software engineering team we are also going

65
00:04:51.830 --> 00:04:55.810 
to look at its surroundings. We're going to look at the users

66
00:04:55.820 --> 00:04:59.550 
of software and the demands that modern consumers have.

67
00:05:00.230 --> 00:05:04.470 
And we are also going to look at the regulatory framework that surrounds it,

68
00:05:04.610 --> 00:05:07.890 
which is in the realm of politics and setting public policy.

69
00:05:13.460 --> 00:05:17.240 
Let's look at some of the fundamentals that are important for

70
00:05:17.240 --> 00:05:20.780 
understanding the forces that act on a software development

71
00:05:20.780 --> 00:05:24.590 
team that wants to establish sustainable software engineering practices.

72
00:05:25.640 --> 00:05:29.450 
Like every engineering project software engineering projects

73
00:05:29.450 --> 00:05:32.440 
are also characterized by goal conflicts.

74
00:05:33.220 --> 00:05:37.160 
One typical goal conflict that happens in every engineering project

75
00:05:37.380 --> 00:05:42.650 
is the conflict between the goals of quality cost and time.

76
00:05:44.390 --> 00:05:47.910 
If you try to optimize for any of the three dimensions for

77
00:05:47.910 --> 00:05:53.210 
any of the three goals, you typically have to compromise one

78
00:05:53.210 --> 00:05:57.380 
or two of the other goal dimensions. One example is that if

79
00:05:57.380 --> 00:05:59.920 
you want to have a really high-quality software

80
00:06:00.420 --> 00:06:04.880 
it's very likely that you will spend more time developing the

81
00:06:04.880 --> 00:06:08.510 
software and making sure for example that it does not have any bugs.

82
00:06:09.030 --> 00:06:12.950 
And it's also going to be more costly to do so. For example

83
00:06:12.950 --> 00:06:17.940 
you might need more qualified and more experienced talent to develop the software

84
00:06:18.070 --> 00:06:22.170 
or you might just need more people to do proper quality assurance.

85
00:06:25.150 --> 00:06:28.850 
And there's also another goal conflict sometimes that happens

86
00:06:29.220 --> 00:06:33.590 
in practical software development projects which is a conflict

87
00:06:33.590 --> 00:06:36.350 
between functional and non functional requirements.

88
00:06:37.030 --> 00:06:41.220 
So a functional requirement is a requirement for the function

89
00:06:41.220 --> 00:06:46.750 
of a software. So for example that it should do something for the user

90
00:06:47.160 --> 00:06:51.090 
whereas a non functional requirement describes how it should do it

91
00:06:51.230 --> 00:06:56.050 
or what are the constraints that it should do the thing that it doesn't.

92
00:06:56.480 --> 00:07:01.190 
So a typical non functional requirement might be things like performance

93
00:07:01.470 --> 00:07:05.130 
you might say a functional requirement is it should do something

94
00:07:05.190 --> 00:07:08.190 
and a non functional requirement is that it should do so in

95
00:07:08.500 --> 00:07:10.540 
below one hundred milliseconds for example.

96
00:07:11.990 --> 00:07:15.610 
So if we take these these these conflicts that are

97
00:07:16.020 --> 00:07:20.930 
happening in the real world like saying a user wants the software

98
00:07:20.930 --> 00:07:24.460 
to have more functionality and is then willing to compromise

99
00:07:24.470 --> 00:07:28.230 
on the non functional requirement saying I wanted to do x and

100
00:07:28.250 --> 00:07:31.370 
y but I don't care how long it takes it's more important that

101
00:07:31.370 --> 00:07:34.040 
it does y than it does x fast for example.

102
00:07:34.940 --> 00:07:37.690 
How do we how do we deal with that? How do we navigate that

103
00:07:37.690 --> 00:07:41.970 
landscape and make sure that we still are able to build sustainable software.

104
00:07:43.880 --> 00:07:49.270 
I think that adding sustainability as another isolated dimension on

105
00:07:49.580 --> 00:07:53.160 
to the goals that a software development team has is only going

106
00:07:53.160 --> 00:07:57.120 
to make decision making ever more complex than it already is.

107
00:07:57.630 --> 00:08:01.170 
So in this lecture we're going to look at all the forces that

108
00:08:01.170 --> 00:08:06.620 
already exist in a software development team and how they align with sustainability,

109
00:08:06.840 --> 00:08:11.420 
which means how can we operationalize sustainability by taking

110
00:08:11.420 --> 00:08:15.330 
these existing goals and existing requirements that we already

111
00:08:15.330 --> 00:08:17.810 
know how to deal with in software development.

112
00:08:20.880 --> 00:08:25.080 
The example that we're going to use throughout the next sections of the course

113
00:08:25.530 --> 00:08:30.390 
is a practical example of a software team that's looking to

114
00:08:30.390 --> 00:08:35.880 
build a software update service. So we are having a team of

115
00:08:35.890 --> 00:08:39.370 
engineers that develops new versions of a software and that

116
00:08:39.370 --> 00:08:43.240 
software is this time to be running on different types of clients,

117
00:08:43.240 --> 00:08:45.580 
traditional desktops mobile phones

118
00:08:46.190 --> 00:08:50.460 
and the team needs to distribute these updates to its end users.

119
00:08:51.010 --> 00:08:53.390 
And that's the job of the update service

120
00:08:53.890 --> 00:08:57.230 
the update service is contacted by the clients that say I'm

121
00:08:57.230 --> 00:09:01.300 
running a particular version of the software is there any update available.

122
00:09:01.730 --> 00:09:05.190 
And if an update is available declined will request the update

123
00:09:05.190 --> 00:09:06.720 
download it and install it.

124
00:09:07.720 --> 00:09:13.930 
Easy as that. What we are trying to do with this example is to illustrate

125
00:09:14.230 --> 00:09:18.100 
the concept. So we are talking about abstract concepts that

126
00:09:18.100 --> 00:09:20.910 
apply in the software development team, but we are also going

127
00:09:20.910 --> 00:09:24.250 
to discuss them in practical terms using this example.
