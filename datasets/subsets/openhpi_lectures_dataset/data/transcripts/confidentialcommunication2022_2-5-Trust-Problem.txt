WEBVTT

1
00:00:00.970 --> 00:00:05.320 
Now we consider the Trust Problem in
more detail. The Trust Problem of

2
00:00:05.960 --> 00:00:10.960 
asymmetric cryptoprotocols in our
openHPI course on Confidential

3
00:00:11.550 --> 00:00:13.400 
Communication in
the Internet.

4
00:00:14.330 --> 00:00:19.330 
What was the Trust Problem? If we
use an asymmetric cryptosystem,

5
00:00:19.950 --> 00:00:25.300 
and if we use asymmetric procedures
such as RSA, Diffie-Hellman,

6
00:00:25.300 --> 00:00:31.410 
or DSA which have revolutionized
cryptography and made

7
00:00:31.410 --> 00:00:35.390 
it suitable for the internet,
then we have one problem.

8
00:00:36.840 --> 00:00:42.280 
It is mentioned as the Trust Problem
of this asymmetric cryptosystems

9
00:00:42.317 --> 00:00:49.740 
and consists in the question
is the public key authentic?

10
00:00:50.310 --> 00:00:54.600 
Is it really the public key of our
communication partner? Is this

11
00:00:54.600 --> 00:00:57.200 
the public key
of Bob or

12
00:00:57.950 --> 00:01:03.370 
was Mallory able to
manipulate this and

13
00:01:04.100 --> 00:01:08.710 
to let us know that the
public key from Mallory

14
00:01:09.110 --> 00:01:10.720 
is the public
key of Bob.

15
00:01:12.130 --> 00:01:18.230 
So to tamper-proof liaise the
public keys to their users,

16
00:01:18.950 --> 00:01:24.440 
to create a trustworthy and legally
secure allocation of public keys

17
00:01:24.630 --> 00:01:25.450 
to their owner.

18
00:01:26.670 --> 00:01:32.520 
Otherwise Alice does not know that she
is really using Bob's public key

19
00:01:33.700 --> 00:01:36.160 
and not the public
key of Mallory.

20
00:01:38.280 --> 00:01:42.750 
So what is the basic attack
scenario here which

21
00:01:43.990 --> 00:01:46.920 
brings Mallory
in a situation

22
00:01:47.730 --> 00:01:55.100 
that he is able to give his
public key as that of Bob?

23
00:01:55.660 --> 00:02:00.590 
So, this is a very important goal
for attackers and cybercriminals,

24
00:02:00.810 --> 00:02:07.230 
so, they try to trick Alice into
using Mallory's public key

25
00:02:07.810 --> 00:02:10.340 
to encrypt a message
instead of Bob's

26
00:02:12.370 --> 00:02:16.150 
key and then of course

27
00:02:17.130 --> 00:02:24.920 
if she takes Mallory's public key
for encryptions then only Mallory

28
00:02:25.100 --> 00:02:27.600 
can decrypt with
his private key.

29
00:02:28.410 --> 00:02:33.160 
So what Mallory tries is to give
out his public key for the

30
00:02:33.160 --> 00:02:40.840 
public key of Bob, and when he succeeds
in doing this then he can read Alice's

31
00:02:41.400 --> 00:02:44.590 
confidential messages from
Bob, but Bob cannot.

32
00:02:45.650 --> 00:02:50.640 
So, Mallory can digitally also
sign documents in Bob's name

33
00:02:51.240 --> 00:02:56.820 
because when his public key is
considered as a public key of Bob,

34
00:02:57.480 --> 00:03:04.550 
then he can sign in the name of Bob, so,
it's really a dangerous situation.

35
00:03:04.880 --> 00:03:09.750 
And so, the Trust Problem needs
to be solved before we can use

36
00:03:10.610 --> 00:03:15.770 
asymmetric methods of encryption
and protocols in the

37
00:03:15.770 --> 00:03:17.490 
internet and in
the daily life.

38
00:03:18.240 --> 00:03:24.000 
But there are more problems around
not only the authenticity

39
00:03:24.000 --> 00:03:28.540 
of the public key but also
revocation of keys.

40
00:03:29.720 --> 00:03:33.640 
Let's assume, Bob's private
key is compromised.

41
00:03:34.600 --> 00:03:37.550 
For example, an attacker,
Mallory has stolen it or

42
00:03:37.990 --> 00:03:43.640 
Bob lost his smart card or other
things, then, of course, Bob

43
00:03:44.600 --> 00:03:50.670 
needs a new pair of keys and this
new pair should replace the

44
00:03:51.110 --> 00:03:56.300 
old key pair. But it's not so
easy because his public key

45
00:03:56.730 --> 00:03:58.890 
was widely distributed

46
00:03:59.490 --> 00:04:03.610 
over the internet so
it's not so easy to

47
00:04:04.610 --> 00:04:07.670 
take it away and replace
it by the new one.

48
00:04:09.290 --> 00:04:12.610 
So who can help to
solve this problem?

49
00:04:13.710 --> 00:04:21.200 
And another topic which is in the
realm of the Trust Problem is

50
00:04:21.420 --> 00:04:23.750 
the indisputable
signatures.

51
00:04:24.540 --> 00:04:30.380 
Digital signatures are only binding
if Bob cannot deny afterwards

52
00:04:30.570 --> 00:04:32.430 
that the document
was signed

53
00:04:33.500 --> 00:04:35.210 
encrypted with
his private key

54
00:04:36.210 --> 00:04:41.430 
but one can check whether a private
key belongs to a certain user.

55
00:04:43.210 --> 00:04:47.820 
There are more problems in the
context of this Trust Problem,

56
00:04:48.280 --> 00:04:51.170 
that's the enforcement
of security policies.

57
00:04:51.980 --> 00:04:55.460 
So, there must be a
number of rules

58
00:04:56.230 --> 00:05:01.960 
called security policies
for handling key pairs

59
00:05:02.360 --> 00:05:09.290 
in asymmetric cryptosystems, for example,
how are key pairs generated? How are the

60
00:05:09.460 --> 00:05:14.430 
public key stored? How long are
the keys valid? What happens

61
00:05:14.590 --> 00:05:19.720 
if a key is compromised?
And many others.

62
00:05:20.390 --> 00:05:30.842 
To answer these questions, there needs to be a security
policy in place which gives rules to these things.

63
00:05:30.958 --> 00:05:41.130 
And all these are subsumed under the
title Trust Problem for asymmetric

64
00:05:41.390 --> 00:05:44.940 
encryption methods and
needs to be solved.
