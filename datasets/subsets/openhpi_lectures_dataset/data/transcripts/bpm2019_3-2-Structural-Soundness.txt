WEBVTT

1
00:00:00.590 --> 00:00:04.510 
Welcome to video clip 3.2
in which we investigate

2
00:00:04.520 --> 00:00:05.900 
structural soundness.

3
00:00:09.160 --> 00:00:12.220 
In 3.1 I already
discussed a little bit

4
00:00:12.220 --> 00:00:15.830 
soundness and soundness is a
generic correctness criterion

5
00:00:15.830 --> 00:00:19.310 
for process models formally
specified using petri nets.

6
00:00:19.710 --> 00:00:24.360 
It has been developed by Wil van der Aalst
of the Technical University Eindhoven.

7
00:00:25.080 --> 00:00:29.880 
In this course we transfer soundness
to the level of BPMN. So we use

8
00:00:30.240 --> 00:00:35.670 
the soundness criteria and
apply it to the BPMN level.

9
00:00:36.900 --> 00:00:41.230 
We have seen also in video
3.1 that this process

10
00:00:41.230 --> 00:00:46.290 
model exhibits an anomaly behavior
anomaly. If the invalid

11
00:00:46.300 --> 00:00:48.440 
amount decision
is taken

12
00:00:50.740 --> 00:00:55.010 
if this invalid amount decision is
taken and the send update invoice

13
00:00:55.460 --> 00:01:01.900 
is executed then receive payment
is executed again. But then this

14
00:01:01.910 --> 00:01:08.480 
AND join cannot cannot fire
because there is just one

15
00:01:08.580 --> 00:01:13.280 
edge that is signaled. And an
edge and an AND join as we know

16
00:01:13.280 --> 00:01:16.670 
can only be signalled if all incoming
edges are signalled. Therefore we have

17
00:01:16.670 --> 00:01:19.780 
this deadlock deadlock situation
the process gets stuck in this

18
00:01:20.050 --> 00:01:22.910 
we consider unsound
behavior.

19
00:01:25.050 --> 00:01:29.570 
However soundness assumes that the
process is structurally sound.

20
00:01:29.720 --> 00:01:32.430 
So structurally sound is
a structural property

21
00:01:33.170 --> 00:01:38.780 
of petri nets and also applied
to process models in BPMN

22
00:01:39.290 --> 00:01:42.790 
as follows. So a process model is
structurally sound if it has

23
00:01:42.790 --> 00:01:46.530 
exactly one start event and
the start event is called i.

24
00:01:47.140 --> 00:01:50.460 
I is for input of the process
or the process has one input

25
00:01:52.130 --> 00:01:57.180 
and the process model has
exactly one end event o

26
00:01:57.250 --> 00:02:00.680 
and that is for process output, that
is the output of the process.

27
00:02:01.090 --> 00:02:04.960 
We find the output of the
process and each node in the

28
00:02:04.960 --> 00:02:08.160 
process model is on a
path from i to o.

29
00:02:08.820 --> 00:02:13.840 
So starting from i we can traverse
the nodes of a process model

30
00:02:14.200 --> 00:02:17.840 
and all paths of maximum
length end in o.

31
00:02:18.510 --> 00:02:21.010 
That is the definition of
structural soundness.

32
00:02:22.160 --> 00:02:25.650 
And structural soundness is a
necessary condition for soundness

33
00:02:25.650 --> 00:02:27.640 
but it is not a
sufficient condition.

34
00:02:28.270 --> 00:02:31.670 
So if a process model is not
structurally sound it cannot be

35
00:02:31.670 --> 00:02:36.830 
sound. So therefore we need to
tackle structural soundness.

36
00:02:40.810 --> 00:02:45.190 
If we look at the process model
we've seen so far um most of

37
00:02:45.190 --> 00:02:48.960 
them I think were structurally
sound. So the one you see here

38
00:02:48.960 --> 00:02:53.140 
on the top of the slide is
actually structurally sound.

39
00:02:54.600 --> 00:02:59.190 
So why it is structurally sound
using the highlighter again.

40
00:02:59.600 --> 00:03:00.980 
There is one

41
00:03:02.840 --> 00:03:05.980 
input event i, one
output event o.

42
00:03:07.200 --> 00:03:11.470 
And all other nodes so all other
activity in all other gateways

43
00:03:11.480 --> 00:03:15.520 
are on a path from i to o. So let's
see whether that happens here.

44
00:03:15.710 --> 00:03:19.310 
That's a path, but also
we have this path

45
00:03:21.140 --> 00:03:23.690 
and also we have
this path.

46
00:03:24.580 --> 00:03:29.850 
Yeah so all all nodes are on a path
from i to o. So structurally

47
00:03:29.940 --> 00:03:31.920 
sound, this model is
structurally sound.

48
00:03:32.590 --> 00:03:35.500 
However some of the process model
we will be looking at are not

49
00:03:35.500 --> 00:03:38.400 
structurally sound like the one
you see in the bottom and that's

50
00:03:38.400 --> 00:03:41.980 
very simple or easy to see why
that is because here we don't

51
00:03:41.980 --> 00:03:46.240 
have one output but we have two
outputs. So that not all events

52
00:03:46.250 --> 00:03:48.310 
unify say well that's
my output o,

53
00:03:49.100 --> 00:03:53.520 
and then there are nodes that are
not on a path from i to o because

54
00:03:54.290 --> 00:03:58.010 
there are these two activities.
So if there are two also

55
00:03:58.640 --> 00:04:02.010 
two output events then

56
00:04:02.770 --> 00:04:05.010 
the process model is not
structurally sound.

57
00:04:07.640 --> 00:04:10.360 
Process models with multiple end
events are not structurally

58
00:04:10.360 --> 00:04:12.620 
sound for the reason
I just explained.

59
00:04:13.990 --> 00:04:18.330 
And that means that all these
process models can not

60
00:04:18.340 --> 00:04:19.540 
be sound as well.

61
00:04:21.110 --> 00:04:24.620 
So even but we looked at the
process model and we looked

62
00:04:24.620 --> 00:04:27.490 
at this insurance claim process
model for some time now.

63
00:04:27.940 --> 00:04:31.800 
It is behaviorally correct we
would not say that there

64
00:04:31.800 --> 00:04:34.820 
is a deadlock, the process
model is incorrect, it has

65
00:04:34.820 --> 00:04:37.060 
some behavioral anomalies
we would not say that.

66
00:04:38.170 --> 00:04:45.580 
So we need to transform these process models
to structurally sound process models on

67
00:04:45.790 --> 00:04:52.840 
to be able to analyze their soundness because
this structurally unsound process model

68
00:04:53.130 --> 00:04:57.640 
has correct behavior we see that
because it's so it's so simple.

69
00:04:58.100 --> 00:05:01.270 
However it would if it would
be more complex then we

70
00:05:01.270 --> 00:05:05.680 
would not be able to analyze it just by
looking at it we would need to use

71
00:05:05.880 --> 00:05:09.700 
more advanced techniques like the
one we will discuss in this week.

72
00:05:10.760 --> 00:05:15.850 
Therefore an approach we like to
propose is that we transform

73
00:05:15.850 --> 00:05:19.090 
these process models to
structurally sound process models

74
00:05:19.680 --> 00:05:23.170 
without changing their behavior. And
then we could use the structurally

75
00:05:23.540 --> 00:05:27.330 
structurally sound process models
to analyze them and then we can

76
00:05:27.560 --> 00:05:30.530 
say well either the process
model is sound or the process

77
00:05:30.530 --> 00:05:31.690 
model is unsound.

78
00:05:33.760 --> 00:05:37.730 
To start our formal analysis
we can get rid of a number

79
00:05:37.730 --> 00:05:41.260 
of things that are not important
for the formal investigation.

80
00:05:41.670 --> 00:05:47.170 
For instance we could remove
the event information.

81
00:05:47.450 --> 00:05:51.530 
We could also remove the event labels
and also the roles involved.

82
00:05:52.140 --> 00:05:56.690 
The activity labels we can we
can keep because then we have

83
00:05:56.840 --> 00:06:00.700 
also a feeling what happens in
the process and what are the

84
00:06:00.890 --> 00:06:03.670 
activities from a business
perspective here.

85
00:06:05.070 --> 00:06:08.830 
Ok now we transform structurally
unsound process models to

86
00:06:08.830 --> 00:06:13.100 
structurally sound process models.
We assume that all end events

87
00:06:13.510 --> 00:06:18.340 
are exclusive. So
in each process

88
00:06:18.780 --> 00:06:24.430 
instance either this end event
occurs or that event occurs.

89
00:06:24.690 --> 00:06:30.030 
In no process instance or no
trace generated here we see

90
00:06:30.040 --> 00:06:31.920 
more than one
end event.

91
00:06:33.360 --> 00:06:37.060 
Yeah so all end events of the
process model are exclusive, there

92
00:06:37.060 --> 00:06:40.770 
is no trace in which more
than one end event occurs.

93
00:06:41.320 --> 00:06:43.090 
If this assumption
is not met

94
00:06:43.780 --> 00:06:45.780 
the transformation
introduces errors.

95
00:06:48.280 --> 00:06:52.310 
Ok so let's try to come
up with an approach

96
00:06:53.400 --> 00:06:58.900 
to change a structurally unsound process
model to structurally sound process model.

97
00:06:59.460 --> 00:07:02.800 
And that's quite
easy indeed. So

98
00:07:03.320 --> 00:07:05.880 
I'd like to sketch
let's see

99
00:07:06.650 --> 00:07:08.880 
a bit more on the
upper part.

100
00:07:09.980 --> 00:07:13.020 
We have here activity A

101
00:07:14.640 --> 00:07:15.970 
then we have

102
00:07:18.190 --> 00:07:24.150 
an exclusive gateway so
an XOR split. Either iI

103
00:07:24.720 --> 00:07:25.950 
need to do A B

104
00:07:27.710 --> 00:07:29.130 
or I need to do A C.

105
00:07:31.050 --> 00:07:32.500 
There's one end event

106
00:07:33.230 --> 00:07:34.430 
and there's the
other end event.

107
00:07:35.470 --> 00:07:40.730 
Ok and obviously it's clear that
we have traces A B and A B

108
00:07:40.850 --> 00:07:45.710 
the top end event and A
C the low end event.

109
00:07:46.280 --> 00:07:50.830 
So the end events are exclusive in this
example so the assumption is fulfilled.

110
00:07:51.810 --> 00:07:56.520 
Ok so I use the erasor to show
now the transformation. I will

111
00:07:56.520 --> 00:07:58.790 
transform this process
model to one that is

112
00:07:59.300 --> 00:08:04.090 
structurally sound. What I do is
I remove the two end events,

113
00:08:05.450 --> 00:08:06.890 
I remove the
sequence flow

114
00:08:09.140 --> 00:08:11.800 
and I add another

115
00:08:13.300 --> 00:08:15.410 
exclusive gateway,

116
00:08:16.790 --> 00:08:21.440 
connect this and create a new
end event. And that's all

117
00:08:21.500 --> 00:08:25.140 
So that's simple so
the the algorithm is

118
00:08:26.450 --> 00:08:33.620 
we first delete the end events, we introduce
one new exclusive gateway that joins

119
00:08:33.730 --> 00:08:38.120 
the end event branches, so that
joins these two branches

120
00:08:38.170 --> 00:08:41.600 
and we introduce a new end
event. And that's how we can

121
00:08:41.600 --> 00:08:45.490 
make sure that a structurally unsound
process model will be structurally sound.

122
00:08:47.340 --> 00:08:52.500 
Ok we mention that we do not change
the behavior that's from an

123
00:08:52.670 --> 00:08:56.350 
formally precise point of
view that's not correct,

124
00:08:56.690 --> 00:08:59.430 
because we end the behavior in
the sense that we don't have

125
00:08:59.430 --> 00:09:04.210 
these two different end events
and we have one new and event

126
00:09:04.210 --> 00:09:07.940 
created. So there is from a formal
perspective that's not entirely

127
00:09:07.940 --> 00:09:11.840 
true but from the from the
behavior of the process from the

128
00:09:11.950 --> 00:09:16.290 
activities and we really do not
change any ordering or we do

129
00:09:16.290 --> 00:09:19.520 
not change anything by
this transformation.

130
00:09:20.850 --> 00:09:24.950 
And also if there are behavioral
flaws in the process model

131
00:09:24.950 --> 00:09:29.130 
we do not change these behavioral flaws by
introducing this transformation which is

132
00:09:29.330 --> 00:09:30.490 
of course important
for us.

133
00:09:31.720 --> 00:09:34.460 
As long as the assumption that
it was mentioning is met.

134
00:09:38.380 --> 00:09:41.820 
I still like to notice that the
different outcomes of the process

135
00:09:41.950 --> 00:09:45.150 
are no longer represented
explicitly the process model. You

136
00:09:45.160 --> 00:09:48.690 
might remember the guideline
that we had that each possible

137
00:09:48.690 --> 00:09:53.230 
outcome of a process should be
represented by one dedicated end event.

138
00:09:53.470 --> 00:09:58.360 
We lose somehow this information
in the analysis. However we

139
00:09:58.360 --> 00:10:02.760 
are not interested, we will not
use these modified models

140
00:10:02.770 --> 00:10:05.760 
afterwards that would not replace
it. This transformation is

141
00:10:05.760 --> 00:10:07.440 
just used to analyze

142
00:10:08.050 --> 00:10:10.450 
to analyze the process
model that we had

143
00:10:10.900 --> 00:10:14.580 
that we use for our discussion
that we use for our project.

144
00:10:14.580 --> 00:10:17.370 
So we would not work afterwards
with the transformation the

145
00:10:17.370 --> 00:10:21.320 
transformation is purely for the
purpose of analysis of the model.

146
00:10:21.450 --> 00:10:24.680 
and therefore I'm getting
rid of this different

147
00:10:25.140 --> 00:10:28.380 
output or end events
is perfectly okay.

148
00:10:31.850 --> 00:10:34.980 
Alright so the same applies to
start events almost the same

149
00:10:35.000 --> 00:10:39.080 
the same applies to start events. We
sometimes see process models that have

150
00:10:39.260 --> 00:10:43.120 
multiple start events. You remember
also our modelling guideline

151
00:10:43.120 --> 00:10:46.180 
that you should not have multiple
start events, still in some

152
00:10:46.180 --> 00:10:49.820 
cases it's useful to have them and
even then we have the problem

153
00:10:49.820 --> 00:10:53.100 
that the resulting process
is not structurally sound,

154
00:10:54.220 --> 00:10:58.410 
because it has
more than one

155
00:10:58.920 --> 00:11:02.280 
more than one start event.
So typical example that we

156
00:11:02.830 --> 00:11:10.200 
see that there might be different ways of
starting a process using different media.

157
00:11:10.580 --> 00:11:14.160 
So here we have three start
events, so the claim

158
00:11:14.620 --> 00:11:16.830 
can be received by
a surface mail,

159
00:11:17.570 --> 00:11:22.280 
or the claim can be received by fax
message, or the claim can be received

160
00:11:22.930 --> 00:11:28.250 
by a website. The customer can use the
website to fill the claim and to

161
00:11:28.650 --> 00:11:32.590 
start the process instance
at the insurance company.

162
00:11:33.390 --> 00:11:38.480 
Here we have a join that joins
the if the claim is received

163
00:11:38.480 --> 00:11:41.370 
by surface mail or by fax I
need to do an additional

164
00:11:41.550 --> 00:11:45.400 
manual activity register claim. I need
to first register the claim and

165
00:11:45.400 --> 00:11:49.140 
if the claim is received by website
I can just start with deciding

166
00:11:49.140 --> 00:11:53.290 
to claim coverage because data
is already in the systems

167
00:11:53.310 --> 00:11:57.080 
and I don't need to register that
explicitly. So that's an example that we

168
00:11:57.530 --> 00:12:02.240 
the type of example that we sometimes
see and also here we need to

169
00:12:02.390 --> 00:12:04.830 
we need to have a
transformation in order to

170
00:12:05.410 --> 00:12:09.200 
make this types of process
models structurally sound.

171
00:12:12.520 --> 00:12:18.900 
We do that by creating a new start event
and an exclusive gateway. So it's

172
00:12:19.060 --> 00:12:21.710 
similar to what we did at the end
of the process we did in the

173
00:12:21.710 --> 00:12:24.640 
beginning. Also here the assumption
is that the start events

174
00:12:24.640 --> 00:12:28.450 
are alternative which is
also an assumption by the

175
00:12:28.460 --> 00:12:31.890 
BPMN standard, also mentioned
in the BPMN standard.

176
00:12:33.100 --> 00:12:38.210 
So in this start event needs to
be connected to all alternative

177
00:12:38.220 --> 00:12:41.560 
start event or the gateway needs
to be connected to alternative

178
00:12:41.560 --> 00:12:45.260 
start events which thereby
become intermediate events.

179
00:12:46.070 --> 00:12:49.510 
So in the previous example
you will remember that

180
00:12:49.980 --> 00:12:52.810 
we had three options
of receiving

181
00:12:53.390 --> 00:12:57.160 
the claim by surface mail, by
fax message or by website.

182
00:12:57.160 --> 00:13:00.230 
So there is a decision here we
have modeled this as a decision

183
00:13:00.230 --> 00:13:01.740 
either that or
that or that.

184
00:13:02.430 --> 00:13:06.670 
And then the process continues
exactly as we've discussed before.

185
00:13:07.200 --> 00:13:12.700 
So all traces all traces
that are created by the

186
00:13:12.700 --> 00:13:16.570 
original can also be created
here. We have also here from a

187
00:13:16.570 --> 00:13:20.010 
former perspective one additional
events or the start event

188
00:13:20.480 --> 00:13:23.870 
which is so we can formally say
that it's not exactly the same

189
00:13:23.870 --> 00:13:27.590 
behavior but from an application usage
point of view we can still say that

190
00:13:27.810 --> 00:13:33.650 
that this is ok because the order and
the behavior related to the events

191
00:13:34.070 --> 00:13:37.400 
to the other events and to the
activities is not changed by this

192
00:13:37.910 --> 00:13:39.100 
by this transformation.

193
00:13:40.490 --> 00:13:45.730 
Alright so we have we
now made sure that we

194
00:13:45.910 --> 00:13:49.310 
transform the process model which
is structurally unsound to

195
00:13:49.310 --> 00:13:51.570 
a process model which is
structurally sound.

196
00:13:55.270 --> 00:13:59.810 
However as already mentioned
in the end part this

197
00:13:59.810 --> 00:14:04.100 
transformation is only for the purpose of
formal analysis for checking soundness.

198
00:14:04.580 --> 00:14:06.860 
The process model is
not very useful

199
00:14:07.600 --> 00:14:12.090 
mainly due to the also magic
decision in the beginning. So

200
00:14:12.090 --> 00:14:16.030 
here in the example we have
in the beginning we have

201
00:14:16.030 --> 00:14:18.220 
this decision I was
briefly mentioning that

202
00:14:18.760 --> 00:14:21.530 
who should take the decision that's
not really a decision that

203
00:14:21.530 --> 00:14:25.160 
is part of the process though
either I receive it by

204
00:14:25.160 --> 00:14:30.090 
surface mail, by fax, by web
form and therefore there

205
00:14:30.090 --> 00:14:34.410 
is not really this decision in the real
process but still for formal analysis

206
00:14:34.720 --> 00:14:39.740 
is fine and it is that's
useful and important to have

207
00:14:39.740 --> 00:14:42.030 
a structurally sound process
model to start with.

208
00:14:43.970 --> 00:14:47.480 
Alright this concludes
video clip 3.2 in which

209
00:14:47.480 --> 00:14:49.510 
we investigated
structural soundness.

210
00:14:50.510 --> 00:14:54.720 
Behavioral analysis requires structural
soundness as prerequisite.

211
00:14:54.780 --> 00:15:01.030 
Structural soundness means that each process
has a single start event called i,

212
00:15:01.460 --> 00:15:05.090 
a single end event called for o
input and output of the process,

213
00:15:05.470 --> 00:15:10.100 
and each node of the process
model is on a path from i to o.

214
00:15:11.620 --> 00:15:14.850 
Formal analysis abstracts
from labels and roles.

215
00:15:16.000 --> 00:15:18.950 
And we have seen that process
models with multiple start and

216
00:15:18.960 --> 00:15:22.920 
multiple end events that are
alternative can be transformed

217
00:15:23.430 --> 00:15:27.800 
and therefore we showed how
we can transform an unsound

218
00:15:28.090 --> 00:15:31.630 
structurally unsound process model to
a structurally sound process model.
