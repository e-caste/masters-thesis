WEBVTT

1
00:00:01.820 --> 00:00:06.240 
Hi it's us again- Matthias and Tom and today we're

2
00:00:06.860 --> 00:00:12.450 
planning to give you a small introduction in Ruby programming Ruby programming on

3
00:00:12.630 --> 00:00:16.230 
OpenHPI CodeOcean. Yeah we

4
00:00:18.170 --> 00:00:23.230 
decided to keep the example simple this time or more simply

5
00:00:23.230 --> 00:00:26.480 
even more simple than last week with the javascript examples,

6
00:00:26.480 --> 00:00:28.410 
because we think that you've got

7
00:00:29.750 --> 00:00:34.170 
enough to do with these examples from last week probably. And

8
00:00:35.390 --> 00:00:37.330 
so we didn't want to add

9
00:00:38.690 --> 00:00:43.690 
way more workload for you.

10
00:00:44.850 --> 00:00:46.610 
We thought, however, that

11
00:00:47.760 --> 00:00:53.360 
we want to at least give you a slight impression how these programs

12
00:00:53.620 --> 00:00:59.960 
might look, and it's really just a very basic, very simple examples. And we

13
00:01:00.120 --> 00:01:04.380 
decided to provide you with some exercises in Ruby.

14
00:01:05.540 --> 00:01:09.110 
And Ruby is the programming language that is used

15
00:01:09.960 --> 00:01:15.970 
as the basis of the Ruby on Rails framework, which for example works on

16
00:01:16.160 --> 00:01:17.990 
OpenHPI. And,

17
00:01:19.660 --> 00:01:22.600 
I just said next to php or python

18
00:01:23.940 --> 00:01:30.060 
a very popular web services, web programming language. And

19
00:01:33.140 --> 00:01:37.980 
so what we want to do in this video is to give you a

20
00:01:38.520 --> 00:01:44.700 
very short glimpse of how you can solve these exercises that

21
00:01:44.910 --> 00:01:45.930 
we've prepared for you.

22
00:01:47.240 --> 00:01:51.430 
And we want to do that with a short example.

23
00:01:51.930 --> 00:01:56.240 
And yeah let's get started. And so

24
00:01:57.920 --> 00:02:01.420 
as you already know- This is the

25
00:02:02.180 --> 00:02:03.900 
user interface of CodeOcean.

26
00:02:05.050 --> 00:02:08.710 
CodeOcean is our programming tool, a programming testing tool

27
00:02:09.760 --> 00:02:13.600 
that we use on OpenHPI, and

28
00:02:15.550 --> 00:02:20.820 
last week you have used this tool probably have used this tool for

29
00:02:21.170 --> 00:02:25.650 
for some of the javascript exercises, especially the LED exercises and

30
00:02:26.050 --> 00:02:31.260 
if you want more information on the tool, maybe you can also

31
00:02:31.540 --> 00:02:32.700 
go back to week

32
00:02:34.070 --> 00:02:39.450 
4 or the LED exercise Excursion and

33
00:02:41.060 --> 00:02:45.740 
check the video there, where we also explain some things about

34
00:02:45.960 --> 00:02:47.820 
CodeOcean and stuff like that.

35
00:02:49.480 --> 00:02:56.840 
So yeah this is not one of the exercises that we actually

36
00:02:57.680 --> 00:03:00.510 
implemented for you to solve. This is just an example

37
00:03:01.370 --> 00:03:06.920 
and we're going to show how this works. So this is a basic Ruby

38
00:03:07.370 --> 00:03:12.710 
function. Ruby functions start with the def or define keyword

39
00:03:13.180 --> 00:03:17.450 
and then you decide for some function name.

40
00:03:18.700 --> 00:03:23.240 
This is normally your choice. You can

41
00:03:24.230 --> 00:03:28.180 
choose whatever you more or less whatever you want as long as you

42
00:03:28.370 --> 00:03:33.570 
stick to some that the rules. For these functions you

43
00:03:33.570 --> 00:03:37.120 
have to check out on the Ruby documentation which

44
00:03:38.270 --> 00:03:42.550 
rules apply for function names, which notice might differ

45
00:03:42.550 --> 00:03:45.470 
from programming language to programming language. Some languages

46
00:03:45.470 --> 00:03:49.190 
don't, below for example. That function names start with a number.

47
00:03:50.860 --> 00:03:54.990 
Function names probably shouldn't be a keyword in the language. So

48
00:03:55.680 --> 00:03:57.810 
I wanted to name your function 'end'.

49
00:03:58.680 --> 00:04:01.980 
I think it won't work. Yes, or def maybe.

50
00:04:05.050 --> 00:04:10.380 
So yes and this is a parameter that we pass to this function.

51
00:04:10.550 --> 00:04:13.940 
And what you shouldn't do is to change

52
00:04:15.250 --> 00:04:16.630 
the code that we

53
00:04:18.360 --> 00:04:23.770 
provided for you in this function. So this is already correct or

54
00:04:25.790 --> 00:04:30.000 
as intended. So you shouldn't rename this function.

55
00:04:30.420 --> 00:04:35.800 
You shouldn't add more parameters and and all that. You just should work

56
00:04:36.140 --> 00:04:39.310 
within these functions. And now

57
00:04:40.210 --> 00:04:45.450 
yeah what are we expecting? So this is normally, we have a

58
00:04:45.450 --> 00:04:49.880 
little bit more web descriptions of the expected

59
00:04:50.410 --> 00:04:52.510 
task. We want you to do

60
00:04:53.340 --> 00:04:56.180 
here we kept it short for you, for example. So we want

61
00:04:57.300 --> 00:05:00.210 
you to revert the given string. So

62
00:05:01.070 --> 00:05:04.160 
it should be written backwards.

63
00:05:05.450 --> 00:05:09.510 
So what you could do just to get started?

64
00:05:10.630 --> 00:05:12.280 
Would be for example to

65
00:05:13.030 --> 00:05:17.790 
return a string- any string.

66
00:05:21.010 --> 00:05:22.870 
In ruby, you don't need

67
00:05:23.760 --> 00:05:29.410 
the return keyword. I was just wondering, as you said return, I didn't write return.

68
00:05:29.760 --> 00:05:30.800 
Yes that's a

69
00:05:32.720 --> 00:05:36.590 
sort of a yeah how could you call it a convention maybe

70
00:05:37.160 --> 00:05:41.430 
in Ruby that always a feature of the ruby language actually

71
00:05:41.730 --> 00:05:43.330 
that always the last

72
00:05:44.170 --> 00:05:49.250 
statement or the last value within functions returned. So you

73
00:05:49.260 --> 00:05:50.630 
could write return here.

74
00:05:51.940 --> 00:05:55.260 
Return keyboard also exists as javascript, for example.

75
00:05:55.750 --> 00:05:57.790 
But you don't need it. You just can

76
00:05:58.460 --> 00:06:04.040 .:
do this. And now you could run the code. You could use to run button.

77
00:06:04.240 --> 00:06:09.320 
And what's going to happen is yet your code ran without errors.

78
00:06:09.980 --> 00:06:13.730 
Ok so that sounds good. But

79
00:06:15.380 --> 00:06:19.990 
as you can imagine that's not what we expect you to do. So

80
00:06:21.310 --> 00:06:23.920 
if you discover the code, we have some

81
00:06:24.540 --> 00:06:29.090 
unit tests implemented in the back. You don't see them and

82
00:06:29.550 --> 00:06:32.140 
we don't want to show you because then it would be

83
00:06:33.160 --> 00:06:37.190 
sometimes easier, too easy to solve the task because you know what

84
00:06:37.420 --> 00:06:38.600 
exactly is expected.

85
00:06:41.110 --> 00:06:43.380 
So you could trick the system.

86
00:06:45.440 --> 00:06:49.910 
So as you can see something went wrong. And

87
00:06:50.610 --> 00:06:53.930 
we can see this is a separate file which you don't see, which

88
00:06:53.930 --> 00:06:58.770 
we also provided. And this contains tests. So what we

89
00:06:59.780 --> 00:07:05.460 
want is that your function should not only be syntactically correct, but it

90
00:07:05.640 --> 00:07:09.680 
should also be returning the correct results, or the expected results.

91
00:07:10.350 --> 00:07:13.980 
And so if you get an orange or red

92
00:07:15.250 --> 00:07:19.590 
bar here, you probably should rethink

93
00:07:20.590 --> 00:07:22.380 
your code. And

94
00:07:24.350 --> 00:07:27.140 
we added a very generic

95
00:07:28.050 --> 00:07:30.440 
feedback here. We normally in the

96
00:07:31.460 --> 00:07:34.590 
actual exercises we have that a little bit more specific.

97
00:07:35.830 --> 00:07:38.750 
But what you always can do is, you can go

98
00:07:39.770 --> 00:07:44.590 
look for the problem output and here you get the actual

99
00:07:45.910 --> 00:07:47.720 
error messages of the

100
00:07:48.860 --> 00:07:52.780 
of the tests that we supplied. And you can actually see a little

101
00:07:52.780 --> 00:07:56.770 
bit of our tests. So you see what part of our test

102
00:07:57.270 --> 00:08:04.040 
not hidden from you, yet failed. Exactly so what we can see here is

103
00:08:04.440 --> 00:08:06.130 
ok the code,

104
00:08:07.530 --> 00:08:14.330 
all the tests expected that there is an output of "desserts" and it got

105
00:08:14.540 --> 00:08:19.050 
"hello". Why did it get "hello"? Well no wonder you wrote it here.

106
00:08:19.900 --> 00:08:23.180 
So what would be the simple solution?

107
00:08:24.060 --> 00:08:26.110 
We just write "dessert".

108
00:08:28.530 --> 00:08:31.150 
That's it. That's it. Is enough.

109
00:08:33.010 --> 00:08:34.530 
Let's check it. We'll run it.

110
00:08:35.780 --> 00:08:40.430 
I think that should be correct. Still no errors.

111
00:08:41.370 --> 00:08:44.850 
Ok now let's score it. Now we should get full points, I guess.

112
00:08:46.090 --> 00:08:49.650 
Oh no, oh but you wrote "dessert".

113
00:08:50.380 --> 00:08:51.660 
Yeah and asked for that.

114
00:08:53.050 --> 00:08:55.440 
Well, now it's asking for something different. What

115
00:08:56.720 --> 00:09:02.870 
is going on here? Well yeah so now we got "desserts". We did

116
00:09:03.300 --> 00:09:06.180 
what the test told us to do, but of course

117
00:09:07.130 --> 00:09:11.180 
we tested for more than one result, because we don't want you

118
00:09:11.180 --> 00:09:12.370 
to just put out some

119
00:09:13.610 --> 00:09:14.890 
given string. We want you

120
00:09:17.190 --> 00:09:20.790 
to use something.

121
00:09:22.640 --> 00:09:25.350 
Oh yeah to find the right solution.

122
00:09:26.980 --> 00:09:29.990 
Every and any given string. Exactly.

123
00:09:30.630 --> 00:09:33.380 
So some examples.

124
00:09:35.480 --> 00:09:36.540 
What could we do?

125
00:09:38.730 --> 00:09:44.190 
I don't know I think if we want to operate on a string, maybe we could find

126
00:09:44.830 --> 00:09:48.060 
what string operations are possible.

127
00:09:49.710 --> 00:09:52.990 
Okay so yeah what we could do is to go to the

128
00:09:52.990 --> 00:09:54.230 
Ruby documentation and

129
00:09:58.040 --> 00:10:00.110 
it's online available so

130
00:10:01.080 --> 00:10:02.880 
everybody can go there.

131
00:10:04.700 --> 00:10:09.400 
And you can find it on the Ruby-doc.com.

132
00:10:09.950 --> 00:10:15.170 
And yeah ok I'm gonna search now for string

133
00:10:16.470 --> 00:10:20.110 
because we want to operate on a string. And

134
00:10:25.990 --> 00:10:29.900 
well this gives me some funny advertisements on top. But

135
00:10:33.210 --> 00:10:38.590 
yeah what we really want to look at is class string and we are

136
00:10:39.210 --> 00:10:42.880 
working with Ruby version 2.2.0. So this is the

137
00:10:43.580 --> 00:10:49.500 
most recent versions. 1.8.7 and 1.9.2 are older versions and

138
00:10:51.790 --> 00:10:57.110 
now we have the like everything that the string class provides us with.

139
00:10:57.370 --> 00:11:01.030 
And so we want to reverse the

140
00:11:02.500 --> 00:11:04.480 
string. And

141
00:11:06.670 --> 00:11:09.280 
what a surprise. Yes, as a function

142
00:11:10.620 --> 00:11:14.790 
there is a method, a method on a string class and Ruby. Everything's not

143
00:11:15.710 --> 00:11:17.990 
an object in Ruby.

144
00:11:19.180 --> 00:11:21.780 
So yeah we can just

145
00:11:23.300 --> 00:11:27.480 
use this method and

146
00:11:28.490 --> 00:11:31.780 
we even stole the example from the documentation.

147
00:11:32.240 --> 00:11:35.880 
We have to admit because we liked it that much and

148
00:11:37.970 --> 00:11:40.650 
so yeah

149
00:11:41.900 --> 00:11:43.740 
what can we do? We can

150
00:11:44.920 --> 00:11:50.170 
go back, have a look- string dot. In ruby we also have this

151
00:11:50.170 --> 00:11:55.160 
dot syntax to color methods on objects.

152
00:11:55.960 --> 00:12:01.330 
And let's just try that. So this is the string that we are passing into the

153
00:12:01.750 --> 00:12:04.220 
method on the function, and

154
00:12:06.240 --> 00:12:07.150 
let's use this

155
00:12:08.480 --> 00:12:11.250 
parameter and call the

156
00:12:11.930 --> 00:12:15.130 
reverse method of string. So

157
00:12:15.850 --> 00:12:16.640 


158
00:12:20.280 --> 00:12:26.430 
It was revert with 't'. I don't think so. It was reverse

159
00:12:26.980 --> 00:12:28.150 
and as you're so confident.

160
00:12:31.850 --> 00:12:33.680 
Yeah, but having a second look

161
00:12:34.890 --> 00:12:38.840 
is always a good idea. So also

162
00:12:39.420 --> 00:12:40.830 
what we should mention is

163
00:12:41.550 --> 00:12:46.620 
it's completely irrelevant that these have the same

164
00:12:47.180 --> 00:12:48.490 
name. So this is

165
00:12:50.410 --> 00:12:51.600 
coincident because

166
00:12:53.450 --> 00:12:57.080 
we were too lazy when we named our own

167
00:12:57.930 --> 00:13:00.820 
function. So now we could

168
00:13:01.990 --> 00:13:04.120 
check that it would run there.

169
00:13:06.390 --> 00:13:08.500 
Still the code ran without errors. So

170
00:13:10.330 --> 00:13:18.840 
first I'm fine for now. And now we can score it and hopefully, yes

171
00:13:20.190 --> 00:13:23.520 
it's green. It's green. It works. So this would be

172
00:13:24.190 --> 00:13:30.060 
a passed test and we get one out of one points. So

173
00:13:31.020 --> 00:13:34.770 
everything's fine and if we would be in

174
00:13:35.180 --> 00:13:36.560 
we had accessed this

175
00:13:38.300 --> 00:13:42.030 
exercise from within our image behind now,

176
00:13:42.440 --> 00:13:45.130 
you would have a button here- submit your

177
00:13:46.790 --> 00:13:48.680 
points to OpenHPI. Then you click

178
00:13:49.100 --> 00:13:52.170 
and then your points would be transferred to OpenHPI.

179
00:13:53.130 --> 00:13:55.160 
It'll appear in your progress as well.

180
00:13:55.860 --> 00:14:02.460 
And what we also might do is just have look here and yes, see it

181
00:14:03.760 --> 00:14:07.020 
thus what we expected to do, and it worked.

182
00:14:08.110 --> 00:14:13.100 
So maybe one last tip-

183
00:14:21.490 --> 00:14:24.900 
if you want to debug your code,

184
00:14:26.430 --> 00:14:29.980 
and this is a very simple example. It shouldn't be necessary but maybe

185
00:14:30.190 --> 00:14:34.820 
we have a couple of little bit more complex examples. You can also output

186
00:14:34.940 --> 00:14:40.210 
the result. We did that last week in the javascript examples with the code

187
00:14:40.390 --> 00:14:49.230 
console dot log. And in Ruby we can use the 'puts'

188
00:14:51.420 --> 00:14:52.760 
function that something

189
00:14:53.680 --> 00:15:00.440 
that we get from Ruby and puts more or less does the same console log.

190
00:15:00.760 --> 00:15:03.130 
At least in the context of

191
00:15:03.770 --> 00:15:05.620 
CodeOcean.

192
00:15:07.110 --> 00:15:08.980 
And so we could

193
00:15:10.960 --> 00:15:15.480 
call our reverse function, apostrophe a string

194
00:15:20.850 --> 00:15:21.610 
"world" and

195
00:15:25.510 --> 00:15:26.290 
run it.

196
00:15:27.820 --> 00:15:34.010 
And no you get not only this output that the code ran without errors, but also

197
00:15:34.420 --> 00:15:37.020 
the output of the puts.

198
00:15:37.630 --> 00:15:39.480 
So you can always

199
00:15:40.350 --> 00:15:43.790 
print out the results of your of your work

200
00:15:44.490 --> 00:15:46.410 
by running it. Like in this case.

201
00:15:48.020 --> 00:15:51.060 
Just to make sure it's by run not by score.

202
00:15:51.790 --> 00:15:53.580 
You need but you need to

203
00:15:54.970 --> 00:15:59.220 
output something. You can use this puts function. At that point

204
00:15:59.240 --> 00:16:02.280 
I would have noticed that I used the wrong method name

205
00:16:02.730 --> 00:16:05.520 
and Tom used the right one, so he got that.

206
00:16:06.430 --> 00:16:12.730 
Good yeah, exactly if we would use the wrong one for example the 'revert',

207
00:16:14.320 --> 00:16:17.780 
I would expect, no this is life, oh no.

208
00:16:19.500 --> 00:16:26.180 
I would expect an error and we get so there's no method 'revert' for

209
00:16:26.700 --> 00:16:31.750 
the string class in Ruby. So

210
00:16:32.740 --> 00:16:33.930 
something's wrong.

211
00:16:35.580 --> 00:16:37.570 
We have to check our code and and fix that.

212
00:16:42.190 --> 00:16:46.280 
So next step should be have a look at the next task.

213
00:16:46.920 --> 00:16:51.640 
They are not too complex but of course Ruby might be a new language to you.

214
00:16:52.330 --> 00:16:58.020 
So lots of fun and if you have questions just ask us or ask the forum and have fun.
