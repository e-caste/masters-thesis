WEBVTT

1
00:00:01.020 --> 00:00:08.240 
Now we consider Certificate Standards in our OpenHPI Course about Confidential Communication

2
00:00:08.250 --> 00:00:14.920 
in the Internet. With the certificates machines have to work: the browser, the server.

3
00:00:15.280 --> 00:00:21.666 
We as humans, do not have to deal with such certificates.For that reason

4
00:00:21.680 --> 00:00:27.600 
Certificates need to be standardised, needs to be machine readable.

5
00:00:29.360 --> 00:00:36.660 
To remind you, in a PKI the verifiable binding between the users of

6
00:00:36.660 --> 00:00:43.880 
PKI and their public keys, this binding is established with the help of the digital

7
00:00:44.140 --> 00:00:50.020 
certificates. And to be able to work with such digital certificates under various

8
00:00:50.020 --> 00:01:00.240 
IT systems, they must be standardized. And there are different standards for such certificates. They are

9
00:01:00.500 --> 00:01:07.840 
a very important part of the PKI standards. Also PKI standards, there

10
00:01:08.700 --> 00:01:17.620 
are some in place. The most popular certificate standard is the X.509

11
00:01:18.088 --> 00:01:26.520 
certificate format. This has become widely used because it's applicable in various

12
00:01:26.820 --> 00:01:34.652 
PKI standards such as the PKIX and ISIS-MTT.

13
00:01:34.806 --> 00:01:41.040 
There are other certificate formats also in use.

14
00:01:41.320 --> 00:01:48.130 
For example the OpenPGP. Let's have a closer look on this X.509

15
00:01:48.140 --> 00:01:57.120 
certificate. The first version X.509v1 was introduced in 1988.

16
00:01:58.440 --> 00:02:04.720 
The X.509v has seven fields:

17
00:02:05.340 --> 00:02:12.380 
The version number, the certificate serial number(-it needs to be unique among all

18
00:02:12.460 --> 00:02:20.620 
the certificate numbers of a CA), the OID(-for example, the RSA, the DSA)

19
00:02:22.180 --> 00:02:27.060 
of the signature procedure, of that signature procedure that is used

20
00:02:27.780 --> 00:02:34.380 
for signing the certificate because the partner needs to know

21
00:02:35.460 --> 00:02:43.700 
which method has to be used to decrypt this signature. Then the name of

22
00:02:43.700 --> 00:02:53.140 
the CA- it is important to know the name of the CA that signed the certificate.

23
00:02:54.140 --> 00:03:02.629 
Now it's very, very important- the name of the Certificate Holder,

24
00:03:02.640 --> 00:03:07.820 
by the way, the name written is described in the form that

25
00:03:07.820 --> 00:03:13.965 
follows the X.500 naming convention. And the public key of the

26
00:03:13.980 --> 00:03:21.300 
Certificate Holder, and at the end also the Validity period of

27
00:03:22.140 --> 00:03:26.680 
the certificate is written, described as the start

28
00:03:27.500 --> 00:03:33.960 
and the end day. Then in 1993 a second version

29
00:03:34.640 --> 00:03:46.600 
of the X509 certificats were issued. Some innovations in this version are that some additional fields

30
00:03:47.060 --> 00:03:52.960 
could be included in the certificate. So for example, a unique identification

31
00:03:52.960 --> 00:03:59.360 
of the certificate holders since it is important when there are different people

32
00:03:59.360 --> 00:04:06.860 
with the same name, and unique identification of the CA. If it is

33
00:04:06.860 --> 00:04:15.460 
a hierarchical system with many CA's. This is where these innovation became obvious

34
00:04:15.540 --> 00:04:21.120 
that they are needed. When using the version 1 certificates, and in that

35
00:04:21.120 --> 00:04:23.960 
time, you remember it's the beginning of the World Wide Web,

36
00:04:24.300 --> 00:04:33.445 
which was introduced in 1989. So here in the mid of 90's

37
00:04:33.460 --> 00:04:39.800 
e-business and e-government applications became popular, they first became

38
00:04:39.800 --> 00:04:45.800 
popular in the World Wide Web. In practice, they didn't

39
00:04:46.420 --> 00:04:52.560 
become important, so the most X.509 implementations do not use these fields

40
00:04:52.840 --> 00:04:58.620 
because its implementation were already in the field. It was not so easy to

41
00:04:58.620 --> 00:05:04.000 
extend an implementation and to roll it out to all the

42
00:05:04.000 --> 00:05:09.240 
the places where the X.509v1 implementations where already in place.

43
00:05:09.960 --> 00:05:20.220 
So PKIX and ISIS-MTT recommend to leave fields empty. For example, the coincidence of names-

44
00:05:20.220 --> 00:05:23.320 
of user names, as it could be avoided

45
00:05:24.020 --> 00:05:30.260 
with differ methods. But both the first and the second version of

46
00:05:30.270 --> 00:05:39.820 
X.509 certificate standards has some shortcomings. So first is that

47
00:05:39.860 --> 00:05:47.180 
the naming convention, which follows the X.500 naming convention is very restrictive.

48
00:05:47.760 --> 00:05:53.180 
So for example, it was not possible to give an email address instead

49
00:05:53.180 --> 00:05:59.400 
of the user name. Another shortcoming was that no conclusions can

50
00:05:59.400 --> 00:06:04.990 
be drawn on the intended use of a public key. Is it a public

51
00:06:05.158 --> 00:06:11.757 
key for encryption? Is it a public key for signing? Is this a public

52
00:06:11.900 --> 00:06:20.960 
key for verification of signatures? And then one could not realize out of the certificate

53
00:06:21.360 --> 00:06:28.540 
what are the security measures holding in the public key infrastructure.

54
00:06:28.780 --> 00:06:35.360 
So the certificate policy should be connected to the certificates that

55
00:06:35.360 --> 00:06:42.680 
everyone can check: what is the user binding, what is the binding

56
00:06:42.880 --> 00:06:48.420 
between the user name and public key infrastructure. For that reason

57
00:06:48.620 --> 00:06:58.120 
in 1996 the X.509 version 3 standard were published for these certificates. This

58
00:06:58.130 --> 00:07:08.700 
standard specifies a syntax for defining new fields and so-called extensions. And this

59
00:07:08.700 --> 00:07:13.440 
was very important because the people realized that from time and time,

60
00:07:13.580 --> 00:07:18.820 
new requirements need to be fulfilled. In the first versions,

61
00:07:18.820 --> 00:07:23.156 
every time a new standard has to be established. Now, with this version 3

62
00:07:23.241 --> 00:07:31.080 
standard, the possibility is provided to extend the functionality.

63
00:07:31.920 --> 00:07:36.820 
The process of how to do is this inside a standard is described

64
00:07:36.900 --> 00:07:43.940 
by this syntax. So such an extension, it contains a text field

65
00:07:44.480 --> 00:07:48.880 
indicating whether the extension is critical or non-critical.

66
00:07:49.560 --> 00:07:55.940 
The distinction between critical and non-critical extension should

67
00:07:55.940 --> 00:08:04.280 
help the software that cannot deal with critical extensions, then the certificate itself

68
00:08:04.400 --> 00:08:10.900 
is considered invalid. Because here are information that are considered

69
00:08:10.900 --> 00:08:16.480 
very important, and if the software which have to deal with the certificate,

70
00:08:16.480 --> 00:08:22.240 
is not able to recognize or understand such critical extension, then

71
00:08:23.200 --> 00:08:33.400 
the certificate is considered invalid. When non-critical extensions are

72
00:08:33.400 --> 00:08:40.640 
unknown, then they are simply skipped. So the extension mechanism

73
00:08:41.560 --> 00:08:47.820 
now is very flexible and future proof, but makes the certificates, of course difficult to

74
00:08:47.820 --> 00:08:52.620 
read and also to deal with the different implementations

75
00:08:54.180 --> 00:09:03.800 
To support compatible implementation, one year later in 1997, a standard extension was defined.

76
00:09:03.810 --> 00:09:10.460 
A standard extension was defined with some additional fields. So one field is identification

77
00:09:10.480 --> 00:09:18.640 
of the key of the certification authority, this was necessary because in practice,

78
00:09:19.320 --> 00:09:27.200 
it was proved that such a certification authority usess multiple keys.The identification of the certificate

79
00:09:27.200 --> 00:09:32.720 
holder key is important, because the

80
00:09:33.260 --> 00:09:41.400 
certificate can be different, also the holder might have different

81
00:09:41.400 --> 00:09:47.660 
keys for different purposes. And then, the intended use of a key (is this a

82
00:09:47.660 --> 00:09:52.580 
key for encryption or signature), and some other extensions. The idea of

83
00:09:52.580 --> 00:09:59.760 
standard extension was to give the companies that implement

84
00:10:00.340 --> 00:10:13.850 
such software which deal with the certificates a standard format for certificates. So they can try to implement standards

85
00:10:13.860 --> 00:10:19.780 
that possibly have a high level of inter operability

86
00:10:20.320 --> 00:10:28.800 
So the X.509 standard is one of the most important crypto standards ever.

87
00:10:29.300 --> 00:10:34.790 
These certificates have found widespread use in the Internet in many applications.

88
00:10:34.878 --> 00:10:39.760 
The development of the standard at the very early stage explains

89
00:10:40.280 --> 00:10:43.920 
that in the beginning it didn't fit correctly, and

90
00:10:44.720 --> 00:10:51.080 
it was necessary to adapt the standard several times

91
00:10:52.340 --> 00:10:58.630 
after having more experience with the need for certificates in modern

92
00:10:58.694 --> 00:11:05.900 
Internet. Since the standard is not defined very exactly.

93
00:11:06.500 --> 00:11:11.660 
So the loosly defined standard leaves some scope for interpretation.

94
00:11:12.240 --> 00:11:17.820 
And this really happens, here are several implementations of the same standard

95
00:11:18.380 --> 00:11:23.840 
which are incompatible to each other. This is a problem we often see in

96
00:11:23.840 --> 00:11:30.260 
the Internet when some competing implementations are done on an agreement

97
00:11:30.520 --> 00:11:34.580 
that is not fixed up to all finest details.

98
00:11:36.240 --> 00:11:43.660 
You remember, the work of around the certificate

99
00:11:43.940 --> 00:11:51.100 
in the public key infrastructure is managed by a Certificate Management

100
00:11:51.180 --> 00:11:59.840 
protocol. Though these are available in the standard, they are defined, and they are using

101
00:12:00.020 --> 00:12:06.740 
the usual Internet protocols to distribute and to interchange their

102
00:12:07.100 --> 00:12:12.181 
messages. So the task of such a Certificate Management

103
00:12:13.340 --> 00:12:20.100 
Protocol is: The certification authority needs to be initialized-

104
00:12:20.640 --> 00:12:25.800 
so the generation and protection of the private key of the trust center needs

105
00:12:25.800 --> 00:12:32.080 
to be ruled. Then the certificates need to be generated

106
00:12:32.800 --> 00:12:40.900 
for new-coming PKI users. Then another a topic of certificate management

107
00:12:42.120 --> 00:12:49.160 
is to take care about the publication of certificates and revocation lists. And

108
00:12:49.220 --> 00:12:56.920 
regulate information exchange between the certificate authority and the users.

109
00:12:57.660 --> 00:13:02.860 
A very important part of certificate management is

110
00:13:03.460 --> 00:13:08.680 
concerned with the key revocation. So for several reasons

111
00:13:09.200 --> 00:13:14.500 
it would be desired to recover encryption keys.

112
00:13:15.460 --> 00:13:21.820 
This is something often coming also from security authorities, which try

113
00:13:23.420 --> 00:13:31.560 
to fight against criminal attacks and activities. And since the criminal peopl use

114
00:13:31.860 --> 00:13:38.030 
encryption, so the security authority says, we need help to decrypt this

115
00:13:38.040 --> 00:13:47.460 
information to prevent attacks, to make

116
00:13:47.460 --> 00:13:55.160 
cybercrime impossible. So the idea is to discuss the recovery of a private

117
00:13:55.160 --> 00:14:01.860 
key, which helps to decrypt a message. By the way, not only security authorities

118
00:14:01.860 --> 00:14:08.400 
are interested in recovery of private keys, but also private key recovery is

119
00:14:08.580 --> 00:14:15.240 
necessary in a company. For example, if one person

120
00:14:15.920 --> 00:14:25.440 
communicates with another company on the basis of such an assymetric cryptographic

121
00:14:25.450 --> 00:14:31.360 
methods. So the the private key of a person plays a role in all the

122
00:14:31.360 --> 00:14:35.920 
communication. Without access to private, nobody

123
00:14:36.820 --> 00:14:42.230 
can recover the information that was exchanged. Now, when a new person

124
00:14:42.240 --> 00:14:46.720 
come into power, then of course, this new person is interested,

125
00:14:46.780 --> 00:14:54.190 
the company is interested also to have access to the information that was sent,

126
00:14:54.200 --> 00:14:59.260 
was encrypted with the data, with a private key of the

127
00:15:00.560 --> 00:15:03.700 
person that was responsible before for it.

128
00:15:05.280 --> 00:15:12.660 
But also mentioning the reasons why it would be good to have such

129
00:15:12.660 --> 00:15:21.540 
possibilities for key recoveries, it's also very necessary to state that key

130
00:15:21.780 --> 00:15:28.640 
recovery is very problematic, because it opens doors to misuse.

131
00:15:29.300 --> 00:15:34.180 
And so it's a long-running discussion, whether this should be possible or

132
00:15:34.540 --> 00:15:38.740 
not possible. So the requirement for such,

133
00:15:39.780 --> 00:15:45.700 
if one makes a key recovery possible, then the requirement is that the

134
00:15:45.700 --> 00:15:50.960 
keys are stored in the highly secure environment. The only way for a

135
00:15:50.960 --> 00:15:57.080 
key recovery is in the case when the PKI user is

136
00:15:58.000 --> 00:16:04.240 
connected with his/her public and private key to store a copy of the private

137
00:16:04.240 --> 00:16:09.900 
key in such a secure environment. And then it is very important to

138
00:16:09.900 --> 00:16:16.560 
precisely define:  when it is necessary, who is qualified, when

139
00:16:17.220 --> 00:16:24.028 
he/she can access, how this access should be organized, under which

140
00:16:24.235 --> 00:16:33.240 
circumstance a key may be restored. So these are questions, but for example, in the German Signature law,

141
00:16:33.960 --> 00:16:40.980 
it is generally forbidden that a trust center stores a copy of a private key

142
00:16:41.400 --> 00:16:48.000 
that's used for signing. But we have many public key infrastructures,

143
00:16:48.010 --> 00:16:51.180 
they are other public key infrastructures, which allows us, but then they have to define,

144
00:16:51.460 --> 00:16:56.700 
they have to exactly define here the conditions under

145
00:16:57.300 --> 00:17:06.280 
which reasons, under which conditions is possible to recover a key.

146
00:17:07.560 --> 00:17:10.980 
Key Revocation is another important task

147
00:17:11.640 --> 00:17:18.420 
in certificate management. The revocation of a key is urgently necessary

148
00:17:19.100 --> 00:17:25.360 
if the key is compromised. In a hierarchical public key infrastructure this

149
00:17:25.380 --> 00:17:30.440 
can be easily implemented, in the web of trust it's much more difficult.

150
00:17:31.220 --> 00:17:41.530 
Reasons for revocation are described in the X.509 standard.

151
00:17:41.540 --> 00:17:50.845 
The reasons mentioned there are: if key is compromised, so it needs to be revocated.

152
00:17:50.860 --> 00:17:56.990 
If the certification authority is compromised, and if the modification of the content of the

153
00:17:57.140 --> 00:18:04.760 
certificate was done. More reasons are the exchange against new certificate needs to be

154
00:18:05.320 --> 00:18:10.820 
made. On the retirement of a PKI user his/her certificate remains

155
00:18:11.660 --> 00:18:18.120 
not invalid during the time limit. The retirement can force to

156
00:18:18.760 --> 00:18:22.624 
make it invalid before of that. And the suspension

157
00:18:23.840 --> 00:18:28.820 
also the temporary suspension in the company. So these are

158
00:18:29.620 --> 00:18:34.780 
things that all needs to be ruled in standrads, because the communication in

159
00:18:34.780 --> 00:18:42.920 
the internet is based on assymetric crptoprotocols that use these certificates. And there

160
00:18:42.920 --> 00:18:48.180 
are machines that communicate with each other, so these machines need to be

161
00:18:48.180 --> 00:18:56.300 
able to browse the server of an Internet service. So they need to be able to handle the standards.

162
00:18:56.300 --> 00:19:05.900 
The standard we proposed X.509 standard provides a very popular

163
00:19:06.720 --> 00:19:10.826 
way, how it's applied in many applications in the internet.
