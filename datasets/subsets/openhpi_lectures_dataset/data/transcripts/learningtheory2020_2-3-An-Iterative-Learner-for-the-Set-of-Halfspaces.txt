WEBVTT

1
00:00:00.860 --> 00:00:04.420 
Welcome. Now we can state the
theorem that we want to prove

2
00:00:04.420 --> 00:00:10.320 
in the next video. The set of half-spaces
is learnable by an iterative learner.

3
00:00:12.130 --> 00:00:16.450 
So the proof idea is the
following: we already find found

4
00:00:16.450 --> 00:00:19.390 
in the last video a suitable
uniform decision procedure for

5
00:00:19.390 --> 00:00:23.190 
H which allows us to start points
with the lock property and

6
00:00:23.190 --> 00:00:25.190 
these points give
us half spaces.

7
00:00:26.910 --> 00:00:31.710 
So we can store any finite amount
of points in the hypothesis.

8
00:00:32.910 --> 00:00:36.340 
The learner now has two states,
the one state is a lock state

9
00:00:36.530 --> 00:00:41.420 
where it has found four points with a lock
property and just assumes it is finished

10
00:00:42.570 --> 00:00:46.380 
and the other state is the so
called collect state where the

11
00:00:46.410 --> 00:00:50.730 
learner thinks well I have not
seen the right four points with

12
00:00:50.730 --> 00:00:56.390 
a lock property yet. So it collects points,
stores them in the hypothesis and waits

13
00:00:56.560 --> 00:00:58.460 
for other points with
a lock property.

14
00:01:00.130 --> 00:01:05.250 
Ok but now I want to specify
when does M switch from lock

15
00:01:05.250 --> 00:01:08.840 
state to collect state
or from collect state

16
00:01:08.850 --> 00:01:10.740 
to lock state and
when does it stay?

17
00:01:13.640 --> 00:01:17.080 
And the question we should have
in mind which we will talk

18
00:01:17.080 --> 00:01:20.890 
about in the next video is why
does M eventually end up in

19
00:01:20.890 --> 00:01:24.160 
a correct locke state because
this is what we need to prove

20
00:01:24.300 --> 00:01:28.520 
in order to make sure that our
iterative learner really learns the

21
00:01:28.850 --> 00:01:31.060 
hypothesis base
of half-spaces.

22
00:01:33.750 --> 00:01:36.160 
So let's look at an example
learning process.

23
00:01:37.100 --> 00:01:40.810 
Maybe first the learner sees
this positively labeled point.

24
00:01:41.700 --> 00:01:45.830 
Then it sees this negatively labeled
point, another negatively labeled point

25
00:01:46.020 --> 00:01:48.430 
another positively labeled
point and it thinks, oh,

26
00:01:49.230 --> 00:01:50.490 
I am in a
locking state.

27
00:01:51.820 --> 00:01:54.540 
So in the locking state it sees
another negatively labeled

28
00:01:54.540 --> 00:01:58.980 
point but it's consistent with
the half space that is defined

29
00:01:59.270 --> 00:02:03.510 
by this locking state because this
is all points with a positive

30
00:02:03.650 --> 00:02:07.280 
first coordinate
or zero

31
00:02:08.240 --> 00:02:10.920 
and then it will ignore it because
it's in locking state. So it

32
00:02:10.920 --> 00:02:14.390 
thinks probably I have already
found my right half space.

33
00:02:14.960 --> 00:02:18.980 
But then it sees this negatively
labeled point and it realizes

34
00:02:18.980 --> 00:02:22.330 
no I was wrong, so I have to
go to the collect state.

35
00:02:23.860 --> 00:02:28.090 
Now I am in collect state and I
see more data, I see more data

36
00:02:28.250 --> 00:02:32.320 
and I realize now I'm in
a locked state again.

37
00:02:32.800 --> 00:02:36.580 
So the learner is locked so it
forgets all the other points

38
00:02:37.180 --> 00:02:42.060 
and thinks, oh well maybe I have
found my right half space now

39
00:02:42.960 --> 00:02:47.570 
but then maybe sees this point
which again is not consistent

40
00:02:47.660 --> 00:02:51.060 
with the half space given by
the red line segment because

41
00:02:51.060 --> 00:02:52.080 
it lies above it.

42
00:02:53.670 --> 00:02:58.150 
And so it will again go to the collect
state and it will collect more points

43
00:02:58.720 --> 00:03:02.890 
and then it sees again, well now
I am again in a lock state

44
00:03:02.890 --> 00:03:06.970 
so I have again found four points
that have the lock property.

45
00:03:07.280 --> 00:03:11.770 
So again it forgets the other
points and now this is

46
00:03:11.780 --> 00:03:16.210 
the half space that we wanted to
learn. So no matter which points

47
00:03:16.210 --> 00:03:20.840 
the learner will see in the future,
it will like stay to this

48
00:03:20.850 --> 00:03:24.750 
or stick to this locke state
and to this four points

49
00:03:24.750 --> 00:03:29.420 
with a lock property and so it has
learned this half-space correctly.

50
00:03:32.000 --> 00:03:33.760 
Let's sum up a bit
more formally.

51
00:03:34.540 --> 00:03:38.540 
The learner just initializes with an
arbitrary hypothesis, for example zero.

52
00:03:39.310 --> 00:03:42.220 
When it sees the
last hypothesis i

53
00:03:42.750 --> 00:03:46.640 
and an input w with
the label lambda

54
00:03:47.510 --> 00:03:51.240 
then what it does if it is in a
collect state it will add the

55
00:03:51.240 --> 00:03:55.860 
new data point to all the data that
is already encoded in the input.

56
00:03:56.370 --> 00:03:59.740 
or in the collect state so we've
collected may be quite already

57
00:04:00.210 --> 00:04:04.220 
quite a bit of points. And then
it checks whether four points

58
00:04:04.480 --> 00:04:09.770 
in this data with the new datum
included if four points

59
00:04:09.770 --> 00:04:13.390 
have the lock property and are
consistent with all the data.

60
00:04:13.400 --> 00:04:17.480 
So the half-space given by these
four points fits the data.

61
00:04:18.640 --> 00:04:21.900 
If it finds these four points well
then it switches to lock state

62
00:04:22.180 --> 00:04:25.980 
and stores this four points
in the new hypothesis.

63
00:04:26.520 --> 00:04:30.070 
If it can't find four points with
the lock property then it stays

64
00:04:30.070 --> 00:04:35.130 
in the collect state and just adds the
new datum to the already stored data

65
00:04:35.360 --> 00:04:37.870 
and stores all of this
in the new hypothesis.

66
00:04:39.920 --> 00:04:43.640 
So what happens in the lock stage?
In the lock state the learner

67
00:04:43.640 --> 00:04:47.160 
checks whether the new datum is
consistent with the half-space

68
00:04:47.180 --> 00:04:48.980 
given by the
hypothesis.

69
00:04:50.220 --> 00:04:53.870 
If it is, well it stays in the
lock state because it thinks

70
00:04:53.870 --> 00:04:56.570 
I'm already done. I have found
the right half space. So it

71
00:04:56.570 --> 00:04:58.180 
repeats the
hypothesis i.

72
00:04:59.440 --> 00:05:03.020 
If it is not consistent then it
will switch to the collect state

73
00:05:03.270 --> 00:05:07.360 
and store the four points that
previously were the witnesses

74
00:05:07.360 --> 00:05:11.120 
for the lock property and the new
datum in the new hypothesis

75
00:05:11.560 --> 00:05:14.360 
and waits for the
next input.

76
00:05:16.810 --> 00:05:21.750 
So in the next video we will argue
why this M eventually ends

77
00:05:21.750 --> 00:05:23.290 
up in the correct
locked state.
