WEBVTT

1
00:00:00.920 --> 00:00:06.300 
In our openHPI course about digital
identities, now we want to speak about FIDO.

2
00:00:06.690 --> 00:00:12.670 
FIDO, that's an alternative concept
to password-based authentication.

3
00:00:13.460 --> 00:00:20.410 
And especially it enables the use of
alternative authentication methods,

4
00:00:20.610 --> 00:00:26.230 
for example by fingerprint readers
or special USB sticks. FIDO

5
00:00:26.470 --> 00:00:29.100 
stands for Fast
ID Online

6
00:00:30.290 --> 00:00:36.110 
and the idea of FIDO is that the
authentication should be done locally.

7
00:00:36.530 --> 00:00:40.320 
That means no secrets
are stored centrally.

8
00:00:41.180 --> 00:00:47.710 
The use of alternative authentication methods,
for example biometrics, should be simplified

9
00:00:47.880 --> 00:00:51.880 
also as a second
factor to be used.

10
00:00:53.120 --> 00:00:58.860 
How does it work and what are the specification
for this alternative authentication procedures?

11
00:00:59.610 --> 00:01:05.390 
FIDO provides a set of specifications
for alternative authentication methods.

12
00:01:05.860 --> 00:01:10.560 
Specification that is an
implementation basis

13
00:01:11.040 --> 00:01:12.980 
for all involved
parties.

14
00:01:13.700 --> 00:01:17.430 
For the browser manufacturers,
for the end device

15
00:01:18.070 --> 00:01:20.790 
manufacturers, for
service providers.

16
00:01:21.810 --> 00:01:26.890 
And the initial
specification is U2F

17
00:01:27.300 --> 00:01:31.670 
and UAF from the
FIDO Consortium.

18
00:01:32.610 --> 00:01:39.300 
The FIDO U2F is

19
00:01:41.900 --> 00:01:44.040 
designed for website

20
00:01:44.950 --> 00:01:49.210 
and can require a strong second
factor for registration.

21
00:01:49.610 --> 00:01:52.270 
For example a FIDO
security key.

22
00:01:53.160 --> 00:01:57.950 
The FIDO security key is a
special certified USB device

23
00:01:59.060 --> 00:02:04.450 
that can perform various cryptographic
operations, for example, key

24
00:02:04.980 --> 00:02:08.950 
generations. The FIDO UAF,

25
00:02:09.650 --> 00:02:14.950 
the Universal Authentication Framework,

26
00:02:15.500 --> 00:02:20.930 
that use local authentication
methods of end devices for web

27
00:02:20.930 --> 00:02:25.010 
authentications. For example
fingerprint via smartphones.

28
00:02:26.480 --> 00:02:31.740 
FIDO2 is an extension
of FIDO and integrates

29
00:02:32.330 --> 00:02:38.340 
W3C web authentication
specifications and extends

30
00:02:38.390 --> 00:02:42.520 
the Client-to-Authenticator
protocol of FIDO.

31
00:02:44.660 --> 00:02:55.680 
The WWW is a consortium, the
W3C Web Authentication

32
00:02:56.070 --> 00:03:02.620 
has specified different methods for
authentication. These are the web

33
00:03:02.780 --> 00:03:08.590 
authentication specifications. And this
web authentication specification

34
00:03:08.860 --> 00:03:16.370 
specifies a programming interface in
web browsers so that FIDO can be

35
00:03:17.570 --> 00:03:20.910 
accessed directly
via this interface.

36
00:03:22.660 --> 00:03:25.220 
This Client-To-Authenticator
Protocol, the CTAP

37
00:03:27.480 --> 00:03:32.420 
protocol controls the communication
between the web browser

38
00:03:32.460 --> 00:03:37.870 
and so called authenticators
for actual authentications.

39
00:03:39.540 --> 00:03:44.660 
FIDO defines a special protocol for
the initial registration process

40
00:03:45.160 --> 00:03:49.660 
and for subsequent
authentication with the services.

41
00:03:50.740 --> 00:03:56.260 
The security methods that are used are
based on asymmetric encryption

42
00:03:56.810 --> 00:04:01.680 
and these asymmetric encryption
methods are characterized by using

43
00:04:02.570 --> 00:04:08.120 
two keys. One, the private key
that has to stay with the user

44
00:04:08.120 --> 00:04:13.940 
and has never to give away and a
public key that can be shared

45
00:04:14.060 --> 00:04:17.910 
with any other users in this
public key infrastructure.

46
00:04:19.390 --> 00:04:24.540 
During the registration, the end
device creates a new key pair

47
00:04:24.780 --> 00:04:26.380 
for each new service.

48
00:04:27.090 --> 00:04:31.260 
The private key is issued to
sign a so called challenge.

49
00:04:32.030 --> 00:04:37.120 
The key is stored locally on the
device and the key is only available

50
00:04:37.130 --> 00:04:42.770 
after unlocking the device. For example,
via fingerprint or the secure key.

51
00:04:43.580 --> 00:04:48.010 
And the other key, the public
key is added to the service

52
00:04:48.480 --> 00:04:55.630 
to be used and is required for
verification of signed challenges.

53
00:04:56.940 --> 00:05:02.640 
No secrets in this protocol no
secret leaves the end device

54
00:05:02.760 --> 00:05:08.110 
and this is a very important
security premise for FIDO.

55
00:05:09.440 --> 00:05:16.210 
If we consider the registration process
then we have the user with his device,

56
00:05:16.410 --> 00:05:20.980 
we have the online service.
The registration starts with

57
00:05:20.980 --> 00:05:25.370 
a request of the user
to enter the service.

58
00:05:25.780 --> 00:05:30.760 
The website is displayed
to the user, then the user

59
00:05:31.440 --> 00:05:39.350 
clicks register button. Then a request for
unlocking via fingerprint is given.

60
00:05:39.770 --> 00:05:45.280 
Then the user have to unlock
via fingerprint and then a

61
00:05:45.540 --> 00:05:51.570 
key pair is generated,
public and the private key

62
00:05:52.110 --> 00:05:57.380 
for the interaction with the
service. So a service for

63
00:05:57.870 --> 00:05:59.760 
interacting with
the service A.

64
00:06:00.360 --> 00:06:04.880 
So securely is the
private key stored

65
00:06:05.480 --> 00:06:10.200 
so that all the messages can
be encrypted with the private

66
00:06:10.200 --> 00:06:16.700 
key to the service and the public
key is sent to the online service

67
00:06:16.810 --> 00:06:20.290 
and is stored on the side of the
online service. So all what is

68
00:06:20.570 --> 00:06:26.450 
encrypted with the private key on the
user side can be only decrypted

69
00:06:26.650 --> 00:06:29.420 
by the service by means
of the public key.

70
00:06:30.770 --> 00:06:36.850 
If we look how authentication is
working, for example authentication

71
00:06:36.850 --> 00:06:38.760 
FIDO authentication
with a fingerprint

72
00:06:39.390 --> 00:06:43.990 
then first the user sends a request
to the service by entering

73
00:06:43.990 --> 00:06:48.840 
the URL of that service, website is
displayed, login button is pushed

74
00:06:49.130 --> 00:06:54.090 
and then a challenge is sent from
the online service to the user

75
00:06:54.320 --> 00:07:02.130 
and the user proves to be the
user by being able to

76
00:07:02.620 --> 00:07:07.900 
solve this challenge and to
encrypt this with its corresponding

77
00:07:07.900 --> 00:07:13.230 
private key. So the request for unlocking
via fingerprint is done, so

78
00:07:13.380 --> 00:07:20.780 
the user now has access to the fingerprint
and then the signed challenge

79
00:07:21.970 --> 00:07:25.820 
digital signed challenge is sent
back to the online service

80
00:07:26.130 --> 00:07:29.130 
and the online service
can check by

81
00:07:29.800 --> 00:07:36.590 
decrypting this signature by the private
key of the user that only the user

82
00:07:36.860 --> 00:07:41.150 
was able, on this
device, was able to

83
00:07:42.100 --> 00:07:48.160 
encrypt to sign the challenge in a
way that the service can unlock it.

84
00:07:48.510 --> 00:07:49.480 
So it is

85
00:07:50.760 --> 00:07:56.990 
then the personal website can be seen and
the user can interact with the service.

86
00:07:58.050 --> 00:08:03.750 
So FIDO has a lot of advantages
and disadvantages and become

87
00:08:03.750 --> 00:08:09.480 
more and more popular. Advantages are -
secure authentication is possible

88
00:08:09.680 --> 00:08:12.330 
by means of a multi-factor
authentication.

89
00:08:13.540 --> 00:08:16.610 
It is easy and
fast to use

90
00:08:17.490 --> 00:08:23.290 
and it can replace password
authentication which are considered weak

91
00:08:23.440 --> 00:08:28.300 
because passwords are so
easy to attack by hackers.

92
00:08:29.170 --> 00:08:37.170 
The effective FIDO method is quite
effective against phishing attacks

93
00:08:37.630 --> 00:08:41.740 
since the authenticator can verify
whether the challenge was sent

94
00:08:41.890 --> 00:08:46.790 
from a valid source and not
from a cybercriminal.

95
00:08:47.720 --> 00:08:49.460 
The disadvantages
of the FIDO

96
00:08:50.270 --> 00:08:52.940 
system is that special
hardware is needed

97
00:08:53.620 --> 00:08:57.650 
for the fingerprint. This
is a USB stick

98
00:08:58.240 --> 00:09:05.220 
and then that for the authentication
additional steps are necessary.

99
00:09:06.700 --> 00:09:14.180 
To summarize, FIDO is a set of methods
for simple and strong authentication.

100
00:09:15.020 --> 00:09:18.700 
FIDO offer password-less
multi-factor authentication

101
00:09:19.140 --> 00:09:22.920 
which is resistant
to phishing attacks.

102
00:09:23.500 --> 00:09:26.980 
When we discuss attacks, we will see
that phishing is very dangerous

103
00:09:27.440 --> 00:09:32.450 
because in phishing mails attacker
tries to get trust of the user

104
00:09:32.450 --> 00:09:37.440 
and get its credentials. Here with
FIDO this type of attack is

105
00:09:37.680 --> 00:09:43.010 
impossible, can easily be detected.

106
00:09:43.620 --> 00:09:50.410 
FIDO is based on special hardware, the
authenticator which is responsible for generation

107
00:09:50.750 --> 00:09:54.650 
of user credential and registration
authentication process

108
00:09:55.390 --> 00:10:02.140 
and not all but many online services
already use FIDO, for example github,

109
00:10:02.440 --> 00:10:05.300 
dropbox, twitter
and others.

110
00:10:06.140 --> 00:10:12.770 
So it is a way for much better
authentication than by means of passwords.
