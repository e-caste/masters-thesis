WEBVTT

1
00:00:04.930 --> 00:00:07.650 
Now, lets speak about content negotiation.

2
00:00:08.690 --> 00:00:12.010 
If we consider the resources which are available

3
00:00:12.650 --> 00:00:15.110 
in the web then we see that

4
00:00:15.740 --> 00:00:20.830 
the same resource is available in different variants, for example,

5
00:00:23.090 --> 00:00:27.210 
with respect to the language that's used, so many

6
00:00:27.210 --> 00:00:29.020 
of the documents in the world wide web

7
00:00:29.980 --> 00:00:32.820 
are stored on the servers in different

8
00:00:33.520 --> 00:00:37.940 
language versions as they are stored in different encodings,

9
00:00:38.370 --> 00:00:43.540 
using different compression, using different character encodings,

10
00:00:43.770 --> 00:00:47.690 
but also different resources are

11
00:00:49.260 --> 00:00:54.430 
belong to the same document and have the same URI.

12
00:00:55.850 --> 00:00:58.100 
So now, content negotiation

13
00:00:58.950 --> 00:01:04.810 
provides a mechanism that was introduced by HTTP/1.1  which allows

14
00:01:05.350 --> 00:01:11.920 
that client and server negotiate which of the variant is a best fit

15
00:01:12.080 --> 00:01:15.140 
for a client request.

16
00:01:16.170 --> 00:01:20.480 
The content negotiation method is described in RFC 2068

17
00:01:20.880 --> 00:01:26.130 
and it specifies the procedures for HTTP/1.1

18
00:01:27.260 --> 00:01:33.780 
and it provides a method that client and server can discuss, can negotiate

19
00:01:34.040 --> 00:01:36.160 
which variation of the source

20
00:01:37.030 --> 00:01:39.750 
fits best and has to be transferred.

21
00:01:41.510 --> 00:01:44.170 
Content negotiation is available

22
00:01:44.900 --> 00:01:52.200 
in three different variants. First variant is called server-driven negotiation.

23
00:01:52.810 --> 00:01:58.940 
Here is a situation that the client specifies acceptable variants

24
00:01:59.470 --> 00:02:05.030 
and he can specifies his most accepted variants

25
00:02:05.470 --> 00:02:10.400 
by means in form of say-so accept header fields

26
00:02:11.080 --> 00:02:13.260 
and then the HTTP server

27
00:02:14.330 --> 00:02:19.270 
gets the request from the client and sees this accept header

28
00:02:19.270 --> 00:02:24.750 
field and can see from this which of the variants fit best for the client,

29
00:02:25.150 --> 00:02:31.120 
then the server selects this variant and transmitted it to the client.

30
00:02:31.560 --> 00:02:36.940 
So here it is the server performs a selection of the variant

31
00:02:37.160 --> 00:02:39.120 
which fits best to the client.

32
00:02:40.070 --> 00:02:45.310 
To be able to do this the client sends to the server information needed

33
00:02:45.420 --> 00:02:46.800 
for this selection.

34
00:02:48.950 --> 00:02:53.150 
The other variant of the content negotiation is the so called agent

35
00:02:53.160 --> 00:02:57.860 
driven negotiation and agent driven negotiation is in fact a client

36
00:02:57.980 --> 00:03:04.060 
driven negotiation. Here is the situation following the client sends it request

37
00:03:04.500 --> 00:03:11.320 
and the server answers us by sending information about all the available variants

38
00:03:12.610 --> 00:03:19.430 
for that resource together with three hundred multiple choices status code

39
00:03:19.820 --> 00:03:26.560 
and then the client sees which variants are available and selects the most suitable

40
00:03:26.870 --> 00:03:30.870 
among them and then in a second explicit request it

41
00:03:31.280 --> 00:03:35.320 
requested the selected resource variant.

42
00:03:36.770 --> 00:03:38.250 
And then there is a third way

43
00:03:39.800 --> 00:03:43.730 
for such a content negotiation and so called

44
00:03:44.550 --> 00:03:47.040 
transparent content negotiation

45
00:03:47.780 --> 00:03:52.700 
and in fact this is a combination of server-driven and agent-driven negotiation

46
00:03:53.160 --> 00:03:56.920 
typically performed by an intermediate systems, for example

47
00:03:56.920 --> 00:04:00.880 
by a proxy server. A proxy server knows the preferences of the

48
00:04:00.880 --> 00:04:03.180 
client on the one side and

49
00:04:03.790 --> 00:04:06.310 
the client requesting a document,

50
00:04:07.290 --> 00:04:11.010 
then the proxy server forwards it to the server and the server

51
00:04:11.010 --> 00:04:13.670 
presents to the proxy

52
00:04:15.410 --> 00:04:20.200 
available information about variants and

53
00:04:20.200 --> 00:04:26.810 
then the proxy server decides which of the variants is requested and

54
00:04:27.010 --> 00:04:29.160 
transmitted to the client.

55
00:04:31.660 --> 00:04:37.570 
How is the client, the web browser knows what the user likes

56
00:04:37.870 --> 00:04:40.580 
to get, which variants the user like to get,

57
00:04:41.860 --> 00:04:48.060 
if you install a browser on your computer then it's possible to set

58
00:04:48.370 --> 00:04:50.170 
some to configure it

59
00:04:50.960 --> 00:04:57.800 
and to type in some user settings, for example, one can explain to the browser

60
00:04:58.160 --> 00:04:59.760 
the preferred language

61
00:05:00.450 --> 00:05:05.660 
and exactly such kind of information that is used and transmitted in the

62
00:05:06.180 --> 00:05:12.320 
accept field in the HTTP header, to the server so that the server,

63
00:05:12.730 --> 00:05:17.410 
for example, is able to make the right selection of

64
00:05:18.320 --> 00:05:24.170 
preferred language. Here, lets consider request as an example,

65
00:05:24.610 --> 00:05:31.550 
first request the clients with HTTP/1.1 wants to get a certain resource

66
00:05:31.860 --> 00:05:36.850 
and then here in this accept header it tells which type of data

67
00:05:37.570 --> 00:05:42.790 
he prefers to get, it tells what kind of compression methods

68
00:05:43.180 --> 00:05:45.710 
it is able to deal with,

69
00:05:46.370 --> 00:05:51.660 
it describes what language is preferred, which character that is preferred,

70
00:05:51.910 --> 00:05:58.320 
and here by this parameters it is also a prioritization given

71
00:05:58.390 --> 00:06:00.270 
what is the best method

72
00:06:00.880 --> 00:06:07.700 
the client likes and then in the responding answer the

73
00:06:08.360 --> 00:06:11.250 
fields content

74
00:06:12.590 --> 00:06:18.300 
described the answer, the characterized variant of the resource

75
00:06:18.910 --> 00:06:25.430 
sent by the server. There is a 200 OK  status code

76
00:06:25.590 --> 00:06:30.960 
and then there is a HTML document, the character that

77
00:06:31.560 --> 00:06:35.990 
is selected according to the wishes, according to the

78
00:06:35.990 --> 00:06:38.360 
preferences of the client,

79
00:06:38.970 --> 00:06:43.610 
and the applied compression method, as well as a language,

80
00:06:44.010 --> 00:06:50.760 
it's selected according to the desires of the client, so here

81
00:06:50.970 --> 00:06:53.950 
this is an example for a server

82
00:06:54.880 --> 00:07:00.420 
decide a content negotiation. You can also imagine how it works

83
00:07:00.420 --> 00:07:04.880 
in case of the client side of the agent driven content negotiation.
