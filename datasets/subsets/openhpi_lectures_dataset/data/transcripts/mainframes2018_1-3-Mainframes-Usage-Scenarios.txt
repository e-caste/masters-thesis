WEBVTT

1
00:00:01.270 --> 00:00:04.929 
Welcome to the unit about Mainframe Usage Scenarios.

2
00:00:04.930 --> 00:00:09.010 
My name is Prof. Dr. Philip Brune from the Neu-Ulm University of Applied Sciences.

3
00:00:12.010 --> 00:00:17.079 
In this part, I would like to introduce you to the typical scenarios

4
00:00:17.080 --> 00:00:21.729 
in which mainframes have been used in the past and in which they are used

5
00:00:21.730 --> 00:00:23.500 
today and maybe in the future.

6
00:00:24.790 --> 00:00:29.439 
If you look back in the past, we see that the classical mainframe

7
00:00:29.440 --> 00:00:34.389 
applications are the original type of mainframe operation

8
00:00:34.390 --> 00:00:38.919 
and were the typical way of having a central

9
00:00:38.920 --> 00:00:43.509 
big computer in the data center, the mainframe, which

10
00:00:43.510 --> 00:00:48.243 
ran all the business applications and also hosted the data, in

11
00:00:48.244 --> 00:00:50.649 
persistent storage - the databases.

12
00:00:50.650 --> 00:00:55.899 
And it was accessed by terminals, by front-enddevices.

13
00:00:55.900 --> 00:00:58.149 
Devices that were dumb in a way.

14
00:00:58.150 --> 00:01:02.769 
So, they had no logic or no processing power of their

15
00:01:02.770 --> 00:01:08.229 
own. They were mainly just the terminal in the sense that it has a keyboard and

16
00:01:08.230 --> 00:01:13.659 
a green screen. And these were the classical 3270

17
00:01:13.660 --> 00:01:17.259 
terminals for the mainframe world.

18
00:01:17.260 --> 00:01:21.999 
Similar concepts also existed in the world of Unix

19
00:01:22.000 --> 00:01:26.769 
computers with a VT100 terminal, for example, and

20
00:01:26.770 --> 00:01:31.719 
these terminal devices were connected to the centralized mainframe

21
00:01:31.720 --> 00:01:36.639 
computer by a network and accessed their

22
00:01:36.640 --> 00:01:41.559 
central data. So, we see this in this picture, the users use

23
00:01:41.560 --> 00:01:46.119 
the mainframe typically by this kindof terminal devices

24
00:01:46.120 --> 00:01:48.399 
that you can see here schematically.

25
00:01:48.400 --> 00:01:53.109 
And they accessed a central mainframe which ran the business applications and

26
00:01:53.110 --> 00:01:57.759 
the database and the terminal basically was there for entering the data, sending

27
00:01:57.760 --> 00:02:02.439 
it to the central mainframe, getting back the next screen, which the user had to fill out

28
00:02:02.440 --> 00:02:05.239 
or enter data in and then send it back.

29
00:02:05.240 --> 00:02:10.809 
So, the terminal itself was more or less stateless and rather

30
00:02:10.810 --> 00:02:12.760 
without any functionality.

31
00:02:13.810 --> 00:02:18.279 
So this was a classical set setup of using mainframes in the 70s and 80s

32
00:02:18.280 --> 00:02:22.479 
in the past. Today, of course, mainframes have changed.

33
00:02:23.580 --> 00:02:28.409 
The role of the mainframe nowadays is that of a high-endserver, a

34
00:02:28.410 --> 00:02:33.059 
very high scalable server with a lot of CPUs and a big

35
00:02:33.060 --> 00:02:37.649 
memory, and these high-end servers, of course, are not alone anymore

36
00:02:37.650 --> 00:02:42.219 
in the data center. Today, we have in every company, we have a large set

37
00:02:42.220 --> 00:02:47.369 
of servers. Most of them, of course, are the well-known, typical

38
00:02:47.370 --> 00:02:52.019 
x86 servers running Windows or Linux, for example,

39
00:02:52.020 --> 00:02:55.679 
that we also have in the cloud settings today in the cloud data centers.

40
00:02:55.680 --> 00:03:00.269 
So the mainframe is only one, of course, important, but

41
00:03:00.270 --> 00:03:02.819 
only one part of the I.T.

42
00:03:02.820 --> 00:03:05.039 
landscape in an enterprise.

43
00:03:05.040 --> 00:03:09.749 
And of course, the people today access the mainframe, typically not by terminal

44
00:03:09.750 --> 00:03:14.549 
devices anymore. In fact, these terminal devices, the real physical devices are not being

45
00:03:14.550 --> 00:03:17.939 
manufactured anymore, for a long time now.

46
00:03:17.940 --> 00:03:22.469 
So, today we access the mainframe either using terminal emulation, which

47
00:03:22.470 --> 00:03:27.209 
is a software that emulates the classical 3270 terminal devices.

48
00:03:27.210 --> 00:03:32.039 
So you have a software on your PC or on your mobile phone or in any modern device

49
00:03:32.040 --> 00:03:36.989 
that accesses the mainframe, or we really use a web application

50
00:03:36.990 --> 00:03:41.729 
that accesses the applications on the mainframe.

51
00:03:41.730 --> 00:03:44.699 
So, I tried to show this in the right hand side.

52
00:03:44.700 --> 00:03:49.139 
Here you see a Web browser accessing, for example, a

53
00:03:49.140 --> 00:03:54.029 
web application and the web application then accesses the data of all the applications

54
00:03:54.030 --> 00:03:55.949 
on the mainframe indirectly.

55
00:03:55.950 --> 00:03:59.819 
So most of the users don't realize that they use a mainframe.

56
00:03:59.820 --> 00:04:04.289 
In fact, they don't see the mainframe as it used to be in the past,

57
00:04:04.290 --> 00:04:08.999 
but they use it indirectly by front-end applications that may run

58
00:04:09.000 --> 00:04:13.559 
on the mainframe as well, or run on servers like x86 machines

59
00:04:13.560 --> 00:04:17.939 
in a decentralized way. So, this is the typical way how we interact with the mainframe

60
00:04:17.940 --> 00:04:22.469 
today and of course, we can ask

61
00:04:22.470 --> 00:04:26.699 
the question, which kind of applications are running on the mainframe computers?

62
00:04:27.900 --> 00:04:32.429 
And typical classical workload for mainframes in the past

63
00:04:32.430 --> 00:04:37.460 
were the central enterprise-wide, critical, mission-criticalbusiness applications.

64
00:04:38.640 --> 00:04:43.079 
And they use centralized storage, the mainframe serves as a centralized storage system

65
00:04:43.080 --> 00:04:47.909 
using a central database like DB2 or IMS, and all the applications

66
00:04:47.910 --> 00:04:52.349 
access this data. And of course, the central system had to have and still

67
00:04:52.350 --> 00:04:56.263 
has to have maximum availability, maximum security, because it's hosts almost all

68
00:04:57.750 --> 00:05:00.930 
relevant or critical data of an organization.

69
00:05:02.340 --> 00:05:06.809 
And of course, these systems provide the maximum possible throughput in a sense of

70
00:05:06.810 --> 00:05:12.269 
data throughput or transaction throughput for large-scale

71
00:05:12.270 --> 00:05:13.769 
data processing applications.

72
00:05:15.180 --> 00:05:20.579 
Typically in the mainframe still today we have these so-called "legacy applications",

73
00:05:20.580 --> 00:05:25.139 
which is put into quotes here because, of course, legacy

74
00:05:25.140 --> 00:05:30.179 
applications sometimes has a bit of negative association with it,

75
00:05:30.180 --> 00:05:33.659 
which I do not want to sort of emphasize.

76
00:05:33.660 --> 00:05:38.069 
But instead, I would say a legacy is something valuable that you have, of course, and

77
00:05:38.070 --> 00:05:42.779 
that you have from the past that you have to use

78
00:05:42.780 --> 00:05:47.279 
to modernize and transform in a way that you can use it still and use

79
00:05:47.280 --> 00:05:52.199 
it in the future and make it beneficial for the company and the organization.

80
00:05:52.200 --> 00:05:56.909 
These applications typically have a long time history lasting back to decades

81
00:05:56.910 --> 00:06:01.469 
in the past, very large source code footprint

82
00:06:01.470 --> 00:06:04.680 
and typically these applications are written in languages that

83
00:06:06.570 --> 00:06:11.519 
many people are not so familiar anymore today, like especially COBOL or

84
00:06:11.520 --> 00:06:16.289 
PL1 which is a typical mainframe language, and sometimes even

85
00:06:16.290 --> 00:06:20.089 
the so-called high level assembler of the mainframe architecture.

86
00:06:21.150 --> 00:06:25.679 
So, there used to be a time, even business applications were written

87
00:06:25.680 --> 00:06:27.749 
in assembler sometimes.

88
00:06:27.750 --> 00:06:32.339 
And so we have these languages, we have a large code base of

89
00:06:32.340 --> 00:06:36.779 
systems which are written in these languages and still have to be maintained and

90
00:06:36.780 --> 00:06:40.529 
of course, further developed and improved in these languages.

91
00:06:40.530 --> 00:06:45.299 
And this is a classical world of the mainframe applications, one aspect

92
00:06:45.300 --> 00:06:49.050 
that we will deal with in this course and that we will introduce you to.

93
00:06:51.400 --> 00:06:55.899 
This kind of classical traditional workloads that are still very important

94
00:06:55.900 --> 00:07:00.429 
in the mainframe environments can be sort of divided into two kinds

95
00:07:00.430 --> 00:07:05.079 
of workloads, either the batch processing applications, which are

96
00:07:05.080 --> 00:07:09.909 
applications they call batch due to the batches of punch cards in the past,

97
00:07:09.910 --> 00:07:12.819 
which are running an asynchronous way.

98
00:07:12.820 --> 00:07:17.429 
And it started from the S/360, which was the original mainframe, which

99
00:07:17.430 --> 00:07:21.699 
was only capable of doing batch processing because everything had to be read from a punch

100
00:07:21.700 --> 00:07:24.159 
card reader in those days, in the 60s.

101
00:07:24.160 --> 00:07:28.389 
And this is a kind of asynchronous background processing that still is very important,

102
00:07:28.390 --> 00:07:33.249 
since still most of the data, most of the data processing, in fact, is not necessarily

103
00:07:33.250 --> 00:07:37.810 
online, but background-relatedand timestamp-relatedscheduled

104
00:07:39.490 --> 00:07:40.720 
asynchronous processing.

105
00:07:42.310 --> 00:07:46.839 
The typical component for that on the z/Os mainframe operating system is

106
00:07:46.840 --> 00:07:51.489 
the job entry subsystem (JES), which we will cover in more detail later.

107
00:07:51.490 --> 00:07:56.169 
And it uses the job control language (JCL) as a language to

108
00:07:56.170 --> 00:08:00.399 
formulate and put up jobs, processing jobs into the system.

109
00:08:01.650 --> 00:08:06.239 
The second type of applications that we face in the mainframe world, maybe even more

110
00:08:06.240 --> 00:08:10.679 
important than batch processing, are the online transaction processing applications

111
00:08:10.680 --> 00:08:15.179 
which are able and capable of handling large amounts of transactions per

112
00:08:15.180 --> 00:08:20.039 
time. So very, very high throughput in a sense of transaction processing.

113
00:08:20.040 --> 00:08:24.749 
And these typical S/360 systems handle the typical business transactions of large

114
00:08:24.750 --> 00:08:28.649 
companies. The card transactions, for example, like you have when you

115
00:08:29.790 --> 00:08:34.439 
withdraw money from your bank account with an automatic teller machine or any time

116
00:08:34.440 --> 00:08:37.709 
you pay something, for example, there's a booking,

117
00:08:39.270 --> 00:08:43.709 
can be at the cashier, the supermarket as well and always

118
00:08:43.710 --> 00:08:48.329 
you have an online transaction that is triggered and does some booking and

119
00:08:48.330 --> 00:08:53.099 
real important change of

120
00:08:53.100 --> 00:08:57.749 
the status of the data. So, these kind of systems typically use

121
00:08:57.750 --> 00:09:01.950 
transaction processing monitors (TPM). We'll also have a look during this course

122
00:09:04.140 --> 00:09:08.309 
on CICS and the IMS systems on the mainframe.

123
00:09:08.310 --> 00:09:13.049 
And these applications

124
00:09:13.050 --> 00:09:18.119 
are sort of the heart of our business data processing

125
00:09:18.120 --> 00:09:23.549 
today and always have been because transaction processing is what

126
00:09:23.550 --> 00:09:25.139 
really makes the world going.

127
00:09:28.020 --> 00:09:32.849 
Besides, of course, these were the classical mainframe applications

128
00:09:32.850 --> 00:09:37.859 
beside these, of course, in recent years, new kind of workloads

129
00:09:37.860 --> 00:09:42.569 
appeared that ran or still run and are possible to

130
00:09:42.570 --> 00:09:47.789 
sort of make use of the special features of the unique features of the mainframes,

131
00:09:47.790 --> 00:09:52.080 
like, for example, large scale Java or Jakarta EE, as it is called now,

132
00:09:53.730 --> 00:09:56.799 
based business applications, web applications.

133
00:09:56.800 --> 00:10:01.349 
And these can run on z/Os, Linux, and

134
00:10:01.350 --> 00:10:05.999 
on the mainframe as well. And the modern mainframes have been highly optimized

135
00:10:06.000 --> 00:10:10.529 
for Java performance, for achieving high Java performance, and in recent

136
00:10:10.530 --> 00:10:15.119 
years and the last generations of CPU's especially put attention

137
00:10:15.120 --> 00:10:20.249 
on improving the speed of Java and other modern languages.

138
00:10:20.250 --> 00:10:23.809 
And this enables the development of very large-scale

139
00:10:26.640 --> 00:10:31.379 
applications in Java and also the reengineering and modernization

140
00:10:31.380 --> 00:10:36.029 
of existing business applications like, for example, COBOL applications that

141
00:10:36.030 --> 00:10:40.949 
can be sort of encapsulated, modularized and combined with Java

142
00:10:40.950 --> 00:10:44.999 
and the modern mainframe. The second type of workload that is becoming more and more

143
00:10:45.000 --> 00:10:49.739 
important on mainframe platforms, all these kinds of SAP business

144
00:10:49.740 --> 00:10:54.450 
applications, the ERP system, the CRM systems, and all the other

145
00:10:55.860 --> 00:11:00.179 
programs that SAP is offering in their business suite.

146
00:11:00.180 --> 00:11:04.649 
And these SAP products also run on the mainframe,

147
00:11:04.650 --> 00:11:09.179 
for example, on Linux. And so the mainframe can be used, for

148
00:11:09.180 --> 00:11:14.009 
example, to host these applications and store the data in a central DB2

149
00:11:14.010 --> 00:11:16.139 
instance on z/Os, for example.

150
00:11:17.500 --> 00:11:22.869 
Beside this, of course, the high data processing and throughput capabilities

151
00:11:22.870 --> 00:11:27.429 
in combination with a very, very high end vertical

152
00:11:27.430 --> 00:11:32.019 
scalability of the of the mainframe platform, allow it to

153
00:11:32.020 --> 00:11:36.729 
run modern data processing applications like, for example, everything

154
00:11:36.730 --> 00:11:41.499 
related to big data analytics and data science applications or cloud

155
00:11:41.500 --> 00:11:46.029 
computing on the mainframe, thereby using

156
00:11:46.030 --> 00:11:50.859 
the mainframe to consolidate a huge amount or a huge number of

157
00:11:50.860 --> 00:11:55.449 
individual servers and virtual machines, virtual servers, or today maybe

158
00:11:55.450 --> 00:12:00.129 
even virtual containers, docker containers, for example, on this

159
00:12:00.130 --> 00:12:04.839 
platform, having a single big box that runs all the machines and is easily and

160
00:12:04.840 --> 00:12:09.369 
more easily administrator with a central administrator

161
00:12:09.370 --> 00:12:14.169 
in one place. And in this context, of course,

162
00:12:14.170 --> 00:12:16.869 
in recent years, the topic of blockchain appeared.

163
00:12:16.870 --> 00:12:21.849 
Combined with the popularity of crypto currencies,

164
00:12:21.850 --> 00:12:26.709 
the blockchainconcept, the blockchainidea became more and more popular,

165
00:12:26.710 --> 00:12:31.149 
still are becoming more and more popular in business IT and

166
00:12:31.150 --> 00:12:34.210 
business information systems. And these blockchain

167
00:12:36.430 --> 00:12:41.349 
concepts are still at the beginning of their real

168
00:12:41.350 --> 00:12:46.839 
widespread adoption. But the mainframe, due to its outstanding

169
00:12:46.840 --> 00:12:51.549 
cryptographic capabilities that are built in the hardware, is an interesting

170
00:12:51.550 --> 00:12:56.319 
platform for running these kind of applications on the mainframe.

171
00:12:56.320 --> 00:13:00.940 
There's for example, the Open Source Hyperledger Framework, which we also have a look at

172
00:13:02.080 --> 00:13:06.699 
during the course. So, this was a sort of an overview about

173
00:13:06.700 --> 00:13:11.229 
the workloads and applications that run or ran

174
00:13:11.230 --> 00:13:15.579 
in the past and still running on the mainframe and that might be becoming more and more

175
00:13:15.580 --> 00:13:20.109 
important in the next years on the mainframe and during

176
00:13:20.110 --> 00:13:24.549 
this course, we'll try to give you an overview of all these aspects

177
00:13:24.550 --> 00:13:27.049 
of mainframe computing.

178
00:13:27.050 --> 00:13:28.050 
Thank you very much.
