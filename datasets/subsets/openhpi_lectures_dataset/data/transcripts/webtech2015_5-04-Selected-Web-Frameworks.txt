WEBVTT

1
00:00:04.850 --> 00:00:06.380 
Several times we have mentioned

2
00:00:07.300 --> 00:00:11.210 
the importance of web frameworks for reasoned web applications.

3
00:00:11.830 --> 00:00:14.140 
Now we want to consider a few of them.

4
00:00:15.180 --> 00:00:18.730 
Let's start with Django. Django is a framework for Python.

5
00:00:20.800 --> 00:00:28.090 
We, our chair have used this framework, this Django framework to design the

6
00:00:28.240 --> 00:00:29.880 
tele-TASK application.

7
00:00:31.410 --> 00:00:36.180 
Tele-TASK, perhaps you have seen this already. Here is a URL. This is our huge

8
00:00:36.280 --> 00:00:41.970 
lecture recording archive. Lecture recording archive with possibilities of

9
00:00:42.080 --> 00:00:44.560 
designing multimedia scripts and others.

10
00:00:45.990 --> 00:00:49.620 
Another important framework is Ruby on Rails.

11
00:00:50.230 --> 00:00:56.160 
Ruby on Rails is a framework and it is for Ruby script language.

12
00:00:56.630 --> 00:01:02.580 
And you all know an application which is designed by Ruby- that's our OpenHPI.

13
00:01:04.620 --> 00:01:07.860 
Then we have PHP as another

14
00:01:08.570 --> 00:01:12.140 
for PHP as script language. There are

15
00:01:13.050 --> 00:01:14.720 
frameworks for example,

16
00:01:15.680 --> 00:01:18.420 
Zend, Symfony and CakePHP.

17
00:01:19.100 --> 00:01:24.010 
By the way, this CakePHP we have used for our Tele-Board project.

18
00:01:24.500 --> 00:01:28.250 
Here is a url- tele-board that is an interactive

19
00:01:29.470 --> 00:01:31.950 
smart board application

20
00:01:32.620 --> 00:01:37.270 
where people from different sites can give in their post its

21
00:01:37.270 --> 00:01:38.760 
by means of smartphone and others.

22
00:01:39.370 --> 00:01:41.810 
Perhaps you have fun to have a look to this.

23
00:01:42.860 --> 00:01:46.810 
There are more frameworks, for example for Grails.

24
00:01:47.240 --> 00:01:53.130 
There is a groovy framework that's based on java platform. JavaServer

25
00:01:53.130 --> 00:01:59.940 
Faces or JSF is a web framework for java ASP.NET.

26
00:02:00.940 --> 00:02:04.750 
It's a framework for all .NET languages.

27
00:02:05.250 --> 00:02:10.690 
There are more such frameworks. Let's have a closer look to a Django.

28
00:02:11.740 --> 00:02:13.150 
Django as this is the official

29
00:02:14.520 --> 00:02:19.270 
web page for the Django framework

30
00:02:20.870 --> 00:02:27.250 
https://www.djangoproject.com. The project- the Django project was started

31
00:02:27.350 --> 00:02:34.160 
in 2005 and the current version is 1.7.4.

32
00:02:34.590 --> 00:02:37.680 
It is open source. You can use this

33
00:02:38.390 --> 00:02:44.700 
with BSD license and I already mentioned it, it's based on Python

34
00:02:45.070 --> 00:02:55.670 
and HTML. The Django framework can be run on a variety of servers, the Apacher Server, on nginx,

35
00:02:55.940 --> 00:02:58.670 
on Gunicorn,

36
00:02:59.540 --> 00:03:02.030 
on Cherokee server and others.

37
00:03:03.390 --> 00:03:07.670 
The basic philosophy behind Django is

38
00:03:08.570 --> 00:03:14.290 
DRY concept- Don't Repeat Yourself. We have already introduced

39
00:03:14.290 --> 00:03:15.110 
this concept.

40
00:03:17.210 --> 00:03:23.140 
Another basic principle of Django is "explicit is better than implicit".

41
00:03:23.890 --> 00:03:32.540 
So that helps to reduce the number of failures and it's using

42
00:03:32.540 --> 00:03:36.040 
the MVC- the Model View Control architecture.

43
00:03:37.010 --> 00:03:41.540 
But here we need to be careful because it's done with a different naming.

44
00:03:41.990 --> 00:03:46.730 
In the Django framework, the viewer, the

45
00:03:47.900 --> 00:03:50.240 
controller is called view.

46
00:03:50.950 --> 00:03:53.640 
And the view is called template.

47
00:03:54.420 --> 00:04:00.870 
So when we consider here the MVC pattern, then we have

48
00:04:00.880 --> 00:04:06.810 
in Django is the m template. The MTV is a Model Template view" pattern.

49
00:04:09.630 --> 00:04:15.520 
The reason is that at that time in earlier time as there was not

50
00:04:15.520 --> 00:04:18.960 
yet developed this MVC model.

51
00:04:19.610 --> 00:04:21.240 
At that time the template

52
00:04:22.630 --> 00:04:29.310 
model were used. So if we look to the interaction of the different

53
00:04:29.420 --> 00:04:33.750 
components, then we have here is the web server.

54
00:04:34.530 --> 00:04:36.420 
That it's communicating

55
00:04:37.100 --> 00:04:44.200 
with the browser. Then the web server checks the URL configuration to see whether

56
00:04:44.700 --> 00:04:49.740 
the parameters are get, and this was in MVC the controller.

57
00:04:49.990 --> 00:04:55.520 
Here in Django frameworks this controller is called view, so that

58
00:04:55.630 --> 00:04:59.100 
it is in the center of all this interaction.

59
00:04:59.780 --> 00:05:01.610 
And then there is in

60
00:05:02.440 --> 00:05:05.020 
exchange with the model. The model

61
00:05:06.330 --> 00:05:12.860 
is the data are processed. There is an interaction with the database.

62
00:05:13.210 --> 00:05:17.830 
On the other side, there is an interaction of the controller with the template.

63
00:05:18.210 --> 00:05:21.680 
The template that was with the MVC models- the viewer

64
00:05:22.110 --> 00:05:25.600 
which is responsible for displaying the results.

65
00:05:27.380 --> 00:05:32.950 
There are a number of built-in features in the Django framework. There is

66
00:05:33.340 --> 00:05:38.610 
a cache framework. We will see later that caches are very important

67
00:05:39.070 --> 00:05:44.290 
for handling here. There are a variety of security mechanisms

68
00:05:45.450 --> 00:05:51.420 
built in the Django framework. Then it's easy to deal with

69
00:05:51.910 --> 00:05:55.510 
forms and internationalisation.

70
00:05:56.310 --> 00:05:58.840 
i18n is an important.

71
00:05:59.640 --> 00:06:06.370 
There are methods here built in in the Django framework.

72
00:06:07.950 --> 00:06:12.370 
What makes it so easy to work with such frameworks is

73
00:06:12.820 --> 00:06:17.390 
how to get a project started. So to get a new project the only

74
00:06:17.390 --> 00:06:21.870 
thing what you have to do is to give a one liner style project.

75
00:06:22.150 --> 00:06:26.300 
For example with the name my website and then automatically

76
00:06:26.490 --> 00:06:33.980 
all files are created that are needed to manage this my website project,

77
00:06:34.330 --> 00:06:38.680 
to initialize, to handle with the settings with the URLs

78
00:06:40.190 --> 00:06:46.680 
and other things. So it makes it easy to start and to have

79
00:06:47.210 --> 00:06:49.800 
all what is needed to

80
00:06:51.290 --> 00:06:54.620 
run such a web application.

81
00:06:56.560 --> 00:06:59.730 
Manage for example management comments or

82
00:07:00.640 --> 00:07:05.480 
settings there are configurations - configurations of paths, of database,

83
00:07:06.230 --> 00:07:09.720 
installed apps of middleware used and others.

84
00:07:11.980 --> 00:07:15.990 
Let's have a look to another important framework.

85
00:07:16.580 --> 00:07:19.780 
Let's have a closer look to Ruby on Rails.

86
00:07:20.420 --> 00:07:27.650 
This is the website of Ruby on Rails project. It was also started in

87
00:07:28.080 --> 00:07:33.850 
2005, but the current version is 4.2.

88
00:07:34.470 --> 00:07:40.840 
Also Ruby on Rails is open source and comes with the MIT license.

89
00:07:42.610 --> 00:07:46.970 
As the name already says it's based on the script language Ruby

90
00:07:47.110 --> 00:07:52.870 
and also here and Motor View Control architecture pattern is implemented

91
00:07:53.790 --> 00:07:57.970 
without changing in the names. So here we see in the middle

92
00:07:57.970 --> 00:07:59.250 
there is a controller.

93
00:08:00.250 --> 00:08:06.610 
Gets this information from the web server. Web server

94
00:08:07.180 --> 00:08:14.130 
analyzes the interaction with the user, gets out from the

95
00:08:14.130 --> 00:08:17.760 
request all the parameters which are handed over to the controller.

96
00:08:18.170 --> 00:08:22.490 
The controller interacts and controls the model,

97
00:08:25.440 --> 00:08:31.430 
work with the data, the data interacts with the database and the controller

98
00:08:32.250 --> 00:08:37.440 
also triggers the view, the display of the results.

99
00:08:38.830 --> 00:08:44.840 
The Ruby on Rails is available and runs on many servers,

100
00:08:45.610 --> 00:08:50.520 
for example on Apache, nginx and

101
00:08:51.280 --> 00:08:55.920 
WEBrick. By the way is a default for the local development.

102
00:08:57.030 --> 00:09:02.390 
The basic philosophy behind Ruby on Rails is again to try

103
00:09:02.850 --> 00:09:07.610 
the Don't Repeat Yourself concept. Then the so-called

104
00:09:08.320 --> 00:09:12.860 
fat models, skinny controllers so is the

105
00:09:13.560 --> 00:09:16.850 
computation and the importance and all what's done by the

106
00:09:17.370 --> 00:09:21.160 
application is done with the data.

107
00:09:21.580 --> 00:09:24.460 
The controller only triggers

108
00:09:26.160 --> 00:09:33.350 
work on the data and the display with a view. Scaffolding is a principle

109
00:09:33.620 --> 00:09:40.820 
of Ruby on Rails and then the idea that convention are taken over

110
00:09:41.190 --> 00:09:45.680 
a configuration, and this is a different to Django. Django we

111
00:09:45.680 --> 00:09:51.850 
had this implicit explicit goes for implicit. So here the description

112
00:09:51.980 --> 00:09:57.620 
is expected while in Ruby on Rails typical conventions

113
00:09:57.630 --> 00:09:59.410 
are considered more important over

114
00:10:00.320 --> 00:10:02.750 
configurations, and for the beginner

115
00:10:03.810 --> 00:10:11.920 
this is sometimes magic to see what's going on because he didn't explicitly formulate things,

116
00:10:12.100 --> 00:10:16.330 
but the ruby on rails framework provided the

117
00:10:17.190 --> 00:10:18.930 
right output or right result.

118
00:10:20.210 --> 00:10:22.860 
Let's have a closer look on this convention over

119
00:10:23.470 --> 00:10:27.700 
configuration. This is a design, a software design paradigm

120
00:10:28.540 --> 00:10:33.070 
and it's the idea behind this instead of variably configuring things

121
00:10:33.540 --> 00:10:39.350 
developers should stick to conventions for naming objects

122
00:10:39.990 --> 00:10:43.120 
which are pre-defined. For example,

123
00:10:43.760 --> 00:10:47.050 
the primary key in a database table should be

124
00:10:47.500 --> 00:10:51.520 
the "ID" key with the data type integer.

125
00:10:52.110 --> 00:10:58.020 
So without defining this, this is a convention used and applied

126
00:10:58.440 --> 00:11:01.390 
in all the Ruby on Rails applications.

127
00:11:03.750 --> 00:11:09.190 
Another such example is the class "customer" in the model automatically refers

128
00:11:09.190 --> 00:11:12.240 
to the table customer in the database.

129
00:11:12.880 --> 00:11:15.930 
So that it's not necessary to

130
00:11:16.690 --> 00:11:20.170 
design this reference.

131
00:11:21.480 --> 00:11:27.230 
The advantage is that it goes very fast to develop things. When we designed

132
00:11:27.530 --> 00:11:32.780 
the OpenHPI application, we could see this in different places.

133
00:11:33.870 --> 00:11:39.500 
The code becomes a bit shorter and becomes a bit simpler by this principle.

134
00:11:40.240 --> 00:11:47.200 
And only the unconventional parts of the application have to be declared explicitly.

135
00:11:49.030 --> 00:11:53.230 
When we speak about it we also call that sometimes a disadvantage,

136
00:11:53.540 --> 00:11:57.990 
because people does not really understand immediately where certain

137
00:11:59.440 --> 00:12:03.840 
actions came from. They came from this principle that convention

138
00:12:03.910 --> 00:12:08.040 
is taking over a configuration, and so often

139
00:12:08.740 --> 00:12:14.270 
it's considered magic. What's coming out a designing

140
00:12:15.760 --> 00:12:17.650 
applications with Ruby on Rails.

141
00:12:19.710 --> 00:12:25.380 
Another principle was a DRY principle- the Don't Repeat Yourself principle,

142
00:12:26.670 --> 00:12:31.250 
which is here formulated as every piece of knowledge must have a single,

143
00:12:31.600 --> 00:12:36.040 
unambiguous, authoritative representation within a system.

144
00:12:37.320 --> 00:12:39.740 
It comes from the pragmatic programmer

145
00:12:40.510 --> 00:12:43.450 
handbook of Andy Hunt and Dave Thomas.

146
00:12:45.420 --> 00:12:51.170 
The idea is to avoid duplicate code and for doing the same

147
00:12:51.580 --> 00:12:55.620 
thing in different parts of the program.

148
00:12:56.130 --> 00:13:02.480 
And the idea is to avoid errors. If there is something designed

149
00:13:03.180 --> 00:13:08.310 
then using exactly the same piece of code in the other places

150
00:13:08.680 --> 00:13:12.290 
where it is needed. So if there is a failure then

151
00:13:13.130 --> 00:13:17.170 
the failure is corrected once, then it's corrected in all parts

152
00:13:18.840 --> 00:13:24.910 
of the program. If you have designed the same thing with another code,

153
00:13:25.350 --> 00:13:30.540 
a piece of code then you detect an error in one piece, then there's a possibility

154
00:13:30.750 --> 00:13:33.620 
to have an error or different error in the other piece.

155
00:13:34.450 --> 00:13:40.550 
So the advantage if the DRY principle is applied in a proper way

156
00:13:40.940 --> 00:13:44.820 
that necessary changes in the code only have to be done once,

157
00:13:45.190 --> 00:13:48.730 
and do not have to be repeated in several parts of the code,

158
00:13:49.280 --> 00:13:54.950 
because every same situation is handled by the same code.

159
00:13:56.700 --> 00:14:03.020 
Then all related parts are also changed and cannot be forgotten. So

160
00:14:03.280 --> 00:14:07.450 
the quality, the software quality is increased a lot.

161
00:14:08.100 --> 00:14:14.100 
It is more easy to design a correct working piece of software.

162
00:14:14.770 --> 00:14:19.250 
And although the code maintainance becomes easier if one later

163
00:14:19.250 --> 00:14:24.110 
wants to make modifications, then one knows exactly

164
00:14:24.850 --> 00:14:28.320 
which activity is sourced

165
00:14:29.630 --> 00:14:32.080 
with what kind of code.

166
00:14:35.520 --> 00:14:38.500 
If such DRY principle is violated,

167
00:14:39.180 --> 00:14:42.900 
then often these are called a WET solution.

168
00:14:43.630 --> 00:14:45.060 
Write Everything Twice.

169
00:14:45.780 --> 00:14:48.760 
As to say that's not good

170
00:14:49.400 --> 00:14:54.080 
you should have it dry. Also wine tastes better if it's dry and not wet.
