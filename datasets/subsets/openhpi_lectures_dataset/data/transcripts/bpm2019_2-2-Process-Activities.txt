WEBVTT

1
00:00:00.870 --> 00:00:05.780 
Welcome to video clip 2.2 in
which we discuss process activities.

2
00:00:06.820 --> 00:00:09.950 
In the definition of a business
process we learned that the

3
00:00:09.950 --> 00:00:13.610 
business process consists
of a set of activities.

4
00:00:14.270 --> 00:00:18.890 
So what is an activity? Activities
are units of work that require

5
00:00:18.890 --> 00:00:20.520 
time to be performed.

6
00:00:21.300 --> 00:00:26.300 
This week we only cover tasks. Tasks
are atomic activities. These

7
00:00:26.300 --> 00:00:29.400 
are activities that do not
have an internal structure.

8
00:00:29.840 --> 00:00:34.400 
From the modeling perspective we are not
interested in the internal structure

9
00:00:34.740 --> 00:00:40.870 
of tasks. In order to look at
the various concepts that

10
00:00:40.870 --> 00:00:46.310 
BPMN has to offer we propose
a simple scenario and that

11
00:00:46.310 --> 00:00:48.240 
is an order
fulfillment scenario.

12
00:00:48.840 --> 00:00:55.130 
We always have a little text of that
describes this scenario and afterwards

13
00:00:55.280 --> 00:00:59.460 
we will use the concepts of the
BPMN to express what we've

14
00:00:59.460 --> 00:01:03.440 
seen in the text in the process model.
And we start of course with activities.

15
00:01:03.850 --> 00:01:08.220 
So the sample scenarios as follows
the process starts by entering

16
00:01:08.220 --> 00:01:11.630 
the details of an order
in an IT system.

17
00:01:12.570 --> 00:01:15.860 
The ordered product is obtained
from the warehouse packaged

18
00:01:15.940 --> 00:01:17.540 
and shipped to
the customer.

19
00:01:18.320 --> 00:01:22.470 
An invoice is sent to the customer.
Upon receiving the payment

20
00:01:22.490 --> 00:01:27.260 
the order is archived. So this
is a fairly typical text

21
00:01:27.260 --> 00:01:30.880 
to a representation of part of
a business process in which

22
00:01:30.880 --> 00:01:33.140 
we can find a number
of activities.

23
00:01:34.350 --> 00:01:37.560 
So let me just try to
highlight some of them.

24
00:01:38.260 --> 00:01:41.850 
So we need to enter the details
of an order in an IT system.

25
00:01:44.090 --> 00:01:47.460 
Then the ordered product is
obtained from the warehouse,

26
00:01:47.460 --> 00:01:49.860 
it is packaged and
shipped to the customer,

27
00:01:50.560 --> 00:01:52.830 
then an invoice is
sent to the customer,

28
00:01:53.490 --> 00:01:58.490 
payment is received and the order archived.
So from the text we can derive

29
00:01:58.750 --> 00:02:03.290 
a the activities that are
relevant for the process.

30
00:02:03.750 --> 00:02:06.450 
And then what we can do
is we can just use the

31
00:02:07.010 --> 00:02:11.750 
our concrete syntax that is provided by
BPMN for activities which is the

32
00:02:12.040 --> 00:02:18.080 
rectangle with rounded angles and
specify a label that describes the

33
00:02:18.310 --> 00:02:23.600 
activity from a semantic point of view. So
what actually happens during the activity.

34
00:02:24.310 --> 00:02:30.530 
And here we have these one two three four
five six seven activities in the process

35
00:02:30.980 --> 00:02:34.360 
and what we did is from a text
representation we came up with

36
00:02:34.360 --> 00:02:37.010 
a model representation which is
very simple and which is just

37
00:02:37.010 --> 00:02:39.520 
part of a business process
but at least it's a start.

38
00:02:42.860 --> 00:02:46.290 
Activities are performed in
coordination this is also what

39
00:02:46.300 --> 00:02:49.810 
we learned from the definition
of what a business process is. So

40
00:02:49.810 --> 00:02:53.120 
the activities are not executed
independently from each other.

41
00:02:53.120 --> 00:02:58.710 
There are execution constraints and simple
form of execution constraint is sequence flow.

42
00:02:59.280 --> 00:03:03.290 
Sequence flow of course means one
activity can only be started

43
00:03:03.290 --> 00:03:05.970 
after another activity
has been performed.

44
00:03:06.900 --> 00:03:12.180 
And the notation we use for this
is a directed arc between

45
00:03:12.320 --> 00:03:16.160 
activities more general between
nodes in the process model.

46
00:03:16.790 --> 00:03:22.560 
And of course A arrow B means
that B can only be started once A

47
00:03:22.750 --> 00:03:23.930 
has been terminated.

48
00:03:26.260 --> 00:03:29.620 
Alright after A has been
terminated the sequence flow arc

49
00:03:29.620 --> 00:03:34.030 
is signaled telling B that it is
now ready for execution. That

50
00:03:34.030 --> 00:03:38.360 
is how it is handled and using
the sequence flow we can now

51
00:03:38.370 --> 00:03:42.210 
come from the process model that
it just activities to a process

52
00:03:42.210 --> 00:03:46.410 
model that also a sequence flow
and that is able to express

53
00:03:46.410 --> 00:03:50.830 
that these activities are performed in
coordination so as a sequence of activities.

54
00:03:51.870 --> 00:03:54.730 
Right. And of course what
happens here is that first

55
00:03:55.380 --> 00:03:57.120 
all the details
are entered.

56
00:03:59.890 --> 00:04:04.270 
After the order details have been
entered this sequence flow

57
00:04:04.270 --> 00:04:08.300 
edges signals. You can
think of a signal on the on

58
00:04:08.300 --> 00:04:11.550 
the edge and the signal is then
brought with the transferred

59
00:04:11.550 --> 00:04:15.330 
to the next activity which is the obtained
product from warehouse activity.

60
00:04:15.680 --> 00:04:19.910 
Once this activity is signalled
it is started it can be started,

61
00:04:19.910 --> 00:04:26.410 
is ready for execution and once obtained products
from customers terminated the outgoing

62
00:04:26.690 --> 00:04:30.220 
sequence flow edges signal
so that at the end of the

63
00:04:30.220 --> 00:04:34.400 
day all these activities have been
executed in the right order and all the

64
00:04:34.560 --> 00:04:36.160 
sequence flow edges
have been signaled.

65
00:04:39.600 --> 00:04:43.240 
We were discussing process models
and process instances. We

66
00:04:43.240 --> 00:04:48.580 
were mentioning that each process model has
can have any number of process instances.

67
00:04:49.390 --> 00:04:52.980 
And we now dive into what a
process instance actually is.

68
00:04:52.980 --> 00:04:58.760 
The process instance consists
off activities these are

69
00:04:58.990 --> 00:05:03.480 
a concrete executions of activities
in the organization. The

70
00:05:03.480 --> 00:05:06.750 
concrete ordering of
a particular order,

71
00:05:07.230 --> 00:05:11.220 
of particular order details,
obtaining particular products from

72
00:05:11.220 --> 00:05:14.550 
a warehouse for this process in
this packaging certain product

73
00:05:14.780 --> 00:05:18.300 
and so forth as specified
here in this process model.

74
00:05:19.880 --> 00:05:24.910 
Each activity instance traverses
a series of states. We have also

75
00:05:25.100 --> 00:05:28.680 
seeing this in the previous
example where we said well

76
00:05:28.680 --> 00:05:32.890 
the first activity that can be
executed is enter order details.

77
00:05:34.180 --> 00:05:36.760 
That's the first activity that
can be executed when the

78
00:05:37.200 --> 00:05:42.000 
order arrived arrives this
activity in the ready

79
00:05:42.000 --> 00:05:45.710 
state can be executed. The others
cannot be executed they are

80
00:05:45.710 --> 00:05:49.820 
not yet in the ready state. If an
wants activities in the ready

81
00:05:49.820 --> 00:05:52.910 
State it can be executed can be
running can be performed.

82
00:05:53.360 --> 00:05:57.020 
So this first activity instance
can then be performed.

83
00:05:57.880 --> 00:06:00.550 
At that point the second one can
still not start because it

84
00:06:00.550 --> 00:06:03.800 
waits for the first one to
terminate. Once the first activity

85
00:06:03.800 --> 00:06:07.400 
is terminated the second one can
start into the ready state,

86
00:06:07.420 --> 00:06:12.170 
can then be executed. So we see that all
these activity instances we have here

87
00:06:12.610 --> 00:06:16.710 
traverse a series of states starting
from initial going through

88
00:06:17.140 --> 00:06:18.200 
terminated state.

89
00:06:20.010 --> 00:06:24.180 
We'll have the states here in
a bit more detail. So the

90
00:06:24.180 --> 00:06:26.330 
states of an activity
instance are as follows.

91
00:06:26.950 --> 00:06:29.860 
First an activity instance
is in the init state,

92
00:06:30.360 --> 00:06:34.380 
that means it is initialized but it
is not yet ready for execution.

93
00:06:35.560 --> 00:06:39.920 
Then the activity instance can
change state to the ready state.

94
00:06:40.370 --> 00:06:43.940 
In this case it is ready for
execution it can be started.

95
00:06:45.520 --> 00:06:49.960 
If it is ready it can be or when it is
started it is in the running state.

96
00:06:51.430 --> 00:06:56.460 
After it finishes the running stated
comes to the terminated state

97
00:06:56.590 --> 00:07:01.120 
and there is also a state called skipped
in this case an activity in system

98
00:07:01.230 --> 00:07:04.660 
no longer required for a
particular process instance.

99
00:07:05.360 --> 00:07:07.750 
So let's try to sketch the

100
00:07:08.360 --> 00:07:12.470 
states of an activity instance
and start with the init state.

101
00:07:14.170 --> 00:07:17.610 
So this is the first state that
an activity instance is in and

102
00:07:17.610 --> 00:07:22.170 
when these process starts or
the process is created

103
00:07:22.180 --> 00:07:24.620 
then all the activities
are in init state.

104
00:07:25.420 --> 00:07:31.080 
We have seen when the order arrives and
the first activity can be performed

105
00:07:31.310 --> 00:07:37.100 
so can be performed
means it enters the ready state.

106
00:07:39.050 --> 00:07:42.180 
So there is a state transition
but I'm now drawing is a state

107
00:07:42.190 --> 00:07:46.280 
transition diagram this is a graphical
representation of the states

108
00:07:46.500 --> 00:07:49.700 
activity instance can be in and
also the state transitions.

109
00:07:51.120 --> 00:07:55.690 
Alright we also discussed already
that a activity instance

110
00:07:55.690 --> 00:07:58.750 
which is in the ready
state can be started.

111
00:07:59.160 --> 00:08:01.000 
When it is started
it enters running state. And after it completes

112
00:08:09.560 --> 00:08:13.780 
completes running it comes
to the terminated states.

113
00:08:18.650 --> 00:08:21.500 
Alright so these are the major
state transition that all these

114
00:08:21.500 --> 00:08:25.490 
activity instances of a process
instance walk through. First

115
00:08:25.490 --> 00:08:28.860 
of all all already in the init state,
the first one gets ready the

116
00:08:28.860 --> 00:08:31.770 
first one gets running the first
one gets terminated and the

117
00:08:31.770 --> 00:08:35.370 
second one changes from init to
ready to run into terminated

118
00:08:35.370 --> 00:08:36.080 
and so forth.

119
00:08:38.180 --> 00:08:42.300 
So what I was drawing the previous
slide was not a complete

120
00:08:42.950 --> 00:08:47.410 
a lifestyle not a complete state
transition diagram for activity

121
00:08:47.760 --> 00:08:52.110 
instances here is a simple diagram
also taken from the BPM book.

122
00:08:52.300 --> 00:08:57.420 
Here like in the previous slide states of
an activity instance can be represented

123
00:08:57.690 --> 00:09:01.260 
by state transition diagram
states and transition of course.

124
00:09:01.620 --> 00:09:04.660 
The states in the transition are an
essential part of the semantics

125
00:09:04.660 --> 00:09:08.670 
of a process model. We can only
understand what a process model means

126
00:09:08.890 --> 00:09:14.010 
if we know about the states and the state
transition that the activity instance can

127
00:09:14.250 --> 00:09:14.940 
can take.

128
00:09:17.160 --> 00:09:21.810 
Alright so here we have the same states
we had before so init ready running

129
00:09:22.080 --> 00:09:27.210 
Terminated. In addition we have
the skipped state that means

130
00:09:27.430 --> 00:09:31.970 
it might turn out that a certain activity
instance is not required for a certain

131
00:09:32.200 --> 00:09:36.460 
process instance. In this case it is
no longer required and therefore it

132
00:09:37.080 --> 00:09:40.160 
can change from the init or ready
state with a skipped state

133
00:09:40.450 --> 00:09:42.870 
in order to represent
that we have these

134
00:09:43.330 --> 00:09:48.600 
these its a composition of the
init and ready state and from

135
00:09:48.870 --> 00:09:50.500 
this composition
there is a

136
00:09:51.790 --> 00:09:54.630 
I will try to
highlight that.

137
00:09:55.050 --> 00:09:59.150 
Here we see the composition of
these two and the transfer from

138
00:09:59.690 --> 00:10:04.080 
this state from the not
started state to skipped

139
00:10:04.080 --> 00:10:07.560 
is then possible from init and
ready and therefore we have

140
00:10:07.560 --> 00:10:10.800 
this not started state
around it that makes it

141
00:10:11.330 --> 00:10:14.980 
simpler in the presentation and
it saves basically one arrow

142
00:10:15.420 --> 00:10:16.990 
to the skipped state.

143
00:10:17.960 --> 00:10:21.320 
I also like to mention that the
state transition diagram is

144
00:10:21.960 --> 00:10:23.760 
simplified
variant of the

145
00:10:24.430 --> 00:10:28.860 
standard BPMN activity state
transition diagram but this

146
00:10:29.360 --> 00:10:32.870 
simplification suffices for
the purpose of our course.

147
00:10:34.800 --> 00:10:39.910 
Right so the example I think are
mainly went through all the material

148
00:10:40.020 --> 00:10:43.710 
in this example
related to activity

149
00:10:44.170 --> 00:10:47.740 
state pr state transitions
have activity instances.

150
00:10:48.300 --> 00:10:52.270 
So basically all of these
activities that we have here

151
00:10:53.890 --> 00:10:57.120 
all of these activities into order
detail obtain product from

152
00:10:57.130 --> 00:11:02.560 
wales and so forth they walk
have they started in the init states

153
00:11:02.560 --> 00:11:05.110 
they go to the radio states they
go to the running state and

154
00:11:05.110 --> 00:11:10.950 
they go to the terminated state. So they have
these sequential state transitions from

155
00:11:11.060 --> 00:11:16.150 
init to terminated and when the
whole process instance is completed

156
00:11:16.550 --> 00:11:20.980 
then all of these activity
instances have then terminated.

157
00:11:23.870 --> 00:11:28.980 
Coming to the modelling guidelines of
Activities, it's very important to model

158
00:11:29.510 --> 00:11:35.470 
or to label activities correctly
so that your colleagues

159
00:11:35.470 --> 00:11:39.430 
will understand what you mean
by this activity, what type

160
00:11:39.430 --> 00:11:44.500 
of activity and what
business activities they are

161
00:11:44.500 --> 00:11:46.800 
represented by a certain
process activity.

162
00:11:47.610 --> 00:11:53.010 
And in order to do that we should label
activities in the verb noun style

163
00:11:53.750 --> 00:11:57.150 
and we also need to use a
consistent vocabulary.

164
00:11:57.760 --> 00:12:02.880 
To motivate this the verb noun
style indicates an activity

165
00:12:03.080 --> 00:12:09.960 
for instance package product. Package
product is a verb noun style

166
00:12:10.240 --> 00:12:13.950 
because we package the product.
The same noun should also

167
00:12:13.950 --> 00:12:17.080 
be used throughout a model if
it refers to the same domain

168
00:12:17.080 --> 00:12:22.880 
Concept. So we see process models in which
there is their activities related to clients

169
00:12:23.150 --> 00:12:27.430 
and further other activities refer
not to clients but to customers

170
00:12:27.430 --> 00:12:32.670 
but they mean the same entity of the real
world. So you should consider use consistent

171
00:12:32.840 --> 00:12:37.760 
vocabulary and either use customer
or use client in this context.

172
00:12:39.660 --> 00:12:43.050 
Consistent vocabulary should
also be used across models

173
00:12:43.550 --> 00:12:48.400 
and we can use the glossary of terms
of an organization to do that.

174
00:12:48.640 --> 00:12:54.390 
So there are process editors including
also the Signavio process editor

175
00:12:54.580 --> 00:12:59.830 
that you can use that provide a
glossary so that when you label

176
00:12:59.830 --> 00:13:04.770 
an activity you are proposed a
number of labels that are let's

177
00:13:04.770 --> 00:13:08.420 
say specified and documented in
the glossary of the system so

178
00:13:08.690 --> 00:13:12.340 
you would not end up with problems
like the one I was mentioning before.

179
00:13:16.860 --> 00:13:21.910 
So far when looking at a task
in the BPMN model we just

180
00:13:21.910 --> 00:13:25.220 
have the label that specifies
what the task is about.

181
00:13:26.150 --> 00:13:31.190 
BPMN provides additional information additional
geographical information that tells

182
00:13:31.360 --> 00:13:37.240 
us a little bit more about the
activity and that is task types we can

183
00:13:37.640 --> 00:13:40.360 
associate types
to tasks.

184
00:13:41.220 --> 00:13:45.570 
So it task can be of a certain type
which characterizes the task further.

185
00:13:45.960 --> 00:13:50.770 
Task types are represented by markers
in the upper left corner of the task.

186
00:13:51.840 --> 00:13:55.670 
So we have here a number of maybe
the most important task types

187
00:13:55.670 --> 00:14:00.350 
that are provided by the BPMN
which is the message task.

188
00:14:00.770 --> 00:14:06.320 
Here we see we have two variants of that
we come to the difference in a minute.

189
00:14:06.620 --> 00:14:12.690 
And this envelope symbol should
tell us that these activities

190
00:14:12.690 --> 00:14:17.420 
are deals with sending or
receiving a message sending

191
00:14:17.420 --> 00:14:19.420 
it to partner or receiving
it from a partner.

192
00:14:20.740 --> 00:14:25.930 
If there is this pictogram of a person
then it is a huge task for the talk

193
00:14:26.080 --> 00:14:32.160 
the task is conducted manually and
when you see this symbol of these

194
00:14:32.620 --> 00:14:36.010 
that you see here that is a
service task that means the

195
00:14:36.010 --> 00:14:40.050 
service is executed automatically,
task is carried out automatically,

196
00:14:40.050 --> 00:14:44.140 
for instance by software. When you
have software we use, when

197
00:14:44.610 --> 00:14:47.990 
a task that is implemented
automatically by software or by

198
00:14:47.990 --> 00:14:50.700 
a software service we use
the service task for this.

199
00:14:52.450 --> 00:14:57.330 
In our example we can enhance the
process model we had so far

200
00:14:57.330 --> 00:15:01.910 
with the task types. So the first
three activities are user

201
00:15:01.910 --> 00:15:06.040 
Tasks, we see that enter order
details as a human activities

202
00:15:06.040 --> 00:15:09.330 
or user does that because using
a system that the user is in

203
00:15:09.330 --> 00:15:11.030 
charge of it, needs
to do something.

204
00:15:11.730 --> 00:15:13.790 
Then we have send

205
00:15:14.440 --> 00:15:18.890 
tasks the message task
of the sending types. So

206
00:15:19.920 --> 00:15:25.770 
whenever we have we have a task
type or whenever we have

207
00:15:25.770 --> 00:15:31.110 
a task with a message marker
and the message marker

208
00:15:31.520 --> 00:15:39.290 
is solid black then that means we
send a message and when it is

209
00:15:39.630 --> 00:15:42.770 
not black when it is white in the
internal it is the received

210
00:15:42.770 --> 00:15:46.120 
Task. So we see here that the task
major activity what happens

211
00:15:46.120 --> 00:15:49.220 
is the receiving of a task of
the receiving of a message or

212
00:15:49.220 --> 00:15:52.540 
the sending of a message. And
archiving is an automatic

213
00:15:52.540 --> 00:15:56.020 
as a service task that is carried
out automatically we use the

214
00:15:56.480 --> 00:15:58.400 
market for the
service task.

215
00:16:01.080 --> 00:16:04.980 
We see and we get the feeling
that BPMN provides a lot of

216
00:16:04.990 --> 00:16:10.510 
information that we can visualize in
the process model but there is still

217
00:16:10.630 --> 00:16:17.010 
more a that BPMN provides and
this is done by a concept called

218
00:16:17.010 --> 00:16:21.390 
Attributes. So BPMN uses attributes
to store additional information

219
00:16:21.770 --> 00:16:25.810 
so the whole diagram has has
attributes but also each

220
00:16:25.960 --> 00:16:28.040 
individual element
has attributes.

221
00:16:28.670 --> 00:16:32.060 
And what I just told you these
task types are actually stored

222
00:16:32.060 --> 00:16:38.090 
as attributes and also have a have
a representation as an attribute.

223
00:16:38.680 --> 00:16:42.620 
More general attributes hold
additional information of BPMN

224
00:16:42.740 --> 00:16:47.950 
elements and not all attributes have
actually a visual representation.

225
00:16:48.190 --> 00:16:53.050 
So we have seen so far we have just looked
at the visual representation but

226
00:16:53.200 --> 00:16:57.540 
there are attributes in BPMN
and we come to that later and they

227
00:16:57.540 --> 00:17:01.190 
they do not have a visual
representation. So we can say when

228
00:17:01.190 --> 00:17:03.870 
we take a look at the process
model we don't see the complete

229
00:17:03.870 --> 00:17:07.660 
process model we just see a visual
representation of the process model.

230
00:17:08.000 --> 00:17:10.790 
And there's additional
information which is stored in

231
00:17:10.790 --> 00:17:11.590 
the attributes.

232
00:17:15.260 --> 00:17:19.360 
Right another thing that is
provided by BPMN is annotations.

233
00:17:19.820 --> 00:17:24.320 
So sometimes you need to express
more information and you don't

234
00:17:24.320 --> 00:17:28.330 
have a nice place in the
attributes or in the concepts

235
00:17:28.330 --> 00:17:31.810 
provided by the language and in
this case use annotations to

236
00:17:31.810 --> 00:17:36.080 
improve the understandability
of business process models.

237
00:17:36.380 --> 00:17:38.780 
The models can be
enriched with notations

238
00:17:39.290 --> 00:17:42.860 
and annotations can be attached
to any model element and

239
00:17:43.520 --> 00:17:46.550 
can be used to describe these
model element in more detail.

240
00:17:47.810 --> 00:17:52.150 
It's worth mentioning that annotations
do not have any execution semantics,

241
00:17:52.660 --> 00:17:57.440 
so we cannot specify
execution semantics like

242
00:17:57.850 --> 00:18:01.680 
providing decisions, providing
activities to stop and

243
00:18:01.680 --> 00:18:05.050 
wait for input or something like
that. Using annotations is

244
00:18:05.050 --> 00:18:08.700 
just for documentation purposes but
still this is important instance

245
00:18:09.100 --> 00:18:13.820 
main it's a goal of process modelling
is providing a common understanding

246
00:18:14.080 --> 00:18:18.000 
among the stakeholders in a
process management project	.

247
00:18:19.300 --> 00:18:23.300 
Here we have a little
example

248
00:18:23.920 --> 00:18:29.100 
where this activity obtained
product from warehouse has

249
00:18:29.490 --> 00:18:33.680 
an annotation and annotation
says is this activity assumes

250
00:18:33.680 --> 00:18:36.860 
that the product is available in
the warehouse. So there is an

251
00:18:37.000 --> 00:18:42.440 
assumption that would be otherwise implicit
it's now made explicit in the model

252
00:18:42.610 --> 00:18:46.290 
as an notation in which let's say
and provides more information

253
00:18:46.290 --> 00:18:47.640 
about this process.

254
00:18:49.900 --> 00:18:52.980 
Alright we come to the conclusion
of video clip 2.2

255
00:18:52.990 --> 00:18:55.830 
in which we discussed
process activities.

256
00:18:56.580 --> 00:19:01.550 
We looked at activities as units of
work that take time to be performed.

257
00:19:02.420 --> 00:19:06.720 
We introduce an order fulfillment
scenario just a very simple form just

258
00:19:06.940 --> 00:19:10.390 
sequence flow sequential
flow of activities.

259
00:19:11.220 --> 00:19:15.740 
We looked at activity instances. We
learn that activity instances

260
00:19:15.750 --> 00:19:21.170 
can have a state as each point in time
activity instances in exactly one state.

261
00:19:21.540 --> 00:19:24.760 
Activity instances can have state
transitions normally they

262
00:19:24.760 --> 00:19:27.490 
go from init all the
way to terminated.

263
00:19:28.300 --> 00:19:32.780 
We looked at modeling guidelines related
to the labeling of process activities

264
00:19:33.220 --> 00:19:38.570 
and finally we investigated
task types attributes of

265
00:19:38.570 --> 00:19:43.020 
BPMN and annotation as additional
means to provide information

266
00:19:43.020 --> 00:19:43.950 
to process models.
