WEBVTT

1
00:00:00.630 --> 00:00:05.590 
Welcome to knowledge graphs lecture four
knowledge representation with ontologies.

2
00:00:05.810 --> 00:00:10.230 
So in this lecture we are going
to discuss the excursion five

3
00:00:10.330 --> 00:00:14.280 
and we are going to talk more in
detail about description logics.

4
00:00:16.020 --> 00:00:20.910 
So you have just a another excursion
the excursion four on first

5
00:00:20.910 --> 00:00:25.140 
order logic and propositional
logic. So now the question

6
00:00:25.140 --> 00:00:29.170 
is why not simply take
FOL for ontologies?

7
00:00:31.000 --> 00:00:35.120 
Well with FOL you can
do everything, but...

8
00:00:36.580 --> 00:00:40.500 
So similarly if you are coming from
the computer science background

9
00:00:40.510 --> 00:00:43.810 
you could also program everything
with the assembler instead

10
00:00:43.810 --> 00:00:45.420 
of higher programming
languages.

11
00:00:46.410 --> 00:00:52.980 
So we can also do everything with FOL
because it has high expressivity

12
00:00:54.870 --> 00:00:58.790 
but FOL is too bulky for
modelling. You have already seen

13
00:00:58.790 --> 00:01:01.790 
some of the ways to
model things in FOL

14
00:01:03.260 --> 00:01:06.960 
and it is not appropriate to find
the consensus in modelling.

15
00:01:08.240 --> 00:01:12.860 
Moreover theoretically it is very
complex and it is sometimes

16
00:01:12.860 --> 00:01:14.410 
decidable

17
00:01:16.210 --> 00:01:20.420 
and it is of course not a markup
language for the web. So the

18
00:01:20.420 --> 00:01:25.930 
basic idea is to get an appropriate
fragment of first-order logic and then

19
00:01:26.710 --> 00:01:32.830 
make it make it a vocabulary for
RDFS. So what does it mean to get

20
00:01:33.010 --> 00:01:35.070 
appropriate
fragment of FOL?

21
00:01:35.940 --> 00:01:41.010 
So now we are going to talk a little
bit about description logics and

22
00:01:41.140 --> 00:01:46.480 
you have already seen that a in the previous
excursion that description logic is

23
00:01:46.890 --> 00:01:50.160 
less expressive than
FOL and it is a

24
00:01:50.570 --> 00:01:56.940 
and it is a fragment of it, so
DLs are the fragments of FOL.

25
00:01:57.260 --> 00:02:00.750 
So they compromise they are a
good compromise of expressivity

26
00:02:00.750 --> 00:02:02.070 
and scalability.

27
00:02:04.490 --> 00:02:09.010 
So DL models usually define
things in the form of concepts,

28
00:02:09.070 --> 00:02:13.740 
roles and individuals and the
relationships between them. Moreover

29
00:02:13.740 --> 00:02:19.270 
they use constructors, you will see in the
course of this lectures, to describe some

30
00:02:19.720 --> 00:02:22.930 
to make out some
complex descriptions.

31
00:02:25.130 --> 00:02:29.330 
And DLs actually differ
from FOL in the

32
00:02:29.330 --> 00:02:33.990 
in case of the constructors which are
used for this description logic.

33
00:02:36.050 --> 00:02:39.100 
They have been developed from
the semantic networks and they

34
00:02:39.100 --> 00:02:43.820 
are decidable. So most of the time
description logics are decidable.

35
00:02:44.340 --> 00:02:49.360 
And they have enough expressivity
to express any semantics

36
00:02:49.360 --> 00:02:50.390 
that we want to do.

37
00:02:51.840 --> 00:02:55.680 
And it is related to model logic.
So let us take an example

38
00:02:55.680 --> 00:02:59.620 
of a description logic so
that the W3C standard

39
00:02:59.620 --> 00:03:02.250 
OWL 2 DL is actually
based on SROIQ(D).

40
00:03:03.190 --> 00:03:07.220 
And you will learn that
the meaning of each of

41
00:03:07.230 --> 00:03:11.540 
these letters also in the course
of this lecture. So now let's

42
00:03:11.800 --> 00:03:15.480 
dive deep into the into what
is description logics.

43
00:03:16.020 --> 00:03:20.120 
So here description logics actually
consists of three parts-

44
00:03:20.120 --> 00:03:23.960 
this is the architecture
of the DL that we have

45
00:03:23.990 --> 00:03:28.350 
a TBox, which is called
the terminological box,

46
00:03:28.680 --> 00:03:33.460 
which keeps the information or the
knowledge about the concepts of a domain.

47
00:03:33.760 --> 00:03:38.540 
So for example here you see see
an example that writer he is

48
00:03:38.540 --> 00:03:43.410 
a person who has authored some
book. So this is the definition

49
00:03:43.420 --> 00:03:48.700 
of the class writer. Then we
have the next level which

50
00:03:48.700 --> 00:03:52.820 
is the assertional knowledge, so
which is what we call the ABox.

51
00:03:53.010 --> 00:03:57.670 
Now assertional knowledge keeps information
about individuals and entities.

52
00:03:58.010 --> 00:04:03.570 
So here if you are, so George
Orwell is an author. So we

53
00:04:04.050 --> 00:04:09.390 
we express it in a way that you see here in
front of you. So writer under parentheses

54
00:04:09.640 --> 00:04:12.630 
George Orwell. Now
if we want to

55
00:04:13.310 --> 00:04:19.590 
do to define a relation in the ABox
what we do is is as follows:

56
00:04:19.930 --> 00:04:22.830 
so you have a book
Animal Farm.

57
00:04:23.840 --> 00:04:28.930 
This book has an author George
Orwell. So this is the information

58
00:04:28.940 --> 00:04:34.360 
on the individual level on the entity level.
And the third thing that is there for

59
00:04:34.460 --> 00:04:40.030 
there in the description logic is RBox,
which is the role centric knowledge.

60
00:04:40.360 --> 00:04:44.820 
So it contains the information,
the knowledge about

61
00:04:44.830 --> 00:04:48.900 
roles and role inter-dependencies.
So for example

62
00:04:49.470 --> 00:04:54.440 
co author is subsumed by
author. Here actually this is

63
00:04:54.440 --> 00:04:56.650 
co-authors the
sub-property of author.

64
00:04:57.580 --> 00:05:01.140 
And then you have inference
engine on top of that

65
00:05:01.480 --> 00:05:04.500 
with which you can deduce new
knowledge which can be shown

66
00:05:04.500 --> 00:05:08.710 
with the help of an interface in front of
it. So this is the overall architecture

67
00:05:09.170 --> 00:05:10.630 
of the description
logic.

68
00:05:11.900 --> 00:05:15.900 
So now we are going to dig a
little bit more deeper into

69
00:05:16.370 --> 00:05:23.630 
description logics so these are this deals are
actually a family of logic-based formalisms.

70
00:05:23.900 --> 00:05:28.180 
So you are going to see them in the course
of in the course of this lecture.

71
00:05:28.490 --> 00:05:34.180 
So we start with the smallest
deductibly complete DL which is ALC.

72
00:05:34.450 --> 00:05:38.310 
So ALC stands for Attribute
Language with Compliment.

73
00:05:39.200 --> 00:05:42.740 
So the constructors, the
class constructors that it

74
00:05:42.740 --> 00:05:47.220 
uses are limited to conjunction,
disjunction and negation.

75
00:05:48.570 --> 00:05:53.180 
And then quantifiers are used
quantifiers such as universal

76
00:05:53.180 --> 00:05:56.770 
quantification and the
existential for which you have

77
00:05:56.960 --> 00:05:59.240 
the details of which you
have already seen.

78
00:05:59.710 --> 00:06:02.690 
They restrict the domain
and range of the roles.

79
00:06:05.330 --> 00:06:10.610 
So the basic building blocks of
ALC here are classes, roles

80
00:06:10.620 --> 00:06:15.320 
which from the beginning we are seeing
as the properties and the individuals.

81
00:06:15.740 --> 00:06:21.480 
So there you have the first
example is about the individual

82
00:06:21.480 --> 00:06:26.380 
belonging to a class. So George
Orwell belongs to the class person.

83
00:06:26.500 --> 00:06:28.840 
He is the instance of
the class person

84
00:06:30.020 --> 00:06:31.690 
and then we have a book

85
00:06:32.430 --> 00:06:37.130 
which is nineteen eighty four which
is an instance of the class

86
00:06:37.430 --> 00:06:41.870 
book. So nineteen eighty four
and George Orwell both are

87
00:06:42.130 --> 00:06:43.120 
the individuals.

88
00:06:44.560 --> 00:06:50.030 
And then we have author
nineteen eighty four George

89
00:06:50.030 --> 00:06:53.100 
Orwell. How do you read it?
So nineteen eighty four

90
00:06:53.530 --> 00:06:56.170 
this book has an author
George Orwell.

91
00:06:57.030 --> 00:07:02.250 
So these, so the first, these
three examples are on the ABox

92
00:07:02.250 --> 00:07:04.000 
level of the
description logic.

93
00:07:05.880 --> 00:07:11.210 
So now you can define the ALC
atomic types as like this. So you

94
00:07:11.210 --> 00:07:13.630 
have the concept
names which are a b

95
00:07:14.250 --> 00:07:18.660 
so on. Then you have special
concepts which are the top and

96
00:07:18.660 --> 00:07:23.310 
the bottom. The top is the
universal concept which which

97
00:07:23.310 --> 00:07:26.680 
has everything and
bottom keeps nothing.

98
00:07:27.110 --> 00:07:31.320 
And then we have roles, we have
role names which are usually

99
00:07:31.320 --> 00:07:33.730 
given with R,
S and so on

100
00:07:35.630 --> 00:07:39.340 
and the constructors that we can
if we can use the constructors

101
00:07:39.340 --> 00:07:44.190 
as I described before in this
manner. So you have negation then

102
00:07:44.190 --> 00:07:49.120 
you can write it in this way not
C, then we have conjunction

103
00:07:49.750 --> 00:07:55.460 
between two classes C and D, then
disjunction is between two classes

104
00:07:55.880 --> 00:07:56.930 
C or D

105
00:07:58.220 --> 00:08:02.670 
and then we have existential quantifier
and the universal quantifier

106
00:08:03.200 --> 00:08:06.070 
which are posing restrictions
over the class C.

107
00:08:09.480 --> 00:08:13.120 
So now we are going to move
a little bit more towards

108
00:08:13.520 --> 00:08:19.840 
more building blocks of ALC. Here you
can define some class inclusions, so

109
00:08:20.140 --> 00:08:24.760 
we all know that every novel is
always a book. So we define

110
00:08:24.760 --> 00:08:30.150 
it with the subsumption
operator novel is subsumed

111
00:08:30.150 --> 00:08:34.400 
by the book. So in case of first
order logic we will represent it

112
00:08:34.400 --> 00:08:38.800 
this way as you see in the
red in front of you that

113
00:08:38.810 --> 00:08:40.850 
all the values
of the books

114
00:08:41.510 --> 00:08:46.460 
of x where now it implies
that novel is a book

115
00:08:47.040 --> 00:08:54.190 
and then we have equivalence relationship.
So novel are equivalent to prose.

116
00:08:54.500 --> 00:09:01.320 
So here we can say all prose are
exactly novels. So in the FOL

117
00:09:01.510 --> 00:09:04.880 
you can define it with the
help of the by implication.

118
00:09:08.560 --> 00:09:12.700 
Now we can also define complex
classes, complex class relations.

119
00:09:12.770 --> 00:09:17.660 
So for example a novel is a book
which is a fiction, so we can

120
00:09:17.660 --> 00:09:23.540 
write it with the conjunction operator
or novel is paperback and not

121
00:09:23.690 --> 00:09:29.800 
poetry. So this is the way you
define this novel in ALC.

122
00:09:29.920 --> 00:09:34.750 
However in the bottom you see how
it is defined in FOL with the

123
00:09:35.220 --> 00:09:41.780 
and and an or. So book the
conjunction converts to and and the

124
00:09:42.320 --> 00:09:44.150 
disjunction
converts to or.

125
00:09:47.670 --> 00:09:52.380 
And now we move towards the
quantifiers on the roll. So there

126
00:09:52.380 --> 00:09:56.760 
are two kinds strict binding and
open binding. So a strict binding

127
00:09:56.760 --> 00:10:02.070 
is the universal quantification and
open binding is the existential

128
00:10:02.210 --> 00:10:07.960 
quantification. So here you
can see that strict binding

129
00:10:08.060 --> 00:10:12.030 
of the range of a role to a
strict binding is on the range

130
00:10:12.030 --> 00:10:17.770 
of a role to a class. So here is the
same the similar example that book

131
00:10:18.100 --> 00:10:22.920 
has a book must have
writer as an author.

132
00:10:23.740 --> 00:10:28.210 
So here you can actually see the
first order logic construct

133
00:10:28.220 --> 00:10:31.180 
of this of this also.

134
00:10:32.500 --> 00:10:36.410 
Then we have open binding we are
going to also see more examples

135
00:10:36.410 --> 00:10:39.880 
on these bindings in the
coming lectures but here

136
00:10:39.880 --> 00:10:45.340 
is a just an example. So every
book has at least one author

137
00:10:45.340 --> 00:10:50.730 
who is a person. So here the
at least is represented with

138
00:10:50.730 --> 00:10:52.260 
the help of
there exists.

139
00:10:55.590 --> 00:10:58.970 
So now we are going to talk about
a little bit of the formal

140
00:10:58.970 --> 00:11:02.820 
syntax of ALC and then we will
move towards more towards the

141
00:11:02.820 --> 00:11:08.230 
interpretation or the semantics.
So the rules for creating

142
00:11:08.510 --> 00:11:15.440 
classes in ALC could be are
given like this. So here A is

143
00:11:15.440 --> 00:11:19.980 
an atomic class, C and D are the
complex classes which may consist

144
00:11:19.980 --> 00:11:24.170 
of other classes or you will see
some examples of the complex

145
00:11:24.170 --> 00:11:30.110 
classes also later on. And then we
have an R which is a role. So

146
00:11:30.810 --> 00:11:36.330 
in the ALC TBox it
contains assertions

147
00:11:36.330 --> 00:11:42.010 
of the form like C is subsumed
by D, C is equivalent to D, so

148
00:11:42.020 --> 00:11:45.170 
C and D here are actually
the complex classes.

149
00:11:45.730 --> 00:11:49.520 
Then we have the ABox the
assertional box which contains the

150
00:11:49.520 --> 00:11:53.630 
assertion of the form like an
individual A is belonging

151
00:11:53.630 --> 00:11:58.810 
to a class C and then for the
roles in the assertion box would

152
00:11:58.810 --> 00:12:02.500 
be something like this
that A is connected to

153
00:12:02.500 --> 00:12:08.540 
B with the role R. Now here as
we said before C is aa complex

154
00:12:08.540 --> 00:12:11.600 
class, R is a role, A
and B are individuals.

155
00:12:12.400 --> 00:12:18.560 
So finally in the ALC knowledge
base we always have ABox

156
00:12:18.560 --> 00:12:19.580 
and a TBox.

157
00:12:22.160 --> 00:12:26.820 
So now we want to see the model
theoretic semantics behind ALC.

158
00:12:27.240 --> 00:12:32.660 
So here we want to define these semantics
with the help of interpretations.

159
00:12:32.960 --> 00:12:39.260 
So an interpretation is actually a set
which is a domain of individuals.

160
00:12:40.270 --> 00:12:44.610 
This is our domain of discourse
and an inter interpretation

161
00:12:44.610 --> 00:12:48.810 
function that maps an individual
to its domain, you will see how.

162
00:12:49.160 --> 00:12:52.650 
So we have for example
individual A,

163
00:12:53.080 --> 00:12:57.850 
it is mapped to an
element in the domain.

164
00:12:58.600 --> 00:13:03.770 
Then we have a class name c which is
mapped to a set of elements of the

165
00:13:03.960 --> 00:13:06.020 
set of elements
in the domain.

166
00:13:06.810 --> 00:13:12.130 
And then we have a role R where a
set of pairs of domain elements

167
00:13:12.130 --> 00:13:17.550 
are mapped to R. So R is actually mapped
to a set of pairs of domain elements.

168
00:13:18.830 --> 00:13:22.810 
So here you can actually see the
same thing more and more intuitive

169
00:13:22.810 --> 00:13:27.980 
pictorial or intuitive way, more pictorially.
So here you have the individual

170
00:13:28.560 --> 00:13:32.590 
which is mapped, so we have here the
bigger circle which is one domain

171
00:13:33.020 --> 00:13:37.080 
and then this domain
contains the individuals.

172
00:13:37.770 --> 00:13:42.990 
So we have one individual
name for example A is then

173
00:13:43.840 --> 00:13:47.030 
in its mapping function
it is mapped to

174
00:13:47.450 --> 00:13:51.840 
one individual in this domain.
Then we have class C which

175
00:13:51.840 --> 00:13:53.660 
is mapped to a
set of elements

176
00:13:54.310 --> 00:13:58.990 
in the domain of discourse. Then
for the role it is connected

177
00:13:59.000 --> 00:14:04.100 
it provides a connection
between the individuals.

178
00:14:07.710 --> 00:14:12.560 
Sso and the interpretation of
complex classes can be shown

179
00:14:12.560 --> 00:14:17.390 
like this. So top which contains
everything in the domain,

180
00:14:17.400 --> 00:14:21.820 
so top is equal to the domain
of discourse and bottom since

181
00:14:21.830 --> 00:14:25.590 
it does not contain anything this
is an empty set which means

182
00:14:25.590 --> 00:14:29.990 
it doesn't contain anything. Then
we have a disjunction between the

183
00:14:30.170 --> 00:14:33.690 
two classes then the
interpretation of this is

184
00:14:34.360 --> 00:14:37.870 
the same as the interpretation
of the class union

185
00:14:38.280 --> 00:14:41.860 
the interpretation of D which is
the union of the set elements

186
00:14:41.860 --> 00:14:44.000 
of the sets, if I go
towards the set

187
00:14:44.730 --> 00:14:50.820 
elements of the sets C and D.
Similarly we have C and D

188
00:14:51.400 --> 00:14:55.740 
sorry that was C or D. And now
we have C and D, we have the

189
00:14:55.880 --> 00:14:59.480 
conjunction operator between the two
classes and the interpretation

190
00:14:59.480 --> 00:15:05.520 
of this is the
mapping of C to the

191
00:15:05.520 --> 00:15:09.200 
elements in the domain and the
mapping of D to the elements

192
00:15:09.200 --> 00:15:12.440 
of the domain and the intersection
of these two elements.

193
00:15:13.110 --> 00:15:17.170 
Then we have the negation the interpretation
of this is the whole domain

194
00:15:17.440 --> 00:15:19.560 
minus the
elements in C.

195
00:15:22.470 --> 00:15:28.170 
Then we have the restrictions, we
have the universal quantification

196
00:15:28.430 --> 00:15:33.210 
over a universal quantification
over the R which restricts to C.

197
00:15:33.500 --> 00:15:38.220 
So here you can say that
if you can see in this

198
00:15:38.230 --> 00:15:42.610 
in this whole construct that in
this whole formula that A and B

199
00:15:42.820 --> 00:15:48.130 
both belong to R and if that
exists then B should be

200
00:15:48.270 --> 00:15:52.000 
B should be an element of
C. However in the case of

201
00:15:52.490 --> 00:15:57.690 
existential quantifier you have
A B which belonged to R and B

202
00:15:57.920 --> 00:15:59.340 
is belonging to C.

203
00:16:03.390 --> 00:16:08.950 
Then we have more axioms for extension
of interpretation. So we have

204
00:16:09.260 --> 00:16:13.520 
we have C(a) which we have been
seeing from the beginning also

205
00:16:13.720 --> 00:16:19.100 
it holds if and only
if A belongs to C.

206
00:16:19.600 --> 00:16:24.880 
R(a,b) holds if and only if the
pair belongs to the pair A

207
00:16:24.880 --> 00:16:32.000 
B belongs to R and then C is
subsumed by D, it holds only if

208
00:16:32.310 --> 00:16:37.090 
the elements of C are the set
of elements in C are the

209
00:16:37.090 --> 00:16:38.880 
subset of elements in D

210
00:16:39.550 --> 00:16:41.660 
and then we have the
equivalence class

211
00:16:42.920 --> 00:16:44.310 
which hold for
equality.

212
00:16:45.100 --> 00:16:49.100 
Then we have more complicated
DL constructors which are

213
00:16:49.100 --> 00:16:55.280 
used, which are used because, so
in ALC until now we use the

214
00:16:55.280 --> 00:17:00.000 
ones that we saw until now. We
have of course many more

215
00:17:00.130 --> 00:17:04.910 
constructors which are used. So
there are number restrictions

216
00:17:04.910 --> 00:17:10.410 
for roles, so you have for example in front
of you you see first example which is

217
00:17:10.750 --> 00:17:16.770 
at least one child and then the
second one is at most has mother

218
00:17:17.570 --> 00:17:20.490 
has utmost has
one mother.

219
00:17:21.220 --> 00:17:24.320 
So here in this case we are talking
about the biological mother.

220
00:17:25.010 --> 00:17:29.360 
So and then we have the qualified
number of restrictions. So

221
00:17:29.720 --> 00:17:34.600 
here you have at least two female
children. So we are actually

222
00:17:34.600 --> 00:17:40.030 
so the restrictions is on the
class also. And then we have

223
00:17:40.390 --> 00:17:45.520 
atmost one male parent so we
read these formulas like this.

224
00:17:45.960 --> 00:17:50.280 
Then we have the non nominals
like carbon dioxide methane

225
00:17:50.290 --> 00:17:53.370 
nitrous oxide so
on and so forth,

226
00:17:53.790 --> 00:17:57.300 
Then we have the concrete domain
where we have the data types.

227
00:17:57.310 --> 00:17:59.550 
Here we can define that

228
00:18:00.300 --> 00:18:05.980 
somebody has age greater or equal
to twenty one. So this way

229
00:18:05.980 --> 00:18:10.900 
you can actually define the data
types in the description logic.

230
00:18:11.250 --> 00:18:14.720 
Then you have inverse role
so you can actually see

231
00:18:14.720 --> 00:18:19.990 
that somebody has child, another
individual and then if

232
00:18:19.990 --> 00:18:24.720 
we go in inverse then of course the role
is going is equivalent to has parent.

233
00:18:25.160 --> 00:18:29.690 
Then we have several transitive
roles. So somebody has an ancestor

234
00:18:29.690 --> 00:18:33.530 
somebody who has an ancestor
who is somebody else.

235
00:18:33.940 --> 00:18:38.550 
Then this can be actually taken
as a transitive role that the

236
00:18:38.560 --> 00:18:41.990 
person Awill have the
ancestor person C.

237
00:18:43.070 --> 00:18:45.360 
Then we have the
role composition.

238
00:18:46.420 --> 00:18:51.280 
So here you have for example two different
roles has parent and has brother.

239
00:18:51.760 --> 00:18:56.900 
So in this case if you compose
these two roles so has parent

240
00:18:56.900 --> 00:19:01.360 
and then his brother then it would
be equivalent to an uncle.

241
00:19:04.010 --> 00:19:09.510 
So here are all the constructors
that that are there.

242
00:19:09.510 --> 00:19:13.330 
So you have the conjunction,
value restriction existential

243
00:19:13.330 --> 00:19:16.420 
quantifiers - so you have
seen most of them now.

244
00:19:16.850 --> 00:19:22.440 
So here here you see in the
second column the syntax with

245
00:19:22.440 --> 00:19:26.460 
which they are written and the third
column tells you which language.

246
00:19:26.610 --> 00:19:31.970 
So for example FOL only contains
conjunction, value restrictions

247
00:19:31.970 --> 00:19:36.090 
and existential and then as soon as
you keep adding the constructors

248
00:19:36.450 --> 00:19:40.960 
you keep adding the letters. So
for example you have age which

249
00:19:41.030 --> 00:19:46.040 
stands for role hierarchy, then you
have I which stands for inverse role

250
00:19:46.410 --> 00:19:51.930 
Q stands for qualified number
restriction. So if for example

251
00:19:52.300 --> 00:19:56.560 
the language contains all of these
constructors then it will be chic.

252
00:19:56.920 --> 00:20:02.110 
Why? So you can see here
that as S* has all of the

253
00:20:02.590 --> 00:20:07.130 
constructors before
age, before the

254
00:20:07.590 --> 00:20:11.570 
role hierarchy and then you
combine it with H I and Q

255
00:20:11.570 --> 00:20:15.450 
so this this is how you
can formalize languages.

256
00:20:17.530 --> 00:20:21.500 
So here are a similarly we have
more constructors that we are

257
00:20:21.500 --> 00:20:24.780 
talking about here. So you have
attribute language with compliment

258
00:20:25.010 --> 00:20:30.080 
which we already saw now. Then we
have ALC plus the transitivity

259
00:20:30.080 --> 00:20:35.240 
of roles. So this becomes S.
Then we have role hierarchies

260
00:20:35.440 --> 00:20:39.460 
H that we just mentioned. Then we
have nominals and inverse roles,

261
00:20:39.460 --> 00:20:43.630 
number restrictions you have each
letter for each of them. And

262
00:20:43.630 --> 00:20:47.290 
then for data types you have D.
That's what we saw in the beginning

263
00:20:47.290 --> 00:20:51.160 
also which we said that we will see
in the course of this excursion.

264
00:20:51.740 --> 00:20:55.730 
Then we have functional roles
and role constructors. So here

265
00:20:56.090 --> 00:21:01.190 
this was the example that you saw in
the beginning, OWL2DL is SROIQ(D).

266
00:21:02.220 --> 00:21:07.190 
So here now you can break it down and see
what kind of constructors does it use.

267
00:21:08.540 --> 00:21:13.000 
So now in the next lecture
you are going to see a bit

268
00:21:13.000 --> 00:21:15.180 
about the first
steps in OWL.
