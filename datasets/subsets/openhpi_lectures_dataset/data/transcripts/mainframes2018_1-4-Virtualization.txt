WEBVTT

1
00:00:00.650 --> 00:00:04.069 
Welcome to the introduction to Virtualization.

2
00:00:04.070 --> 00:00:08.839 
My name is Prof. Dr. Philip Brune from the Neu-Ulm University of Applied Sciences.

3
00:00:08.840 --> 00:00:13.789 
Virtualization is a very important concept in modern datacenter operation

4
00:00:13.790 --> 00:00:16.010 
as well as on the desktop at home.

5
00:00:17.360 --> 00:00:21.829 
The concept of virtualization basically refers to

6
00:00:21.830 --> 00:00:27.109 
the provisioning of any kind of virtual, which means

7
00:00:27.110 --> 00:00:31.849 
not physically existing, not physically present environment and

8
00:00:31.850 --> 00:00:36.589 
an environment could denote either hardware or an operating system

9
00:00:36.590 --> 00:00:39.079 
or an application server or something.

10
00:00:39.080 --> 00:00:43.460 
So, any kind of runtime environment that allows to execute

11
00:00:44.720 --> 00:00:49.249 
specific applications or a specific software, this could

12
00:00:49.250 --> 00:00:53.269 
be applications, it could be operating systems, depending on the kind of virtual

13
00:00:53.270 --> 00:00:57.759 
environment and the idea

14
00:00:57.760 --> 00:01:02.589 
is that we have a dedicated hardware or hardware software solution to

15
00:01:02.590 --> 00:01:07.119 
allow for, or only software solution to allow for creating such

16
00:01:07.120 --> 00:01:08.890 
kind of virtual environments.

17
00:01:10.330 --> 00:01:14.579 
The basic concept is always to split up a physically existing

18
00:01:15.580 --> 00:01:20.259 
computer computer resources, which means that they are physically existing

19
00:01:20.260 --> 00:01:26.079 
CPU-RAM-IO devices to create multiple

20
00:01:26.080 --> 00:01:28.046 
virtual runtime environments.

21
00:01:29.620 --> 00:01:34.959 
And this concept is nowadays very popular, it is used frequently also on the desktop.

22
00:01:34.960 --> 00:01:39.399 
We have desktop virtualization techniques like the Virtual Box or

23
00:01:39.400 --> 00:01:44.409 
VMware, for example, that allow to use virtualization

24
00:01:44.410 --> 00:01:46.659 
on a laptop and a PC.

25
00:01:46.660 --> 00:01:49.269 
But on the other hand, it's very important for the data center.

26
00:01:49.270 --> 00:01:54.069 
Why? Because it allows

27
00:01:54.070 --> 00:01:58.659 
to improve the usage of the existing hardware

28
00:01:58.660 --> 00:02:03.489 
in a way that you get more out of the existing hardware because you can consolidate

29
00:02:03.490 --> 00:02:08.319 
multiple servers into virtual servers on one physical server,

30
00:02:08.320 --> 00:02:13.419 
which allows to have an average resource

31
00:02:13.420 --> 00:02:18.579 
use and to have the possibility to improve availability

32
00:02:18.580 --> 00:02:23.199 
by a more easy switching from one hardware to another in case there's a hardware

33
00:02:23.200 --> 00:02:27.669 
failure and also to run, for example, different

34
00:02:27.670 --> 00:02:31.419 
operating systems on the same physical machine, different versions or different kinds of

35
00:02:31.420 --> 00:02:34.569 
operating systems, and therefore

36
00:02:36.190 --> 00:02:39.789 
sort of consolidating servers, simplifying administration

37
00:02:40.930 --> 00:02:45.519 
and bringing more things into a software defined

38
00:02:45.520 --> 00:02:50.109 
environment which allows to more easily configure and

39
00:02:50.110 --> 00:02:51.110 
change it.

40
00:02:52.480 --> 00:02:57.339 
This is all well known today, we all use that in the data center and on

41
00:02:57.340 --> 00:03:02.229 
any kind of platform, but it is important to know that this concept

42
00:03:02.230 --> 00:03:06.999 
of virtualization originated from the mainframe and that was present

43
00:03:07.000 --> 00:03:08.949 
already in the 70s.

44
00:03:08.950 --> 00:03:13.539 
So it has a long history of until

45
00:03:13.540 --> 00:03:18.159 
it sort of moved down to our ordinary

46
00:03:18.160 --> 00:03:21.549 
laptops, PCs and every device that we know.

47
00:03:21.550 --> 00:03:26.139 
So, virtualization is not limited to a mainframe, but

48
00:03:26.140 --> 00:03:30.279 
it's very important to the mainframe and in the context of mainframe and enterprise

49
00:03:30.280 --> 00:03:34.479 
computing, of course, is necessary to understand what kind of virtualization techniques

50
00:03:34.480 --> 00:03:39.399 
exist and how they are sort of used and implemented,

51
00:03:39.400 --> 00:03:41.259 
for example, on the mainframe platform.

52
00:03:44.840 --> 00:03:48.589 
When we classify the different types of emulation or different types of visualization

53
00:03:48.590 --> 00:03:53.029 
techniques, then we get a sort of hierarchy of

54
00:03:53.030 --> 00:03:58.429 
five major categories, or types of virtualization that we might use

55
00:03:58.430 --> 00:04:03.319 
on a computer. The most radical and the most resource consuming

56
00:04:03.320 --> 00:04:07.180 
one is full emulation, or we call it as a full virtualization.

57
00:04:08.390 --> 00:04:13.639 
This means that the full hardware of a machine is emulated on

58
00:04:13.640 --> 00:04:18.229 
another machine. So, it's kind of a simulation of another machine

59
00:04:18.230 --> 00:04:23.539 
in software. This is not usually used in

60
00:04:23.540 --> 00:04:28.429 
production use because of course, it requires a lot of resources,

61
00:04:28.430 --> 00:04:31.732 
but it's mostly used for development, for testing,

62
00:04:33.290 --> 00:04:37.669 
for example, when you develop mobile applications on a desktop computer to simulate

63
00:04:37.670 --> 00:04:41.099 
mobile or embedded devices, when you've developed embedded software and things like that.

64
00:04:41.100 --> 00:04:45.739 
There are also open source emulators that

65
00:04:45.740 --> 00:04:50.209 
allow to execute software written for another platform

66
00:04:50.210 --> 00:04:54.869 
on the PC, for example, Bochs, QEMO or Hercules.

67
00:04:54.870 --> 00:04:59.359 
Hercules is interesting because it's an open source emulator that emulates actually

68
00:04:59.360 --> 00:05:02.929 
the mainframe. So, it's a software for emulation of the mainframe.

69
00:05:02.930 --> 00:05:06.410 
In theory, it allows to run mainframe operating systems on a PC.

70
00:05:08.020 --> 00:05:12.819 
Well, depending on licensing issues, but for example, using Linux

71
00:05:12.820 --> 00:05:14.770 
as an open source system, you can do that.

72
00:05:16.940 --> 00:05:22.279 
The next and most common way of liberalization, which is less resource intensive,

73
00:05:22.280 --> 00:05:26.839 
is hardware virtualization. Hardware virtualization is actually what most kind of

74
00:05:26.840 --> 00:05:29.479 
virtualization environments do, actually.

75
00:05:29.480 --> 00:05:34.405 
It means that a virtual virtualization software called a hypervisor,

76
00:05:36.880 --> 00:05:41.469 
it provides guest operating systems with parts of the physical real

77
00:05:41.470 --> 00:05:46.519 
machine and divides it into virtual environments.

78
00:05:46.520 --> 00:05:51.429 
So basically it needs to virtualize the IO and the RAM but not the CPU

79
00:05:51.430 --> 00:05:55.569 
and this makes it more usable in practice or it's dominating technology for

80
00:05:55.570 --> 00:05:59.409 
virtualization in the data centers today if not for some years now.

81
00:06:00.610 --> 00:06:05.049 
It means that you could run every

82
00:06:05.050 --> 00:06:09.639 
operating system that would run on the real physical hardware in a

83
00:06:09.640 --> 00:06:14.169 
virtual guest as well without modifying the operating system

84
00:06:14.170 --> 00:06:18.909 
because it basically runs on the real CPU that is divided into or

85
00:06:18.910 --> 00:06:23.379 
split it up into parts for the different servers and virtualizes the environment.

86
00:06:25.310 --> 00:06:30.289 
The next step or the next less resource intense

87
00:06:30.290 --> 00:06:33.079 
type of virtualization is Paravirtualization.

88
00:06:33.080 --> 00:06:37.339 
Paravirtualization is also common in the data centers today, and it's even common on the

89
00:06:37.340 --> 00:06:41.179 
mainframe because

90
00:06:42.230 --> 00:06:46.639 
there is something called the kernel virtual machine in Linux and this is also working on

91
00:06:46.640 --> 00:06:47.899 
Linux on z systems.

92
00:06:48.950 --> 00:06:52.790 
Paravirtualization means that the system does not

93
00:06:56.150 --> 00:07:00.629 
emulate the full hardware or the IO part or

94
00:07:00.630 --> 00:07:05.069 
the environment part of the hardware, but that the software

95
00:07:05.070 --> 00:07:09.989 
provides the guest systems, a software API that the guest systems could call

96
00:07:09.990 --> 00:07:12.990 
that behaves more or less like a real computer or real hardware.

97
00:07:14.370 --> 00:07:19.259 
This, of course, requires that the guest operating system needs to be adjusted, adapted

98
00:07:19.260 --> 00:07:23.549 
to that API. So it needs to be changed and this, of course, is only possible with guest

99
00:07:23.550 --> 00:07:27.749 
systems that can be changed. Now, open source, for example, or that the vendor is

100
00:07:27.750 --> 00:07:28.750 
adjusting to that.

101
00:07:29.790 --> 00:07:33.689 
The most common paravirtualization techniques is Linux Kernel Virtual Machine, which is

102
00:07:33.690 --> 00:07:38.939 
also, as I said, running on Linux on z systems, and Xen which is also used

103
00:07:38.940 --> 00:07:40.160 
in the Linux environment.

104
00:07:44.400 --> 00:07:48.959 
How the virtualization products that are relevant are in the desktop and PC

105
00:07:48.960 --> 00:07:50.204 
environment? For example, it's the VMware, virtualBox,

106
00:07:53.490 --> 00:07:57.419 
but on the mainframe, it's, of course, the classical z/VM and that is the typical

107
00:07:57.420 --> 00:08:00.530 
hardware virtualization - hypervisor.

108
00:08:02.850 --> 00:08:07.259 
So, hardware virtualization is available on the mainframe for all operating systems.

109
00:08:07.260 --> 00:08:10.649 
Paravirtualization is only available for Linux.

110
00:08:15.450 --> 00:08:20.039 
The next less intense level, so with every level the

111
00:08:20.040 --> 00:08:24.479 
resource consumption is reduced, but also the isolation between

112
00:08:24.480 --> 00:08:29.039 
individual guests is reduced. So, it's more likely that, for example,

113
00:08:29.040 --> 00:08:33.509 
there's a break out of the guest to the host, or to another guest if

114
00:08:33.510 --> 00:08:35.039 
there's a bug in the system.

115
00:08:37.110 --> 00:08:41.039 
So, the next step would be operating system virtualization, which has not

116
00:08:43.049 --> 00:08:47.339 
such a big use in practice, but still it is used partially, for example,

117
00:08:48.900 --> 00:08:53.879 
in this case, the guest applications and provided an isolated environment

118
00:08:53.880 --> 00:08:58.349 
which is more or less like a separate operating system, which is called a virtual machine

119
00:08:58.350 --> 00:09:00.509 
on one hosted system.

120
00:09:00.510 --> 00:09:04.809 
This means that this works only with the same host system.

121
00:09:04.810 --> 00:09:08.879 
So all guests need to have the same operating system as the host.

122
00:09:08.880 --> 00:09:12.179 
So, you can have Linux guests on Linux hosts, for example.

123
00:09:13.320 --> 00:09:19.049 
Similar concepts have been implemented for Solaris called zones.

124
00:09:19.050 --> 00:09:23.519 
And there's the OpenVZ project, which is implementing such kind of thing for

125
00:09:23.520 --> 00:09:26.279 
open source, for Linux operating system.

126
00:09:27.320 --> 00:09:32.059 
And today, of course, the most hot topic probably

127
00:09:32.060 --> 00:09:36.079 
is application virtualization, sometimes also called are referred to as a

128
00:09:36.080 --> 00:09:40.519 
containerization, which means that if you do not have really

129
00:09:40.520 --> 00:09:45.169 
a virtual operating system or guest operating system, but we only provide

130
00:09:45.170 --> 00:09:49.909 
inside one running host system the guests virtual

131
00:09:49.910 --> 00:09:55.729 
environments, providing them with their own file system and our network

132
00:09:55.730 --> 00:10:00.199 
stack and so on. So they see a virtual system, but actually they run on the

133
00:10:00.200 --> 00:10:04.849 
kernel of the host system. So in this case, you can have only one operating system,

134
00:10:04.850 --> 00:10:09.319 
namely the same the host system for all containers but the containers have their own

135
00:10:09.320 --> 00:10:13.489 
file structure. So, they can have their own configuration files and their own users and

136
00:10:13.490 --> 00:10:18.199 
their own network addresses and so on and see a sort of a

137
00:10:18.200 --> 00:10:22.639 
separate system. This is a technology that is used

138
00:10:22.640 --> 00:10:28.039 
in cloud applications very frequently and the most prominent example is

139
00:10:28.040 --> 00:10:31.819 
docker, other kind of container solutions, Linux containers, for example, but Docker is

140
00:10:31.820 --> 00:10:34.049 
the most important and commercially used one.

141
00:10:35.300 --> 00:10:40.129 
So these are the five layers or levels of of virtualization in the mainframe

142
00:10:40.130 --> 00:10:45.139 
world, we have on z/Os we have

143
00:10:45.140 --> 00:10:48.889 
z/VM, we have hardware virtualization, we have logical partitions which are, we'll see

144
00:10:48.890 --> 00:10:53.389 
that soon, also hardware virtualization, we have paravirtualization in

145
00:10:53.390 --> 00:10:58.279 
the Linux domain with KVM and we have containerization application virtualization

146
00:10:58.280 --> 00:11:00.200 
with Docker also on Linux.

147
00:11:02.060 --> 00:11:05.729 
So, finally, let's have a look on a very special kind of virtualization.

148
00:11:05.730 --> 00:11:10.339 
It's also a type of hardware virtualization that is specific and very, very

149
00:11:10.340 --> 00:11:14.779 
unique to the mainframe environment and that is called a logical partitioning.

150
00:11:16.040 --> 00:11:20.719 
The mainframe platform provides the possibility to create virtual

151
00:11:20.720 --> 00:11:25.459 
machines on the hardware, on the bare hardware without installing

152
00:11:25.460 --> 00:11:29.899 
an operating system without installing that z/VM, you can just

153
00:11:29.900 --> 00:11:34.489 
buy the hardware management environment, hardware

154
00:11:34.490 --> 00:11:38.929 
management console. You can configure and divide and

155
00:11:38.930 --> 00:11:42.319 
split up the real mainframe hardware into logical partitions.

156
00:11:42.320 --> 00:11:44.629 
This is what is usually done in the mainframe.

157
00:11:46.010 --> 00:11:50.569 
Logical partitioning, it means that splitting the physical

158
00:11:50.570 --> 00:11:55.339 
hardware into multiple virtual machines, which are then called LPARs

159
00:11:55.340 --> 00:12:00.469 
- logical partitions. And every LPAR is sort of a subset of the physical hardware,

160
00:12:00.470 --> 00:12:05.269 
regarding it has some CPU's associated, some part of the RAM, IO devices,

161
00:12:05.270 --> 00:12:10.339 
etc. and it's running its own, it hosts its own separate

162
00:12:10.340 --> 00:12:14.599 
operating system. So, in one LPAR you could have Linux and the other one you could have

163
00:12:14.600 --> 00:12:15.600 
z/Os and so on.

164
00:12:17.870 --> 00:12:21.349 
This is basically a hardware virtualization that is built in the system.

165
00:12:21.350 --> 00:12:25.039 
So, it's implemented in firmware and macro code in the system.

166
00:12:25.040 --> 00:12:29.809 
It's part of the physical box and so every mainframe offers

167
00:12:29.810 --> 00:12:34.969 
that. But it's still technically it's a kind of a hardware virtualization technique.

168
00:12:34.970 --> 00:12:39.709 
And there's software component called a processor resource

169
00:12:39.710 --> 00:12:44.209 
assistant manager PR/SM, which is part of the system which is basically

170
00:12:44.210 --> 00:12:48.709 
responsible for resource allocation between the logical partitions

171
00:12:48.710 --> 00:12:53.459 
and it allows, for example, to configure which CPs or

172
00:12:53.460 --> 00:12:58.099 
which CPUs we use are working for which LPAR and allow us also to define

173
00:12:58.100 --> 00:13:02.839 
rules that at runtime resources are moved between

174
00:13:02.840 --> 00:13:07.609 
the other parts and not only by the administrator, but even automatically, depending

175
00:13:07.610 --> 00:13:13.159 
on, for example, changes in the the load in the different logical partitions.

176
00:13:13.160 --> 00:13:17.749 
This all can be configured using the hardware management console, which

177
00:13:17.750 --> 00:13:22.489 
is the central administration console of a mainframe system.

178
00:13:22.490 --> 00:13:26.959 
Technically, it's a laptop with a special software on it

179
00:13:26.960 --> 00:13:30.199 
that is used for configuring the system.

180
00:13:30.200 --> 00:13:34.649 
It is shipped as part of the mainframe system and

181
00:13:34.650 --> 00:13:39.349 
inside the actual mainframe box, there's the so-called support element,

182
00:13:39.350 --> 00:13:43.279 
which is also redundant. Two of them, the support element is, again,

183
00:13:45.350 --> 00:13:50.389 
PC or laptop device that is running a special software

184
00:13:50.390 --> 00:13:54.859 
and so it's possible to configure it centrally from the management console

185
00:13:54.860 --> 00:13:57.769 
or even inside the box.

186
00:13:57.770 --> 00:14:02.809 
But still, it's a separate software that is part of the

187
00:14:02.810 --> 00:14:04.460 
full environment of the mainframe.

188
00:14:06.280 --> 00:14:10.989 
So, this is the basic idea of logical partitioning, and this is very powerful

189
00:14:10.990 --> 00:14:15.549 
because it allows, for example, to move resources when the

190
00:14:15.550 --> 00:14:20.019 
load increases in a certain partition from one to another, depending on certain

191
00:14:20.020 --> 00:14:22.879 
boundary conditions and rules in a dynamic and automatic way.

192
00:14:24.080 --> 00:14:25.080 
Thank you very much.
