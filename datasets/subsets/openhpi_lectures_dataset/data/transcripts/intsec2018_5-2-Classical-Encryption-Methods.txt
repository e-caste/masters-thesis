WEBVTT

1
00:00:00.560 --> 00:00:04.900 
To get a feeling of how
encryption is working

2
00:00:05.120 --> 00:00:07.310 
let's have a closer look
at some classical

3
00:00:07.650 --> 00:00:14.120 
encryption methods. For example,
let's consider the monoalphabetic

4
00:00:14.150 --> 00:00:18.100 
substitutions, the idea
is in the plaintext

5
00:00:18.330 --> 00:00:22.740 
the characters, the letters
substituted encrypted

6
00:00:23.030 --> 00:00:27.760 
by characters of the same as
alphabet, of course, a substitution

7
00:00:27.760 --> 00:00:31.780 
scheme for encryption that
can be chosen arbitrarily

8
00:00:31.950 --> 00:00:35.710 
but must be disclosed to all
communications subscribers,

9
00:00:36.010 --> 00:00:40.330 
otherwise, the goal of
encryption cannot be reached.

10
00:00:40.970 --> 00:00:45.320 
Here are some examples, for
example one can switch the

11
00:00:45.320 --> 00:00:50.670 
alphabetic sequence, so
instead of A you write Z

12
00:00:50.890 --> 00:00:54.600 
and instead of Z you write
A, instead of B and

13
00:00:54.820 --> 00:00:58.600 
you write Y and instead
of Y, you write B,

14
00:00:58.860 --> 00:01:04.410 
so switching the alphabetic order.
Another idea for such

15
00:01:04.480 --> 00:01:09.790 
monoalphabetic substitution is
shifting the alphabet by a certain

16
00:01:09.790 --> 00:01:13.240 
position, for example by
5 positions, so A

17
00:01:13.460 --> 00:01:20.460 
is replaced by E,
B is replaced by F,

18
00:01:21.070 --> 00:01:26.490 
so that is a shift. Another way
is to encrypt with a start

19
00:01:26.490 --> 00:01:30.890 
word. Encryption with a start
word is quite interesting.

20
00:01:31.100 --> 00:01:35.410 
So let's consider in
more detail, the user

21
00:01:35.820 --> 00:01:39.390 
selects a start word,
and then the alphabet

22
00:01:39.780 --> 00:01:42.120 
is appended to
that start word.

23
00:01:44.730 --> 00:01:48.220 
To have a unique way
to replace letters,

24
00:01:48.560 --> 00:01:52.870 
all multiple occurrence of
characters need to be deleted.

25
00:01:54.460 --> 00:01:57.600 
Better to understand if
we look at an example,

26
00:01:57.800 --> 00:02:02.230 
let's select as the start word,
the word "INTERNETSECURITY",

27
00:02:03.210 --> 00:02:08.070 
then first step and we append the alphabet

28
00:02:08.430 --> 00:02:14.670 
here afterward, but before we
append the alphabet, we have to delete

29
00:02:14.680 --> 00:02:18.980 
all repeated occurrence. For
example, we have here an E, here

30
00:02:18.980 --> 00:02:25.310 
an E, then here an E, so the word
which comes out from internet

31
00:02:25.310 --> 00:02:29.830 
security from the start word by
deleting all repeated occurrence

32
00:02:29.830 --> 00:02:34.020 
of letters is
INTERSCUY,

33
00:02:34.470 --> 00:02:40.700 
and then we append the remaining
letters of the alphabet.

34
00:02:41.180 --> 00:02:44.660 
So here, we have our
alphabet ABCDE,

35
00:02:45.060 --> 00:02:49.200 
and now we have to describe
how the single letters

36
00:02:49.400 --> 00:02:54.270 
have to be encrypted. The idea
what we say, we start

37
00:02:54.450 --> 00:02:59.350 
with a start word and then
the alphabet is appended,

38
00:02:59.660 --> 00:03:05.000 
but we need to be careful. All
letters that occur in a start word

39
00:03:05.280 --> 00:03:08.560 
have to be deleted in the alphabet

40
00:03:09.010 --> 00:03:14.110 
to have a unique way to replace letters.

41
00:03:14.350 --> 00:03:19.910 
So for example, B is replaced
by N, F is replaced by S,

42
00:03:20.310 --> 00:03:24.510 
K is replaced by B, you
see with the start word

43
00:03:24.830 --> 00:03:29.310 
it becomes more complex and
more difficult to understand

44
00:03:29.750 --> 00:03:32.830 
the encryption method then
by simply shifting,

45
00:03:33.120 --> 00:03:37.240 
the alphabet by a certain
amount of positions.

46
00:03:38.530 --> 00:03:43.400 
If one wants to decrypt on
the side of the recipient,

47
00:03:43.800 --> 00:03:49.090 
if the recipient want to
decrypt, then one has to go

48
00:03:49.290 --> 00:03:52.800 
in diverse directions,
L for example

49
00:03:53.120 --> 00:03:57.730 
in the cipher needs to
be replaced by R and

50
00:03:57.760 --> 00:04:01.210 
if one does this consequently with
all the letters in the message,

51
00:04:01.300 --> 00:04:06.840 
the recipient can gets back the
a message in a plaintext.

52
00:04:07.260 --> 00:04:10.380 
Perhaps we have
try this out

53
00:04:11.770 --> 00:04:16.530 
and perhaps you try this out
by taking a text and then

54
00:04:16.840 --> 00:04:19.600 
applying this encryption.

55
00:04:20.940 --> 00:04:25.800 
I want to consider now encryption
with the substitution

56
00:04:25.800 --> 00:04:31.530 
cipher. So substitution cipher
whereby each letter is replaced

57
00:04:31.530 --> 00:04:34.990 
by the letter following
after X positions.

58
00:04:35.590 --> 00:04:40.320 
The letter we take to
replace is an encryption

59
00:04:40.500 --> 00:04:46.070 
key then shifts by
X positions into alphabet,

60
00:04:46.640 --> 00:04:50.980 
that means the encryption key
is a shift number X and if we

61
00:04:50.980 --> 00:04:55.720 
look at an example, then
sender and receiver select an

62
00:04:55.720 --> 00:05:01.790 
alphabet and agree
on the key X equal

63
00:05:02.140 --> 00:05:07.290 
to 12, that means the
alphabet is shifted by 12

64
00:05:07.750 --> 00:05:12.340 
positions and if we look for
an encryption of the

65
00:05:12.610 --> 00:05:17.850 
of the plaintext internet security,
then what we have to do

66
00:05:17.990 --> 00:05:23.140 
is simply to shift each letter by
12 positions in alphabet.

67
00:05:23.290 --> 00:05:27.190 
That means the alphabet
by twelve positions

68
00:05:27.190 --> 00:05:32.860 
in the direction, so A is
replaced by M, B by N, C by

69
00:05:33.190 --> 00:05:39.600 
O, D by P and so on. So
with this key shift by

70
00:05:39.780 --> 00:05:43.140 
12 positions, each
letter of the alphabet

71
00:05:43.500 --> 00:05:48.370 
is encrypted by a different
letter, for decryption

72
00:05:48.720 --> 00:05:52.980 
we have to do the shift
in the other direction.

73
00:05:53.680 --> 00:05:58.150 
So now the receiver
can take a cipher

74
00:05:58.360 --> 00:06:03.860 
text and can move, in the alphabet can
replace this letter

75
00:06:04.110 --> 00:06:08.760 
by the letter which
is in the alphabet

76
00:06:09.030 --> 00:06:14.020 
shifted by minus
twelve positions.

77
00:06:15.260 --> 00:06:18.460 
So if we look for the
world internet security

78
00:06:18.630 --> 00:06:23.330 
and apply the substitution cipher
or with key X equal to 12,

79
00:06:23.580 --> 00:06:28.250 
we get the text here,
a completely unreadable

80
00:06:28.250 --> 00:06:35.000 
text, this is cipher,
and nobody that do not know

81
00:06:35.200 --> 00:06:40.020 
how this was produced
and has no chance to

82
00:06:40.410 --> 00:06:44.070 
see how it was
encrypted.

83
00:06:44.320 --> 00:06:48.600 
The only thing the attacker
can do is to try to find out

84
00:06:48.690 --> 00:06:53.870 
what is encryption method and
when he comes to the idea that

85
00:06:53.870 --> 00:06:57.800 
the substitution cipher then he
has to find the shift of the

86
00:06:57.800 --> 00:07:01.370 
position. In this way it's
difficult for humans

87
00:07:01.670 --> 00:07:05.520 
but it's not difficult for
computers which can test it very

88
00:07:05.520 --> 00:07:10.550 
much. In the context of the
substitution cipher, it's important

89
00:07:10.760 --> 00:07:17.400 
that the key X is not
allowed to be multiple of

90
00:07:17.400 --> 00:07:23.520 
the size of the alphabet, why?
If you say for example, you

91
00:07:23.520 --> 00:07:27.130 
shift the alphabet
with the 26 letters

92
00:07:27.130 --> 00:07:32.340 
by 26 positions, then
you get identical alphabets

93
00:07:32.340 --> 00:07:38.950 
and cipher, although it was encrypted
is exactly the plaintext.

94
00:07:40.800 --> 00:07:45.160 
I think here it's a good way
to understand what is the idea

95
00:07:45.160 --> 00:07:48.060 
of encryptionï¼ŒThe idea
for this encryption is

96
00:07:48.250 --> 00:07:51.450 
to hide the message in a way to
make it unreadable.

97
00:07:52.640 --> 00:07:56.370 
If now an attacker in the case
of substitution cipher

98
00:07:56.370 --> 00:07:59.820 
it is difficult if an
the attacker wants to

99
00:08:00.130 --> 00:08:05.950 
attack, wants to crack this,
then he needs to find the key X.

100
00:08:07.730 --> 00:08:12.060 
If the attacker knows

101
00:08:12.060 --> 00:08:15.050 
that the plaintext is encrypted
by substitution cipher,

102
00:08:15.520 --> 00:08:21.370 
then he needs to find out the X
and of course if he then applies

103
00:08:21.370 --> 00:08:25.680 
a brute force attack,
the maximum of tries

104
00:08:26.140 --> 00:08:31.420 
he has to make is the
number of alphabets,

105
00:08:32.310 --> 00:08:36.130 
number of alphabets minus 1,
that means he tries first

106
00:08:36.140 --> 00:08:40.720 
shift 1, then in the
brute force method shift 2,

107
00:08:40.970 --> 00:08:46.690 
shift 3 or 4, and X equals
to a number between 1 and

108
00:08:46.770 --> 00:08:52.640 
26, and so latest
after a maximum of 26

109
00:08:52.640 --> 00:08:58.040 
tries he can crack the

110
00:08:58.410 --> 00:08:59.570 
encryption.

111
00:09:02.060 --> 00:09:05.970 
The encryption, the
experiment brute force attack

112
00:09:05.970 --> 00:09:09.450 
consist of trying out
whether the shift is 1,

113
00:09:09.970 --> 00:09:13.950 
then shift all letters in the
cipher by position 1,

114
00:09:14.380 --> 00:09:20.350 
and if it's readable then
the cipher is decrypted,

115
00:09:20.630 --> 00:09:23.040 
if it's not readable

116
00:09:23.310 --> 00:09:28.330 
the attacker tries X
equals 2, X equals 3,

117
00:09:28.530 --> 00:09:34.210 
X equals 4, up to the moment
the meaningful text occurs.

118
00:09:36.200 --> 00:09:40.860 
A special case for the substitution
cipher which plays a role

119
00:09:40.870 --> 00:09:46.120 
in history is the Caesar cipher.
This is a special case of

120
00:09:46.130 --> 00:09:50.110 
substitution cipher
with X equals 3,

121
00:09:50.760 --> 00:09:57.040 
that means all the letters
are translated by 3 positions,

122
00:09:57.380 --> 00:10:01.280 
and this plays a role a
in the Roman empire,

123
00:10:01.870 --> 00:10:06.740 
because in the Roman empire the
information whether there

124
00:10:06.750 --> 00:10:09.610 
was a victim in
the battle

125
00:10:09.820 --> 00:10:16.550 
or whether it was lost, was
sent by encrypted message

126
00:10:16.960 --> 00:10:21.870 
which were sent back
to Rome, and the

127
00:10:22.080 --> 00:10:25.700 
encryption consisted

128
00:10:25.950 --> 00:10:31.290 
the message was written
in a band, this was

129
00:10:31.550 --> 00:10:36.870 
moved around such a stop
and then every insert

130
00:10:37.150 --> 00:10:43.260 
exactly by a move of 3
positions, then in Rome the

131
00:10:43.260 --> 00:10:48.730 
people could easily decrypt
the message and were

132
00:10:48.900 --> 00:10:53.480 
correspondingly happy or unhappy
with the message they got from

133
00:10:53.620 --> 00:10:54.180 
that battle.

134
00:10:57.570 --> 00:11:01.280 
Also it's good to explain
encryption you see

135
00:11:01.570 --> 00:11:04.640 
it's too simple for a
modern application,

136
00:11:05.210 --> 00:11:10.330 
because in a brute force attack
after atleast

137
00:11:10.330 --> 00:11:14.110 
26 tries, the
encryption is broken.

138
00:11:14.630 --> 00:11:18.920 
So a little bit more
complicated encryptions are

139
00:11:19.190 --> 00:11:25.630 
polyalphabetic ciphers. Here
the idea is to use several

140
00:11:25.780 --> 00:11:29.620 
secret alphabets for
encrypting the message,

141
00:11:30.540 --> 00:11:33.760 
that means the same
character in the plaintext

142
00:11:34.080 --> 00:11:39.800 
can be converted into the same
character can be converted into

143
00:11:39.800 --> 00:11:43.280 
different letters in the
ciphertext and vice versa.

144
00:11:44.620 --> 00:11:47.490 
And this makes it much more
difficult to find out

145
00:11:47.740 --> 00:11:51.890 
what kind of encryption

146
00:11:51.890 --> 00:11:57.550 
method is appliedï¼Œ Here the
number of shifts is selected for

147
00:11:57.570 --> 00:12:01.600 
each character depending on
the position in the word.

148
00:12:01.930 --> 00:12:06.850 
For example, the position determines
the shift when we have the

149
00:12:07.030 --> 00:12:14.050 
message INTERNET, then
the I is in position 1

150
00:12:14.250 --> 00:12:18.500 
and is shifted by one that
means I is replaced by J.

151
00:12:18.830 --> 00:12:25.500 
N is the second word,
so N is shifted

152
00:12:25.700 --> 00:12:32.160 
by 2 positions so it is
shifted from N to P,

153
00:12:32.830 --> 00:12:40.220 
T is the third letter in the
word so T is shifted by 3

154
00:12:40.770 --> 00:12:45.980 
positions and so on. In this way
it becomes more difficult

155
00:12:46.290 --> 00:12:51.950 
to find out what kind of
shift is applied because

156
00:12:51.950 --> 00:12:54.460 
for each letter, a different
shift is performed.

157
00:12:55.150 --> 00:13:00.530 
This for example, is a result
of that encryption

158
00:13:00.740 --> 00:13:08.160 
method. Special
case of

159
00:13:08.440 --> 00:13:13.600 
de VigenÃ¨re encryption which
was developed by

160
00:13:13.600 --> 00:13:17.730 
de VigenÃ¨re in the
sixteenth century. Here

161
00:13:17.930 --> 00:13:23.590 
the idea is to choose a keyword,
keyword let's take for example,

162
00:13:23.590 --> 00:13:29.860 
SECURE and in the following we use
the positions of the letters

163
00:13:29.860 --> 00:13:33.290 
in the alphabet
A=0, B=1,

164
00:13:33.290 --> 00:13:40.040 
so there is no transition
and now the idea of de

165
00:13:40.040 --> 00:13:43.410 
VigenÃ¨re encryption is that
each letter in the plaintext

166
00:13:43.700 --> 00:13:47.210 
is shifted according to the
position of the corresponding

167
00:13:47.500 --> 00:13:54.660 
key letter in the alphabet.
To understand this more

168
00:13:54.660 --> 00:13:58.020 
easily, let's consider
the following example,

169
00:13:58.250 --> 00:14:04.440 
we have the Plaintext, the message
INTERNET to choose the keyword

170
00:14:04.440 --> 00:14:11.700 
SECURE and does not it out
we append SECURE as much as

171
00:14:11.700 --> 00:14:15.980 
long as we needed to
have for all the text.

172
00:14:16.200 --> 00:14:19.330 
And now we
computer the shifts

173
00:14:19.770 --> 00:14:25.100 
S, the chosen
keyword gives the

174
00:14:25.290 --> 00:14:29.970 
shifts that have to be formed
an I. So S has the 18th

175
00:14:29.970 --> 00:14:33.440 
position, and I has to
be shifted by

176
00:14:33.700 --> 00:14:39.060 
18 positions and this is
A, and in the chosen keywords

177
00:14:39.060 --> 00:14:44.690 
we have E below of
N, E is fourth

178
00:14:44.690 --> 00:14:49.910 
letter in an alphabet,
so our shift is 4, so

179
00:14:49.910 --> 00:14:52.810 
N is shifted by 4
positions we can reach.

180
00:14:53.220 --> 00:14:57.340 
Now we have T, to shift
T we have to compute

181
00:14:58.370 --> 00:15:01.190 
how many positions we
have to shift T.

182
00:15:01.580 --> 00:15:05.210 
We can find out this by looking
to our chosen keywords,

183
00:15:05.460 --> 00:15:11.150 
there is letter C, C is at the
position two, so we have

184
00:15:11.150 --> 00:15:15.940 
to shift T by 2 positions,
and here you see in this way

185
00:15:15.950 --> 00:15:20.920 
we get an
encrypted text.

186
00:15:21.640 --> 00:15:25.550 
And as long as the length of
the text is not a multiple of

187
00:15:25.550 --> 00:15:29.390 
key length, it is a
truncated at the end

188
00:15:29.620 --> 00:15:34.860 
so that we have
to append

189
00:15:35.110 --> 00:15:40.290 
the key words as
much as we need

190
00:15:40.550 --> 00:15:45.360 
to get the text, to
be able to encrypt the text.

191
00:15:48.960 --> 00:15:52.490 
But also the VigenÃ¨re
cipher can be cracked,

192
00:15:53.270 --> 00:15:57.620 
the idea here is
that one has to

193
00:15:57.620 --> 00:16:00.790 
look to the plaintext and to the
character of the plaintext,

194
00:16:01.210 --> 00:16:04.800 
so if the plaintext is not too
short if it's long enough,

195
00:16:05.190 --> 00:16:10.970 
an attacker can determine key
length, the reason is that each

196
00:16:11.240 --> 00:16:16.050 
nth character is encoded with
the same replacement code.

197
00:16:16.650 --> 00:16:22.980 
So if the keyword has length
n, then the number of shifts

198
00:16:23.270 --> 00:16:27.760 
when we have the n position
and n plus first position

199
00:16:27.760 --> 00:16:31.590 
has exactly so many shifts, like
the first position is text and

200
00:16:31.660 --> 00:16:37.620 
so on. So finding out this,
then the attacker can

201
00:16:37.620 --> 00:16:44.900 
also can crack the
encryption method

202
00:16:44.990 --> 00:16:52.660 
and can be decode the cipher. Here one
speaks from a frequency analysis.

203
00:16:52.930 --> 00:16:58.080 
So one has to test what has first
to find out what is the n,

204
00:16:58.090 --> 00:17:02.410 
What is the length
of the chosen

205
00:17:02.410 --> 00:17:06.490 
keyword and then one with
every n's position

206
00:17:06.810 --> 00:17:10.330 
then has to shift

207
00:17:10.680 --> 00:17:16.690 
the decryption by a
certain fixed shiftï¼Œ

208
00:17:16.950 --> 00:17:20.730 
And then one can find
the shift length.

209
00:17:22.690 --> 00:17:26.310 
There are VigenÃ¨re
variant with autokey,

210
00:17:26.310 --> 00:17:33.080 
the idea here is that a
choosen keyword consists

211
00:17:33.090 --> 00:17:38.330 
of a secret key word,
followed by the plaintext,

212
00:17:38.650 --> 00:17:43.060 
that means that the message
themselves is used

213
00:17:43.570 --> 00:17:47.390 
to determine the shifts
in the description.

214
00:17:47.850 --> 00:17:52.440 
So let's take our message,
let's consider our message

215
00:17:52.440 --> 00:17:58.490 
of the word internet security and
let us take it as a keyword, the

216
00:17:58.500 --> 00:18:03.670 
word secure and then we append
the internet security.

217
00:18:04.650 --> 00:18:10.170 
Autokey because the message
itself determines the shift,

218
00:18:10.180 --> 00:18:14.160 
only in the beginning to hide this
one needs a Chosen keyword.

219
00:18:14.160 --> 00:18:17.820 
So and then the
same method

220
00:18:18.110 --> 00:18:21.120 
is to find, determine the
position of that letter

221
00:18:21.300 --> 00:18:26.050 
and then shift the letter of
the plaintext exactly by exactly that

222
00:18:26.200 --> 00:18:29.510 
number, then the next
letter we will

223
00:18:29.720 --> 00:18:33.740 
find out a position in
the alphabet and shift

224
00:18:33.910 --> 00:18:37.610 
the plaintext letter
exactly by this way.

225
00:18:38.480 --> 00:18:43.880 
The receiver can easily decrypt
the first characters with the

226
00:18:43.880 --> 00:18:49.350 
keyword, the keywords is the key he
has to exchange with the sender

227
00:18:49.720 --> 00:18:54.240 
and then the following
characters he can take

228
00:18:54.240 --> 00:18:59.160 
out from the decoded with
the already decrypted text.

229
00:19:00.510 --> 00:19:06.460 
So this is a VigenÃ¨re
encryption, let's

230
00:19:06.930 --> 00:19:11.240 
handle this example, we
already could see some ideas

231
00:19:11.430 --> 00:19:16.470 
which are used by cryptanalysis.
By cryptanalysis

232
00:19:16.670 --> 00:19:20.910 
that means attackers try to
perform the cryptanalysis to

233
00:19:20.910 --> 00:19:26.640 
get access to the plaintext, to
the text that was encrypted

234
00:19:27.220 --> 00:19:31.480 
and secret analytics,
they

235
00:19:31.770 --> 00:19:35.960 
find out whether there is a weakness
in the encryption scheme,

236
00:19:35.960 --> 00:19:40.450 
whether it is easy for the
attacker to attack such a code.

237
00:19:40.640 --> 00:19:46.800 
So also the designer of
such encryption methods,

238
00:19:47.010 --> 00:19:51.440 
they perform cryptanalysis to
find out whether the encryption

239
00:19:51.580 --> 00:19:57.330 
is strong enough. So
cryptanalysis is to consider a

240
00:19:57.330 --> 00:20:00.340 
question how an encryption
can be correct.

241
00:20:00.830 --> 00:20:05.700 
There is Kerckhoff's principle
which says that the security

242
00:20:05.700 --> 00:20:10.250 
of encryption method should
be based solely on the

243
00:20:10.590 --> 00:20:16.880 
secrecy of the key and
not on the secrecy

244
00:20:16.880 --> 00:20:20.340 
of the applied
encryption procedure.

245
00:20:21.460 --> 00:20:24.790 
Because there are not
so many good ideas

246
00:20:25.010 --> 00:20:29.400 
for such encryption procedures.
A couple of ideas you saw

247
00:20:29.400 --> 00:20:34.520 
already, but each of these methods
can be applied with a great

248
00:20:34.520 --> 00:20:38.690 
variety of different keys. So
Kerckhoff's principle says

249
00:20:39.400 --> 00:20:43.260 
the encryption method,
this can be published

250
00:20:43.760 --> 00:20:47.750 
many people, particularly many
cryptanalysts should have a chance

251
00:20:47.750 --> 00:20:52.530 
to check whether the encryption
method is really secure.

252
00:20:53.180 --> 00:20:58.780 
But for application, the key is a
secret and the key is important

253
00:20:58.780 --> 00:21:03.860 
thing, so the idea of this
Kerckhoff 's accommodation is

254
00:21:04.150 --> 00:21:07.460 
a key to make encryption
procedures public

255
00:21:07.980 --> 00:21:12.130 
in order to enable many experts
to analyze and identify

256
00:21:12.130 --> 00:21:16.120 
possible weaknesses as quickly as
possible so that all people

257
00:21:16.120 --> 00:21:20.000 
warned, no this encryption
method is not strong enough,

258
00:21:20.330 --> 00:21:24.880 
there is a possibility to
attack this. What are the attack

259
00:21:25.080 --> 00:21:28.900 
opportunities against
an encrypting methods?

260
00:21:29.320 --> 00:21:33.300 
Not only against the encryption methods
I presented, but in general

261
00:21:34.080 --> 00:21:38.250 
there is a taking opportunity
of brute force attacks

262
00:21:38.530 --> 00:21:41.860 
we already mentioned, this
the systematic attempt

263
00:21:42.290 --> 00:21:46.030 
attempt with all
possible keys.

264
00:21:46.490 --> 00:21:51.080 
To attempt whether it's
possible to decrypt

265
00:21:51.340 --> 00:21:57.120 
the cipher and to apply a key
and to find the meaningfull

266
00:21:57.420 --> 00:22:01.320 
text message. Another
attack opportunity

267
00:22:01.540 --> 00:22:07.300 
is so-called dictionary attacks,
here the idea is to systematically

268
00:22:07.560 --> 00:22:12.810 
attempt to find out a key with
frequently used, are familiar

269
00:22:12.810 --> 00:22:17.700 
key words, we discussed such
dictionary attacks already

270
00:22:17.790 --> 00:22:22.620 
when we discussed passwords.
An important method of

271
00:22:22.930 --> 00:22:28.590 
cryptanalysis is a
statistical analysis.

272
00:22:29.980 --> 00:22:33.660 
Statistical analysis
are based on some

273
00:22:33.840 --> 00:22:37.870 
linguistic observations.
So for example in a

274
00:22:38.700 --> 00:22:43.140 
certain language, the
number of occurrences

275
00:22:43.150 --> 00:22:48.410 
of single letters differs.
So for example in

276
00:22:48.410 --> 00:22:53.640 
English language
E very often

277
00:22:53.640 --> 00:23:00.590 
occurs, the X occurs
much more often.

278
00:23:01.330 --> 00:23:06.270 
If one makes such an analysis
one can exactly say with

279
00:23:06.270 --> 00:23:11.770 
this percentage the letter
E or letter L occurs

280
00:23:12.110 --> 00:23:15.490 
in english text and
this knowledge helps

281
00:23:15.740 --> 00:23:21.720 
to find out which letter was
encrypted with what other letter.

282
00:23:22.250 --> 00:23:27.520 
So when in the cipher, the
word this is letter N,

283
00:23:28.030 --> 00:23:31.120 
or let's take
another one, T

284
00:23:31.420 --> 00:23:38.920 
is very often,
R is occurring in most

285
00:23:38.920 --> 00:23:44.030 
cases and it's very probably
that R replaces E

286
00:23:44.380 --> 00:23:46.840 
in the words, because
in the real language

287
00:23:47.020 --> 00:23:53.380 
E occurs often. Another attack
opportunity is to choose

288
00:23:53.380 --> 00:23:58.360 
plaintext. So if an
attacker is able to get

289
00:23:58.690 --> 00:24:03.740 
as well the plaintext of
encryption, as well as a cipher

290
00:24:03.960 --> 00:24:08.690 
in his hands, he can on the
base of the plaintext

291
00:24:09.050 --> 00:24:13.880 
try to find out what is the
encryption method and then apply

292
00:24:13.880 --> 00:24:20.190 
this to others, we have no time to go

293
00:24:20.190 --> 00:24:24.070 
into details is very interesting so
if you're interested you can find
a lot of literature and interesting things about this.
