WEBVTT

1
00:00:00.870 --> 00:00:03.539 
Welcome to an overview to Mainframe Application

2
00:00:03.540 --> 00:00:06.479 
Development. My name is Philipp Brune from the

3
00:00:06.480 --> 00:00:08.430 
New-Ulm University of Applied Sciences.

4
00:00:09.450 --> 00:00:11.160 
Mainframe application development

5
00:00:12.600 --> 00:00:15.389 
covers mainly to our mainframe applications cover

6
00:00:15.390 --> 00:00:17.170 
two main areas of

7
00:00:18.690 --> 00:00:22.409 
processing or of two types of data processing.

8
00:00:22.410 --> 00:00:25.139 
And these are the batch processing

9
00:00:25.140 --> 00:00:27.779 
and the online transaction processing or

10
00:00:27.780 --> 00:00:30.329 
OLTP type of applications.

11
00:00:30.330 --> 00:00:33.539 
So these are the two areas where mainframes

12
00:00:33.540 --> 00:00:36.449 
are classically used

13
00:00:36.450 --> 00:00:39.436 
to implement business functionality.

14
00:00:40.560 --> 00:00:43.469 
Batch processing, the name comes from the original

15
00:00:43.470 --> 00:00:46.169 
punch card badges which really

16
00:00:46.170 --> 00:00:48.839 
physical badges nowadays, of course,

17
00:00:48.840 --> 00:00:51.719 
these are just implemented

18
00:00:51.720 --> 00:00:54.389 
in software and batch

19
00:00:54.390 --> 00:00:57.659 
processing deals with the asynchronous

20
00:00:57.660 --> 00:01:00.479 
processing of high data volumes

21
00:01:00.480 --> 00:01:03.449 
in the background, so without user interaction

22
00:01:03.450 --> 00:01:06.149 
and is usually used

23
00:01:06.150 --> 00:01:09.059 
for for all the tasks in a company

24
00:01:09.060 --> 00:01:11.639 
that, for example, are time related, like

25
00:01:11.640 --> 00:01:13.709 
booking the salaries at the end of the month or

26
00:01:13.710 --> 00:01:16.349 
booking the end of day data

27
00:01:16.350 --> 00:01:17.350 
and so on.

28
00:01:18.390 --> 00:01:20.759 
Everything that is sort of a background and

29
00:01:20.760 --> 00:01:22.619 
asynchronously processed.

30
00:01:22.620 --> 00:01:25.109 
Usually, on the mainframe, these are implemented

31
00:01:25.110 --> 00:01:27.719 
using the job control language and the

32
00:01:27.720 --> 00:01:30.359 
job entry subsystem, the JS that

33
00:01:30.360 --> 00:01:33.029 
you already heard about in the overview and set

34
00:01:33.030 --> 00:01:34.030 
ups.

35
00:01:34.380 --> 00:01:36.569 
On the other hand, mainframe, or one of the

36
00:01:36.570 --> 00:01:38.369 
strengths of the mainframe is online transaction

37
00:01:38.370 --> 00:01:41.219 
processing. This is usually

38
00:01:41.220 --> 00:01:43.979 
the software that deals with the online

39
00:01:43.980 --> 00:01:46.829 
interactive processing of business transactions,

40
00:01:46.830 --> 00:01:49.560 
for example, bookings, orders and things like that.

41
00:01:50.700 --> 00:01:52.439 
And these are typically online.

42
00:01:52.440 --> 00:01:55.319 
So they are synchronous and there's a

43
00:01:55.320 --> 00:01:57.209 
huge number of transactions in parallel.

44
00:01:57.210 --> 00:02:00.779 
Just think of retail store where every

45
00:02:00.780 --> 00:02:03.479 
good that is moved over the cashier machine

46
00:02:03.480 --> 00:02:06.269 
is, for example, booked out of the

47
00:02:06.270 --> 00:02:08.220 
stock. So every

48
00:02:09.509 --> 00:02:11.429 
single product then would create a transaction.

49
00:02:11.430 --> 00:02:14.189 
So that is a huge number of transactions.

50
00:02:14.190 --> 00:02:16.829 
And if you think about

51
00:02:16.830 --> 00:02:18.899 
big companies like, for example, Walmart, which we

52
00:02:18.900 --> 00:02:21.389 
had already a big retailer, then you have a huge

53
00:02:21.390 --> 00:02:23.219 
number of transactions.

54
00:02:23.220 --> 00:02:25.979 
And typically for these kind of systems, we need

55
00:02:25.980 --> 00:02:28.319 
transaction processing monitors as middleware

56
00:02:28.320 --> 00:02:31.019 
component, like, for example, that kicks

57
00:02:31.020 --> 00:02:33.539 
the customer information control system to

58
00:02:33.540 --> 00:02:36.929 
implement these kind of a high volume transaction

59
00:02:36.930 --> 00:02:39.779 
throughput applications, ensure

60
00:02:39.780 --> 00:02:41.580 
the ACID properties and

61
00:02:43.110 --> 00:02:45.689 
implement distributed transactions.

62
00:02:45.690 --> 00:02:47.699 
We will learn about all these things in the

63
00:02:47.700 --> 00:02:49.559 
subsequent chapters.

64
00:02:49.560 --> 00:02:52.509 
So this is just a sort big picture.

65
00:02:52.510 --> 00:02:54.929 
We have two classes of systems, batch processing,

66
00:02:54.930 --> 00:02:57.809 
online transaction processing, and the mainframe

67
00:02:57.810 --> 00:02:59.999 
has concepts for both.

68
00:03:00.000 --> 00:03:01.679 
And when we talk about mainframe application

69
00:03:01.680 --> 00:03:04.739 
development, we have to talk about

70
00:03:04.740 --> 00:03:07.559 
concepts and tools and languages for these two big

71
00:03:07.560 --> 00:03:09.180 
areas of applications.

72
00:03:11.030 --> 00:03:14.029 
Regarding programing and implementing applications

73
00:03:14.030 --> 00:03:16.219 
on the mainframe, regarding the programing

74
00:03:16.220 --> 00:03:18.949 
languages, for example, we have different

75
00:03:20.540 --> 00:03:23.239 
types of tools to implement job

76
00:03:23.240 --> 00:03:26.419 
control, controlling batch processing.

77
00:03:26.420 --> 00:03:29.449 
We typically use JCL, the job control language

78
00:03:29.450 --> 00:03:30.450 
under z/OS.

79
00:03:30.680 --> 00:03:32.839 
But there are also other possibilities, like, for

80
00:03:32.840 --> 00:03:35.569 
example, the language Rexx, which IBM

81
00:03:35.570 --> 00:03:38.149 
featured some years ago for most

82
00:03:38.150 --> 00:03:39.529 
of their platforms.

83
00:03:39.530 --> 00:03:42.109 
And you can also use these procedures, but this is

84
00:03:42.110 --> 00:03:45.089 
less common. So scripting TSO

85
00:03:45.090 --> 00:03:47.359 
commands and execute them as a job, that's also

86
00:03:47.360 --> 00:03:48.360 
possible.

87
00:03:48.920 --> 00:03:51.799 
Regarding implementing business functionality,

88
00:03:51.800 --> 00:03:54.589 
programing languages on the z/OS

89
00:03:54.590 --> 00:03:57.079 
and also on the mainframe. We have different kinds

90
00:03:57.080 --> 00:04:00.049 
of tools as for example, classically

91
00:04:00.050 --> 00:04:01.459 
the high level assembler.

92
00:04:01.460 --> 00:04:03.949 
In the past, even business applications were

93
00:04:03.950 --> 00:04:05.479 
partially written in assembly language.

94
00:04:05.480 --> 00:04:08.059 
So there's the high-level Macro assembler

95
00:04:08.060 --> 00:04:10.249 
on z/OS, which is a very powerful assembler

96
00:04:10.250 --> 00:04:12.919 
language that resembles higher programing

97
00:04:12.920 --> 00:04:16.409 
language. So it's very expressive regarding

98
00:04:16.410 --> 00:04:18.749 
more abstract constructs.

99
00:04:18.750 --> 00:04:21.379 
Then, of course, one of the most

100
00:04:21.380 --> 00:04:23.119 
important languages for mainframe software

101
00:04:23.120 --> 00:04:25.759 
development is COBOL, the common business oriented

102
00:04:25.760 --> 00:04:28.399 
language, a very old, one of the first

103
00:04:28.400 --> 00:04:30.889 
higher programing languages that still is around

104
00:04:30.890 --> 00:04:33.679 
and still has a major role in enterprise

105
00:04:33.680 --> 00:04:34.680 
software development.

106
00:04:35.870 --> 00:04:38.299 
There's another language called PL/1, which is more

107
00:04:38.300 --> 00:04:41.179 
or less an IBM product and only

108
00:04:41.180 --> 00:04:42.739 
common on IBM platforms today, mainly on the

109
00:04:42.740 --> 00:04:45.859 
mainframe, which is also used

110
00:04:45.860 --> 00:04:47.509 
for writing business applications.

111
00:04:47.510 --> 00:04:50.029 
But it has a smaller installed base than COBOL.

112
00:04:51.260 --> 00:04:53.149 
And of course, all the other languages that, you

113
00:04:53.150 --> 00:04:56.629 
know, C, C++, classical languages or Fortran

114
00:04:56.630 --> 00:04:59.030 
are well available on z/OS.

115
00:05:01.270 --> 00:05:03.459 
The second important language today, of course, is

116
00:05:03.460 --> 00:05:06.249 
Java on

117
00:05:06.250 --> 00:05:08.619 
z/OS and on Linux, it is an important language for

118
00:05:08.620 --> 00:05:11.319 
implementing applications in business and

119
00:05:11.320 --> 00:05:12.579 
on the mainframe.

120
00:05:12.580 --> 00:05:15.429 
And IBM has, for example,

121
00:05:15.430 --> 00:05:18.219 
invested a lot to make the mainframe

122
00:05:18.220 --> 00:05:20.949 
one of the most performant and powerful

123
00:05:20.950 --> 00:05:23.799 
Java platforms.

124
00:05:23.800 --> 00:05:26.469 
And combined with Java,

125
00:05:26.470 --> 00:05:29.319 
of course, it can run all JVM languages

126
00:05:29.320 --> 00:05:31.749 
like Scala, which is important for big data, but

127
00:05:31.750 --> 00:05:34.119 
also, of course, scripting languages like PHP and

128
00:05:34.120 --> 00:05:37.020 
Python and so on are available on the mainframe.

129
00:05:39.190 --> 00:05:41.979 
Another kind of software language environment

130
00:05:41.980 --> 00:05:44.589 
that it's not so well known today

131
00:05:44.590 --> 00:05:47.169 
as the so-called fourth-generation languages,

132
00:05:47.170 --> 00:05:48.170 
4GL.

133
00:05:48.940 --> 00:05:50.740 
This comes from the past when there was,

134
00:05:52.570 --> 00:05:54.699 
one considered higher programing languages, the

135
00:05:54.700 --> 00:05:56.859 
third generation. And then people said, OK, that's

136
00:05:56.860 --> 00:05:59.679 
something beyond languages is fourth generation.

137
00:05:59.680 --> 00:06:01.659 
These are more like software environments for

138
00:06:01.660 --> 00:06:03.669 
creating business applications.

139
00:06:03.670 --> 00:06:06.249 
And one of the most prominent examples of that

140
00:06:06.250 --> 00:06:09.129 
is the natural platform by the

141
00:06:09.130 --> 00:06:11.889 
German Software AG, which is

142
00:06:11.890 --> 00:06:14.469 
used to implement business applications.

143
00:06:14.470 --> 00:06:15.639 
This was some sort of,

144
00:06:17.020 --> 00:06:19.899 
well, dead-end route for languages.

145
00:06:19.900 --> 00:06:21.670 
The 4GLs were not really

146
00:06:23.710 --> 00:06:26.199 
taking over the full software development market.

147
00:06:26.200 --> 00:06:29.409 
Nowadays, this is more like a legacy technology

148
00:06:29.410 --> 00:06:31.239 
but still is used.

149
00:06:31.240 --> 00:06:33.009 
And of course, we need databases to implement

150
00:06:33.010 --> 00:06:34.389 
business applications.

151
00:06:34.390 --> 00:06:37.009 
And on the z/OS and mainframe, of course, the most

152
00:06:37.010 --> 00:06:39.429 
classical database systems is DB2, which is a

153
00:06:39.430 --> 00:06:42.219 
relational or the first relational database system,

154
00:06:42.220 --> 00:06:44.920 
and IMS, which is a

155
00:06:46.510 --> 00:06:48.579 
database management system that's even older than

156
00:06:48.580 --> 00:06:51.549 
DB2 and it's a hierarchical non-relational

157
00:06:51.550 --> 00:06:54.040 
database system coming from the

158
00:06:56.110 --> 00:06:58.749 
z/OS environment. And today one would say

159
00:06:58.750 --> 00:07:01.269 
this is kind of No SQL database.

160
00:07:01.270 --> 00:07:03.979 
So, all the ideas

161
00:07:03.980 --> 00:07:06.529 
are coming back at some point in time in

162
00:07:06.530 --> 00:07:07.530 
computer science.

163
00:07:08.480 --> 00:07:10.609 
If we look at the languages, of course, here's a

164
00:07:10.610 --> 00:07:13.189 
history tree of life and evolution

165
00:07:13.190 --> 00:07:15.439 
of the languages. And you see COBOL is on the top.

166
00:07:15.440 --> 00:07:17.269 
It's one of the first programing languages in the

167
00:07:17.270 --> 00:07:18.499 
50s already.

168
00:07:18.500 --> 00:07:21.079 
The specification started and it was very

169
00:07:21.080 --> 00:07:23.959 
influential for other languages, but still is

170
00:07:23.960 --> 00:07:26.599 
one of the major languages for the

171
00:07:26.600 --> 00:07:29.089 
developing enterprise applications.

172
00:07:29.090 --> 00:07:31.369 
And here you see an example.

173
00:07:31.370 --> 00:07:34.489 
This is just a screenshot of a simple

174
00:07:34.490 --> 00:07:37.519 
transaction, a COBOL program,

175
00:07:37.520 --> 00:07:40.069 
transactional COBOL program that should be or could

176
00:07:40.070 --> 00:07:43.339 
be run on the CICS application server.

177
00:07:43.340 --> 00:07:45.899 
And you can see the COBOL code here is

178
00:07:45.900 --> 00:07:48.259 
green and red and white.

179
00:07:48.260 --> 00:07:51.199 
And the blue part here are some special

180
00:07:51.200 --> 00:07:54.109 
commands that are basically macro language

181
00:07:54.110 --> 00:07:57.109 
commands to interact with the CICS

182
00:07:57.110 --> 00:07:59.389 
transaction monitor. We will have a deeper look on

183
00:07:59.390 --> 00:08:02.839 
that when we discuss transaction processing.

184
00:08:02.840 --> 00:08:05.239 
What you can see here is that COBOL is very strict

185
00:08:05.240 --> 00:08:08.059 
about the indention

186
00:08:08.060 --> 00:08:10.549 
and or the commands need to be formatted in a

187
00:08:10.550 --> 00:08:13.279 
certain way and to have started a certain

188
00:08:13.280 --> 00:08:15.919 
column and then sometimes makes it hard for

189
00:08:15.920 --> 00:08:17.839 
beginners. Besides this, the language is very,

190
00:08:18.890 --> 00:08:20.419 
very self explaining.

191
00:08:20.420 --> 00:08:22.039 
It's close to the English language.

192
00:08:22.040 --> 00:08:23.659 
You can see identification, division.

193
00:08:23.660 --> 00:08:25.549 
It's a lot of wording here, a lot of text.

194
00:08:25.550 --> 00:08:28.129 
That is the idea of COBOL was to create

195
00:08:28.130 --> 00:08:30.679 
a programing language which resembles

196
00:08:30.680 --> 00:08:32.029 
the natural English language.

197
00:08:32.030 --> 00:08:34.819 
So people would not, who were not

198
00:08:34.820 --> 00:08:37.579 
IT experts would be, the idea was that they should

199
00:08:37.580 --> 00:08:38.689 
be able to read the problem.

200
00:08:38.690 --> 00:08:42.079 
So it's sort of like a natural text.

201
00:08:42.080 --> 00:08:45.139 
And we will have a deeper look on COBOL

202
00:08:45.140 --> 00:08:46.749 
also in this chapter.

203
00:08:48.410 --> 00:08:51.049 
Of course, today people are developing business

204
00:08:51.050 --> 00:08:53.209 
applications with modern client tools like the

205
00:08:53.210 --> 00:08:55.909 
Eclipse IDE, and there are those plug ins

206
00:08:55.910 --> 00:08:58.516 
that allow to write

207
00:08:58.517 --> 00:09:00.949 
COBOL, as you can see here with the eclipse, write

208
00:09:00.950 --> 00:09:04.069 
it on the PC and then tested remotely on

209
00:09:04.070 --> 00:09:05.600 
z/OS mainframe, for example.

210
00:09:07.220 --> 00:09:09.859 
So also for mainframe software development,

211
00:09:09.860 --> 00:09:12.469 
of course, the modern tools like Eclipse and Git

212
00:09:12.470 --> 00:09:13.749 
and so on are available.

213
00:09:15.880 --> 00:09:18.579 
Nowadays, for some years now, besides

214
00:09:18.580 --> 00:09:20.379 
CORBA, probably the most important language on the

215
00:09:20.380 --> 00:09:22.899 
mainframe is Java.

216
00:09:22.900 --> 00:09:25.459 
So it increased a lot in recent years because it's

217
00:09:25.460 --> 00:09:27.939 
so common to use for business application

218
00:09:27.940 --> 00:09:30.519 
development. And as you can see, Java is sort

219
00:09:30.520 --> 00:09:31.909 
of on the other side of the history.

220
00:09:31.910 --> 00:09:35.229 
It's a rather modern language from the 90s

221
00:09:35.230 --> 00:09:37.419 
compared to COBOL.

222
00:09:37.420 --> 00:09:40.449 
And Java is now

223
00:09:40.450 --> 00:09:43.389 
supported more or less for everything

224
00:09:43.390 --> 00:09:46.659 
on z/OS. It's supported

225
00:09:46.660 --> 00:09:48.699 
using the so-called Unix system service

226
00:09:48.700 --> 00:09:50.079 
environment.

227
00:09:50.080 --> 00:09:52.899 
So you can write a transaction code

228
00:09:52.900 --> 00:09:55.599 
in Java and you can also write batch processing

229
00:09:55.600 --> 00:09:57.069 
programs in Java.

230
00:09:57.070 --> 00:09:59.739 
And of course, you can use

231
00:09:59.740 --> 00:10:02.739 
Java with more or less the same JVM

232
00:10:02.740 --> 00:10:03.909 
implementation.

233
00:10:03.910 --> 00:10:04.929 
Very performant.

234
00:10:06.300 --> 00:10:08.909 
On z/OS, as well as on

235
00:10:08.910 --> 00:10:11.399 
Linux, on the mainframe and Linux on the mainframe,

236
00:10:11.400 --> 00:10:14.279 
you have, of course, all tools and

237
00:10:14.280 --> 00:10:15.530 
components and software, open-source

238
00:10:16.890 --> 00:10:19.589 
tools available for Java development that

239
00:10:19.590 --> 00:10:21.470 
you are used to from any other platform.

240
00:10:23.670 --> 00:10:26.419 
A final look on Java involving people

241
00:10:26.420 --> 00:10:27.629 
will have a look on Java as well.

242
00:10:27.630 --> 00:10:30.299 
So Java is not only a programing language,

243
00:10:31.500 --> 00:10:33.689 
of course, in the core, there's the Java standard

244
00:10:33.690 --> 00:10:35.879 
edition, which is what you would typically install

245
00:10:35.880 --> 00:10:37.919 
when you download the JDK.

246
00:10:37.920 --> 00:10:40.859 
The Java Standard Edition is the language itself,

247
00:10:40.860 --> 00:10:44.039 
the compiler, the runtime environment, the JVM

248
00:10:44.040 --> 00:10:46.619 
and the standard APIs and the

249
00:10:46.620 --> 00:10:48.410 
corresponding libraries.

250
00:10:49.680 --> 00:10:52.339 
However, to develop

251
00:10:52.340 --> 00:10:54.259 
business applications in Java, you need to know

252
00:10:54.260 --> 00:10:56.899 
more and you see that the next

253
00:10:56.900 --> 00:10:59.749 
level is a so-called Java Enterprise edition,

254
00:10:59.750 --> 00:11:02.299 
as it used to be called, just recently, it was

255
00:11:02.300 --> 00:11:04.999 
renamed to Jakarta EE and was sort

256
00:11:05.000 --> 00:11:07.639 
of set free to the open-source community and

257
00:11:07.640 --> 00:11:10.489 
then over to the open-source community and is now

258
00:11:10.490 --> 00:11:13.219 
maintained by Apache.

259
00:11:13.220 --> 00:11:16.099 
And this is basically

260
00:11:16.100 --> 00:11:19.579 
a specification. So Java is also

261
00:11:19.580 --> 00:11:22.429 
a product, the JDK, but Java EE

262
00:11:22.430 --> 00:11:25.129 
or Jakarta EE is, first of all, is a specification

263
00:11:25.130 --> 00:11:27.949 
that specifies an environment for writing business

264
00:11:27.950 --> 00:11:30.649 
applications, which involves

265
00:11:30.650 --> 00:11:33.529 
web front-end, web server, transaction processing

266
00:11:33.530 --> 00:11:34.879 
and things like that.

267
00:11:34.880 --> 00:11:37.669 
And this specification then could be

268
00:11:37.670 --> 00:11:38.670 
implemented by

269
00:11:40.270 --> 00:11:42.639 
whoever likes to implement it, so there are many

270
00:11:42.640 --> 00:11:45.069 
different implementations that are all Jakarta or

271
00:11:45.070 --> 00:11:47.619 
Java EE compliant, like, for example, commercial

272
00:11:47.620 --> 00:11:49.599 
ones and open-source ones.

273
00:11:49.600 --> 00:11:52.239 
So that's the JBoss wildfly server which

274
00:11:52.240 --> 00:11:54.249 
is a free open source implementation.

275
00:11:54.250 --> 00:11:56.109 
But there are also commercial implementations,

276
00:11:56.110 --> 00:11:59.229 
like, for example, IBM, WebSphere or Liberty

277
00:11:59.230 --> 00:12:02.799 
for z/OS. So that is nowadays the

278
00:12:02.800 --> 00:12:05.349 
new Jakarta EE server by IBM

279
00:12:05.350 --> 00:12:08.079 
is the Liberty, which is available

280
00:12:08.080 --> 00:12:10.659 
in the open version for all platforms called Open

281
00:12:10.660 --> 00:12:13.959 
Liberty. And there's also Liberty

282
00:12:13.960 --> 00:12:17.019 
for z/OS, which is a licensed product.

283
00:12:17.020 --> 00:12:19.569 
And besides this, of course, Java is

284
00:12:19.570 --> 00:12:21.729 
more than just the official specifications.

285
00:12:21.730 --> 00:12:24.699 
There's the Java ecosystem around,

286
00:12:24.700 --> 00:12:27.579 
which is a huge ecosystem of open source

287
00:12:27.580 --> 00:12:30.159 
tools and projects that over the decades

288
00:12:30.160 --> 00:12:32.559 
evolved around the Java language.

289
00:12:32.560 --> 00:12:34.179 
There are different IDEs.

290
00:12:34.180 --> 00:12:36.249 
There are all these projects from the Apache

291
00:12:36.250 --> 00:12:38.619 
Foundation. There's the Eclipse and the Eclipse

292
00:12:38.620 --> 00:12:41.379 
Foundation with all the projects, for example,

293
00:12:41.380 --> 00:12:43.119 
JUnit is a very common tool.

294
00:12:43.120 --> 00:12:45.219 
We have the spring framework, we have the play

295
00:12:45.220 --> 00:12:47.769 
framework and we have other languages for the

296
00:12:47.770 --> 00:12:50.379 
JVM and so on. So becoming a Java

297
00:12:50.380 --> 00:12:52.719 
developer involves not only the knowledge of the

298
00:12:52.720 --> 00:12:55.779 
language but also the knowledge of the ecosystem

299
00:12:55.780 --> 00:12:58.479 
around. And in what follows,

300
00:12:58.480 --> 00:13:01.059 
we will have a short view on Java and

301
00:13:01.060 --> 00:13:03.699 
later on have a view on Java or Jakarta EE

302
00:13:03.700 --> 00:13:06.279 
as a platform for implementing

303
00:13:06.280 --> 00:13:09.579 
transactional business applications.

304
00:13:09.580 --> 00:13:12.399 
Not only on the mainframe but, of course,

305
00:13:12.400 --> 00:13:14.830 
playing an important role on the mainframe.

306
00:13:16.270 --> 00:13:17.270 
Thank you very much.
