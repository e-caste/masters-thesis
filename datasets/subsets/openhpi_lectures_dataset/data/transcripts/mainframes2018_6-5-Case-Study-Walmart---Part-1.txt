WEBVTT

1
00:00:00.400 --> 00:00:04.530 
Okay hi guys, and thank you very much for taking your precious

2
00:00:04.530 --> 00:00:08.540 
time to contribute to our mainframe MOOC in Germany.

3
00:00:09.310 --> 00:00:13.340 
It was really great to have you both on our enterprise computing

4
00:00:13.340 --> 00:00:15.880 
conference in April this year in Hamburg.

5
00:00:17.270 --> 00:00:22.540 
Your keynote and especially your workshop inspired us to ask you

6
00:00:22.770 --> 00:00:28.030 
some questions and telling something about your success story here, and

7
00:00:28.290 --> 00:00:32.700 
to the contribution for MOOC. My name is Wolfram Greis I am the

8
00:00:32.890 --> 00:00:37.560 
host of this session and I'm from the European Mainstream Academy.

9
00:00:38.080 --> 00:00:42.110 
Randy, who are you? My name is Randy Frerking and I'm a distinguished

10
00:00:42.110 --> 00:00:46.280 
engineer at Walmart. I work on the z/OS cloud and enterprise services team.

11
00:00:46.600 --> 00:00:47.770 
My responsibility is

12
00:00:48.630 --> 00:00:51.990 
engineering, architecting the the z/OS cloud

13
00:00:51.990 --> 00:00:55.190 
environment as well as developing and writing the

14
00:00:55.660 --> 00:00:56.910 
z/OS cloud services. Rich. who are you?

15
00:01:01.770 --> 00:01:05.190 
So hi I'm Rich Jackson.

16
00:01:06.210 --> 00:01:12.020 
I'm a principal systems engineer on the same team as Randy, so

17
00:01:12.620 --> 00:01:16.130 
my responsibilities include pretty much the same thing.

18
00:01:16.970 --> 00:01:21.770 
I'm looking at pressing z/OS and a cloud model

19
00:01:22.270 --> 00:01:25.240 
for Walmart's environment. Okay

20
00:01:26.470 --> 00:01:29.710 
thank you very much and I also want to thank you very much

21
00:01:29.710 --> 00:01:34.900 
for letting us also use parts of your redbook videos in our MOOC.

22
00:01:35.180 --> 00:01:39.240 
And concerning these videos, we've got a few questions.

23
00:01:39.970 --> 00:01:44.490 
before says videos and the lone set you ever watched around

24
00:01:44.790 --> 00:01:48.390 
two hundred million transactions a day in 2007.

25
00:01:48.820 --> 00:01:52.770 
In 2011, you reach five hundred million a day

26
00:01:53.350 --> 00:01:58.070 
and in 2017, you had seven hundred million transactions a day?

27
00:01:58.860 --> 00:02:03.220 
What is the most current number and the highest number of transactions

28
00:02:03.220 --> 00:02:07.650 
you had in one day? That's very good question. We were on

29
00:02:07.670 --> 00:02:09.980 
several different parallels Sysplexes for

30
00:02:10.470 --> 00:02:13.900 
enterprise and cloud services. We run a Parallel Sysflex for

31
00:02:14.460 --> 00:02:18.380 
our US stores, a parallel Sysplex for international and we run

32
00:02:18.380 --> 00:02:21.010 
two decade Parallel Sysplex for cloud services.

33
00:02:21.420 --> 00:02:25.410 
All combined we average around seven hundred to seven twenty

34
00:02:25.410 --> 00:02:27.810 
million transactions a day- kind of ranges daily.

35
00:02:28.260 --> 00:02:31.520 
But last year we did have a day where we exceeded seven hundred

36
00:02:31.520 --> 00:02:33.850 
and fifty million transactions combined across

37
00:02:34.340 --> 00:02:38.320 
all of those SYsplexes. Our cloud plexes typically

38
00:02:38.320 --> 00:02:41.140 
run about, I think, Rich one hundred and fifty million transactions

39
00:02:41.140 --> 00:02:42.260 
a day or something like that.

40
00:02:43.500 --> 00:02:46.910 
Well probably a little more than that but yeah about a hundred

41
00:02:46.910 --> 00:02:51.450 
fifty let's say average. Okay and and we created those Sysplexes

42
00:02:51.450 --> 00:02:54.390 
I believe in 2014, was it?

43
00:02:55.020 --> 00:02:55.870 
For the cloudplex?

44
00:02:57.090 --> 00:03:02.250 
2014  was the official establishment date. We started

45
00:03:02.870 --> 00:03:06.260 
some of the work a little earlier than about twenty thirteen.

46
00:03:06.650 --> 00:03:11.410 
Okay so if you think about it going from zero to over a hundred

47
00:03:11.410 --> 00:03:13.890 
fifty million transactions a day, in our cloud plexes, that's

48
00:03:14.110 --> 00:03:18.480 
quite a big accomplishment. But yeah all total we're hitting

49
00:03:18.860 --> 00:03:21.850 
upwards of seven hundred million and with a

50
00:03:22.910 --> 00:03:24.590 
one day exceeding seven hundred and fifty million.

51
00:03:26.600 --> 00:03:32.750 
Other members and in your videos you also talked about accessing

52
00:03:32.870 --> 00:03:38.020 
unstructured data via VSAM RLS, though the mainframe people

53
00:03:38.050 --> 00:03:41.350 
think we are very accustomed to use structured

54
00:03:41.780 --> 00:03:45.510 
data. What kind of unstructured data do you have?

55
00:03:46.660 --> 00:03:49.720 
That's a very good question. So if you look at the history of services,

56
00:03:50.910 --> 00:03:53.210 
first you had your SOAP services which

57
00:03:53.990 --> 00:03:57.370 
requires XML only. You have to have a whistle web service description

58
00:03:57.370 --> 00:03:58.810 
language to describe the service

59
00:03:59.430 --> 00:04:00.540 
and that requires XML.

60
00:04:01.320 --> 00:04:05.700 
Recently the trend has been to go to REST services for RESTful services.

61
00:04:06.090 --> 00:04:09.950 
Now REST does not imply JSON. Some people think you have to

62
00:04:09.950 --> 00:04:12.570 
run JSON with REST and that couldn't be further from the truth.

63
00:04:13.080 --> 00:04:16.580 
With JSON, you can have any type of payload. You simply check

64
00:04:16.580 --> 00:04:21.210 
the content type or the media type and you can support XML, JSON or

65
00:04:21.990 --> 00:04:26.030 
a copy book or language structure type of data, which is more

66
00:04:26.030 --> 00:04:29.160 
like the mainframe uses. People in the mainframe are more

67
00:04:29.300 --> 00:04:33.280 
comfortable with creating structure type of data in copy books. So you can

68
00:04:33.550 --> 00:04:37.380 
simply check the media or content type to decide which of those

69
00:04:37.380 --> 00:04:41.390 
input have coming in so you can access a single service

70
00:04:41.390 --> 00:04:46.710 
XML, JSON or a text and then process it and then send a response back accordingly

71
00:04:47.150 --> 00:04:51.960 
However you can also process unstructured data. So we created around

72
00:04:52.230 --> 00:04:55.150 
a cloud service called zFam which is a file access manager.

73
00:04:55.330 --> 00:04:58.100 
It's basically a no sequel, key-value object store.

74
00:04:58.750 --> 00:05:04.010 
And we can support XML, JSON or text but also unstructured such

75
00:05:04.010 --> 00:05:08.270 
as gif ,jpeg ,pdf and videos. We put an artificial limit of two

76
00:05:08.270 --> 00:05:11.310 
Gig, but we can stream two Gig videos out of our cloud services.

77
00:05:11.670 --> 00:05:15.530 
These cloud services are hosted in CICS, written in primarily

78
00:05:15.530 --> 00:05:19.680 
assembler and some cobol and all using VSAM. So just shows

79
00:05:19.680 --> 00:05:23.750 
what you can do with the tools that you currently have today on the mainframe.

80
00:05:23.890 --> 00:05:27.950 
You don't need anything extra out of the ordinary simply VSAM

81
00:05:28.530 --> 00:05:31.390 
cobol assembler or java whatever you want to use.

82
00:05:31.780 --> 00:05:35.710 
In CICS and you can handle any type of structured or unstructured data.

83
00:05:36.780 --> 00:05:42.100 
Okay what is the Named Counter Servers you mentioned in your videos?

84
00:05:42.980 --> 00:05:47.530 
Good question. So the named counter is a facility that CICS

85
00:05:47.530 --> 00:05:50.570 
provides. One of several that reside in the coupling facility

86
00:05:50.570 --> 00:05:54.390 
that shared across all servers all L parts within this Sysplex.

87
00:05:54.830 --> 00:05:58.440 
What the named counter does is allow you simply to have a

88
00:05:59.160 --> 00:06:03.390 
repository where you can increment or decrement that primarily increment

89
00:06:03.550 --> 00:06:07.510 
a counter. That is serialized and synchronized across entire plex.

90
00:06:07.980 --> 00:06:11.860 
So you don't have to worry about doing locking, in queuing

91
00:06:12.390 --> 00:06:15.530 
adding or subtracting whatever to a counter and storing in a database

92
00:06:15.860 --> 00:06:19.390 
which does require a lot of overhead. So the counter you simply

93
00:06:19.390 --> 00:06:22.070 
create a name for the counter and the counter can be anything

94
00:06:22.140 --> 00:06:25.540 
like a membership number or an invoice number or whatever kind

95
00:06:25.540 --> 00:06:28.740 
of creative things you  want to use it for. And if you

96
00:06:28.740 --> 00:06:32.180 
look at our redbook, you'll see that we took some non traditional

97
00:06:32.180 --> 00:06:36.460 
approaches for using the name counter but here again whatever the purpose is,

98
00:06:36.750 --> 00:06:40.570 
you simply do a get counter, CICS will increment

99
00:06:40.570 --> 00:06:43.260 
the counter for you. It does the locking, it does incrementation

100
00:06:43.260 --> 00:06:46.660 
for it, it does rewind, the wrapping everything for you- a nice

101
00:06:46.660 --> 00:06:47.660 
little handy API.

102
00:06:50.630 --> 00:06:54.230 
I also learned from your redbooks that you use a GitHub.

103
00:06:54.780 --> 00:06:58.900 
Can everybody access resources from your GitHub and what can be

104
00:06:59.180 --> 00:07:01.320 
accessed from it?

105
00:07:03.520 --> 00:07:07.690 
Excuse me. For the services that Randy has described so far,

106
00:07:08.430 --> 00:07:11.900 
each of those are available on GitHub today

107
00:07:12.340 --> 00:07:13.560 
on the public GitHub.

108
00:07:14.540 --> 00:07:21.880 
So if you go to GitHub.com/Walmartlabs/

109
00:07:22.180 --> 00:07:25.860 
do a search on  ZapSplat

110
00:07:26.770 --> 00:07:34.010 
or Zap Wildcard, you'll see our services. So the id generator

111
00:07:34.020 --> 00:07:39.810 
as well as  Zfam as well as a caching solution

112
00:07:40.210 --> 00:07:41.520 
is all available.

113
00:07:43.270 --> 00:07:47.810 
We have been working through the process of

114
00:07:49.030 --> 00:07:51.470 
being able to track traverse,

115
00:07:52.700 --> 00:07:58.180 
traditional episodic code based cobol assimilotor based

116
00:07:59.150 --> 00:08:03.430 
code, code bases with was available through

117
00:08:04.160 --> 00:08:08.740 
GitHub, for example. The cool thing is that the

118
00:08:09.190 --> 00:08:13.560 
GitClient, it's available z/OS from rocket software.

119
00:08:14.820 --> 00:08:18.740 
Allows us to pretty easily traverse that

120
00:08:21.620 --> 00:08:28.070 
translation from absolutic code base to an Ascii code base, right.

121
00:08:29.650 --> 00:08:32.390 
It's been a challenge for a while but

122
00:08:33.460 --> 00:08:38.150 
we've developed a process that allows us to

123
00:08:40.060 --> 00:08:44.700 
take that cobol code base and that code base

124
00:08:44.950 --> 00:08:51.410 
and directly port it to USS in the US which gives us a direct

125
00:08:51.420 --> 00:08:53.500 
pipeline into GitHub.

126
00:08:54.360 --> 00:08:59.620 
Whether it's a you know, for us we internally we host our own GitHub

127
00:08:59.790 --> 00:09:03.530 
internally which is separate from the public GitHub.

128
00:09:03.970 --> 00:09:08.280 
But we can also push that same code base into the public GitHub

129
00:09:08.280 --> 00:09:12.610 
and we have done that. So anyone that would like to look

130
00:09:12.610 --> 00:09:18.270 
at our code base- the cobol, the assembler, the JCL, any of that information

131
00:09:19.140 --> 00:09:22.890 
available with the services that we've developed so far

132
00:09:23.550 --> 00:09:29.080 
is available in GitHub.com/walmartlabs. So I would encourage

133
00:09:29.090 --> 00:09:34.840 
anyone listening to this to go at least go out and check out the code,

134
00:09:35.570 --> 00:09:39.190 
and you know, see if you can learn anything from it.

135
00:09:39.710 --> 00:09:43.790 
But even beyond that go ahead and clone it. You know or fork it.

136
00:09:44.640 --> 00:09:47.640 
And try to use it in your

137
00:09:49.330 --> 00:09:56.210 
organization and you know submit or pour question or anything. Any type of

138
00:09:57.410 --> 00:10:03.100 
collaboration we can achieve from our code base to how any

139
00:10:03.100 --> 00:10:09.020 
individual user might use it we strongly encourage that. So

140
00:10:09.930 --> 00:10:14.960 
so yeah add something to, is we'll be adding new versions of

141
00:10:14.960 --> 00:10:18.080 
these services out there this coming year 2019. We've

142
00:10:18.080 --> 00:10:21.960 
added several enhancements to each of these services. The unique

143
00:10:21.960 --> 00:10:25.010 
ID generator we've add a way to batch up thousands at a time

144
00:10:25.010 --> 00:10:28.920 
in a single request. In Z fam we've created a what's called

145
00:10:28.920 --> 00:10:32.910 
a copy wall replicate feature. We've added event control process.

146
00:10:32.910 --> 00:10:35.640 
So there's a lot of new features we're adding. As Rich

147
00:10:35.640 --> 00:10:38.090 
said, go out there today it's available.

148
00:10:38.700 --> 00:10:43.220 
Look at it, you know fork it, download it, process it you know.

149
00:10:43.220 --> 00:10:44.980 
And and learn from it and then

150
00:10:45.700 --> 00:10:49.740 
if there's anything you want to attribute back to it for improvements let us know.

151
00:10:49.960 --> 00:10:52.560 
But also to watch for new versions because the new versions

152
00:10:52.560 --> 00:10:53.100 
are pretty cool.
