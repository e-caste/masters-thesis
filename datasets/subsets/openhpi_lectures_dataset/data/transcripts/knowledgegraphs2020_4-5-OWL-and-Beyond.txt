WEBVTT

1
00:00:00.400 --> 00:00:05.590 
Welcome to knowledge graphs lecture four
knowledge representation with ontologies.

2
00:00:05.950 --> 00:00:09.510 
Now in this lecture we
are going to look into

3
00:00:09.960 --> 00:00:13.420 
a little bit more detail
on owl and then beyond.

4
00:00:14.870 --> 00:00:18.880 
So we are still on the semantic
web technology stack on the

5
00:00:18.880 --> 00:00:21.140 
OWL RDFS SKOS layer.

6
00:00:23.080 --> 00:00:27.790 
So now we are going to talk about
the OWL property relationships.

7
00:00:27.790 --> 00:00:31.210 
But previously we were talking
about the classes. So now we

8
00:00:31.210 --> 00:00:33.990 
are going to start with the
property hierarchies.

9
00:00:34.410 --> 00:00:38.900 
So how these how can these
things be defined in OWL.

10
00:00:39.460 --> 00:00:43.840 
So they can be created so property
hierarchies can be created

11
00:00:43.840 --> 00:00:49.380 
with a with the help of specializations.
So we can use the RDFS sub-property of.

12
00:00:49.780 --> 00:00:53.830 
And then for the inverse properties
we can define it with the

13
00:00:53.830 --> 00:00:59.290 
help of OWL inverse of and for the
identical properties we can say OWL

14
00:00:59.400 --> 00:01:02.650 
equivalent property. So let
us look at some example.

15
00:01:03.090 --> 00:01:09.110 
So here we have is made of which is an
OWL object property which means the

16
00:01:09.220 --> 00:01:12.430 
range of this property
is a class.

17
00:01:13.060 --> 00:01:18.740 
Then is made of RDFS
sub-property of consists of.

18
00:01:20.210 --> 00:01:24.560 
Now we define the example of
inverse of. So for example we

19
00:01:24.560 --> 00:01:30.780 
have a property reads and then this
reads is the inverse property of

20
00:01:30.980 --> 00:01:36.480 
is read by and then similarly
composed composed of is the

21
00:01:36.480 --> 00:01:39.240 
equivalent property
of consist of.

22
00:01:40.570 --> 00:01:44.860 
And you can see actually also
the how we can define them

23
00:01:44.860 --> 00:01:48.990 
in the in the form of description
logic at the bottom of the slides.

24
00:01:49.840 --> 00:01:54.820 
We have further more property
relationships such as transitive

25
00:01:54.820 --> 00:01:58.190 
property. So what happens in the
transitive property is that

26
00:01:58.190 --> 00:02:03.650 
a is a part of b and b is a
part of c which means that

27
00:02:04.320 --> 00:02:09.720 
it will also hold that a is a part
of c. This is what we define

28
00:02:09.720 --> 00:02:12.260 
with the help of OWL
transitive property.

29
00:02:13.120 --> 00:02:16.340 
Then we have symmetric
properties where a

30
00:02:16.880 --> 00:02:20.940 
is a neighbor of b and
which can also say

31
00:02:21.420 --> 00:02:26.300 
b is a neighbor of a. So such
kind of properties in which the

32
00:02:26.310 --> 00:02:31.720 
places of the individuals can be reversed
are called symmetric properties.

33
00:02:32.700 --> 00:02:37.290 
Then we have the functional properties
where we can say something like

34
00:02:37.950 --> 00:02:43.900 
if a has a mother b and a has a
mother c then it will also hold

35
00:02:43.920 --> 00:02:45.700 
that b is equal to c.

36
00:02:46.700 --> 00:02:51.340 
Similarly we can have also the
inverse functional properties

37
00:02:51.340 --> 00:02:55.070 
where we see we say that
b is mother of a,

38
00:02:55.760 --> 00:03:00.980 
c is mother of a which means
b would also be equal to c.

39
00:03:03.780 --> 00:03:09.190 
Now we have more examples on the
transitive properties. So for example

40
00:03:09.430 --> 00:03:14.040 
here how can we define that this
property is transitive without

41
00:03:14.490 --> 00:03:18.990 
implicitly reasoning over these
properties. I will tell you

42
00:03:18.990 --> 00:03:25.490 
what I mean by that. So is published
before here we can explicitly say that

43
00:03:25.780 --> 00:03:29.940 
OWL transitive property
actually helps in saying

44
00:03:29.940 --> 00:03:34.080 
that is published before is
the transitive property and

45
00:03:34.580 --> 00:03:40.310 
you can also see it through the example
that animal farm is published before

46
00:03:40.410 --> 00:03:45.650 
nineteen eighty four and brave world
is published before animal farm,

47
00:03:46.030 --> 00:03:50.340 
which would actually mean by we
can do this by inference that

48
00:03:50.340 --> 00:03:53.630 
brave world is published
before nineteen eighty four.

49
00:03:56.740 --> 00:04:03.260 
Then we have more more property relationships.
So we have asymmetric properties where

50
00:04:03.620 --> 00:04:10.140 
you cannot reverse the reverse the
individuals in the property for example

51
00:04:10.710 --> 00:04:16.760 
is if we take the example is left
of means a is left of b then

52
00:04:17.240 --> 00:04:22.250 
b is left of a - is not possible.
So these kind of properties

53
00:04:22.250 --> 00:04:25.640 
are called the asymmetric
properties and are defined in OWL

54
00:04:25.640 --> 00:04:28.370 
with the help of OWL
asymmetric property.

55
00:04:29.910 --> 00:04:32.910 
Then we have the risk reflexive
property which connect to

56
00:04:32.910 --> 00:04:38.400 
themselves. So x is related to
itself. This defines also a cycle.

57
00:04:38.880 --> 00:04:43.720 
So here we can also define them
as OWL reflexive property.

58
00:04:44.020 --> 00:04:50.090 
Then we have a irreflexive property
where you have x is parent of y.

59
00:04:50.740 --> 00:04:57.040 
And then x cannot be equal to y because
x cannot be parent of itself.

60
00:04:59.630 --> 00:05:04.050 
So now we are going to talk about
disjunctive properties where

61
00:05:04.050 --> 00:05:09.120 
two if we have two properties r
and s and we want to say that

62
00:05:09.120 --> 00:05:13.940 
they are just disjunctive properties.
So when does this actually happen?

63
00:05:14.160 --> 00:05:20.400 
If two individuals x and y are never
related via both the properties.

64
00:05:20.830 --> 00:05:25.830 
So if we have so here we have
the example of the property

65
00:05:25.970 --> 00:05:31.140 
has parent and has child. So
x will if x is related to

66
00:05:31.140 --> 00:05:35.260 
y with x has parent y then he
cannot be related with the

67
00:05:35.270 --> 00:05:41.560 
property has child means x cannot
cannot have this property with y.

68
00:05:42.020 --> 00:05:47.300 
So here we can define these
disjunctive properties

69
00:05:47.300 --> 00:05:50.230 
with the help of OWL
property disjoint with.

70
00:05:51.660 --> 00:05:56.340 
And then we have one shortcut for
defining disjunctive properties

71
00:05:56.340 --> 00:06:01.800 
if we have more than one then we can
use a we can use the parentheses

72
00:06:01.800 --> 00:06:03.830 
for this and we
can say that

73
00:06:04.460 --> 00:06:10.540 
we can use it with with the keyword OWL,
all disjoint properties. And then with

74
00:06:10.750 --> 00:06:14.640 
OWL members we can define all
the members all the properties

75
00:06:14.950 --> 00:06:16.550 
which are disjoint
to each other.

76
00:06:17.200 --> 00:06:21.090 
So we have has parent, has
child and grandchild.

77
00:06:23.420 --> 00:06:28.450 
Now we come towards negated
property instantiation.

78
00:06:29.450 --> 00:06:33.690 
So two individual can explicitly
be defined to be not related

79
00:06:33.690 --> 00:06:37.630 
with each other with the
help of with the help

80
00:06:37.630 --> 00:06:42.650 
of a given property. For example
we can explicitly say that

81
00:06:42.650 --> 00:06:47.660 
George Orwell is not a
brother of Aldous Huxley.

82
00:06:48.200 --> 00:06:54.520 
And we can do that by giving this a
giving OWL negative property assertion

83
00:06:55.000 --> 00:06:59.930 
over these two these two
individuals or entities. And the

84
00:06:59.930 --> 00:07:03.790 
assertion property will be used
to say that this negative

85
00:07:03.790 --> 00:07:08.220 
property assertion is on this
property. Here you can you said

86
00:07:08.230 --> 00:07:10.180 
we say it for
is brother.

87
00:07:12.840 --> 00:07:17.100 
Now we are moving towards more
complex properties OWL properties.

88
00:07:17.110 --> 00:07:22.970 
So we have OWL property chaining. So
here we have more complex roles, so

89
00:07:23.700 --> 00:07:27.710 
we can simply for example say
in the transitive property as

90
00:07:27.710 --> 00:07:32.050 
you saw before thus that has
a friend b has a friend

91
00:07:32.050 --> 00:07:35.890 
c than by transitivity we
can say a has a friend

92
00:07:36.350 --> 00:07:44.830 
c. However if we have one person
that is a has a friend b has foe c

93
00:07:45.160 --> 00:07:48.590 
here we cannot say
that a has foe c.

94
00:07:49.670 --> 00:07:52.660 
So this cannot be expressed
here, however in

95
00:07:53.240 --> 00:07:57.090 
FOL in first order logic
this can be presented

96
00:07:57.920 --> 00:08:02.800 
with the help of has friends
foe, but this is not the same

97
00:08:02.800 --> 00:08:04.500 
property as has friend.

98
00:08:05.560 --> 00:08:09.360 
So for doing this we move
towards property chaining.

99
00:08:10.170 --> 00:08:14.970 
So here you can define this property
chaining in OWL as follows:

100
00:08:14.980 --> 00:08:18.400 
so you can use the word OWL
property chain axiom.

101
00:08:18.890 --> 00:08:22.620 
So you have has friend and has
foe and this is one of the

102
00:08:22.620 --> 00:08:26.830 
chains of the property. And
of course as I as I show

103
00:08:26.830 --> 00:08:30.240 
as I showed you before
that when you have

104
00:08:30.700 --> 00:08:35.030 
a has friend b has foe
c you can write it as

105
00:08:35.760 --> 00:08:37.710 
a has friend foe c.

106
00:08:41.570 --> 00:08:45.270 
And this is proper this property
chaining is only allowed for

107
00:08:45.270 --> 00:08:48.730 
the object properties, not for
the data type properties.

108
00:08:49.580 --> 00:08:55.330 
Now we move towards a little bit more complex
constructs like qualified number restrictions.

109
00:08:56.520 --> 00:09:01.430 
So here we have class
constructor class constructors

110
00:09:01.430 --> 00:09:06.120 
with number restrictions on properties
connected with the range constant.

111
00:09:06.590 --> 00:09:11.300 
So here the qualified number
restrictions can be

112
00:09:11.300 --> 00:09:15.740 
given with the help of OWL
min qualified cardinality

113
00:09:16.250 --> 00:09:20.800 
and then this qualified
cardinality is on the

114
00:09:20.800 --> 00:09:24.820 
class best seller. So what is
happening actually in this batch of

115
00:09:25.160 --> 00:09:31.270 
OWL code that you see here is that
the successful author has to has

116
00:09:31.720 --> 00:09:33.580 
minimum one
best seller.

117
00:09:34.230 --> 00:09:38.320 
Similarly the qualified number
restrictions can also be defined

118
00:09:38.320 --> 00:09:41.460 
with the help of OWL max
qualified cardinality,

119
00:09:42.110 --> 00:09:46.740 
OWL min qualified cardinality
and then you have qualified

120
00:09:46.740 --> 00:09:47.960 
cardinality.

121
00:09:50.720 --> 00:09:55.070 
Moreover we can also have reflexive
property restrictions, so

122
00:09:55.070 --> 00:09:58.610 
reflective properties are those
which are in which the classes

123
00:09:58.610 --> 00:10:02.490 
or the individuals in the classes
are related to themselves.

124
00:10:03.260 --> 00:10:09.720 
So then here we have one example for
example philosopher is a class.

125
00:10:09.990 --> 00:10:17.110 
Here he knows himself. So this
can be defined in owl has self.

126
00:10:17.940 --> 00:10:21.710 
So this is a little bit more
philosophical that he knows himself

127
00:10:21.710 --> 00:10:27.170 
means he knows how he is and
he knows about himself. He

128
00:10:27.170 --> 00:10:29.770 
has a reflection
over himself. So

129
00:10:30.940 --> 00:10:35.090 
now the point is we have seen
all about the properties that

130
00:10:35.100 --> 00:10:39.060 
we can define all about the complex
properties that we can define here.

131
00:10:39.690 --> 00:10:45.620 
Where does it stop? Where does this
expressivity of OWL becomes limited?

132
00:10:46.910 --> 00:10:52.190 
So whenever we move from as I said in
the beginning of previous lecture that

133
00:10:52.660 --> 00:10:56.890 
whenever we go for more
expressivity, the complexity also

134
00:10:56.890 --> 00:11:02.250 
increases and then this may also
lead to undecidability which

135
00:11:02.250 --> 00:11:06.240 
is the case in which is the
case with first-order logic.

136
00:11:06.630 --> 00:11:11.430 
So do we need more expressivity
than OWL DL offers?

137
00:11:12.290 --> 00:11:17.560 
So let's see if we need or we don't.
So consider the following example:

138
00:11:17.840 --> 00:11:22.170 
a squanderer is a person whose
expenses are higher than the income.

139
00:11:22.620 --> 00:11:25.880 
So how can we represent this in
the form of description logic?

140
00:11:26.440 --> 00:11:31.980 
So here you have squanderer is a
person, squanderer has expenses

141
00:11:32.620 --> 00:11:37.460 
squanderer has income. But this
doesn't exactly reflect what we

142
00:11:37.460 --> 00:11:39.890 
are saying in the
in this example.

143
00:11:40.870 --> 00:11:48.080 
So what do we need? So we need a constructor
to combine classes and properties.

144
00:11:48.390 --> 00:11:52.210 
So we have the problem here
is we want to mix the Tbox

145
00:11:52.210 --> 00:11:53.290 
and the Abox.

146
00:11:54.710 --> 00:11:58.410 
So in the first order logic if
we try to define the same

147
00:11:58.900 --> 00:12:04.490 
same given information so you
have a person, person x

148
00:12:04.750 --> 00:12:08.920 
and x has an income
y, x has expense z

149
00:12:09.460 --> 00:12:14.200 
and z should be greater than
y which implies that this

150
00:12:14.200 --> 00:12:16.030 
person is a squanderer.

151
00:12:17.250 --> 00:12:21.960 
So in the arithmetics
can be part of rules

152
00:12:21.960 --> 00:12:26.060 
and modeled like a predicate. So
z is greater than y and then

153
00:12:26.510 --> 00:12:30.540 
here you can actually give
the interpretation of what

154
00:12:30.540 --> 00:12:34.690 
I just said z is greater than
y. So it definitely means we

155
00:12:34.690 --> 00:12:37.790 
need more expressivity than
what OWL has to offer.

156
00:12:39.780 --> 00:12:44.130 
So now in the next lecture you
are going to see how to create

157
00:12:44.170 --> 00:12:45.380 
your own ontology.
