WEBVTT

1
00:00:00.540 --> 00:00:03.780 
In this excursion we want
to discuss the importance

2
00:00:04.010 --> 00:00:08.340 
of the password lengths for
the security of passwords.

3
00:00:09.510 --> 00:00:13.690 
The length of a password
is of great impact

4
00:00:14.350 --> 00:00:18.950 
on the password strengths, on
the security of a password

5
00:00:19.180 --> 00:00:22.470 
and on the efficiency
of password attacks.

6
00:00:24.150 --> 00:00:27.430 
You remember we gave a lot of
advice when we discussed the

7
00:00:27.430 --> 00:00:32.830 
password how to choose a good
password. We said it should be

8
00:00:32.830 --> 00:00:38.310 
case sensitive, so that from each
letter we have two versions -

9
00:00:38.310 --> 00:00:43.940 
a small one the big one,
we recommended to use

10
00:00:43.940 --> 00:00:47.940 
different character classes
so the letters, the digits

11
00:00:47.940 --> 00:00:52.950 
the special characters, we said
that minimal length should be

12
00:00:52.950 --> 00:00:57.030 
ten, better twelve or
more characters,

13
00:00:57.600 --> 00:01:01.120 
we recommended not to select
passwords from user

14
00:01:01.120 --> 00:01:05.560 
context and dictionary and
not to use old passwords

15
00:01:05.780 --> 00:01:09.860 
that have already been used.
But what is the reason

16
00:01:10.680 --> 00:01:15.410 
for that recommendations? And
this is what we want to look

17
00:01:15.410 --> 00:01:20.140 
now. Reason is there is an
attack a brute force attack

18
00:01:20.610 --> 00:01:24.140 
that can be performed
by every attacker

19
00:01:24.460 --> 00:01:28.670 
and there is no mean to prevent
attackers to perform the attack.

20
00:01:29.250 --> 00:01:34.320 
So brute force
follows a

21
00:01:34.320 --> 00:01:39.090 
simple idea to try each possible
combination of characters

22
00:01:39.430 --> 00:01:43.250 
in a given search space. It

23
00:01:43.460 --> 00:01:49.040 
is the number is the
space consisting of the

24
00:01:49.340 --> 00:01:53.100 
characters which are
allowed to form password.

25
00:01:53.440 --> 00:01:59.200 
So the search space is the character
count so the number of the

26
00:01:59.200 --> 00:02:04.690 
the size of the alphabet the
password can be performed

27
00:02:04.990 --> 00:02:10.140 
up to the passport lengths character
round up to the password

28
00:02:10.150 --> 00:02:15.040 
length. For example if
we are allowed to use

29
00:02:15.470 --> 00:02:19.950 
two digits zero and one
to form passwords,

30
00:02:20.390 --> 00:02:23.350 
then the search
space for

31
00:02:23.610 --> 00:02:27.350 
such digit passwords

32
00:02:27.590 --> 00:02:33.830 
of length ten is two characters
zero one up to ten.

33
00:02:37.050 --> 00:02:42.130 
With such a brute force attack,
one can definitely recover each

34
00:02:42.130 --> 00:02:47.090 
password. One can do it
even if the password

35
00:02:47.140 --> 00:02:51.360 
is hashed, the reason is
attacker needs time,

36
00:02:51.790 --> 00:02:56.540 
needs enough time to perform this
attack and to come to a successful

37
00:02:56.540 --> 00:03:00.780 
end. So the average mean
to find such a password

38
00:03:01.030 --> 00:03:05.180 
is the search space is a
half of the search space

39
00:03:05.710 --> 00:03:09.760 
so after search space
divided by two

40
00:03:09.980 --> 00:03:13.860 
tries in the mean of
the password is found

41
00:03:14.140 --> 00:03:17.020 
in such a brute
force attack.

42
00:03:18.590 --> 00:03:23.090 
Now to defeat brute force
attacks, the search space

43
00:03:23.280 --> 00:03:29.280 
should be as large as possible.
And now you see here up

44
00:03:29.280 --> 00:03:33.070 
to the password length now you
see exactly the point where

45
00:03:33.070 --> 00:03:35.870 
the length of the
password plays a role.

46
00:03:36.670 --> 00:03:40.940 
So ideally the
requirement for

47
00:03:40.950 --> 00:03:44.000 
such a brute force attack
is infinite time

48
00:03:44.210 --> 00:03:48.350 
so that the user can be quite
sure that brute force

49
00:03:48.540 --> 00:03:49.390 
is not possible. Let's

50
00:03:52.350 --> 00:03:56.760 
look at an example and let's try
to calculate such a search space

51
00:03:56.770 --> 00:04:02.570 
and the time that's needed. So
lets assume that passwords

52
00:04:02.910 --> 00:04:07.530 
are consisting on lower
case letters and digits.

53
00:04:08.520 --> 00:04:12.180 
Lower case letters in
our alphabet there are

54
00:04:12.180 --> 00:04:15.720 
26 different possible

55
00:04:15.720 --> 00:04:20.130 
characters and digits of
course there are ten

56
00:04:20.320 --> 00:04:25.720 
possible characters. Now
we can compute the

57
00:04:25.930 --> 00:04:31.540 
search space for
such passwords

58
00:04:31.540 --> 00:04:35.400 
formed out of such
type of characters.

59
00:04:35.830 --> 00:04:41.720 
So we have the search
space steps 36 different

60
00:04:41.720 --> 00:04:47.780 
characters we can
choose. So when we

61
00:04:48.110 --> 00:04:51.400 
allow passwords to
have length one,

62
00:04:52.460 --> 00:04:55.150 
then there are 36
possibilities.

63
00:04:56.610 --> 00:05:01.120 
We can take any one of
the small characters

64
00:05:01.620 --> 00:05:05.760 
and we have lower case
letters and we can

65
00:05:05.760 --> 00:05:12.170 
choose out of the ten possible characters.
When we assume that we have a

66
00:05:12.170 --> 00:05:17.380 
machine that's able to search
that's able to perform

67
00:05:17.560 --> 00:05:21.590 
hundred billion
passwords

68
00:05:21.850 --> 00:05:27.740 
in a second forming by testing
all the combinations,

69
00:05:28.160 --> 00:05:32.660 
then password
lengths to perform

70
00:05:32.910 --> 00:05:36.750 
successfully brute force attacks
to a password of length one

71
00:05:36.950 --> 00:05:40.980 
is smaller and
0.00 seconds.

72
00:05:42.430 --> 00:05:47.220 
You see when we increase
the passport length

73
00:05:47.810 --> 00:05:51.290 
then we have
36 times 36

74
00:05:51.530 --> 00:05:54.470 
36 to the power of 2

75
00:05:54.930 --> 00:05:57.950 
different possibilities
that need to be checked

76
00:05:58.360 --> 00:06:03.320 
and of course there
is an this is

77
00:06:03.680 --> 00:06:08.440 
1,296 and even here with
such type of machine

78
00:06:08.450 --> 00:06:12.810 
that is able to test a
hundred billion passwords

79
00:06:13.140 --> 00:06:17.330 
per second, we need to only a fraction
of a second for computation.

80
00:06:18.160 --> 00:06:20.970 
If we allow passwords
of length three

81
00:06:21.810 --> 00:06:25.210 
then now from instead
of one thousand

82
00:06:25.680 --> 00:06:29.010 
we have 46,000 different
possibilities

83
00:06:29.350 --> 00:06:34.020 
that need to be checked but
also this not so needed

84
00:06:34.030 --> 00:06:36.550 
by such a machine
there is no problem.

85
00:06:38.190 --> 00:06:42.750 
Password length 4, password
length 5, password length 6,

86
00:06:42.810 --> 00:06:45.850 
password length 7,
password length 8,

87
00:06:46.090 --> 00:06:50.630 
password length 9. Let's
go back to nine,

88
00:06:51.110 --> 00:06:55.030 
then we you see this amount
of possibilities is already

89
00:06:55.030 --> 00:06:58.520 
become difficult to
mention it and here

90
00:06:58.720 --> 00:07:03.600 
with such a machine with
hundred billion passwords

91
00:07:03.990 --> 00:07:10.730 
to be tested in a second
it needs almost 17

92
00:07:10.730 --> 00:07:16.160 
minutes to compute. Then if
we take one more character

93
00:07:16.680 --> 00:07:20.350 
we have to multiply
this with 36

94
00:07:20.790 --> 00:07:25.590 
then the times that is needed is
already more than ten hours.

95
00:07:26.320 --> 00:07:29.780 
So you see with each
additional character,

96
00:07:30.330 --> 00:07:33.960 
there is not a factor
a small factor,

97
00:07:34.390 --> 00:07:39.060 
it is an exponential
increase 36 times 36

98
00:07:39.180 --> 00:07:43.730 
and so on and so on so that the
time now is increasing very

99
00:07:43.730 --> 00:07:50.330 
much. In reality we have
much more characters.

100
00:07:50.550 --> 00:07:55.680 
We can not only work with
36 we have lowercase

101
00:07:55.680 --> 00:07:59.370 
letter upper case letters
we can additionally

102
00:07:59.380 --> 00:08:05.950 
take all the special characters. So
the factor which is exponentially

103
00:08:06.260 --> 00:08:12.440 
increasing is much
larger. Now in practice

104
00:08:12.820 --> 00:08:15.630 
you remember that
attackers are able

105
00:08:15.980 --> 00:08:21.330 
to steal user databases and
in the user database on

106
00:08:21.330 --> 00:08:25.520 
side of the service provider,
the password is not stored

107
00:08:25.870 --> 00:08:29.760 
in clear text, the
password is stored in

108
00:08:29.970 --> 00:08:36.170 
a hash value. So in the real
world we have to in the brute

109
00:08:36.170 --> 00:08:39.490 
force attack one has
to check, try out

110
00:08:39.700 --> 00:08:44.260 
character combination and
then one has to apply

111
00:08:44.460 --> 00:08:49.800 
the hash function to this. So for
each of the generated passwords

112
00:08:49.800 --> 00:08:56.920 
one has to apply a hash function. And
then one can compare the computed hash

113
00:08:57.020 --> 00:09:01.290 
with the given hash and then one
can conclude whether the password

114
00:09:01.290 --> 00:09:05.740 
is the right one or is not the
right one. Of course the speed of

115
00:09:05.750 --> 00:09:09.140 
brute force attacks
highly depends

116
00:09:09.330 --> 00:09:11.910 
on the calculation speed
of the hash function

117
00:09:12.340 --> 00:09:15.560 
and the calculation
speed for example of

118
00:09:15.810 --> 00:09:19.810 
such small MD5
hash function

119
00:09:20.160 --> 00:09:22.580 
is faster than of
course faster than

120
00:09:22.770 --> 00:09:26.790 
SHA-256 which

121
00:09:26.790 --> 00:09:30.430 
is much more secure,
but we see

122
00:09:30.640 --> 00:09:34.630 
very powerful machines even
this is not a problem.

123
00:09:35.220 --> 00:09:39.570 
Here is a table for the cracking complexity

124
00:09:39.990 --> 00:09:43.630 
for such brute force attacks.

125
00:09:43.840 --> 00:09:50.260 
Here we have the password lengths
here we have the time that is

126
00:09:50.260 --> 00:09:54.430 
needed if the password merely
can be formed from digest.

127
00:09:54.880 --> 00:10:00.530 
Here it's the time
again by our hundred

128
00:10:00.550 --> 00:10:05.350 
billion password
testing

129
00:10:05.940 --> 00:10:09.130 
machine within
second. Here is the

130
00:10:09.330 --> 00:10:12.710 
case which are used the
characters that are used for

131
00:10:12.710 --> 00:10:15.280 
forming the password are
digits and lower cases.

132
00:10:15.870 --> 00:10:22.090 
Here we have alphanumeric
so also the uppercase

133
00:10:22.440 --> 00:10:28.620 
characters, here we have the digits
the lower case the uppercase

134
00:10:28.680 --> 00:10:31.940 
and the special
characters.

135
00:10:32.450 --> 00:10:36.510 
And you see there is
a strong increase

136
00:10:37.150 --> 00:10:42.570 
when we see
increasing size of

137
00:10:42.570 --> 00:10:45.800 
the characters that the
password can be formed.

138
00:10:46.090 --> 00:10:50.290 
For example we assume
we propose that

139
00:10:50.340 --> 00:10:55.370 
password should have lengths
ten then if only digest are

140
00:10:55.390 --> 00:11:00.020 
usable then it's very easy and
it needs one second to perform

141
00:11:00.020 --> 00:11:05.090 
such a brute force attack when
lower case digits and digits

142
00:11:05.090 --> 00:11:07.800 
lower case letters and
digits can be used

143
00:11:08.090 --> 00:11:13.900 
then at least we have ten hours,
we have more than three months

144
00:11:13.900 --> 00:11:20.250 
if we can the alpha numeric
all the lower case uppercase

145
00:11:20.810 --> 00:11:24.970 
letters and the digests and we
have here with lengths ten

146
00:11:25.310 --> 00:11:31.550 
the three months, ten hours,
smaller than one second and if

147
00:11:31.550 --> 00:11:36.820 
we can additionally
use the special

148
00:11:36.820 --> 00:11:42.510 
characters, then this
increases to nineteen years.

149
00:11:43.090 --> 00:11:47.690 
So for a brute force attack with
a machine that is able to test

150
00:11:47.690 --> 00:11:52.210 
hundred billion passwords
in a second, it needs

151
00:11:52.400 --> 00:11:56.460 
more than 90 years
to successfully

152
00:11:56.700 --> 00:11:59.450 
find the password
in the mean

153
00:11:59.700 --> 00:12:03.970 
when you use all the
different characters.

154
00:12:06.010 --> 00:12:11.410 
Then we say better 12 than 10,
then even if only digits

155
00:12:11.410 --> 00:12:15.730 
are allowed it's increased to
11 the brute force attack

156
00:12:15.730 --> 00:12:18.870 
increases in the amount of time
that's needed to eleven second

157
00:12:19.270 --> 00:12:24.380 
but what's interesting
here - if only the

158
00:12:25.450 --> 00:12:30.960 
smaller the lower case

159
00:12:31.910 --> 00:12:36.190 
upper case letters are allowed
and the digits we have already

160
00:12:36.190 --> 00:12:40.040 
more than ten centuries
which are needed

161
00:12:40.480 --> 00:12:45.240 
to perform with such type of machine
a successful brute force attack.

162
00:12:45.840 --> 00:12:49.570 
Almost forever, that is
unimaginable what's needed

163
00:12:49.860 --> 00:12:54.980 
and of course also the energy
that is need to compute this

164
00:12:54.980 --> 00:12:59.190 
runs out of any type
of resources.

165
00:12:59.420 --> 00:13:04.070 
I hope this table
convinces you to use

166
00:13:04.290 --> 00:13:08.910 
long passwords to use
passwords with different

167
00:13:09.160 --> 00:13:13.710 
as much as possible
different characters

168
00:13:14.070 --> 00:13:19.770 
to guarantee that it's difficult to
protect it against such a brute

169
00:13:19.770 --> 00:13:20.320 
force attack.
