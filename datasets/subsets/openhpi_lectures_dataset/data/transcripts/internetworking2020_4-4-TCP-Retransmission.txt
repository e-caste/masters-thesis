WEBVTT

1
00:00:00.000 --> 00:00:05.940 
Speaking about TCP in our openHPI
course - A Half Century of Internet

2
00:00:06.470 --> 00:00:09.100 
we already mentioned
that retransmission

3
00:00:09.660 --> 00:00:16.470 
is the magic word which helps to
understand and to explain how

4
00:00:16.590 --> 00:00:22.930 
it's possible to provide with TCP a
reliable connection-oriented service

5
00:00:23.170 --> 00:00:28.400 
on basis of the IP protocol which
is connectionless and unreliable

6
00:00:28.910 --> 00:00:32.410 
so let's have a closer look what
does retransmission mean and

7
00:00:32.410 --> 00:00:33.350 
how does it work

8
00:00:34.790 --> 00:00:37.290 
in order to mitigate
transmission errors

9
00:00:37.930 --> 00:00:44.390 
broken or lost data packets, TCP
uses the retransmission technique

10
00:00:45.480 --> 00:00:50.740 
and the basis is that the
received TCP transmission

11
00:00:51.200 --> 00:00:56.610 
are acknowledged. Though
the receiver as soon as

12
00:00:56.620 --> 00:00:58.640 
it contains a

13
00:00:58.640 --> 00:01:02.170 
it receives a
TCP message

14
00:01:02.870 --> 00:01:06.990 
it sends back an
acknowledgment to the sender

15
00:01:08.520 --> 00:01:10.080 
so broken packages

16
00:01:10.960 --> 00:01:15.700 
are not acknowledged, if the system
realize the package was damaged

17
00:01:15.920 --> 00:01:21.850 
through its transport through the
internet, then the receiver

18
00:01:21.850 --> 00:01:29.480 
does not acknowledge the package so the
sender thinks package got lost and

19
00:01:29.660 --> 00:01:30.900 
retransmit it

20
00:01:32.230 --> 00:01:36.880 
but the question is how
does a receiver know

21
00:01:37.400 --> 00:01:41.220 
that the TCP message
has been sent to him?

22
00:01:42.150 --> 00:01:48.550 
if it's not arrived, the receiver
cannot acknowledge the message

23
00:01:49.120 --> 00:01:51.070 
so sender is waiting

24
00:01:51.760 --> 00:01:57.180 
does not get an acknowledgment, how to
deal with such kind of situation?

25
00:01:58.960 --> 00:02:02.190 
and the idea here
is to use a timer

26
00:02:03.460 --> 00:02:12.320 
the sender starts a timer in the moment it
sends a data package inside TCP package

27
00:02:12.440 --> 00:02:20.550 
to the receiver and then if the timer expires
before the acknowledgment is received

28
00:02:21.000 --> 00:02:26.770 
then the sender retransmits the
same package and treated this

29
00:02:27.010 --> 00:02:29.510 
as a program or
lost transmission

30
00:02:30.440 --> 00:02:32.700 
so by means of
the sender

31
00:02:33.320 --> 00:02:38.090 
the sender has a
possibility to check

32
00:02:38.630 --> 00:02:45.090 
whether a package is a received
then the receiver sends an

33
00:02:45.090 --> 00:02:49.690 
acknowledgment back to him and if it
arrives to the sender and before the

34
00:02:49.690 --> 00:02:55.340 
timer is over then the sender
knows, ok! the package was

35
00:02:55.350 --> 00:02:59.830 
in a correct forms and to the
receiver and the receiver got it

36
00:03:00.800 --> 00:03:06.490 
when the receiver receives a damaged
package, the receiver does not send

37
00:03:06.700 --> 00:03:10.560 
an acknowledgement in that
case the timer is over

38
00:03:11.220 --> 00:03:15.550 
without getting an acknowledgment of
the package and then the sender

39
00:03:15.870 --> 00:03:19.550 
retransmitted
the package

40
00:03:20.160 --> 00:03:23.400 
if we look here to
an illustration

41
00:03:24.040 --> 00:03:29.840 
then the first message is sent
and the timer is set up

42
00:03:30.530 --> 00:03:34.220 
and if say, his time
is this way here

43
00:03:35.040 --> 00:03:39.040 
and when the acknowledgment
receives the sender

44
00:03:39.520 --> 00:03:45.180 
inside the time
span of the timer

45
00:03:45.460 --> 00:03:49.430 
then it's ok then the package
arrived in good order

46
00:03:50.130 --> 00:03:52.720 
now let's send a
second message

47
00:03:53.620 --> 00:03:55.170 
and now let's assume

48
00:03:55.850 --> 00:04:01.310 
again time is set and now let's
assume the package got lost

49
00:04:03.350 --> 00:04:08.720 
so the receiver does
not contain the

50
00:04:08.720 --> 00:04:11.150 
package, so the receiver
cannot acknowledge it

51
00:04:11.590 --> 00:04:16.570 
and then when the
timer is over then

52
00:04:16.570 --> 00:04:17.330 
uh uh uh uh uh uh uh uh uh uh
uh uh uh uh uh uh uh uh uh uh

53
00:04:17.340 --> 00:04:23.010 
the sender knows, ok, I have to
resend the message 2 because

54
00:04:23.010 --> 00:04:30.220 
message 2 was lost, a new time of
setting and then as a receiver when

55
00:04:30.370 --> 00:04:35.350 
it receives the acknowledgment
inside the time span then its fine

56
00:04:35.770 --> 00:04:42.220 
so in this way sender can control
all the messages which were sent

57
00:04:42.480 --> 00:04:44.890 
arrived receiver
in good order

58
00:04:45.510 --> 00:04:50.280 
eventually a package has to
retransmit several times

59
00:04:50.730 --> 00:04:55.310 
in this retransmission service, the big
question is how to set the timer?

60
00:04:56.770 --> 00:05:02.700 
the timer interval determines the
efficiency of the transport

61
00:05:02.700 --> 00:05:07.450 
of the data through the internet,
so it determines the throughput

62
00:05:08.170 --> 00:05:13.650 
of the network of the internet.
When we come into the local area

63
00:05:13.650 --> 00:05:18.780 
network with a broadcasting mechanism
that it's more reasonable

64
00:05:18.780 --> 00:05:23.610 
to work with a shorter interval
with a shorter timer interval

65
00:05:23.880 --> 00:05:30.410 
when we send data through a wide
area network then we need a longer

66
00:05:30.800 --> 00:05:34.010 
interval so the question is
what is the right setting

67
00:05:34.500 --> 00:05:42.810 
for such timer? So if we look what happens
if free transmission happens too early

68
00:05:43.830 --> 00:05:47.190 
then the internet is flooded
with unnecessary duplicates

69
00:05:47.690 --> 00:05:53.990 
because too early not waiting up to the
moment the acknowledgment is received

70
00:05:54.490 --> 00:05:59.600 
the second time, the same data packet
is sent through the internet

71
00:06:00.200 --> 00:06:05.950 
throughput drops and the receiver
got the same package a second time

72
00:06:06.160 --> 00:06:11.900 
so it's useless and if
retransmission happens too late

73
00:06:13.400 --> 00:06:18.490 
that means timer
interval is too long

74
00:06:19.260 --> 00:06:25.180 
then many messages have to be buffered
so message buffers made overflow

75
00:06:25.490 --> 00:06:31.320 
so in both cases there is
another good situation for the

76
00:06:31.340 --> 00:06:37.740 
for the efficiency of the network so
the timer setting is very important

77
00:06:38.470 --> 00:06:44.460 
and this is exactly the idea of the
so-called adaptive transmission

78
00:06:46.120 --> 00:06:48.790 
there is no time or time
for all situations

79
00:06:49.320 --> 00:06:51.840 
a fixed time interval
does not work

80
00:06:52.470 --> 00:06:54.570 
in all situation
in the right way

81
00:06:55.430 --> 00:07:02.440 
so it makes sense to
introduce such an adaptive

82
00:07:02.450 --> 00:07:05.560 
retransmission method

83
00:07:06.610 --> 00:07:14.460 
so TCP offers a complex adaptive
mechanisms to adapt this timer interval

84
00:07:15.080 --> 00:07:16.310 
and how does it work?

85
00:07:17.570 --> 00:07:23.510 
to this end TCP monitors the so-called
round trip time of a packet

86
00:07:24.290 --> 00:07:30.340 
and round trip time of a packet is the
interval between sending a packet

87
00:07:30.530 --> 00:07:35.720 
to the receiver and receiving the
acknowledgment. From the start

88
00:07:35.930 --> 00:07:41.710 
of sending the packet up to the moment of
receiving the acknowledgment this is the

89
00:07:41.890 --> 00:07:43.760 
round trip time

90
00:07:45.730 --> 00:07:49.160 
this round trip time is not
enough to measure once

91
00:07:49.810 --> 00:07:53.390 
so, the round trip time is
measured for each transmission

92
00:07:54.260 --> 00:07:59.070 
and it's compared with the earlier
measurements during the same connections

93
00:07:59.750 --> 00:08:03.110 
because the situation in
the network can change if

94
00:08:03.110 --> 00:08:07.430 
there is many traffic, the package
need longer a compared to

95
00:08:07.430 --> 00:08:10.730 
a situation where is
no traffic internet

96
00:08:11.500 --> 00:08:18.260 
so the interval is adapted to the
current load of the network and

97
00:08:18.380 --> 00:08:22.650 
the idea is to work with the
moving average and this is the

98
00:08:22.650 --> 00:08:29.100 
smoothed round trip time and we
will see how to compute it

99
00:08:29.860 --> 00:08:36.190 
so in the TCP protocol, there are this
adaptive retransmission mechanism

100
00:08:36.740 --> 00:08:45.700 
implemented and TCP measures each for each is
sending a package and receiving acknowledge

101
00:08:45.880 --> 00:08:51.070 
Round trip time, compare this round-trip
time with the round trip time

102
00:08:51.470 --> 00:08:59.190 
from the last interaction and
smooth as is to make a good

103
00:08:59.380 --> 00:09:05.390 
find a good solution for the timer for
the length of the timers interval

104
00:09:05.690 --> 00:09:08.770 
that's used for the
next transmission
