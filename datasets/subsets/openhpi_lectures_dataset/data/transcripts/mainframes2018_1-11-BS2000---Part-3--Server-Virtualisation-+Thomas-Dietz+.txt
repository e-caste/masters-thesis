WEBVTT

1
00:00:00.180 --> 00:00:03.119 
Hello, and welcome to this MOOCs session.

2
00:00:03.120 --> 00:00:04.124 
My name is Thomas Dietz.

3
00:00:05.640 --> 00:00:10.289 
In this story about BS2000 SE infrastructures,

4
00:00:10.290 --> 00:00:14.879 
I will introduce to you in our server virtualization concepts for

5
00:00:14.880 --> 00:00:15.880 
the year 2000.

6
00:00:18.810 --> 00:00:23.279 
As already mentioned in the last session, mainframes of a high degree of

7
00:00:23.280 --> 00:00:28.109 
virtualization in these 2000 cities realized with VM

8
00:00:28.110 --> 00:00:30.449 
2000 virtual machine system.

9
00:00:31.680 --> 00:00:36.179 
This VM 2000 real server can be divided into many BS

10
00:00:36.180 --> 00:00:40.169 
2000 operating systems on the same server unit.

11
00:00:40.170 --> 00:00:44.759 
So virtual machines, so-called guest systems are

12
00:00:44.760 --> 00:00:49.289 
running in parallel and perfectly isolated from each

13
00:00:49.290 --> 00:00:51.509 
other by hardware functions.

14
00:00:51.510 --> 00:00:56.070 
No event in one operating system can influence any other guest system,

15
00:00:57.540 --> 00:01:02.369 
means 2000 is therefore the ideal software for consolidating

16
00:01:02.370 --> 00:01:06.929 
multiple systems, which contribute significantly to

17
00:01:06.930 --> 00:01:11.349 
the cost effectiveness of i/o

18
00:01:11.350 --> 00:01:12.350 
operations.

19
00:01:13.530 --> 00:01:18.959 
For example, logical partitioning and automation of load control

20
00:01:18.960 --> 00:01:23.250 
can significantly optimize resource utilization.

21
00:01:28.120 --> 00:01:31.659 
Let's take a closer look of the example of

22
00:01:32.740 --> 00:01:37.399 
390 server unit and the hypervisor is embedded into

23
00:01:37.400 --> 00:01:38.559 
the overall architecture.

24
00:01:40.080 --> 00:01:44.529 
This urban unit 390 itself provides

25
00:01:44.530 --> 00:01:49.269 
an, of course, CPU, memory, i/o connectivity

26
00:01:49.270 --> 00:01:54.159 
and has an internal firmware port for extended virtualization

27
00:01:54.160 --> 00:01:55.923 
called IBM firmware.

28
00:01:58.180 --> 00:02:02.290 
So VM 2000 is hypervisor runs on top of the hardware,

29
00:02:03.520 --> 00:02:07.349 
you know, so-called real mode on users 390.

30
00:02:08.830 --> 00:02:13.869 
Handles all the virtual machines and also the global and virtual machine

31
00:02:13.870 --> 00:02:17.080 
specific interrupts and the i/o configuration.

32
00:02:19.000 --> 00:02:22.999 
On top of the hypervisor, the virtual machines are running.

33
00:02:23.000 --> 00:02:27.548 
So first virtual machine on the VM 2000 is so called VM

34
00:02:27.549 --> 00:02:29.199 
one, the monitor system.

35
00:02:30.430 --> 00:02:34.989 
The monitor system has a special function because it loads first of

36
00:02:34.990 --> 00:02:39.609 
all, the VM 2000 subsystem. The subsystem is

37
00:02:39.610 --> 00:02:44.109 
used for administration of VM 2000 itself and provides,

38
00:02:44.110 --> 00:02:47.739 
for example, is a command line interface for VM 2000.

39
00:02:47.740 --> 00:02:53.259 
All other guest systems

40
00:02:53.260 --> 00:02:58.509 
running on the same hypervisor in different versions, if required.

41
00:02:58.510 --> 00:03:03.009 
And now we have the ability to run a large

42
00:03:03.010 --> 00:03:07.839 
scale of number of VM 2000 virtual machines on

43
00:03:07.840 --> 00:03:08.840 
one hardware.

44
00:03:10.660 --> 00:03:14.820 
As you see, also in the monitor system, you know, the only 2000s

45
00:03:15.880 --> 00:03:20.084 
up system, but also a rest API, which is providing RAC manager

46
00:03:21.490 --> 00:03:26.149 
with the ability to control virtual machines from sacred ethical,

47
00:03:26.150 --> 00:03:28.840 
the user interface, which we will see later on.

48
00:03:31.030 --> 00:03:33.346 
When looking at a single virtual machine,

49
00:03:35.900 --> 00:03:39.530 
which resources, which characteristics does a virtual machine have?

50
00:03:40.790 --> 00:03:45.229 
Well, virtual machines are  assigned one or multiple virtual CPUs.

51
00:03:46.310 --> 00:03:50.719 
So virtual CPUs can be shared between the virtual machines.

52
00:03:50.720 --> 00:03:54.470 
See, that's the main purpose of running virtual machines on an hypervisor

53
00:03:55.760 --> 00:04:00.769 
with V 2000 and VM 2000 virtual machine can also use dedicated

54
00:04:00.770 --> 00:04:06.109 
physical CPUs, for example, of energy required for specific

55
00:04:06.110 --> 00:04:09.259 
performance attributes in a virtual machine.

56
00:04:11.570 --> 00:04:16.338 
The memory is divided by the hypervisor in certain memory

57
00:04:16.339 --> 00:04:20.299 
domains, and the memory domain is assigned to a virtual machine.

58
00:04:22.740 --> 00:04:27.419 
Devices also assigned to virtual machines for devices,

59
00:04:27.420 --> 00:04:31.919 
so you can be assigned exclusively, for example, control devices,

60
00:04:31.920 --> 00:04:36.419 
network devices, virtual machines can also

61
00:04:36.420 --> 00:04:41.579 
use shared devices, for example, discs to exchange data

62
00:04:41.580 --> 00:04:46.289 
from one virtual machines to the other virtual machine using a shared data

63
00:04:46.290 --> 00:04:47.850 
device like a disk.

64
00:04:49.740 --> 00:04:54.329 
And so CPU resources of virtual machines can be defined

65
00:04:54.330 --> 00:04:59.279 
on a very granular way, so you can define the number of virtual CPU's

66
00:05:00.810 --> 00:05:04.040 
if required. Pooling the virtual CPU pools, assigning

67
00:05:06.360 --> 00:05:09.779 
core tasks to virtual machine.

68
00:05:09.780 --> 00:05:14.429 
So assign a value, which amount of CPU resources a virtual

69
00:05:14.430 --> 00:05:19.799 
machine can use and also define a maximum of CPU utilization,

70
00:05:19.800 --> 00:05:24.529 
so giving virtual machines a limit as it can you use any CPU

71
00:05:24.530 --> 00:05:25.530 
resource beyond.

72
00:05:28.940 --> 00:05:33.370 
The answer's always in the Hypervisor is controlled by VM 2000 subsystem

73
00:05:34.790 --> 00:05:39.349 
in the monitor system, and the monitor system provides

74
00:05:39.350 --> 00:05:40.752 
a command line interface for VM 2000.

75
00:05:42.380 --> 00:05:46.939 
So this is the same command line interface independent if you look

76
00:05:46.940 --> 00:05:51.799 
to the Soviet Union, 390, which is VM 2000 hypervisor

77
00:05:51.800 --> 00:05:56.389 
or the server unit is x86, which is based on x86 architecture.

78
00:05:57.590 --> 00:06:02.239 
In summary, if you have over 50 commands to configure and show every aspect

79
00:06:02.240 --> 00:06:07.399 
of virtual machine, and if you like to create virtual machines,

80
00:06:07.400 --> 00:06:11.869 
you see the most important commands here, which I think speak for

81
00:06:11.870 --> 00:06:15.550 
themselves. For example, like a create VM, start VM, shut

82
00:06:16.640 --> 00:06:21.230 
down and delete, which covers a typical lifecycle of a virtual machine.

83
00:06:22.650 --> 00:06:27.169 
Also, special functions like Migrate VM, which allows, for

84
00:06:27.170 --> 00:06:31.759 
example, online life migration of a virtual machine

85
00:06:31.760 --> 00:06:36.619 
from one physical server unit to another one without interruption

86
00:06:36.620 --> 00:06:41.479 
of any service, any program, and any state

87
00:06:41.480 --> 00:06:42.559 
of the virtual machine.

88
00:06:44.540 --> 00:06:48.979 
And this VM 2000 this very flexible, you can

89
00:06:48.980 --> 00:06:53.479 
also remove devices during runtime, you

90
00:06:53.480 --> 00:06:55.579 
can change the attributes.

91
00:06:55.580 --> 00:07:00.649 
And of course, for VM management, you also need some show commands to see

92
00:07:00.650 --> 00:07:02.350 
all things look like.

93
00:07:04.040 --> 00:07:08.060 
To give you an example of how VM 2000 commands look like,

94
00:07:09.290 --> 00:07:13.699 
for example, if you like to create a virtual machine, first of all, you are giving a

95
00:07:13.700 --> 00:07:18.380 
virtual machine a name, which can be a character name,

96
00:07:20.750 --> 00:07:25.549 
assigned some virtual the CPU by giving

97
00:07:25.550 --> 00:07:28.310 
a virtual machine one or multiple processors.

98
00:07:29.390 --> 00:07:34.169 
So the virtual machine likes to open the VM index, which can be used for numbering

99
00:07:34.170 --> 00:07:38.509 
virtual machines. And, of course, the virtual machine needs memory.

100
00:07:38.510 --> 00:07:43.039 
In this case, we assign 8 gigabytes of memory, but

101
00:07:43.040 --> 00:07:47.749 
we are also defining values of 4 gigabyte as minimum and

102
00:07:47.750 --> 00:07:52.489 
64 gigabytes maximum so we can dynamically change

103
00:07:52.490 --> 00:07:57.379 
the memory size also when the operating system is still running inside

104
00:07:57.380 --> 00:07:58.380 
a virtual machine.

105
00:08:00.400 --> 00:08:05.199 
After that, I like to modify the IBM attributes, so assigning a CPU

106
00:08:05.200 --> 00:08:10.269 
quota, a maximum CPU utilization of 100 percent.

107
00:08:10.270 --> 00:08:14.769 
So the IBM can use all the CPU resources and

108
00:08:14.770 --> 00:08:16.689 
I'm adding persistent, yes.

109
00:08:16.690 --> 00:08:20.889 
So I only create a virtual machine once.

110
00:08:20.890 --> 00:08:26.019 
And even if the VM 2000 hypervisor is rebooting, all configuration

111
00:08:26.020 --> 00:08:29.520 
data of my virtual machine are still available.

112
00:08:31.500 --> 00:08:34.909 
After that, I'm adding devices to the virtual machine.

113
00:08:36.030 --> 00:08:39.546 
So the device numbers that you see here are mnemonics typical VM 2000 devices.

114
00:08:41.070 --> 00:08:45.809 
For example, the first one's starting with the of networking

115
00:08:45.810 --> 00:08:50.639 
devices standard BFC console device pair is

116
00:08:50.640 --> 00:08:55.559 
set 2, set 3, and then we are adding some disks

117
00:08:55.560 --> 00:08:56.669 
to the virtual machine.

118
00:08:58.080 --> 00:09:01.450 
And after that, we simply start a virtual machine with start VM.

119
00:09:03.140 --> 00:09:07.249 
Initial program load unit, which is the first disc

120
00:09:08.630 --> 00:09:12.619 
where to load the operating system from this all virtual machine ID2.

121
00:09:12.620 --> 00:09:17.269 
As you see, the commands are not very complex,

122
00:09:17.270 --> 00:09:21.769 
and I think after dealing around with your commands for a while, you will be able

123
00:09:21.770 --> 00:09:26.510 
to create and administrator virtual machines quite easily.

124
00:09:27.530 --> 00:09:32.239 
But there is even a more easy way to do virtual machine management

125
00:09:32.240 --> 00:09:33.715 
in an SE infrastructure.

126
00:09:35.450 --> 00:09:38.217 
With our web based user interface SE manager,

127
00:09:39.920 --> 00:09:45.019 
we have, first of all, a central overview over multiple SE

128
00:09:45.020 --> 00:09:49.669 
infrastructures that assigned to an administration cluster

129
00:09:49.670 --> 00:09:54.949 
using all virtual machines and in all server units, in all data centers

130
00:09:54.950 --> 00:09:57.049 
at the admin cluster.

131
00:09:57.050 --> 00:10:01.789 
And at the user interface, we also have all the functions for VM management,

132
00:10:01.790 --> 00:10:06.289 
which you need to create, start, stop, assign devices and so

133
00:10:06.290 --> 00:10:11.119 
on. So this is a uniform user interface for VM

134
00:10:11.120 --> 00:10:15.919 
2000. So these 2000 guest operating systems

135
00:10:15.920 --> 00:10:19.639 
on these other units 390 and server unit x86.

136
00:10:20.690 --> 00:10:25.492 
And additionally, we have included in that user interface an

137
00:10:25.493 --> 00:10:30.409 
integration of other virtual machine hypervisors like, for example,

138
00:10:30.410 --> 00:10:33.409 
from VMware, Oracle or Microsoft.

139
00:10:34.580 --> 00:10:37.907 
So we have an whole overview and whole control of the SE

140
00:10:39.080 --> 00:10:43.340 
infrastructure, which is running your business applications.
