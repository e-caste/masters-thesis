WEBVTT

1
00:00:00.000 --> 00:00:05.800 
When we speak about TCP in our openHPI
course - A Half Century of Internet

2
00:00:06.320 --> 00:00:11.020 
we have to understand the
concept of virtual connections

3
00:00:13.310 --> 00:00:18.030 
if we look to services in the internet we
can distinguish between connectionless

4
00:00:18.570 --> 00:00:21.410 
and connection-oriented
services

5
00:00:22.120 --> 00:00:26.940 
these are the two different types
of services in computer networks

6
00:00:28.440 --> 00:00:34.420 
the connectionless services are
characterized that computers

7
00:00:34.560 --> 00:00:39.050 
communicate without establishing
a connection beforehand

8
00:00:39.680 --> 00:00:45.980 
the computers sent packages and
the data and message is inside

9
00:00:45.980 --> 00:00:51.200 
the packages and the package sent
over the internet on the way

10
00:00:51.330 --> 00:00:56.080 
on the path, on separate
path, how it works best

11
00:00:56.690 --> 00:01:00.840 
so the packets are simply sent
through the networks, there is

12
00:01:00.840 --> 00:01:05.680 
no connection established before
and this is exactly like the

13
00:01:05.680 --> 00:01:11.630 
datagram service IPv4
or IPv6 are working

14
00:01:13.060 --> 00:01:17.010 
in contrast to the connectionless
services, there are other services

15
00:01:17.300 --> 00:01:19.990 
which are
connection-oriented

16
00:01:21.040 --> 00:01:26.540 
and here the computers communicate
all the devices, communicate

17
00:01:26.540 --> 00:01:30.660 
only after establishing
a connection

18
00:01:31.830 --> 00:01:39.630 
and the packets, all the packages,
the message is fractionated in

19
00:01:39.910 --> 00:01:47.010 
are sent and received in the correct
order and for example, TCP

20
00:01:47.020 --> 00:01:49.560 
provides such a
connection-oriented service

21
00:01:50.070 --> 00:01:54.780 
we know such connection-oriented
services from telephone before

22
00:01:54.780 --> 00:02:00.660 
we can exchange information, we
have to establish a connection

23
00:02:02.850 --> 00:02:09.370 
in this week, we speak about TCP, and TCP
offers a connection-oriented service

24
00:02:10.040 --> 00:02:14.110 
and the question is - how
this can be realized?

25
00:02:14.750 --> 00:02:22.290 
because TCP, for the transport
of TCP messages, only IP

26
00:02:22.710 --> 00:02:30.120 
datagram service can be used. So what
TCP provides is a virtual connection

27
00:02:30.620 --> 00:02:36.050 
a virtual connection that means
TCP only simulates a connection

28
00:02:36.780 --> 00:02:41.400 
suppose, end systems have the
feeling there is a connection

29
00:02:41.970 --> 00:02:46.810 
and we will see why they have
such feelings but in reality

30
00:02:47.070 --> 00:02:51.030 
all the messages, all the TCP messages
that are sent through the internet

31
00:02:51.440 --> 00:02:57.610 
are packed inside of IP packets and are
transported via the IP transport service

32
00:02:58.600 --> 00:03:01.860 
how TCP can simulate
a connection?

33
00:03:03.320 --> 00:03:08.510 
the most important tool is that the
TCP makes use of sequence numbers

34
00:03:09.390 --> 00:03:14.590 
and sequence numbers are used
to identify each TCP message

35
00:03:14.600 --> 00:03:17.070 
from A to B and
from B to A

36
00:03:17.800 --> 00:03:21.830 
so the first message get the first number,
the next number is the second message

37
00:03:21.830 --> 00:03:28.780 
the third number is a third message
and when B receives these messages

38
00:03:29.360 --> 00:03:33.030 
the messages go through different
branches through the internet

39
00:03:33.430 --> 00:03:39.940 
so the messages could arrive B in a wrong
order but by means of sequence number

40
00:03:40.370 --> 00:03:46.420 
in B, the messages can be
brought in the right order

41
00:03:47.900 --> 00:03:52.790 
by means of a sequence number, the
receiver can reconstruct the message

42
00:03:53.300 --> 00:03:59.620 
and the receiver can determine whether
packages are in the correct order

43
00:04:00.140 --> 00:04:04.780 
whether there are
duplicates or not and

44
00:04:05.600 --> 00:04:08.520 
very important, whether
the message is complete

45
00:04:10.370 --> 00:04:15.020 
so TCP, in this way offers a
connection-oriented service

46
00:04:15.930 --> 00:04:22.690 
and before the transmission is
done, TCP has to establish

47
00:04:22.700 --> 00:04:29.280 
such a virtual connection with the
receiver and after transmitting data

48
00:04:29.580 --> 00:04:34.140 
as they have to transit to
terminate the connections

49
00:04:35.180 --> 00:04:39.500 
and in this establishment
of a connection

50
00:04:40.280 --> 00:04:43.350 
both partners have
to agree on

51
00:04:44.040 --> 00:04:49.050 
sequence numbers - what is the initial
sequence number from both sides

52
00:04:49.440 --> 00:04:52.930 
and they have to confirm
each other that

53
00:04:53.500 --> 00:04:59.860 
they have received this initial
sequence number in the correct way

54
00:05:01.860 --> 00:05:05.660 
this has a very important
advantage - TCP

55
00:05:06.240 --> 00:05:09.800 
only needs to be implemented
in the end systems

56
00:05:10.240 --> 00:05:13.560 
of the end systems of
the communication

57
00:05:14.060 --> 00:05:18.550 
in this way and not on
each intermediate system

58
00:05:19.070 --> 00:05:25.420 
because the intermediate systems they get
IP packages and transport IP packages

59
00:05:25.660 --> 00:05:30.890 
where the TCP message
is use data inside

60
00:05:31.610 --> 00:05:37.950 
so only the two end systems need exactly to
know the sequence number that they can

61
00:05:38.230 --> 00:05:41.180 
simulate this
connection

62
00:05:42.310 --> 00:05:48.770 
just as TCP uses IP datagram
service for data transmission

63
00:05:49.180 --> 00:05:56.230 
and each TCP message is sent through
the internet as payload of an IP

64
00:05:56.540 --> 00:06:02.070 
datagram. So, if we look here - we have
the sender, we have the receiver

65
00:06:02.510 --> 00:06:06.960 
we have an application for sub-e-mail
or world wide web on both sides

66
00:06:07.300 --> 00:06:13.110 
and when we want to send or
receive an e-mail or want to

67
00:06:13.110 --> 00:06:20.880 
get some resources from then the TCP
protocol simulates a reliable connection

68
00:06:22.160 --> 00:06:27.830 
but it is only a simulation because
the layers and the protocols below

69
00:06:28.630 --> 00:06:31.470 
on the IP stack, on the
link layer, the hardware

70
00:06:31.960 --> 00:06:39.130 
they are not realizing that this is a
package which they receive and forward

71
00:06:39.770 --> 00:06:43.430 
is part of a simulated
reliable connection

72
00:06:44.280 --> 00:06:50.990 
so only the two end systems need to deal
with TCP, all the intermediate systems

73
00:06:51.350 --> 00:06:54.430 
they use the IP
datagram service

74
00:06:55.200 --> 00:07:01.390 
here we see, as the TCP message is
payload of an IP packet, IP packet is

75
00:07:01.500 --> 00:07:08.300 
transported inside a network
packet from there a structure

76
00:07:08.570 --> 00:07:12.080 
of the Network 1
send a router

77
00:07:12.680 --> 00:07:17.640 
before it can be transported
in the Network 2

78
00:07:17.640 --> 00:07:22.240 
it has to be checked - what is the
IP address of the packet and

79
00:07:22.250 --> 00:07:29.070 
what is the new network
format for Network 2?

80
00:07:29.320 --> 00:07:35.460 
so the IP package has to
be wrapped by... if this

81
00:07:35.500 --> 00:07:40.460 
is an internet package and then
it receives a receiver and then

82
00:07:40.580 --> 00:07:47.260 
as a TCP protocol comes in place
and the simulated connection

83
00:07:48.400 --> 00:07:54.370 
so, networks and intermediate
systems do not know about TCP

84
00:07:55.430 --> 00:08:01.880 
this is a very good concept
and makes it easy to

85
00:08:02.590 --> 00:08:06.030 
take care that
the transport

86
00:08:06.960 --> 00:08:13.030 
of messages on the internet is
guaranteed and has in many many cases

87
00:08:13.340 --> 00:08:17.850 
looks like an end
to end connection

88
00:08:18.850 --> 00:08:22.460 
what does it mean end to end
transmission or end to end connection?

89
00:08:23.320 --> 00:08:28.560 
TCP only allows to transport data
between two dedicated systems

90
00:08:29.340 --> 00:08:33.950 
and the reason we saw in the last slide
because it's only in the end systems

91
00:08:34.180 --> 00:08:41.150 
all the other systems involved, they only
take care about transporting IP packages

92
00:08:41.970 --> 00:08:47.370 
so, one application on the sender
side is connected to an application

93
00:08:47.530 --> 00:08:54.360 
on the receiver side and then this
virtual connection is established

94
00:08:55.080 --> 00:09:00.200 
and it is only attached on the
two end systems where the

95
00:09:00.200 --> 00:09:06.640 
two applications are run which one to interact
and communicate with other within the network

96
00:09:06.800 --> 00:09:10.740 
so the establishment of
a virtual connection

97
00:09:10.910 --> 00:09:16.360 
is a task of the two end systems, all
networks and all intermediate systems

98
00:09:16.920 --> 00:09:22.500 
forward all data informed
from IP datagram

99
00:09:23.830 --> 00:09:29.910 
so multicast or broadcast
is not possible with TCP

100
00:09:30.730 --> 00:09:35.690 
it's important to realize in the
end to end connection with TCP

101
00:09:35.830 --> 00:09:41.110 
transport of data can also be
done in a full duplex way

102
00:09:41.690 --> 00:09:45.920 
TCP allows bi-directional end
to end data transmission

103
00:09:46.830 --> 00:09:52.060 
to this end, sender and
receiver are equipped with

104
00:09:52.160 --> 00:09:57.930 
input buffers, so that both
can send simultaneously data

105
00:09:58.110 --> 00:10:03.660 
and the incoming data are stored
in the buffer up to the moment

106
00:10:03.670 --> 00:10:06.300 
they can be processed
by the receiver

107
00:10:07.140 --> 00:10:14.000 
so if you look, we have two systems - two
end systems, we have network interfaces

108
00:10:14.440 --> 00:10:17.140 
and in the network
interfaces

109
00:10:17.810 --> 00:10:21.970 
there are all those buffer
integrated and then the data

110
00:10:21.970 --> 00:10:27.560 
can be sent simultaneously
in both direction so that

111
00:10:27.570 --> 00:10:29.380 
TCP is quite efficient

112
00:10:30.620 --> 00:10:38.660 
With these methods and techniques, TCP
can provide a reliable transmission

113
00:10:39.670 --> 00:10:42.970 
so TCP guarantees
transmission is error-free

114
00:10:43.650 --> 00:10:49.570 
TCP guarantees no data loss, TCP
guarantees no mix up of packages,

115
00:10:49.830 --> 00:10:54.210 
no wrong sequence,
no lost package

116
00:10:54.900 --> 00:11:01.600 
and to provide, as you remember, TCP
simulates only their connection

117
00:11:02.180 --> 00:11:07.380 
TCP uses the following techniques
- one is a retransmission

118
00:11:07.960 --> 00:11:11.730 
in fact, in practice as an
adaptive retransmission

119
00:11:12.150 --> 00:11:17.480 
that when a package is lost or when a
package arrived in a damaged form

120
00:11:17.800 --> 00:11:23.850 
then this package has to be retransmitted
and this is organized by TCP

121
00:11:24.230 --> 00:11:31.230 
and the other field TCP provides a lot of
mechanisms is for congestion control

122
00:11:31.400 --> 00:11:35.760 
for controlling the
situation in the network

123
00:11:36.240 --> 00:11:41.490 
so that the
transport goes

124
00:11:42.440 --> 00:11:49.430 
as error free as possible without
congestion through the internet
