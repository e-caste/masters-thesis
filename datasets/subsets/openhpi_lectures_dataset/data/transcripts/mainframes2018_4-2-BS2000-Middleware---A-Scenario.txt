WEBVTT

1
00:00:00.590 --> 00:00:01.910 
Welcome to this MOOC session.

2
00:00:02.570 --> 00:00:06.570 
I am Ludwig Gerland and I would like to give you a brief overview

3
00:00:06.580 --> 00:00:08.220 
over BS2000 Middleware.

4
00:00:09.750 --> 00:00:11.710 
You will learn what Middleware is

5
00:00:12.470 --> 00:00:14.800 
and how it fits into the system architecture.

6
00:00:16.710 --> 00:00:20.300 
On our journey through the middleware, will use a scenario

7
00:00:21.490 --> 00:00:25.270 
of making a service appointment at a car dealership

8
00:00:27.140 --> 00:00:34.630 
with the local interfaces to users and databases and interfaces to remote applications.

9
00:00:36.340 --> 00:00:38.910 
Let's start with the definition of middleware.

10
00:00:41.360 --> 00:00:44.150 
Middleware is shown here in the red box in the middle.

11
00:00:44.790 --> 00:00:52.320 
Middleware provides a standard multi-purpose interface to the customer applications above

12
00:00:53.570 --> 00:00:57.860 
by combining functions of the operating system below

13
00:00:58.870 --> 00:01:01.780 
to higher level services.

14
00:01:04.070 --> 00:01:08.090 
The products you'll see in this red box, we will meet them

15
00:01:08.930 --> 00:01:09.970 
as we go along.

16
00:01:11.240 --> 00:01:15.940 
Sometimes the development tools like compilers, library management

17
00:01:15.940 --> 00:01:20.620 
utilities and so on are also discussed in the context of middleware.

18
00:01:21.740 --> 00:01:26.360 
Today however we will focus on the middleware that is active

19
00:01:26.360 --> 00:01:28.610 
during runtime of the business application.

20
00:01:32.190 --> 00:01:33.640 
As I said, the scenario

21
00:01:34.720 --> 00:01:36.540 
is set at a car dealership.

22
00:01:37.630 --> 00:01:42.270 
The car dealership has a number of service centers where the workshop manager

23
00:01:43.170 --> 00:01:46.740 
plans repair work, where a call centre

24
00:01:47.430 --> 00:01:49.890 
takes appointments and vehicle owners

25
00:01:50.690 --> 00:01:54.220 
make appointments on their own via their smartphones.

26
00:01:55.760 --> 00:01:59.700 
And there are external interfaces to a car manufacturer and

27
00:01:59.720 --> 00:02:00.390 
the supplier.

28
00:02:02.690 --> 00:02:09.290 
At the centre there is a transaction application- as the hub for information retrieval

29
00:02:10.170 --> 00:02:12.210 
and planning of repair work.

30
00:02:14.970 --> 00:02:16.900 
As we are set in a BS2000

31
00:02:18.300 --> 00:02:23.690 
environment, this application is based on the openUTM transaction monitor.

32
00:02:25.900 --> 00:02:27.400 
What is the transaction monitor?

33
00:02:28.810 --> 00:02:30.630 
For us most importantly

34
00:02:31.780 --> 00:02:35.670 
it provides transactional security. That is

35
00:02:37.190 --> 00:02:39.310 
it rules the all or nothing principle.

36
00:02:40.970 --> 00:02:45.050 
If for repair planning, the

37
00:02:47.810 --> 00:02:50.420 
mechanics, workshop lifts

38
00:02:52.210 --> 00:02:56.900 
or the spare parts are required, they are all reserved

39
00:02:57.950 --> 00:03:00.120 
at the same time for the same time period.

40
00:03:01.110 --> 00:03:06.180 
Or if that fails they are all released to be used for another attempt

41
00:03:06.650 --> 00:03:08.450 
maybe for later service time.

42
00:03:11.970 --> 00:03:13.890 
If you want to learn more about

43
00:03:14.580 --> 00:03:19.760 
openUTM, its functionality, and its benefits, there is a separate presentation

44
00:03:20.040 --> 00:03:20.780 
in this MOOC.

45
00:03:25.300 --> 00:03:29.990 
When a customer wants to schedule an appointment for routine vehicle service,

46
00:03:30.950 --> 00:03:33.940 
the central application will retrieve vehicle data

47
00:03:34.690 --> 00:03:37.860 
from an Oracle database, in our example.

48
00:03:39.200 --> 00:03:43.250 
That is runs on a linux server remotely.

49
00:03:45.610 --> 00:03:49.410 
It needs also information about the spare parts on inventory

50
00:03:49.820 --> 00:03:52.610 
and takes it from a local SESAM database.

51
00:03:54.780 --> 00:04:00.320 
The openUTM application processes these data and coordinates the updates

52
00:04:00.320 --> 00:04:01.710 
in both databases.

53
00:04:04.010 --> 00:04:10.580 
Databases or data in general can be held in different organizations.

54
00:04:11.310 --> 00:04:12.920 
Most frequently nowadays

55
00:04:13.630 --> 00:04:17.860 
there are relational databases. Relational means,

56
00:04:18.940 --> 00:04:22.430 
the data inside them is organized in tables

57
00:04:23.300 --> 00:04:25.940 
and the database interface

58
00:04:26.660 --> 00:04:29.730 
is the SQL interface. SQL stands for

59
00:04:31.170 --> 00:04:34.360 
structured query language, may also be pronounced sequel.

60
00:04:35.890 --> 00:04:37.140 
On mainframes however

61
00:04:37.750 --> 00:04:40.400 
there are also other data organizations.

62
00:04:41.710 --> 00:04:44.800 
For example quite common still are network databases

63
00:04:45.450 --> 00:04:51.880 
which are optimized internally for the negation say from the customer

64
00:04:52.440 --> 00:04:56.250 
to his vehicle to the spare parts that are right for his car.

65
00:04:58.750 --> 00:05:05.150 
And still in use are simple files, may be supported by transactional

66
00:05:05.330 --> 00:05:06.190 
utilities.

67
00:05:13.250 --> 00:05:16.560 
The end users have different requirements for the interfaces

68
00:05:17.030 --> 00:05:19.010 
to the central transactional application.

69
00:05:21.180 --> 00:05:25.280 
The simplest interface is not even on the slide. It is the simple

70
00:05:25.530 --> 00:05:28.330 
line mode terminal interface or

71
00:05:29.080 --> 00:05:31.870 
forms in character format.

72
00:05:35.470 --> 00:05:41.430 
The workshop manager uses a custom PC application in our example

73
00:05:42.360 --> 00:05:46.580 
to plan repairs and this is connected to the openUTM

74
00:05:47.310 --> 00:05:52.480 
transaction monitor via the appropriate UPIC interface for client

75
00:05:53.030 --> 00:05:59.410 
connections. The call centre which makes appointments with customers

76
00:06:00.300 --> 00:06:03.680 
has a web application on the internet

77
00:06:04.550 --> 00:06:08.550 
and the application stems from a former

78
00:06:09.360 --> 00:06:14.120 
application text application or maybe a UPIC application like

79
00:06:14.120 --> 00:06:15.620 
the workshop manager has.

80
00:06:16.390 --> 00:06:19.030 
And the software web transaction supports

81
00:06:19.590 --> 00:06:24.660 
the conversion of this application as well as the operation

82
00:06:24.670 --> 00:06:26.370 
of such a converted application.

83
00:06:28.190 --> 00:06:33.120 
And finally the vehicle owner uses his smartphone to make an appointment.

84
00:06:33.790 --> 00:06:36.250 
The smartphone is connected to a web service

85
00:06:36.730 --> 00:06:39.330 
on an application server a java application server

86
00:06:39.740 --> 00:06:44.520 
and BeanConnect makes the further connection to the openUTM application.

87
00:06:49.220 --> 00:06:52.550 
In our scenario during repair planning,

88
00:06:54.020 --> 00:06:56.350 
it must be taken into account whether

89
00:06:57.390 --> 00:07:04.680 
the car manufacturer has requested, required some service action

90
00:07:04.680 --> 00:07:06.280 
like a recall of some part.

91
00:07:08.100 --> 00:07:12.480 
And to that behalf, the openUTM application queries,

92
00:07:13.230 --> 00:07:15.410 
the application of the common effect are,

93
00:07:16.060 --> 00:07:19.580 
which by chance runs on IBM's mainframe system

94
00:07:20.310 --> 00:07:22.530 
with a transaction monitor CICS.

95
00:07:23.830 --> 00:07:26.150 
So conversion of the protocols is necessary

96
00:07:26.750 --> 00:07:30.840 
and this is done via a gateway- LU6.2 gateway.

97
00:07:35.310 --> 00:07:39.210 
For other transactional couplings, there are also couplings

98
00:07:39.210 --> 00:07:43.460 
possible via the LU6.1 protocol or the OCTP protocol.

99
00:07:45.130 --> 00:07:48.410 
And although we have focused on mainframes up to now

100
00:07:50.630 --> 00:07:54.130 
transaction monitors are available on other platforms too.

101
00:07:54.760 --> 00:07:59.480 
Like tuxedo which is a part of the oracle fusion middleware

102
00:08:00.040 --> 00:08:05.590 
and openUTM itself is available on linux, unix and

103
00:08:05.610 --> 00:08:06.540 
windows as well.

104
00:08:10.060 --> 00:08:13.850 
So far we have talked about rather tightly coupled applications.

105
00:08:14.440 --> 00:08:19.910 
Now we are coming to a more lightweight versatile coupling.

106
00:08:20.940 --> 00:08:26.280 
Assume a required spare part is not available in stock.

107
00:08:28.010 --> 00:08:30.680 
So an order must be placed to a supplier.

108
00:08:31.920 --> 00:08:38.910 
This order can be in a format that is standardized by the electronic data interchange or EDI

109
00:08:39.350 --> 00:08:42.630 
format which in effect is a simple file.

110
00:08:43.400 --> 00:08:46.920 
And this simple file can be reliably

111
00:08:47.810 --> 00:08:50.920 
transferred via the enterprise file transfer openFT.

112
00:08:52.210 --> 00:08:53.810 
Enterprise in the name means

113
00:08:54.430 --> 00:08:58.340 
that it is made for heterogeneous IT landscapes.

114
00:08:58.980 --> 00:09:00.470 
Heterogeneous in the sense

115
00:09:01.650 --> 00:09:07.660 
that it manages various protocols, various platforms, various file formats.

116
00:09:08.800 --> 00:09:12.820 
Of course it has a good support for optimization in the sense

117
00:09:13.010 --> 00:09:14.610 
that after the file transfer,

118
00:09:16.250 --> 00:09:19.290 
automatically a follow up processing can be launched

119
00:09:20.070 --> 00:09:23.810 
or processes on different computers, different servers

120
00:09:24.370 --> 00:09:29.150 
can be connected in the way of a remote unix pipe.

121
00:09:31.650 --> 00:09:35.850 
And of course it has comprehensive administration functions even remote

122
00:09:36.140 --> 00:09:38.750 
and security functions with the rights concept,

123
00:09:39.540 --> 00:09:40.620 
who may do what,

124
00:09:42.210 --> 00:09:43.740 
may read, may write,

125
00:09:45.050 --> 00:09:47.520 
or may even launch follow up actions.

126
00:09:49.390 --> 00:09:54.020 
And finally it has outstanding and stable performance even

127
00:09:54.020 --> 00:09:55.260 
under severe conditions.

128
00:09:58.210 --> 00:10:03.490 
To conclude the scenario has introduced you to various middleware components.

129
00:10:05.480 --> 00:10:10.700 
The vehicle owner, the service centre, the call desk, the workshop manager use

130
00:10:11.540 --> 00:10:15.710 
different interfaces to access the central transactional application

131
00:10:15.710 --> 00:10:16.780 
with the openUTM

132
00:10:17.550 --> 00:10:18.500 
transaction monitor.

133
00:10:22.640 --> 00:10:26.060 
The OpenUTM application retrieves data from several databases.

134
00:10:27.580 --> 00:10:32.790 
If it comes to required service action, it connects via a gateway

135
00:10:33.410 --> 00:10:36.030 
to a third party transaction monitor.

136
00:10:36.930 --> 00:10:42.670 
And for a loosely coupled system, it goes via the enterprise

137
00:10:42.670 --> 00:10:44.770 
file transferred to the spare parts supplier.

138
00:10:47.010 --> 00:10:48.870 
After you have listened to this example

139
00:10:49.640 --> 00:10:51.540 
I think you will no longer be astonished

140
00:10:52.040 --> 00:10:58.040 
that at the heart of most business transactions, there is a mainframe

141
00:10:58.290 --> 00:10:59.750 
with a transaction monitor.

142
00:11:01.080 --> 00:11:05.310 
According to IBM figures two thirds of the production load

143
00:11:06.050 --> 00:11:10.940 
are run on mainframes and even eighty seven percent of credit card transactions

144
00:11:11.220 --> 00:11:12.750 
are executed on a mainframe.

145
00:11:14.540 --> 00:11:15.280 
And the middle way,

146
00:11:15.950 --> 00:11:20.460 
make sure that the mainframe is seamlessly integrated into

147
00:11:20.460 --> 00:11:26.210 
the modern IT world to the extent that users do not notice the mainframe

148
00:11:26.510 --> 00:11:28.080 
behind the screens they tap on.

149
00:11:30.140 --> 00:11:32.460 
Thank you for your interest in mainframe middleware.
