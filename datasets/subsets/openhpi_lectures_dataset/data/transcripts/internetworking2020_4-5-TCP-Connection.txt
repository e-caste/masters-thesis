WEBVTT

1
00:00:01.260 --> 00:00:06.450 
Speaking about TCP in our openHPI
course - A Half Century of Internet

2
00:00:06.930 --> 00:00:11.730 
we want to have a closer
look to TCP connections

3
00:00:13.080 --> 00:00:17.220 
you remember, TCP requires
a sender and receiver

4
00:00:17.760 --> 00:00:23.710 
establish a connection
before they send data

5
00:00:23.710 --> 00:00:24.400 


6
00:00:24.133 --> 00:00:25.023 
to each other

7
00:00:26.183 --> 00:00:31.963 
this end to end connection enables the
reliable data transmission in both direction

8
00:00:32.920 --> 00:00:37.900 
that's provided by TCP it's
different to the generation in

9
00:00:37.900 --> 00:00:43.530 
case of IP and IP we have an unreliable
data transport the service

10
00:00:43.780 --> 00:00:49.280 
in the case of TCP, there is a
guaranteed transport service

11
00:00:49.940 --> 00:00:55.100 
so compared to a telephone call where
you have to establish a connection

12
00:00:55.410 --> 00:00:58.670 
before you can start to
interact with each other

13
00:00:59.180 --> 00:01:05.220 
in the case of TCP, such a virtual
connection has to be transmitted

14
00:01:05.850 --> 00:01:11.470 
so this connection guarantees that all
the package reach which were sent

15
00:01:11.680 --> 00:01:16.080 
reached the receiver that they
arrive in the right order

16
00:01:16.520 --> 00:01:20.760 
that duplications are
sorted out and others

17
00:01:22.020 --> 00:01:26.530 
so, it's a possibility the application
of data packets originated

18
00:01:26.530 --> 00:01:29.380 
from former connection
also can be ignored

19
00:01:31.940 --> 00:01:36.320 
since the TCP connections are
virtual connections which are

20
00:01:36.320 --> 00:01:43.350 
realized by sequence number,
we have to see how we

21
00:01:43.350 --> 00:01:46.750 
we can establish
such a connection

22
00:01:47.530 --> 00:01:54.020 
you remember that the TCP numbers are
used to identify each single TCP packet

23
00:01:54.460 --> 00:01:57.470 
and then to check whether they
arrived in the right order or

24
00:01:57.480 --> 00:02:02.500 
whether they arrived in a
complete way or whether

25
00:02:02.500 --> 00:02:05.440 
something is damaged and
need to be re-transported

26
00:02:06.060 --> 00:02:12.990 
so the TCP packets are transported as
payload of the unreliable IP datagram

27
00:02:13.230 --> 00:02:18.180 
so each tcp package needs
to get a sequence number

28
00:02:19.320 --> 00:02:25.480 
and this is exactly the task of
the connection establishment

29
00:02:26.030 --> 00:02:31.880 
to take care that both sides use
the right sequence numbers

30
00:02:32.850 --> 00:02:38.580 
so and this is exactly done by means
of a socket three way handshake

31
00:02:39.180 --> 00:02:42.590 
the establishment and determination
of a TCP connection

32
00:02:43.390 --> 00:02:45.450 
so how does it work?

33
00:02:46.320 --> 00:02:52.900 
this three way handshake ensures that
both sides are ready to receive data

34
00:02:53.250 --> 00:02:59.510 
and that the sequence number are
exchanged at each site exactly knows

35
00:02:59.710 --> 00:03:03.920 
the right initial sequence number
from where it is counted

36
00:03:04.210 --> 00:03:06.300 
the later transmissions

37
00:03:07.120 --> 00:03:11.390 
let's have a look on this three
way handshake, there is sender

38
00:03:11.390 --> 00:03:16.360 
and receiver and this is
a time axis and then

39
00:03:17.040 --> 00:03:21.140 
to establish such a connection
the sender sends SYN

40
00:03:21.580 --> 00:03:29.760 
packet with the sequence number X. X is an
initial sequence number sender is using

41
00:03:29.890 --> 00:03:37.440 
to enumerate the different
packages sent to the receiver

42
00:03:38.400 --> 00:03:43.870 
so this receiver receives
SYN package, tells him, ok

43
00:03:43.870 --> 00:03:45.850 
the sender want to
establish a connection

44
00:03:46.330 --> 00:03:51.960 
it then sends back SYN flag to tell
the sender that yes I understood

45
00:03:52.520 --> 00:03:56.510 
and then it sends its
own sequence number

46
00:03:57.140 --> 00:04:00.270 
the receiver can start
with another number

47
00:04:00.720 --> 00:04:07.070 
and receiver sends an
acknowledgment of (X+1)

48
00:04:07.610 --> 00:04:12.590 
that means the receiver gives
the sender a chance to check

49
00:04:12.840 --> 00:04:17.520 
whether he a received
the sequence number

50
00:04:17.870 --> 00:04:25.790 
X in the right way and now as the sender has
finished the establishment of a connection

51
00:04:26.020 --> 00:04:31.270 
by acknowledging as the receiver
said it contains the right

52
00:04:31.560 --> 00:04:35.760 
as he writes a sequence number
which is used by the receiver

53
00:04:36.510 --> 00:04:40.090 
so the establishment
of connection

54
00:04:40.670 --> 00:04:44.310 
starts with a SYN
packet to tell

55
00:04:45.100 --> 00:04:50.400 
we want to communicate and then with the
exchange of the initial sequence numbers

56
00:04:50.720 --> 00:04:59.060 
and then later on the packets are numbered
starting from the initial packet

57
00:04:59.590 --> 00:05:05.270 
by means of the
sequence number

58
00:05:05.650 --> 00:05:10.890 
the receiver can check whether the
packets are in the right orders

59
00:05:12.130 --> 00:05:17.190 
the same has to be done at the end of the
communication process for the termination

60
00:05:17.340 --> 00:05:21.810 
of the connection.
Here FIN

61
00:05:21.820 --> 00:05:22.850 
flag is sent

62
00:05:23.390 --> 00:05:26.820 
and the last sequence
number at R

63
00:05:28.320 --> 00:05:33.080 
receiver acknowledges the
last sequence number

64
00:05:33.650 --> 00:05:37.410 
acknowledges that
it understood

65
00:05:38.070 --> 00:05:43.790 
connection should be terminated and it
sends his own final sequence number

66
00:05:45.090 --> 00:05:47.610 
sender receives
it and then

67
00:05:48.590 --> 00:05:56.370 
sender has to acknowledge the final
sequence number the receiver

68
00:05:57.640 --> 00:06:02.320 
sometimes instead of one there are
also two distinguished message

69
00:06:02.610 --> 00:06:08.040 
as the acknowledgment
of the final

70
00:06:08.050 --> 00:06:12.260 
sequence number of the sender
and the FIN segment with the

71
00:06:12.510 --> 00:06:15.950 
final sequence number
of the receiver

72
00:06:16.580 --> 00:06:21.870 
then we have a four-way
handshake but this is ok
