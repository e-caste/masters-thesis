WEBVTT

1
00:00:01.600 --> 00:00:05.570 
It's me again- Wolfram Greis from the European Mainframe Academy,

2
00:00:06.340 --> 00:00:09.540 
and in the next video clip I want to talk about web services

3
00:00:09.880 --> 00:00:16.080 
and do a comparison between SOAP web services and RESTful interfaces.

4
00:00:17.460 --> 00:00:24.040 
What are web services? Web services are self contained, modular, distributed, dynamic applications

5
00:00:24.430 --> 00:00:29.620 
that can be described, published, located or invoked over the network

6
00:00:29.850 --> 00:00:35.620 
and the idea is to create products, processes and supply chains.

7
00:00:36.340 --> 00:00:41.070 
These applications can be local, can be distributed or in many cases

8
00:00:41.220 --> 00:00:48.160 
they are web based. So use open standards TCP/IP, hypertext transfer protocol,

9
00:00:48.430 --> 00:00:54.910 
java, Extensible Markup Language xml or JSON, and JSON stands for

10
00:00:55.040 --> 00:00:57.340 
JavaScript Object Notation.

11
00:00:57.960 --> 00:01:02.860 
Content is transported via XML, especially when we talk about SOAP.

12
00:01:04.630 --> 00:01:08.320 
Maybe you have seen already the web services triangle-

13
00:01:08.320 --> 00:01:14.630 
triangle with three components. We have a Service Provider offering services.

14
00:01:14.910 --> 00:01:20.970 
We have a Service Requester who wants to call these services, execute these services.

15
00:01:21.420 --> 00:01:26.200 
And the service provider can publish the service

16
00:01:27.860 --> 00:01:34.170 
in a Service Broker and obviously the service requester can find the services asking the service

17
00:01:34.560 --> 00:01:39.550 
broker for some information about the services the service

18
00:01:40.540 --> 00:01:41.670 
requester wants to call.

19
00:01:42.280 --> 00:01:47.910 
And then very important description of how these services are

20
00:01:49.210 --> 00:01:53.810 
defined, implemented, how they are called and what arguments are exchanged are

21
00:01:54.790 --> 00:01:59.050 
done with the web services description language WSDL.

22
00:01:59.620 --> 00:02:05.020 
And WSDL is an XML based description language.

23
00:02:06.090 --> 00:02:10.270 
Comparable to an Interface Definition Language as we

24
00:02:10.270 --> 00:02:16.770 
know it from a Remote Procedure Calls or from CORBA. Both use even

25
00:02:16.910 --> 00:02:21.520 
if in some details they are different but the idea is the same. They use an

26
00:02:21.750 --> 00:02:26.000 
interface definition language to define the interfaces and the

27
00:02:26.270 --> 00:02:32.230 
arguments that have to be exchanged and the return values

28
00:02:33.580 --> 00:02:36.900 
are expected to get back and so on.

29
00:02:37.320 --> 00:02:41.560 
And this is done with RPCs in CORBA with an IDL-

30
00:02:42.140 --> 00:02:45.750 
Interface Definition Language and the WSDL. The

31
00:02:46.330 --> 00:02:52.390 
web services description language is really the same idea for web services.

32
00:02:52.750 --> 00:02:57.560 
Descriptions can be interpreted by applications and we have a

33
00:02:57.990 --> 00:03:03.010 
different definitions. We define interfaces, we define the

34
00:03:03.530 --> 00:03:08.740 
access protocol, and we define the endpoint. It's in most cases

35
00:03:08.740 --> 00:03:11.080 
it's a web service URL.

36
00:03:12.340 --> 00:03:16.480 
The definition of specification is done by the world wide web consortium.

37
00:03:16.930 --> 00:03:20.670 
Here you have the URL to have a look into these specifications.

38
00:03:23.120 --> 00:03:29.290 
Let's have a look at SOAP. SOAP is an interface for information exchange between applications.

39
00:03:29.750 --> 00:03:37.350 
SOAP as an abbreviation as it was formerly used Simple Object Access Protocol

40
00:03:37.650 --> 00:03:43.260 
has no longer this meaning. If we just use the term SOAP and mean

41
00:03:43.390 --> 00:03:49.390 
these idea of a web services, in this case soap web services.

42
00:03:49.790 --> 00:03:54.450 
It's an xml-based protocol consisting of three parts. We have

43
00:03:54.450 --> 00:03:59.220 
an envelope to describe the content and how to process it, we have rules and

44
00:03:59.410 --> 00:04:06.070 
definitions of data tape types that are exchanged and we have conventions to represent

45
00:04:06.360 --> 00:04:15.120 
RPCs and the responses. Again also, SOAP is a specified and standardized

46
00:04:15.380 --> 00:04:18.980 
by the world wide web consortium. Here again you see the

47
00:04:19.400 --> 00:04:24.230 
URL to get a look into these specifications.

48
00:04:26.540 --> 00:04:31.570 
This is a soap request and what I want to show you here is, in this case

49
00:04:31.790 --> 00:04:37.090 
we really just want to get a stock quotation with the soap

50
00:04:37.930 --> 00:04:42.720 
request, and you see the red characters here. In this case we

51
00:04:42.720 --> 00:04:47.020 
want to get the SOAP quotation from the IBM.

52
00:04:47.480 --> 00:04:52.580 
And this is really the payload we want to transport and we want to

53
00:04:52.860 --> 00:04:56.640 
get the stock quotation. And all

54
00:04:56.640 --> 00:05:00.910 
the other things around it is a lot of, as you see here XML

55
00:05:01.110 --> 00:05:05.790 
describing what we want to do and a lot of

56
00:05:07.020 --> 00:05:09.740 
specifications we have to do to get

57
00:05:10.610 --> 00:05:16.580 
this stock quotation. This is to request the soap request and the

58
00:05:16.760 --> 00:05:22.360 
soap response looks very similar. Again we have a lot of XML around

59
00:05:22.530 --> 00:05:27.500 
the payload and in this case we get see a return of the

60
00:05:28.330 --> 00:05:32.730 
stock quotation from IBM. And in this case, you see it's a 108.53.

61
00:05:32.730 --> 00:05:36.330 
And this is the payload. All the other

62
00:05:36.330 --> 00:05:40.170 
things around it is a lot of again a lot of XML.

63
00:05:41.010 --> 00:05:46.050 
And as the problem with this SOAP request, soap responses

64
00:05:46.050 --> 00:05:50.490 
and so on is, that there's really a lot of overhead to interpret these

65
00:05:51.620 --> 00:05:54.170 
requests, to interpret these responses and so on.

66
00:05:55.580 --> 00:06:01.610 
Looking into these xml definition specifications -

67
00:06:01.860 --> 00:06:02.860 
a lot of overhead.

68
00:06:05.660 --> 00:06:10.380 
Because of these mentioned overhead, there came the idea up.

69
00:06:11.400 --> 00:06:16.210 
Isn't there a lighter possibility to call

70
00:06:17.460 --> 00:06:20.660 
resources via the web. And Roy

71
00:06:21.760 --> 00:06:29.310 
Fielding did a doctoral dissertation describing REpresentation State Transfer,

72
00:06:30.220 --> 00:06:35.710 
for short REST as a key architectural principle of requesting

73
00:06:35.750 --> 00:06:39.260 
resources via World Wide Web. Resource is

74
00:06:39.760 --> 00:06:45.100 
represented by an URI. URI stands for Universal Resource Indicator.

75
00:06:45.560 --> 00:06:51.140 
And as example, if you want to get information about an attendee of our

76
00:06:51.310 --> 00:06:55.450 
European Mainframe Academy, it could be represented through the

77
00:06:55.910 --> 00:06:59.060 
URI- our domain name mainframe-academy.de.

78
00:07:00.090 --> 00:07:02.310 
And especially

79
00:07:04.010 --> 00:07:12.180 
the marker to define what you want to see and the last part is

80
00:07:12.580 --> 00:07:19.240 
the ID of this attendee. In this case, EMA1205.

81
00:07:20.110 --> 00:07:26.160 
And when https is used, it is most common the operations available are then

82
00:07:26.350 --> 00:07:32.840 
GET, POST, PUT, DELETE. Very common http request and these can

83
00:07:32.840 --> 00:07:39.660 
be seen as CRUD http methods. And many formats are supported. most

84
00:07:39.810 --> 00:07:46.110 
common are XML and/or java script of tech notation.

85
00:07:47.050 --> 00:07:54.030 
And now we see the REST request is very, very easy. We just use

86
00:07:54.700 --> 00:08:00.300 
GET. And in this case, we want to

87
00:08:02.210 --> 00:08:08.700 
GET as example modules that are offered by our European Mainframe Academy

88
00:08:08.850 --> 00:08:14.610 
as education modules. And the response is also very easy.

89
00:08:15.110 --> 00:08:21.430 
To interpret in this case we see the java script object notation.

90
00:08:22.070 --> 00:08:29.240 
In this case we get it from our website and we offer module

91
00:08:29.250 --> 00:08:34.520 
security as example starting at the, or started at the

92
00:08:34.630 --> 00:08:38.450 
twenty ninth january of two thousand and fifteen.

93
00:08:39.160 --> 00:08:43.560 
And we have a second module performance management started at

94
00:08:43.670 --> 00:08:47.230 
the eighth of february two thousand and fifteen.

95
00:08:47.830 --> 00:08:52.140 
Just to give you an impression on how

96
00:08:52.890 --> 00:09:00.540 
small and compared to SOAP, how really just

97
00:09:03.710 --> 00:09:07.410 
a few things have to be specified for the

98
00:09:07.850 --> 00:09:11.840 
request and the response is also very skin.

99
00:09:16.340 --> 00:09:21.790 
The distinction between heavy and light web services-

100
00:09:22.070 --> 00:09:25.170 
heavy web services are all the web services defined

101
00:09:27.490 --> 00:09:32.560 
within the SOAP environment. With web services

102
00:09:33.210 --> 00:09:38.380 
asterisk means something. There are a lot of web services standards available,

103
00:09:38.560 --> 00:09:44.980 
and if you really use as example security and transactional and other

104
00:09:45.800 --> 00:09:51.760 
important information, if you want to use the ACID transactions, in

105
00:09:51.770 --> 00:09:58.530 
these cases maybe it's really useful to use SOAP, but it's many cases

106
00:09:58.660 --> 00:10:03.810 
it's just too heavy and there are light services like REST.

107
00:10:04.290 --> 00:10:09.930 
I just mentioned XML_RPC and so on. And

108
00:10:10.490 --> 00:10:14.970 
it's really compared to SOAp, much, much lighter.

109
00:10:15.680 --> 00:10:20.410 
And here is the comparison between SOAP and REST. SOAP is

110
00:10:20.410 --> 00:10:27.400 
an XML- protocol. REST is an architectural style protocol.

111
00:10:27.760 --> 00:10:34.220 
We use WSDL in SOAP for communication between consumer and provider.

112
00:10:34.590 --> 00:10:40.970 
And in rest we just use xml or JSON to send and receive data. It's

113
00:10:41.350 --> 00:10:45.270 
much easier to specify what we what we want to access.

114
00:10:46.730 --> 00:10:53.010 
With SOAP, invokes services by calling some kind of a remote procedure call method.

115
00:10:53.290 --> 00:10:57.500 
And in REST again we simply call services via URL path.

116
00:10:58.900 --> 00:11:03.670 
In SOAP, SOAP does not return

117
00:11:04.210 --> 00:11:10.340 
normally, not return human-readable result. Result in REST is normally

118
00:11:12.350 --> 00:11:17.300 
in many cases very easily readable as just plain XML or JSON.

119
00:11:17.970 --> 00:11:20.870 
With soap transfer is via http.

120
00:11:21.590 --> 00:11:25.480 
You can also use the SMTP, FTP and

121
00:11:26.110 --> 00:11:31.240 
other protocols. In REST, in any case it's really just http.

122
00:11:32.480 --> 00:11:39.110 
In SOAP, javascript can call SOAP but it is difficult to implement. In REST,

123
00:11:39.220 --> 00:11:45.810 
it's really easy to call or rest the requests from javascript.

124
00:11:46.650 --> 00:11:53.020 
With SOAP, performance is poor because of the shown and already mentioned

125
00:11:53.320 --> 00:11:57.220 
XML Overhead. The performance normally in REST

126
00:11:57.990 --> 00:12:03.560 
architectures is much better compared to SOAP. So

127
00:12:06.100 --> 00:12:11.170 
to give you some advice, if there is no compelling reason

128
00:12:11.170 --> 00:12:13.890 
to use SOAP, you should use REST.

129
00:12:14.530 --> 00:12:18.990 
When you use the REST, REST uses standardized http.

130
00:12:19.510 --> 00:12:26.110 
It uses different formats, not just XML, JSON, parses faster.

131
00:12:26.500 --> 00:12:32.560 
And browsers normally support by default already Json and best scales

132
00:12:33.120 --> 00:12:39.170 
are normally really perfect. When you use SOAP, when you use, I already mentioned

133
00:12:39.360 --> 00:12:43.300 
the web services security standardization and definitions.

134
00:12:44.560 --> 00:12:48.340 
When we want to use  web services

135
00:12:49.150 --> 00:12:54.110 
Atomic Transactions, means transactions where ACID

136
00:12:55.990 --> 00:13:04.260 
characterization is required, and SOAP supports

137
00:13:05.120 --> 00:13:07.950 
web services Reliable Messaging.

138
00:13:09.300 --> 00:13:10.750 
We will see especially

139
00:13:11.570 --> 00:13:17.820 
in one of the later videos, how as example Walmart deals with

140
00:13:17.910 --> 00:13:22.350 
such interfaces and they in fact use RESTful interfaces. We

141
00:13:22.350 --> 00:13:28.320 
will get a lot more information about this idea and see a style of using

142
00:13:28.500 --> 00:13:31.430 
REST interfaces when we talk about the

143
00:13:32.030 --> 00:13:34.170 
walmart success story.

144
00:13:37.020 --> 00:13:42.210 
As always, if you have any questions or remarks please use the discussion forum

145
00:13:42.670 --> 00:13:49.950 
on the OpenHPI platform. Thanks for watching and see you again

146
00:13:49.950 --> 00:13:51.900 
in one of our next video clips.
