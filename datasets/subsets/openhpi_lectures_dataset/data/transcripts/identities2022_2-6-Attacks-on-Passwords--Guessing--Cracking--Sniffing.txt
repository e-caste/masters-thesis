WEBVTT

1
00:00:00.420 --> 00:00:03.740 
Now we want to introduce some
important attacks on passwords,

2
00:00:04.240 --> 00:00:07.520 
in our openHPI course about
Digital Identities.

3
00:00:08.720 --> 00:00:12.320 
The idea of such attacks
against passwords

4
00:00:12.910 --> 00:00:16.160 
is to overcome password-based
authentication.

5
00:00:17.250 --> 00:00:23.010 
There are several methods, for example
"Password Guessing", "Password Cracking", etc.

6
00:00:23.930 --> 00:00:25.130 
"Guessing Passwords",
it is clear

7
00:00:25.770 --> 00:00:33.460 
from the personal context, one tries out, for
example name, date or favourite actor.

8
00:00:33.990 --> 00:00:38.210 
The "Password Cracking", that
means a systematic testing

9
00:00:38.670 --> 00:00:43.760 
with a word list, with dictionaries,
and with such password top-10 lists.

10
00:00:44.310 --> 00:00:50.240 
The Interception of passwords, that is
"Password Sniffing", another attack method,

11
00:00:50.510 --> 00:00:55.490 
to check all the network
packets which were sent

12
00:00:55.490 --> 00:01:01.350 
through the internet, and to search
for username-password combinations.

13
00:01:01.920 --> 00:01:07.620 
And then also, attacks are known and
successful by means of malware,

14
00:01:07.850 --> 00:01:13.720 
like keyloggers or trojans to eavesdrop
a password when it is entered.

15
00:01:13.990 --> 00:01:16.680 
And we already discussed
the number of attacks

16
00:01:17.760 --> 00:01:20.360 
on the basis of
social engineering.

17
00:01:21.190 --> 00:01:25.910 
So, let's have a closer look at the
various methods, to understand

18
00:01:26.330 --> 00:01:32.660 
in detail how the method is working,
and then to draw a conclusion on

19
00:01:33.460 --> 00:01:36.310 
how one has to choose
a password, so that

20
00:01:37.070 --> 00:01:41.670 
the introduced attacks
are not successful.

21
00:01:42.600 --> 00:01:44.930 
So passwords are
guessed online,

22
00:01:45.890 --> 00:01:51.710 
and then used to try to get access to an
internet service, simply by checking

23
00:01:51.890 --> 00:01:54.360 
different username-password
combinations.

24
00:01:54.980 --> 00:01:58.220 
And surprisingly often,
this is successful

25
00:01:58.640 --> 00:02:02.810 
because users work with weak,
too simple passwords.

26
00:02:04.300 --> 00:02:07.070 
And the reason behind
is the general

27
00:02:07.790 --> 00:02:12.550 
problem of the trade-off between
security and usability.

28
00:02:13.480 --> 00:02:17.830 
The more complex a password
is, the less usable it is.

29
00:02:18.240 --> 00:02:23.970 
So humans look for easy-going
approaches. So often, they take

30
00:02:23.980 --> 00:02:25.460 
a very simple password,

31
00:02:26.240 --> 00:02:28.510 
which they cannot forget.
They take their name

32
00:02:29.030 --> 00:02:33.610 
or others, and of course this
information is simple to guess.

33
00:02:35.270 --> 00:02:38.300 
So for example, to discover
a valid username,

34
00:02:39.030 --> 00:02:45.190 
a guessed password can only be abused
if the combination username-

35
00:02:45.580 --> 00:02:51.560 
-password is known to the attacker.
So when an attacker gets

36
00:02:51.560 --> 00:02:57.390 
access and guesses a password, he/she
also needs the associated username.

37
00:02:58.650 --> 00:03:03.270 
Such a user name can be found in
different ways. For example, one can

38
00:03:03.560 --> 00:03:07.780 
try default usernames.
Usernames that are

39
00:03:10.270 --> 00:03:16.590 
in the delivery status of each software;
such default user names are admin

40
00:03:16.900 --> 00:03:22.660 
guest, service, etc - and often
it works. The usernames can

41
00:03:22.660 --> 00:03:28.590 
be found from other services, for example,
from a leaked database. In the database,

42
00:03:29.450 --> 00:03:33.530 
the leaked identity database, of
course, the username and the

43
00:03:33.960 --> 00:03:40.100 
password, as they belong to
the same digital identity.

44
00:03:40.950 --> 00:03:47.280 
Then the attackers can generate
usernames according to

45
00:03:47.290 --> 00:03:51.650 
some patterns, for example, first
or last name of the user -

46
00:03:52.280 --> 00:03:55.140 
it's a very common approach
to how users when

47
00:03:56.170 --> 00:03:58.540 
they register, select
the username.

48
00:04:00.350 --> 00:04:03.880 
Another very popular selection is
the first and also the last name,

49
00:04:04.560 --> 00:04:08.130 
with attached numbers.
So, for example, John64

50
00:04:08.770 --> 00:04:14.450 
Robert17. The email address
is often used. So this

51
00:04:14.880 --> 00:04:17.870 
helps the attacker
to find the

52
00:04:19.050 --> 00:04:21.890 
combinations, the
username-password combination.

53
00:04:22.760 --> 00:04:27.220 
How the attacker can discover
a user's passwords?

54
00:04:28.490 --> 00:04:34.830 
To make passwords easier, to remember, many
users choose a simple structured password

55
00:04:34.960 --> 00:04:38.710 
or a password taken out from
their personal context.

56
00:04:39.270 --> 00:04:44.040 
Studies show that about
10% of all users

57
00:04:44.380 --> 00:04:47.040 
choose their first
name as a password.

58
00:04:47.720 --> 00:04:51.550 
You see it's not difficult for
the attacker to find out

59
00:04:52.290 --> 00:04:54.250 
then such passwords.

60
00:04:55.410 --> 00:05:02.040 
Users also use unchanged default settings
for username-password combinations.

61
00:05:02.170 --> 00:05:07.180 
Default settings: when users buy
or register with new software,

62
00:05:07.690 --> 00:05:11.120 
to introduce the software, to
configure the software - there are

63
00:05:11.230 --> 00:05:18.350 
such default settings. If one is not changing
this, they stay in place and also

64
00:05:18.990 --> 00:05:21.740 
the attacker knows them
and can misuse them.

65
00:05:22.960 --> 00:05:25.670 
For example, in a

66
00:05:26.560 --> 00:05:32.940 
Wi-Fi router or others. So for
example, test/test, guest/guest, admin/admin

67
00:05:33.640 --> 00:05:39.220 
are such combinations.

68
00:05:40.010 --> 00:05:44.690 
Also, hackers can easily check through
the list of common combinations

69
00:05:44.690 --> 00:05:46.670 
which are also published
on the internet.

70
00:05:48.960 --> 00:05:54.410 
A more systematic method to attack
passwords is "Password Cracking".

71
00:05:55.150 --> 00:05:58.540 
Password cracking is
executed offline,

72
00:05:59.180 --> 00:06:02.310 
on a list of hashed
passwords. So the

73
00:06:02.780 --> 00:06:06.300 
attacker was able to
access the database

74
00:06:06.960 --> 00:06:12.190 
of a service, and in the database
there are the digital identities

75
00:06:12.190 --> 00:06:15.880 
stored from the customers
of that service, but the

76
00:06:17.100 --> 00:06:22.130 
data, the identity data and in
particular the passwords are

77
00:06:22.130 --> 00:06:28.120 
not stored in plaintext, they are stored in
a hashed form. We already discussed this.

78
00:06:28.880 --> 00:06:35.030 
So from the hashed password, it's
not possible to recompute the

79
00:06:35.150 --> 00:06:39.250 
password directly. So
the password cracking

80
00:06:39.760 --> 00:06:43.810 
tries to arrive at
passwords in plaintext,

81
00:06:44.630 --> 00:06:49.010 
out from a disguised table of
hashed values of the password.

82
00:06:49.780 --> 00:06:55.360 
So the attacker wants to reveal the
password out of a hash value.

83
00:06:56.060 --> 00:06:59.660 
The hash values they
know from such databases.

84
00:07:00.130 --> 00:07:03.090 
But they cannot
be directly

85
00:07:04.230 --> 00:07:07.460 
computed because hash
functions are constructed as

86
00:07:07.920 --> 00:07:13.060 
one-way functions, they are constructed in
such a way that computing hash is easy,

87
00:07:13.590 --> 00:07:16.600 
but computing the password
is practically impossible.

88
00:07:17.980 --> 00:07:23.780 
Often this method, this mechanical
method is much faster than

89
00:07:23.790 --> 00:07:27.850 
a trial and error approach
by password guessing.

90
00:07:28.540 --> 00:07:35.170 
So I already mentioned, the requirement
to do this is a disguised user file

91
00:07:35.420 --> 00:07:40.340 
with the password hashes, for example, from
a database or from a cracked computer.

92
00:07:41.160 --> 00:07:45.790 
And now this password
cracking works as follows:

93
00:07:46.570 --> 00:07:49.870 
It is performed either
with the help of a

94
00:07:50.320 --> 00:07:54.880 
dictionary or it can also be
performed with brute-force.

95
00:07:55.870 --> 00:07:57.790 
Let's look at how this

96
00:07:58.470 --> 00:08:02.710 
password cracking works on
the basis of dictionaries.

97
00:08:03.610 --> 00:08:08.620 
This is also called a dictionary
attack. So here a list of

98
00:08:09.310 --> 00:08:14.160 
entries of a dictionary are
hashed one after the other,

99
00:08:14.790 --> 00:08:19.840 
and the hash value, the computed
hash value is compared

100
00:08:20.100 --> 00:08:22.290 
with a hash value
out of the

101
00:08:22.970 --> 00:08:27.860 
customer database with a digital
identity and with the hash password

102
00:08:28.070 --> 00:08:33.620 
of the user. So the word list in the
dictionary, one by one word is taken,

103
00:08:33.910 --> 00:08:37.180 
hash is computed. The hash is
computed; whether the hacker

104
00:08:37.990 --> 00:08:42.400 
can find it in the database, in
the stolen database and when

105
00:08:42.400 --> 00:08:49.310 
the hacker can find it then he
sees what is its user and

106
00:08:49.310 --> 00:08:51.880 
he sees from the
dictionary what is the

107
00:08:52.530 --> 00:08:53.940 
password in cleartext.

108
00:08:54.560 --> 00:09:00.240 
If this method, this cracking method
is done in a brute-force manner,

109
00:09:00.820 --> 00:09:07.640 
then one after the other password is formed
from all possible character combinations,

110
00:09:08.050 --> 00:09:13.240 
from all possible character
combinations and then the test

111
00:09:13.270 --> 00:09:16.160 
is done whether the
computed password

112
00:09:16.990 --> 00:09:19.910 
can be found in
this identity,

113
00:09:20.770 --> 00:09:25.780 
the identity in the customer
database with identity data.

114
00:09:26.570 --> 00:09:32.720 
Here you get an idea of why it is
important to use long passwords,

115
00:09:33.440 --> 00:09:37.610 
because it's much more
difficult, almost impossible,

116
00:09:38.020 --> 00:09:45.620 
to check long combinations, while it's
quite easy to check short combinations of

117
00:09:45.950 --> 00:09:48.930 
different characters and
compute their hash value.

118
00:09:49.620 --> 00:09:55.310 
So brute-force attacks are definitely
successful if the attacker would have

119
00:09:55.660 --> 00:10:00.980 
infinite time and computation power.
He definitely will find

120
00:10:00.980 --> 00:10:02.580 
the password because
each password is a

121
00:10:03.690 --> 00:10:09.790 
combination of text, but if the
password is long enough it takes

122
00:10:09.900 --> 00:10:14.990 
too long for the attacker to
succeed with this method.

123
00:10:15.270 --> 00:10:18.280 
And long here means
decades or centuries.

124
00:10:20.360 --> 00:10:24.640 
The password cracking programs
are today very fast,

125
00:10:25.190 --> 00:10:30.240 
because computers are very
powerful. They can make use of

126
00:10:30.720 --> 00:10:33.770 
not only the Processors,
the CPUs of the

127
00:10:36.260 --> 00:10:40.340 
computers, but they can also
use graphic processors

128
00:10:40.790 --> 00:10:47.210 
of computers, so-called GPUs
which can perform such tests

129
00:10:47.530 --> 00:10:52.700 
much faster. To have a
historical perspective,

130
00:10:53.230 --> 00:10:58.790 
40 years ago one could
test three passwords

131
00:10:59.350 --> 00:11:04.010 
per second, with the machinery
that was in place 40 years ago.

132
00:11:04.360 --> 00:11:10.660 
Today per second almost 1
billion SHA-1 passwords can be

133
00:11:10.660 --> 00:11:16.510 
tested on a current PC. On a PC not on a
Supercomputer - 1 billion a per second.

134
00:11:17.090 --> 00:11:22.030 
And almost 200 billion MD5
passwords can be tested

135
00:11:22.330 --> 00:11:25.620 
by means of such
GPU, a graphical

136
00:11:26.900 --> 00:11:29.280 
processors cluster.

137
00:11:29.940 --> 00:11:34.490 
So this cracking method is
really powerful today.

138
00:11:35.650 --> 00:11:40.260 
The recommendation is that
knowing this attack,

139
00:11:40.730 --> 00:11:44.190 
you should test your
own passwords against

140
00:11:44.650 --> 00:11:49.640 
such cracking programs and
against available word lists

141
00:11:49.640 --> 00:11:54.070 
for such cracking programs that are
freely available on the internet.

142
00:11:54.230 --> 00:12:01.570 
Here are some, check your password
with these systems and be surprised,

143
00:12:02.190 --> 00:12:06.040 
in a short time, your
password is revealed.

144
00:12:07.610 --> 00:12:11.580 
Another attack for passwords
is by spying for passwords.

145
00:12:12.200 --> 00:12:18.040 
And this can be done in the
most easy way by the installation

146
00:12:18.040 --> 00:12:21.910 
of small malicious
programs on the user's

147
00:12:22.430 --> 00:12:27.140 
computer. Keyloggers are
famous for that reason.

148
00:12:28.260 --> 00:12:33.610 
They can be secretly installed,
for example, if an attacker

149
00:12:35.040 --> 00:12:41.390 
motivates a user to look at a special
website, to get a present, to get some

150
00:12:41.980 --> 00:12:46.520 
special information or new
software, this way the

151
00:12:47.060 --> 00:12:53.970 
attacker is able to, unknown
from the user, install,

152
00:12:54.740 --> 00:12:59.020 
smuggle such malicious software, such
malware on the computer of the user.

153
00:13:00.190 --> 00:13:05.890 
What is the idea of the keyloggers? The
keyloggers intercept keyboard inputs.

154
00:13:06.060 --> 00:13:12.650 
So they save each keyboard action and in
this way, of course, they save exactly

155
00:13:12.990 --> 00:13:17.520 
the symbols that are

156
00:13:18.780 --> 00:13:25.090 
touched when a password is given in.
This is recorded and then later on

157
00:13:25.580 --> 00:13:30.860 
the recorded text is sent to
the attacker or the attacker

158
00:13:31.330 --> 00:13:35.330 
gets access to this and then
the attacker can analyze this

159
00:13:36.390 --> 00:13:40.310 
recorded text for such keywords
like log in or password.

160
00:13:40.930 --> 00:13:46.400 
And then he gets exactly
to the data of the,

161
00:13:46.990 --> 00:13:50.860 
to the secret data
of the user.

162
00:13:51.610 --> 00:13:57.310 
Attackers can download later on these
files from the system or they can

163
00:13:57.690 --> 00:14:03.060 
automatically cause the system to
send this data. So in this way

164
00:14:03.290 --> 00:14:09.190 
the attacker gets access to the
password in a very simple way

165
00:14:09.350 --> 00:14:15.740 
if they succeed in installing malware
on the computer of the user.

166
00:14:16.870 --> 00:14:23.260 
So, in summary, the attackers have developed
numerous attack methods to obtain passwords,

167
00:14:23.660 --> 00:14:29.360 
because password authentication
is so popular and so simple.

168
00:14:29.430 --> 00:14:36.030 
Simply knowing the password allows the
attacker to misuse a user account,

169
00:14:36.260 --> 00:14:40.170 
to misuse a service in
the name of that user.

170
00:14:40.770 --> 00:14:44.850 
Methods are "Guessing passwords",
"Cracking passwords",

171
00:14:45.610 --> 00:14:49.980 
"Sniffing passwords" - this is
interception with network packets,

172
00:14:50.350 --> 00:14:53.730 
and the use of malicious
software like keyloggers.

173
00:14:54.530 --> 00:15:00.160 
About social engineering attacks to
get access to a password, we already

174
00:15:00.900 --> 00:15:01.820 
have discussed this.
