WEBVTT

1
00:00:00.660 --> 00:00:06.200 
Welcome to video clip 1.4 in which
we will discuss Interacting Business Processes.

2
00:00:07.640 --> 00:00:12.120 
In the definition of business
process we said that we saw that

3
00:00:12.120 --> 00:00:15.950 
a business process can
interact with other business

4
00:00:15.950 --> 00:00:20.580 
process but the business process is
enacted within an organization.

5
00:00:21.470 --> 00:00:25.450 
We look at an example of order
fulfillment by a reseller

6
00:00:25.450 --> 00:00:29.850 
which is not two different
from the claim handling example

7
00:00:29.850 --> 00:00:33.550 
that we've seen before from a
conceptual point of view of course.

8
00:00:34.250 --> 00:00:38.000 
And we like to focus
on the interactions.

9
00:00:38.580 --> 00:00:43.540 
And we have activities here
almost only activities that are

10
00:00:43.540 --> 00:00:46.490 
related to sending and
receiving activities.

11
00:00:47.000 --> 00:00:48.250 
So here we have a

12
00:00:49.810 --> 00:00:55.160 
we have a process model that says it's
about a reseller process of reseller.

13
00:00:55.470 --> 00:00:59.430 
Whenever an order is received I
first need to check the order.

14
00:00:59.860 --> 00:01:04.500 
Then there is the symbol and this
symbol indicates that the two

15
00:01:04.850 --> 00:01:09.430 
outgoing edges are triggered at the
same time are signaled at the same time.

16
00:01:09.700 --> 00:01:16.410 
So two independent on flows are created
here so that I can send the invoice

17
00:01:16.550 --> 00:01:21.080 
and receive the payment after sending
the invoice. But concurrently

18
00:01:21.080 --> 00:01:24.810 
to the upper branch I can
ship the products already.

19
00:01:25.620 --> 00:01:31.630 
Here I need to synchronize
the two flows and when both

20
00:01:31.810 --> 00:01:36.460 
flows have been synchronized I can archive
the order and the process is finished.

21
00:01:36.870 --> 00:01:40.720 
So that let's say gives
you information about

22
00:01:41.150 --> 00:01:45.690 
of this order fulfillment
process by resellers as local

23
00:01:46.400 --> 00:01:50.490 
business process that runs the premises
of the resellers so to speak.

24
00:01:51.650 --> 00:01:56.230 
A reseller only makes sense
if there is a buyer or attached

25
00:01:56.230 --> 00:01:58.000 
to that that uses
the reseller

26
00:01:58.740 --> 00:02:02.800 
and the buyer also runs a business
process and that so corresponds

27
00:02:02.800 --> 00:02:04.940 
to the business process
of the reseller.

28
00:02:05.400 --> 00:02:09.400 
And the buyer runs a process for placing
the order for receiving the products

29
00:02:09.520 --> 00:02:14.380 
and things like this. The buyer process
interacts with the reseller process.

30
00:02:14.850 --> 00:02:18.130 
So the buyer process
has activities for

31
00:02:19.340 --> 00:02:24.860 
placing the order, for receiving an
invoice, for settling the invoice,

32
00:02:25.140 --> 00:02:29.630 
for receiving the product and
only if everything is done

33
00:02:29.630 --> 00:02:33.020 
finally the buyer process
finishes or terminates.

34
00:02:34.360 --> 00:02:39.290 
Now we use message flow to
connect these two processes the

35
00:02:39.290 --> 00:02:43.200 
process of the buyer and the
process of the reseller and we

36
00:02:43.200 --> 00:02:46.790 
and you see the message flow
that we have been discussing

37
00:02:47.280 --> 00:02:51.730 
informally already. So here there's
a message flow from place order

38
00:02:52.710 --> 00:02:57.830 
of the buyer to the order received
start event of the reseller.

39
00:02:58.280 --> 00:03:03.450 
And from a business perspective
well the buyer places an order,

40
00:03:03.940 --> 00:03:09.490 
reseller receives the order
and then knows well I need

41
00:03:09.490 --> 00:03:13.410 
to start a new process instance
and check the order, send the

42
00:03:13.410 --> 00:03:14.620 
invoice and so forth.

43
00:03:15.640 --> 00:03:17.560 
And here related

44
00:03:18.560 --> 00:03:22.740 
to the activities after the split
though the check order is an

45
00:03:22.880 --> 00:03:26.640 
internal activity the only activity
actually here with which

46
00:03:26.640 --> 00:03:32.630 
is not a send or receive activity in
this example. And so concurrently

47
00:03:33.360 --> 00:03:38.480 
so two flows can be started.
So the invoice can be sent

48
00:03:39.170 --> 00:03:45.090 
and the invoice can be received
the invoice and settles all the

49
00:03:45.640 --> 00:03:49.960 
a payment can be can be received
and concurrently to these

50
00:03:50.070 --> 00:03:54.650 
products can be shipped and the products
can be received on the buyer side

51
00:03:54.810 --> 00:03:59.700 
and if everything is executed successfully
then the two processes terminate.

52
00:04:01.090 --> 00:04:04.850 
Alright so this is how the processes
interact with each other

53
00:04:04.970 --> 00:04:09.490 
and we see that there is some freedom
in the execution ordering of this.

54
00:04:09.840 --> 00:04:13.730 
So sending the invoices than
before receiving a product

55
00:04:13.730 --> 00:04:18.650 
of course but shipping and receiving
the products can be done in any

56
00:04:19.040 --> 00:04:25.400 
can be done in concurrently to sending
or receiving the invoice and settling

57
00:04:25.620 --> 00:04:28.700 
the invoice and receiving the
payment. So there is no there

58
00:04:28.700 --> 00:04:30.770 
is no defined
ordering on that.

59
00:04:32.300 --> 00:04:37.170 
So the interaction between
business processes is done,

60
00:04:37.260 --> 00:04:40.100 
was performed by sending and
receiving messages. That is an

61
00:04:40.100 --> 00:04:42.560 
assumption also
of BPMN

62
00:04:43.380 --> 00:04:47.570 
and I think that's a quite
useful assumption since

63
00:04:47.900 --> 00:04:52.740 
different parties do not in
general do not have a common

64
00:04:52.740 --> 00:04:58.330 
data store each company has on their
own as a data basis data stores

65
00:04:58.520 --> 00:05:01.940 
where the local data is
stored and maintained

66
00:05:02.670 --> 00:05:07.190 
and interaction between different
parties happens through sending

67
00:05:07.190 --> 00:05:11.600 
of messages. E-mail messages
messages sent via a web form

68
00:05:11.600 --> 00:05:15.150 
or things like this. so I think these
assumptions also of the BPMN

69
00:05:15.380 --> 00:05:17.040 
make a lot of sense.

70
00:05:19.100 --> 00:05:21.900 
And also of course this assumption
fit nicely with the insurance

71
00:05:21.900 --> 00:05:26.010 
claim example where the
insurance claim is sent from the

72
00:05:26.010 --> 00:05:29.530 
client to the insurance company
and then the insurance company

73
00:05:29.880 --> 00:05:33.740 
sends a letter of approval either
a letter of approval or letter

74
00:05:33.740 --> 00:05:35.620 
of rejection back
to the client.

75
00:05:38.920 --> 00:05:42.910 
The question now is how these
interacting processes can be

76
00:05:42.920 --> 00:05:48.000 
specified so we uptil now we specified
these interacting processes

77
00:05:48.260 --> 00:05:53.420 
by connecting send and receive
activities or events of the

78
00:05:53.550 --> 00:05:58.420 
interacting processes with each
other but we could also specify

79
00:05:58.420 --> 00:06:02.570 
this as a process choreography. Well
we could use this interconnecting

80
00:06:02.570 --> 00:06:07.620 
interface of connected interfaces to
specify process choreographies but in

81
00:06:07.770 --> 00:06:13.820 
chapter six we will look in richer
ways of expressing process

82
00:06:13.820 --> 00:06:16.100 
Choreography. So what is
the process choreography?

83
00:06:17.430 --> 00:06:19.030 
The term choreography

84
00:06:21.220 --> 00:06:26.510 
indicates the absence of a central
agents that controls the activities

85
00:06:26.980 --> 00:06:30.550 
in the business processes involved.
The interaction is only

86
00:06:30.550 --> 00:06:33.240 
achieved by sending and
receiving messages.

87
00:06:33.770 --> 00:06:36.270 
So if I come
back to this

88
00:06:37.050 --> 00:06:38.730 
example we have here,

89
00:06:39.340 --> 00:06:44.300 
so locally the insurance
company might use a process

90
00:06:44.300 --> 00:06:46.910 
Orchestration. So these
activities might be

91
00:06:47.440 --> 00:06:52.300 
or can be executed using a business
process management system

92
00:06:52.400 --> 00:06:56.530 
for instance that orchestrates
that the activities are executed

93
00:06:56.530 --> 00:06:59.890 
in a way in exactly the
same way as specified here.

94
00:07:01.090 --> 00:07:04.980 
But the process management
system cannot say something

95
00:07:04.980 --> 00:07:08.880 
about cannot prescribe certain
orderings of activities on the

96
00:07:08.880 --> 00:07:13.030 
client site or in others. Therefore
the processes are interacting

97
00:07:13.030 --> 00:07:15.700 
by standing and receiving
messages to do that.

98
00:07:17.610 --> 00:07:21.370 
Alright so in process choreography
there is absence of a central

99
00:07:21.370 --> 00:07:24.560 
agency interaction is only achieved
by sending and receiving

100
00:07:24.560 --> 00:07:28.830 
Messages. So if I want to have an
if I want to say have an effect

101
00:07:28.830 --> 00:07:30.740 
on the internal
process of

102
00:07:31.510 --> 00:07:34.340 
an organization I need to
send a message, if I want to

103
00:07:34.750 --> 00:07:37.820 
create an insurance claim process
I need to send an insurance

104
00:07:37.820 --> 00:07:39.150 
claim message
for instance.

105
00:07:40.180 --> 00:07:44.340 
And the situation is quite similar
to dancers who need to agree

106
00:07:44.340 --> 00:07:48.490 
on a common choreography before
the performance starts.

107
00:07:49.050 --> 00:07:52.480 
During the performance each
dancer behaves autonomously but

108
00:07:52.480 --> 00:07:56.880 
in line with his or her part in the
choreography and this is where the term

109
00:07:57.140 --> 00:08:03.970 
process choreography stems from. So in a process
choreography the different

110
00:08:04.110 --> 00:08:08.500 
the different interacting
processes. Each process proceeds

111
00:08:09.000 --> 00:08:12.580 
with the autonomously from the
others but here and there they

112
00:08:12.580 --> 00:08:16.360 
interact by sending and receiving
messages and at that point

113
00:08:16.640 --> 00:08:22.400 
they say have implications, one process
can imply changes in another process.

114
00:08:23.490 --> 00:08:27.630 
Alright and the agreement about
how these bits and pieces are

115
00:08:27.630 --> 00:08:31.050 
put together this is done by
the process choreography.

116
00:08:31.870 --> 00:08:37.940 
We'll discuss process choreography
in detail also in week six.

117
00:08:39.060 --> 00:08:41.410 
Alright now let's look at an
example where we have a new

118
00:08:41.410 --> 00:08:45.680 
reseller. So the buyer process didn't change
but we have a new reseller called reseller A.

119
00:08:46.700 --> 00:08:50.740 
And the policy of the reseller is a
bit different than the policy of the

120
00:08:50.970 --> 00:08:55.090 
the policy of the reseller A
is a bit different from

121
00:08:55.090 --> 00:09:00.670 
the policy of the reseller we
looked at so far. And that is

122
00:09:01.010 --> 00:09:02.840 
let's look at this

123
00:09:03.570 --> 00:09:05.150 
the structure of
the process.

124
00:09:06.390 --> 00:09:09.530 
So I check the order, I send the
Invoice, I receive the payment

125
00:09:09.540 --> 00:09:13.020 
and only the ownership of the
product. So I shipped the product

126
00:09:13.070 --> 00:09:16.230 
only after I received the payment
and that has been different

127
00:09:16.570 --> 00:09:19.430 
in the first version of
the reseller because

128
00:09:19.860 --> 00:09:25.270 
the shipped products could be
executed concurrently to the

129
00:09:25.970 --> 00:09:29.800 
to the sending of the invoice
and the receiving of the payment.

130
00:09:29.810 --> 00:09:31.490 
So there is a change
in the reseller.

131
00:09:33.130 --> 00:09:37.580 
So the question is whether the
reseller A can still communicate

132
00:09:37.700 --> 00:09:40.600 
correctly can interact
correctly with the buyer A.

133
00:09:41.090 --> 00:09:45.800 
So in order to do that we look
at a particular execution and

134
00:09:45.800 --> 00:09:49.150 
that is what the start is the
placing of the order so

135
00:09:49.150 --> 00:09:51.340 
here is the start, the placing
of the order comes here.

136
00:09:52.190 --> 00:09:54.990 
So the order is checked,
the invoice is sent,

137
00:09:56.140 --> 00:10:01.340 
that message goes back, then
the invoice is settled,

138
00:10:01.930 --> 00:10:03.520 
the payment is received,

139
00:10:04.350 --> 00:10:06.750 
the product is shipped,
the product is

140
00:10:07.410 --> 00:10:09.070 
Received, the process ends

141
00:10:09.730 --> 00:10:12.640 
and yeah that process ends.
So we see here that

142
00:10:13.210 --> 00:10:16.340 
these two processes can
still interact correctly

143
00:10:16.760 --> 00:10:22.730 
but this concurrency we had before
so the possibility of shipping

144
00:10:23.100 --> 00:10:27.920 
the goods at any time between
receiving or between

145
00:10:27.920 --> 00:10:32.360 
sending the invoice and or receiving
the payment that is lost now.

146
00:10:32.760 --> 00:10:35.780 
Basically it's a sequential
ordering of all these activities

147
00:10:35.790 --> 00:10:37.250 
that I was just
sketching.

148
00:10:40.200 --> 00:10:44.480 
Ok that is written here again
so reseller A sells
the

149
00:10:44.480 --> 00:10:48.490 
products only after receiving the payments
still the interaction between the business

150
00:10:48.600 --> 00:10:50.490 
processes is correct.

151
00:10:51.980 --> 00:10:56.560 
Now we have in addition to the
new reseller a new buyer and

152
00:10:56.560 --> 00:11:00.230 
the buyer is a bit cautious
since the buyer sends the

153
00:11:00.230 --> 00:11:02.820 
funds only after
receiving the product.

154
00:11:04.190 --> 00:11:07.520 
So here we have the placing of
the order, receiving the invoice,

155
00:11:07.520 --> 00:11:09.670 
receiving the products
and sending the funds.

156
00:11:10.630 --> 00:11:14.430 
So the buyer again only
sends the funds after

157
00:11:14.890 --> 00:11:18.250 
the product has
been received.

158
00:11:18.890 --> 00:11:21.510 
Combining this with
the news reseller A

159
00:11:21.970 --> 00:11:24.520 
leads to problem. Why does
it lead to a problem?

160
00:11:24.940 --> 00:11:28.450 
Because the reseller since the
product only after receiving

161
00:11:28.450 --> 00:11:31.150 
the funds, so both parties
wait for each other.

162
00:11:31.720 --> 00:11:35.080 
So if we look at one concrete
instance what happens here is that

163
00:11:35.530 --> 00:11:37.270 
the process starts
here.

164
00:11:39.230 --> 00:11:41.290 
I use the pen the
process starts here,

165
00:11:42.380 --> 00:11:45.740 
place order is executed,
the order is received,

166
00:11:47.600 --> 00:11:53.770 
check order is done, send invoice,
receive invoice, receive product

167
00:11:53.780 --> 00:11:57.780 
is not done because receive
products waits for send products

168
00:11:57.790 --> 00:12:00.190 
for the products to be sent but
the products cannot be sent

169
00:12:00.190 --> 00:12:01.790 
because the funds have
not been received.

170
00:12:02.270 --> 00:12:07.550 
Therefore the process gets
stuck received funds can also

171
00:12:07.690 --> 00:12:11.290 
not be executed or receive funds
cannot be executed because

172
00:12:11.290 --> 00:12:15.000 
receive funds cannot
be executed and this is where

173
00:12:15.000 --> 00:12:19.360 
the processes both processes are stuck
they cannot cooperate together

174
00:12:19.700 --> 00:12:23.280 
even though reseller was
perfectly able to work with

175
00:12:23.280 --> 00:12:28.830 
the previous buyer and buyer A
is also perfectly able

176
00:12:28.830 --> 00:12:32.190 
to communicate with the
original reseller.

177
00:12:32.640 --> 00:12:38.760 
But in this case we have a problem
and these types of problems will be

178
00:12:39.020 --> 00:12:42.420 
also discussed then in week six
and how to solve these problems

179
00:12:42.420 --> 00:12:46.250 
will also be discussed a week six. So
assume that there is a new buyer. A

180
00:12:46.350 --> 00:12:49.250 
buyer sends the funds only
after receiving the products.

181
00:12:50.260 --> 00:12:53.700 
And as a result the process is get
Stuck, the interaction between

182
00:12:53.700 --> 00:12:55.510 
the business processes
is incorrect.

183
00:12:56.520 --> 00:13:00.470 
And again this is studied
in more detail in week six.

184
00:13:01.940 --> 00:13:04.960 
This concludes the video clip 1.4
in which we looked

185
00:13:04.960 --> 00:13:10.450 
at Interacting Business Processes.
We discussed that processes

186
00:13:10.980 --> 00:13:13.860 
interact by sending and
receiving messages.

187
00:13:14.570 --> 00:13:21.640 
We defined process choreographies
as rules how different

188
00:13:21.640 --> 00:13:25.800 
processes interact with each
other without saying something

189
00:13:25.800 --> 00:13:30.200 
about the internal structure, without necessarily
saying something about the internal

190
00:13:30.470 --> 00:13:32.050 
structure of
the processes.

191
00:13:32.700 --> 00:13:36.240 
We see that processes may need
to wait for messages sent by

192
00:13:36.240 --> 00:13:39.950 
other processes and we've seen that
incorrect interactions may lead to

193
00:13:40.060 --> 00:13:43.140 
infinite waiting conditions
to deadlock situation that

194
00:13:43.610 --> 00:13:49.250 
need to be lets say detected on
the model ever before was implementing

195
00:13:49.350 --> 00:13:54.280 
the process. We will see more on
process choreography in week

196
00:13:54.420 --> 00:13:56.230 
six and that concludes
this video clip.
