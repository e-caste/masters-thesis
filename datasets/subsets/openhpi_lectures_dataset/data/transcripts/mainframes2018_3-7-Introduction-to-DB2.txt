WEBVTT

1
00:00:00.660 --> 00:00:03.689 
Hello. It's me again, Wolfram

2
00:00:03.690 --> 00:00:06.179 
Greis from the European Mainframe Academy, and in

3
00:00:06.180 --> 00:00:08.939 
this videotape, I want to talk about Db2,

4
00:00:08.940 --> 00:00:11.609 
especially the Db2 version running

5
00:00:11.610 --> 00:00:14.519 
on z/OS, the most important

6
00:00:14.520 --> 00:00:17.489 
operating system running on IBM

7
00:00:17.490 --> 00:00:18.490 
mainframes.

8
00:00:19.770 --> 00:00:22.619 
We have different components comprising

9
00:00:22.620 --> 00:00:25.529 
Db2 - the first component

10
00:00:25.530 --> 00:00:28.559 
to mention is database services.

11
00:00:28.560 --> 00:00:31.469 
It's something like the

12
00:00:31.470 --> 00:00:34.679 
database management environment

13
00:00:34.680 --> 00:00:35.939 
within Db2.

14
00:00:35.940 --> 00:00:39.809 
So all SQL requests coming in are executed

15
00:00:39.810 --> 00:00:42.899 
within this database services component.

16
00:00:42.900 --> 00:00:45.869 
And if you define as example a new object,

17
00:00:45.870 --> 00:00:49.079 
the object is cataloged in a catalog.

18
00:00:49.080 --> 00:00:51.929 
We have some default

19
00:00:51.930 --> 00:00:55.559 
databases managed by this component

20
00:00:55.560 --> 00:00:59.039 
to manage such a

21
00:00:59.040 --> 00:01:01.019 
Db2 environment.

22
00:01:01.020 --> 00:01:04.559 
We have a system services

23
00:01:04.560 --> 00:01:08.249 
component. This is responsible and managing

24
00:01:08.250 --> 00:01:11.069 
the recoveries in case

25
00:01:11.070 --> 00:01:13.679 
of database failures and so on.

26
00:01:13.680 --> 00:01:16.709 
So logging and the so-called bootstrap dataset

27
00:01:16.710 --> 00:01:19.499 
is very important to manage such

28
00:01:19.500 --> 00:01:22.499 
an environment.

29
00:01:22.500 --> 00:01:24.899 
We have the third component.

30
00:01:24.900 --> 00:01:27.719 
It's the Internal Resource

31
00:01:27.720 --> 00:01:29.340 
Log Manager, managing

32
00:01:30.480 --> 00:01:33.599 
logs to prevent concurrent

33
00:01:33.600 --> 00:01:37.049 
updates to the same data from different

34
00:01:37.050 --> 00:01:39.749 
database management systems.

35
00:01:39.750 --> 00:01:42.719 
And for communication between different database

36
00:01:42.720 --> 00:01:45.449 
management systems, we have a fourth

37
00:01:45.450 --> 00:01:48.419 
component called Distributed Data

38
00:01:48.420 --> 00:01:50.009 
Facility.

39
00:01:50.010 --> 00:01:52.829 
Each of these components is managed

40
00:01:52.830 --> 00:01:55.409 
by an address space within such

41
00:01:56.730 --> 00:01:59.609 
a z/OS environment. So we have an entire space for

42
00:01:59.610 --> 00:02:02.550 
the database services is called DBM1.

43
00:02:03.690 --> 00:02:04.765 
We have another

44
00:02:07.590 --> 00:02:10.249 
starter task an

45
00:02:10.250 --> 00:02:12.929 
address space managing to recover the

46
00:02:12.930 --> 00:02:16.139 
environment. It's called the MSTR.

47
00:02:16.140 --> 00:02:18.929 
We have the third

48
00:02:18.930 --> 00:02:21.569 
address space controlling the

49
00:02:21.570 --> 00:02:24.179 
logs. It's IRLM, Internal

50
00:02:24.180 --> 00:02:26.999 
Resource Log Manager address space and

51
00:02:27.000 --> 00:02:30.749 
we have the address space controlling

52
00:02:30.750 --> 00:02:32.219 
via distributed data facility.

53
00:02:35.450 --> 00:02:38.899 
These are, again, these four address

54
00:02:38.900 --> 00:02:41.719 
spaces you can find in each and every

55
00:02:41.720 --> 00:02:44.479 
database system, maybe with different

56
00:02:44.480 --> 00:02:45.883 
names, but the MSTR,

57
00:02:48.020 --> 00:02:51.259 
the DBM1, the IRLM and DDF are mostly

58
00:02:51.260 --> 00:02:53.839 
part of the stater task name.

59
00:02:53.840 --> 00:02:56.449 
So you can locate it in

60
00:02:56.450 --> 00:02:59.599 
each and every z/OS environment

61
00:02:59.600 --> 00:03:01.639 
where Db2 is running.

62
00:03:04.220 --> 00:03:07.009 
Already mentioned, we have some system databases

63
00:03:07.010 --> 00:03:10.309 
as example we have to catalog

64
00:03:10.310 --> 00:03:13.189 
and Db2 catalog is nothing more

65
00:03:13.190 --> 00:03:16.339 
than different

66
00:03:16.340 --> 00:03:18.979 
tables where all the objects

67
00:03:18.980 --> 00:03:20.839 
are managed.

68
00:03:20.840 --> 00:03:24.089 
Those Db2 catalog is by itself

69
00:03:24.090 --> 00:03:26.809 
a database containing

70
00:03:26.810 --> 00:03:29.869 
all the information about objects defined

71
00:03:29.870 --> 00:03:31.300 
in a Db2 environment.

72
00:03:32.390 --> 00:03:35.389 
Via Db2 directory, we have some more information

73
00:03:35.390 --> 00:03:37.279 
is managed

74
00:03:38.480 --> 00:03:41.269 
as example, application plans and

75
00:03:41.270 --> 00:03:44.239 
packages, information about

76
00:03:44.240 --> 00:03:47.869 
table space recovery and other information.

77
00:03:47.870 --> 00:03:49.909 
We have a default database for testing and

78
00:03:49.910 --> 00:03:53.309 
education. It is taken if you don't specify

79
00:03:53.310 --> 00:03:54.856 
your own database

80
00:03:56.510 --> 00:03:59.389 
when setting up some

81
00:03:59.390 --> 00:04:03.019 
tables and there's

82
00:04:03.020 --> 00:04:05.598 
temporary database DSNDBO7

83
00:04:06.850 --> 00:04:09.859 
because some SQL instructions need temporary

84
00:04:09.860 --> 00:04:13.009 
storage for intermediate information.

85
00:04:15.490 --> 00:04:18.699 
We have Db2 objects to

86
00:04:18.700 --> 00:04:21.518 
define, and these must be defined before

87
00:04:21.519 --> 00:04:24.999 
we work with such a Db2 environment.

88
00:04:25.000 --> 00:04:27.849 
So the first thing we need is a

89
00:04:27.850 --> 00:04:29.769 
so-called storage group.

90
00:04:29.770 --> 00:04:32.949 
It's a list of volumes

91
00:04:32.950 --> 00:04:34.959 
that are able to

92
00:04:36.010 --> 00:04:39.279 
manage such a database environment.

93
00:04:41.170 --> 00:04:43.999 
When we have a storage group, we can define a

94
00:04:44.000 --> 00:04:46.779 
database. So in a database, the

95
00:04:46.780 --> 00:04:50.349 
management system, we can have different databases

96
00:04:50.350 --> 00:04:52.269 
within the database.

97
00:04:52.270 --> 00:04:55.179 
We define a table space

98
00:04:55.180 --> 00:04:57.999 
for a space for all the tables, how

99
00:04:58.000 --> 00:05:00.879 
the name already states

100
00:05:00.880 --> 00:05:03.579 
and within this table space, afterwards, we

101
00:05:03.580 --> 00:05:06.249 
can define tables and see how some

102
00:05:06.250 --> 00:05:07.899 
additional optional

103
00:05:09.040 --> 00:05:12.079 
objects these can be indexes for better performance.

104
00:05:12.080 --> 00:05:15.369 
It can be used for giving

105
00:05:15.370 --> 00:05:18.009 
certain users just a subset of

106
00:05:18.010 --> 00:05:20.709 
the whole database environment

107
00:05:20.710 --> 00:05:23.709 
and something like an alias definition.

108
00:05:26.310 --> 00:05:29.129 
As example, storage group, I

109
00:05:29.130 --> 00:05:31.829 
just said, contains a list of devices that

110
00:05:31.830 --> 00:05:34.799 
are used as containers for

111
00:05:34.800 --> 00:05:37.529 
such an environment, and here is just

112
00:05:37.530 --> 00:05:40.199 
an example on how to

113
00:05:40.200 --> 00:05:43.769 
set up such a storage group.

114
00:05:43.770 --> 00:05:46.469 
Data class management, storage class has

115
00:05:46.470 --> 00:05:49.169 
something to do with storage management.

116
00:05:49.170 --> 00:05:52.649 
So in this case, you can define certain

117
00:05:52.650 --> 00:05:53.650 
classes.

118
00:05:54.360 --> 00:05:57.329 
It's the interface to storage management.

119
00:05:59.960 --> 00:06:02.599 
Then we need a database here, it's a command

120
00:06:02.600 --> 00:06:06.169 
syntax of creating such a database,

121
00:06:06.170 --> 00:06:08.929 
you refer to the storage group that's

122
00:06:08.930 --> 00:06:11.719 
already that has to be defined

123
00:06:11.720 --> 00:06:14.389 
before we create a database

124
00:06:14.390 --> 00:06:17.059 
you define on buffer pools and

125
00:06:17.060 --> 00:06:18.289 
other information.

126
00:06:20.390 --> 00:06:23.059 
Tables space, in this case, we create

127
00:06:23.060 --> 00:06:25.789 
table space, say, in which database

128
00:06:25.790 --> 00:06:28.609 
we want to have sustainable space and

129
00:06:28.610 --> 00:06:30.589 
which storage group to be used.

130
00:06:32.930 --> 00:06:35.779 
And last not least, we

131
00:06:35.780 --> 00:06:39.709 
create a table, don't go into details

132
00:06:39.710 --> 00:06:43.039 
within this syntax,

133
00:06:43.040 --> 00:06:46.219 
this is quite normal

134
00:06:46.220 --> 00:06:48.829 
SQL and if you know SQL, I can

135
00:06:48.830 --> 00:06:51.499 
think you can understand how this

136
00:06:51.500 --> 00:06:54.199 
command syntax has to be

137
00:06:54.200 --> 00:06:55.200 
interpreted.

138
00:06:57.400 --> 00:07:00.279 
OK, this was the short

139
00:07:00.280 --> 00:07:03.279 
introduction to Db2, and especially

140
00:07:03.280 --> 00:07:04.439 
Db2 on z/OS.

141
00:07:06.400 --> 00:07:09.219 
As always, if you have any questions

142
00:07:09.220 --> 00:07:12.279 
or remarks, please use the discussion forum

143
00:07:12.280 --> 00:07:15.039 
on the openHPI platform.

144
00:07:15.040 --> 00:07:17.949 
Thanks a lot for attending and see you in the next

145
00:07:17.950 --> 00:07:18.950 
videoclip.
