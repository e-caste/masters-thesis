WEBVTT

1
00:00:00.920 --> 00:00:04.840 
To better understand why it's
important to select strong passwords

2
00:00:05.390 --> 00:00:07.900 
we need to have a look

3
00:00:08.220 --> 00:00:14.530 
to some of the attacks against passwords.
The attackers, the cybercriminals

4
00:00:14.530 --> 00:00:17.190 
can overcome password
based authentication

5
00:00:17.410 --> 00:00:22.480 
using a large number of
different methods - for example

6
00:00:22.660 --> 00:00:26.790 
guessing passwords or cracking
passwords. Cracking passwords

7
00:00:26.790 --> 00:00:30.190 
is a systematic attempt
for example with a

8
00:00:30.380 --> 00:00:34.990 
word list or rainbow tables,
intercepting passwords

9
00:00:35.190 --> 00:00:41.650 
sniffing, that means to sniff
all the network packets

10
00:00:42.210 --> 00:00:46.970 
and scan them whether there
is a user name or password

11
00:00:47.240 --> 00:00:50.640 
transmitted. The
use of malware

12
00:00:50.790 --> 00:00:56.860 
can help the attackers to get
access to passwords, already

13
00:00:56.860 --> 00:01:01.370 
mentioned keyloggers or trojans
that record the user input

14
00:01:01.580 --> 00:01:07.530 
in the moment when a user
types in the password.

15
00:01:08.270 --> 00:01:10.780 
Social engineering
methods are possible.

16
00:01:11.070 --> 00:01:13.940 
So there is a wide range and we
want to have a closer look

17
00:01:14.150 --> 00:01:18.390 
to all this different methods.
Let's start with password

18
00:01:18.640 --> 00:01:25.360 
guessing. Passwords are guessed
online and used to try to access

19
00:01:25.370 --> 00:01:28.930 
a service on the internet
so the attacker

20
00:01:29.090 --> 00:01:34.230 
tries to find out the
password of a user in order

21
00:01:34.410 --> 00:01:38.090 
to misuse his account
for his own purpose,

22
00:01:38.340 --> 00:01:43.300 
for example do some online
shopping or buying something

23
00:01:43.300 --> 00:01:50.300 
or download a video or other things.
The guessing of the user password

24
00:01:50.310 --> 00:01:55.000 
combination is
surprisingly successful,

25
00:01:55.540 --> 00:01:58.810 
surprisingly often successful
because the user

26
00:01:59.000 --> 00:02:04.680 
use weak passwords and we
spoke about weak passwords.

27
00:02:04.920 --> 00:02:09.910 
So the user uses weak passwords
to have a more convenient

28
00:02:09.920 --> 00:02:14.770 
to remember it, to get fast
in a faster way access

29
00:02:14.940 --> 00:02:19.280 
to the service but on the other
side they lower the security

30
00:02:19.540 --> 00:02:25.150 
of their account. So the reason
to choose a good password

31
00:02:25.150 --> 00:02:29.230 
often is that's easy
to remember but

32
00:02:29.230 --> 00:02:33.160 
then if it's easy to remember
then it becomes also easy to

33
00:02:33.160 --> 00:02:37.960 
guess for the cybercriminals. For
example discovering a valid

34
00:02:37.960 --> 00:02:43.660 
username. The guessed password
can only be abused if the

35
00:02:43.660 --> 00:02:48.790 
associated user name is also
discovered but user names are

36
00:02:48.790 --> 00:02:53.370 
typically easy to find, tying for
example frequently occurring

37
00:02:53.370 --> 00:02:57.110 
users for example admin,
guest services,

38
00:02:57.260 --> 00:03:03.390 
this are accounts user names that
are in many default settings

39
00:03:03.500 --> 00:03:07.380 
available. Using names
from other services,

40
00:03:07.600 --> 00:03:12.850 
for example from leaked database
or generate user names according

41
00:03:12.850 --> 00:03:17.910 
to familiar patterns for example
first name or second name

42
00:03:17.910 --> 00:03:22.360 
or name combined with
some digits or others.

43
00:03:23.110 --> 00:03:26.860 
First or last name with
attached numbers

44
00:03:27.010 --> 00:03:30.840 
here for example john64,
robert17 or others

45
00:03:31.180 --> 00:03:34.740 
and then many services many
service email address

46
00:03:35.010 --> 00:03:37.420 
is used as the
user name.

47
00:03:39.450 --> 00:03:44.980 
Now the problem is to
discover a valid password

48
00:03:45.790 --> 00:03:48.930 
and to make passwords
easier to remember

49
00:03:49.210 --> 00:03:54.500 
many users choose simple structures
password, for example

50
00:03:54.820 --> 00:03:58.280 
a study shows that about
ten percent of all users

51
00:03:58.600 --> 00:04:04.210 
choose their first name as a
password. Users also use unchanged

52
00:04:04.210 --> 00:04:08.040 
default settings of user
possible combinations

53
00:04:08.460 --> 00:04:13.100 
with which the systems are delivered
which are in the default

54
00:04:13.100 --> 00:04:16.220 
setting available and can
be found and in the

55
00:04:16.220 --> 00:04:18.570 
manual, in the description
of the service

56
00:04:19.130 --> 00:04:23.500 
for example private
wifi routers.

57
00:04:23.920 --> 00:04:28.650 
For example test / test or guest /
guest or admin / admin are such

58
00:04:28.810 --> 00:04:33.520 
default combinations that can
be misused and that can be

59
00:04:33.520 --> 00:04:39.130 
guessed by attackers. Attackers can
also easily check through lists of

60
00:04:39.130 --> 00:04:42.690 
common combinations to
find the password.

61
00:04:43.500 --> 00:04:48.930 
Studies show about the
security of passwords that

62
00:04:48.930 --> 00:04:51.960 
20- 40%

63
00:04:52.300 --> 00:04:56.090 
of all the passwords in the
database can easily be guessed.

64
00:04:56.860 --> 00:05:00.800 
So the first for
attacking a web service

65
00:05:01.050 --> 00:05:05.390 
it's enough to find the first
valid user password combination

66
00:05:06.000 --> 00:05:09.440 
typically the attackers
do not want to attack

67
00:05:09.590 --> 00:05:13.330 
you. In some cases, this is
true but in many cases

68
00:05:13.610 --> 00:05:17.740 
they only want to misuse the
service so it's enough for them

69
00:05:18.010 --> 00:05:21.340 
to find the first valid
user password combination

70
00:05:21.690 --> 00:05:26.720 
which allows them to misuse
a service and studies show

71
00:05:26.890 --> 00:05:29.180 
that this is possible
within fifteen minutes.

72
00:05:31.870 --> 00:05:35.680 
Everyone should be
responsible for

73
00:05:35.850 --> 00:05:40.500 
selecting stronger password. So the
current password crackers

74
00:05:40.920 --> 00:05:45.470 
can test 1500

75
00:05:45.470 --> 00:05:49.070 
user password combination
per minute on a website

76
00:05:49.580 --> 00:05:54.090 
so with this password guessing
one can make a lot of tries

77
00:05:54.090 --> 00:05:56.970 
in a relative short
time period.

78
00:05:59.870 --> 00:06:02.930 
The success of such
password getting attacks

79
00:06:03.180 --> 00:06:07.930 
the quick guessing is possible
because many passwords are

80
00:06:07.940 --> 00:06:11.750 
weak, many passwords are
too weak or simple

81
00:06:12.080 --> 00:06:15.910 
although there are
warnings to the users

82
00:06:16.160 --> 00:06:20.960 
select strong passwords. Here
you see with a strong password

83
00:06:21.060 --> 00:06:25.970 
the part is the best protection
measure against password guessing.

84
00:06:27.670 --> 00:06:31.240 
There are more methods
to attack passwords

85
00:06:31.650 --> 00:06:35.670 
and a very successful method
is the password cracking.

86
00:06:36.650 --> 00:06:40.590 
So called password cracking
is executed offline

87
00:06:40.870 --> 00:06:45.530 
on a list of hashed passwords. So
typically this is done with

88
00:06:45.530 --> 00:06:49.560 
the leaked user database of
the service and the idea is

89
00:06:50.080 --> 00:06:55.260 
to derives the passwords in
plaintext from the distinguished

90
00:06:55.270 --> 00:07:00.210 
hash values. If the
attacker steals

91
00:07:00.600 --> 00:07:04.590 
a database then if it's
done in a correct way,

92
00:07:04.920 --> 00:07:10.270 
the passwords are in a hashed
form in the database

93
00:07:10.520 --> 00:07:14.160 
so what the attacker need to
do they want to find

94
00:07:14.160 --> 00:07:19.080 
out from the hashed
value the plain text

95
00:07:19.090 --> 00:07:22.040 
value of the password.
But I mentioned

96
00:07:22.430 --> 00:07:26.320 
if it's a strong hash function
this is a one way function

97
00:07:26.500 --> 00:07:32.210 
so it is not easy to find
the original a password

98
00:07:32.310 --> 00:07:37.080 
by mathematical
methods.

99
00:07:37.630 --> 00:07:41.950 
Here the idea of this
password cracking is

100
00:07:42.180 --> 00:07:46.160 
to compute from a list of passwords
hash values and then to

101
00:07:46.160 --> 00:07:50.020 
compare the hash values from the
database with the computed

102
00:07:50.020 --> 00:07:53.450 
hash values and if they
agree then the password

103
00:07:53.650 --> 00:07:59.780 
is cracked. Often this
mechanical password cracking

104
00:07:59.950 --> 00:08:03.820 
is much faster than
guessing passwords. So

105
00:08:04.300 --> 00:08:08.800 
it's a real dangerous
method, requirements are

106
00:08:08.950 --> 00:08:13.210 
that the attacker gets
access to a user file

107
00:08:13.540 --> 00:08:18.510 
with password hashes and I
mentioned many of this leaks are

108
00:08:18.510 --> 00:08:21.430 
freely published in
the internet so it's

109
00:08:22.150 --> 00:08:25.400 
possible it's easily
possible for the attackers

110
00:08:25.610 --> 00:08:29.990 
to get access to such a user
database with hashed values for

111
00:08:29.990 --> 00:08:35.100 
example from leaked databases but
also if attackers are successful

112
00:08:35.100 --> 00:08:38.760 
in cracking a computer,
they can get access

113
00:08:39.480 --> 00:08:40.320 
to such data.

114
00:08:42.500 --> 00:08:47.810 
The cracking is performed either
with the help of dictionaries

115
00:08:48.200 --> 00:08:54.050 
or by brute force. Let's
start to have a closer

116
00:08:54.050 --> 00:08:57.620 
look on dictionary
attacks.

117
00:08:58.480 --> 00:09:04.150 
Dictionaries that are lists
of words, lists of strings

118
00:09:04.510 --> 00:09:09.260 
lists of dictionary entries and
what the cracking program

119
00:09:09.260 --> 00:09:13.590 
is doing it takes all
these words and

120
00:09:13.850 --> 00:09:17.910 
hashes the words one after
the other. And then

121
00:09:18.170 --> 00:09:22.570 
the resulting hashes are compared
with existing passwords hashes

122
00:09:22.810 --> 00:09:26.850 
from the user database. You
remember when we discussed about

123
00:09:26.850 --> 00:09:28.390 
weak passwords,

124
00:09:28.630 --> 00:09:31.690 
we said all words that can
be found in the dictionary

125
00:09:31.910 --> 00:09:34.700 
need to be considered
as a weak password

126
00:09:34.900 --> 00:09:39.190 
because they can be
easily attacked by this

127
00:09:39.190 --> 00:09:46.180 
dictionary attack. The
other way to attack

128
00:09:46.180 --> 00:09:50.830 
passwords are brute
force attacks.

129
00:09:51.410 --> 00:09:55.790 
Brute force is possible for
such a brute force attack is

130
00:09:55.790 --> 00:09:59.370 
possible for every
password. So there are no

131
00:09:59.670 --> 00:10:03.850 
security measures against.
The only chance

132
00:10:04.470 --> 00:10:07.620 
to be is to make the
password so strong

133
00:10:07.880 --> 00:10:11.880 
that such a brute force
attack needs too much time.

134
00:10:12.210 --> 00:10:16.480 
For example needs centuries
to come to the result

135
00:10:17.810 --> 00:10:21.400 
so brute force trick is

136
00:10:21.630 --> 00:10:26.300 
to check all character
combinations and test

137
00:10:26.500 --> 00:10:29.340 
whether these is the
password or not.

138
00:10:30.110 --> 00:10:34.950 
And here you see that it's very
important to create passwords

139
00:10:35.070 --> 00:10:37.940 
from many different
types of characters

140
00:10:38.290 --> 00:10:41.650 
to makes this brute force
attack difficult.

141
00:10:42.720 --> 00:10:46.410 
Brute force attacks are definitely
successful and find the

142
00:10:46.410 --> 00:10:51.020 
password in any case but if the
password is long enough and

143
00:10:51.020 --> 00:10:56.260 
if password is strongly created
then it will take much too

144
00:10:56.260 --> 00:11:00.570 
long so we have to think
on decades or centuries.

145
00:11:03.370 --> 00:11:07.960 
Let's have a closer look to the
password cracking programs.

146
00:11:08.780 --> 00:11:12.600 
By means of the more and
more powerful computers

147
00:11:13.110 --> 00:11:16.490 
such cracking programs

148
00:11:16.950 --> 00:11:22.040 
become very fast because it is
what they have to do they

149
00:11:22.040 --> 00:11:27.480 
have to take word by word answer
to hash to compute the hash

150
00:11:27.480 --> 00:11:31.050 
function to find out if
the hash can be found

151
00:11:31.250 --> 00:11:35.190 
in the user database and
the processors become

152
00:11:35.190 --> 00:11:39.110 
more powerful but in
particular for this password

153
00:11:39.110 --> 00:11:44.170 
cracking the graphics
processors are very helpful,

154
00:11:44.340 --> 00:11:48.260 
graphic process which are or
another type of processor

155
00:11:48.260 --> 00:11:52.800 
in modern computer that is
needed in the context of

156
00:11:53.030 --> 00:11:57.170 
graphic display
and computation.

157
00:11:58.500 --> 00:12:02.950 
The guessing is always dependent
from sufficient network bandwidth

158
00:12:03.350 --> 00:12:08.180 
and prone with disturbance and
delays. If we look to the historic

159
00:12:08.180 --> 00:12:13.760 
development of this cracking
attack, then we can state that

160
00:12:13.760 --> 00:12:18.700 
40 years ago three
passwords could be tested

161
00:12:18.710 --> 00:12:22.370 
in one second with this
machine with the DEC-PDP-11.

162
00:12:22.650 --> 00:12:27.120 
So the state of the art long
time ago, 40 years ago

163
00:12:27.120 --> 00:12:32.530 
was that to check to crack
password - three passwords,

164
00:12:33.040 --> 00:12:36.020 
from three passwords in a
second the hash value could

165
00:12:36.020 --> 00:12:40.910 
be computed and to check against the
hash value in the leaked database.

166
00:12:41.440 --> 00:12:46.680 
Today per second not on a
special computer, on a

167
00:12:46.840 --> 00:12:51.220 
typical current computer
almost a billion

168
00:12:52.440 --> 00:12:56.090 
passwords can be tested,
from almost a billion

169
00:12:56.360 --> 00:13:02.160 
passwords with SHA-1
the hash value

170
00:13:02.160 --> 00:13:06.280 
can be computed and can be
checked against the hash values

171
00:13:06.410 --> 00:13:10.350 
in the leaked database.
You see all

172
00:13:10.820 --> 00:13:15.710 
words that can be found in such
word lists in such dictionaries

173
00:13:16.130 --> 00:13:20.810 
can be in a very short time
tested to find out whether

174
00:13:20.810 --> 00:13:26.520 
the clear text
passwords in the back

175
00:13:26.830 --> 00:13:31.260 
is to reveal a clear
text password.

176
00:13:32.830 --> 00:13:36.810 
Password cracking is
strongly dependent

177
00:13:36.980 --> 00:13:41.660 
on the hardware that is used. So
processor, graphic processers

178
00:13:41.660 --> 00:13:46.040 
are very helpful, this
password cracking programs

179
00:13:46.350 --> 00:13:51.570 
the GPUs are
extremely efficient

180
00:13:51.720 --> 00:13:56.710 
in cracking passwords because
they are optimized for parallel

181
00:13:56.710 --> 00:14:00.270 
mathematical calculations
and this computation

182
00:14:00.270 --> 00:14:04.420 
of the hash value is such a
mathematical calculation.

183
00:14:05.290 --> 00:14:10.240 
In some cases these GPUs,
these graphical processors

184
00:14:10.250 --> 00:14:15.030 
units are thousand
fault faster

185
00:14:15.330 --> 00:14:21.310 
than the usual
processes. Here some

186
00:14:21.510 --> 00:14:26.260 
numbers you get the
feeling for such

187
00:14:26.390 --> 00:14:30.580 
what time is needed for
example for a brute force

188
00:14:30.580 --> 00:14:36.960 
cracking at a 100 billion
tests with special hardware

189
00:14:37.070 --> 00:14:41.800 
what can be tested within a
second when 100 billion tests

190
00:14:41.800 --> 00:14:45.810 
can be performed within a second then
here you see different types

191
00:14:45.810 --> 00:14:50.960 
of passwords. So for example, secret,
the word secret if this is a password

192
00:14:51.110 --> 00:14:53.840 
it can be cracked in
less than one second.

193
00:14:54.450 --> 00:14:58.810 
If one adds some digits

194
00:14:59.000 --> 00:15:03.620 
for example secret12
then 29 seconds are

195
00:15:03.620 --> 00:15:08.890 
needed to find out this word
because this word has two four

196
00:15:08.890 --> 00:15:15.720 
six eight digit, so and with
appending addition the factor

197
00:15:15.880 --> 00:15:19.710 
the times that's
needed to crack

198
00:15:19.950 --> 00:15:23.810 
is a factor by all the
characters that are available.

199
00:15:24.260 --> 00:15:29.350 
Here in a more complicated
form of secret was a small

200
00:15:29.350 --> 00:15:33.390 
capital letter with some
special characters

201
00:15:33.650 --> 00:15:39.670 
need five minutes to be
cracked here 1 hour and 45

202
00:15:39.670 --> 00:15:43.650 
hours and here
this password you see

203
00:15:43.830 --> 00:15:48.580 
formed from the ground needs
already 19 years to be cracked,

204
00:15:48.770 --> 00:15:53.270 
the length is two four six
eight ten characters.

205
00:15:53.430 --> 00:15:56.770 
So you remember that we
recommended that passwords

206
00:15:57.030 --> 00:16:01.340 
have at least, consist of a
secure password have to consist

207
00:16:01.480 --> 00:16:08.000 
at least of ten characters. There
are several tools available

208
00:16:08.010 --> 00:16:12.860 
in the internet for cracking
passwords, there are two famous

209
00:16:12.870 --> 00:16:16.030 
one famous is the
John the Ripper

210
00:16:16.400 --> 00:16:23.690 
another is Hashcat, these are
programs which are optimized

211
00:16:23.700 --> 00:16:28.510 
for such password cracking
attacks. The support cracking

212
00:16:28.510 --> 00:16:31.600 
of all popular passwords
hashing methods,

213
00:16:31.900 --> 00:16:36.000 
for example you can compute by
means of this programs MD5

214
00:16:36.000 --> 00:16:41.640 
hashes you can SHA-1 hash,
you can use bcrypt hash

215
00:16:41.650 --> 00:16:46.870 
and there is another
tool the rainbow crack,

216
00:16:47.350 --> 00:16:54.000 
rainbow crack that supports
efficient cracking

217
00:16:54.310 --> 00:16:59.040 
using pre-computed rainbow tables,
rainbow tables which make

218
00:16:59.040 --> 00:17:03.990 
it more efficient it
to crack passwords.

219
00:17:04.340 --> 00:17:09.030 
Then this program
L0phtcrack

220
00:17:09.350 --> 00:17:13.950 
is known for efficient cracking
particular for windows

221
00:17:14.270 --> 00:17:19.270 
passwords, you see an attacker can
use tools that are available

222
00:17:19.270 --> 00:17:23.020 
in the internet to perform
in an automated way

223
00:17:23.230 --> 00:17:27.140 
such a password cracking
to reveal passwords

224
00:17:27.470 --> 00:17:32.560 
out from the hashes. I
mentioned this rainbow based

225
00:17:32.570 --> 00:17:36.770 
tool. Indeed the rainbow
tables is a data structure

226
00:17:37.110 --> 00:17:41.650 
is a special kind of
compressed look up tables

227
00:17:41.900 --> 00:17:46.780 
that make it more easy to

228
00:17:47.140 --> 00:17:50.250 
find out and more
efficient to find out

229
00:17:50.550 --> 00:17:55.840 
the plaintext passwords and the
idea is to form skillfully

230
00:17:55.840 --> 00:18:00.180 
chains of hashes so that's not
necessary to compute for each

231
00:18:00.180 --> 00:18:04.300 
word a hash when
one looks back

232
00:18:04.500 --> 00:18:08.460 
to find the password that
corresponds to hash.

233
00:18:09.580 --> 00:18:14.890 
This table is pre-calculated,
so that before the

234
00:18:14.890 --> 00:18:18.550 
cracking attacks started such
rainbow tables are computed

235
00:18:19.310 --> 00:18:22.850 
and they allow to retrieve
the plaintext password

236
00:18:23.120 --> 00:18:28.570 
for a given hash in a short
time the difference to a

237
00:18:28.730 --> 00:18:33.220 
usual dictionary is the following -
the dictionary stores only

238
00:18:33.220 --> 00:18:37.360 
lists of plaintext passwords all
of which will be hashed and

239
00:18:37.360 --> 00:18:42.640 
compared with the target
hash. In a rainbow table,

240
00:18:43.010 --> 00:18:47.590 
this is a large table that stores
passwords with appropriate

241
00:18:47.590 --> 00:18:50.850 
hashes in a
chain and then

242
00:18:53.640 --> 00:18:58.970 
the rainbow table is
precomputed and prepared

243
00:18:59.110 --> 00:19:02.460 
for this attack and
so cracking becomes

244
00:19:03.120 --> 00:19:06.890 
a breaking of a single password
using such a rainbow table

245
00:19:07.010 --> 00:19:10.650 
it's much more faster than
using a dictionary.

246
00:19:12.310 --> 00:19:15.830 
But beware, good
passwords are useless

247
00:19:16.060 --> 00:19:20.820 
when eavesdropping programs can
listen to every keystroke,

248
00:19:21.230 --> 00:19:25.280 
when there are other ways that
a hacker can get access

249
00:19:25.470 --> 00:19:28.700 
to your password.
A recommendation is

250
00:19:29.180 --> 00:19:32.680 
test your own password, test your
own password with these tools.

251
00:19:32.880 --> 00:19:36.970 
I mentioned again freely available
word lists, here are some

252
00:19:36.970 --> 00:19:41.200 
example and get an
impression how fast it is

253
00:19:41.470 --> 00:19:45.470 
to reveal your password and
then you have the chance

254
00:19:45.670 --> 00:19:51.220 
simply by following our hints to
design more stronger passwords.

255
00:19:53.730 --> 00:19:56.950 
In the beginning I mentioned there
are many different attack methods,

256
00:19:56.950 --> 00:20:00.550 
we already discussed password

257
00:20:00.550 --> 00:20:05.180 
guessing, password cracking.
Now let's look to password

258
00:20:05.190 --> 00:20:08.970 
sniffing, a method that
works completely different.

259
00:20:09.690 --> 00:20:16.130 
This method to attack username
password combinations

260
00:20:16.420 --> 00:20:20.380 
is to try to get access
to such combinations

261
00:20:20.660 --> 00:20:23.750 
in the moment when the
data are transported

262
00:20:23.930 --> 00:20:29.710 
over the internet. So eavesdropping
when data are sent from the

263
00:20:29.710 --> 00:20:33.500 
user to the sender and the
idea of sniffing is simply

264
00:20:33.670 --> 00:20:36.870 
to listen and analyze
each network packets

265
00:20:37.060 --> 00:20:40.490 
in a local network or in
wireless networks.

266
00:20:40.890 --> 00:20:45.090 
There are tools available also
free tools which originally

267
00:20:45.090 --> 00:20:48.730 
were designed to give the
administrators a network

268
00:20:48.820 --> 00:20:53.550 
administrator the chance to find
out failures with a package

269
00:20:53.780 --> 00:20:57.840 
but wireshark is
a famous tool or

270
00:20:58.010 --> 00:21:03.710 
tcpdump and the basic
idea simply is to misuse

271
00:21:04.150 --> 00:21:09.180 
that the attackers
misuse these tools

272
00:21:09.840 --> 00:21:14.950 
and try to get to observe
all the data packets

273
00:21:14.960 --> 00:21:17.810 
that are sent easily
through the internet

274
00:21:18.020 --> 00:21:23.310 
to analyze them and to filter
out key words like log in or

275
00:21:23.310 --> 00:21:30.130 
password and then to see
what the user appended

276
00:21:30.420 --> 00:21:35.730 
in the network package on
this user because the

277
00:21:35.730 --> 00:21:38.940 
passwords are sent
in clear text

278
00:21:39.250 --> 00:21:46.510 
to the service. Spying
out is the way, sniffing is

279
00:21:46.750 --> 00:21:50.530 
of course a way to spy out
networks but there are more ways.

280
00:21:51.360 --> 00:21:56.410 
Sniffing was to find
out the password when

281
00:21:56.410 --> 00:22:00.680 
it is sent through the
internet. With this malware

282
00:22:00.690 --> 00:22:04.190 
for example with special
programs like keyloggers

283
00:22:04.690 --> 00:22:08.410 
the attackers try to get
access to the passwords

284
00:22:08.600 --> 00:22:12.860 
on the computer of the user
by means of this malware,

285
00:22:13.210 --> 00:22:18.520 
which simply sends
all the strokes

286
00:22:18.740 --> 00:22:24.920 
all the keystrokes
to the attacker

287
00:22:25.300 --> 00:22:30.650 
and as soon as log in or
password or such phrases

288
00:22:30.920 --> 00:22:35.710 
are sent then all what
the user is doing and

289
00:22:35.740 --> 00:22:39.440 
putting in via
this keyboard

290
00:22:39.710 --> 00:22:43.440 
to the system is recorded
and is sent to the

291
00:22:43.730 --> 00:22:48.890 
attacker. So the attacker is
stored on the computer user

292
00:22:48.890 --> 00:22:52.530 
when the attacker before has
found a way a backdoor

293
00:22:52.770 --> 00:22:57.670 
to get access to that computer
or it's sent by email to the

294
00:22:57.990 --> 00:23:01.890 
attacker. In this
way the attacker can get

295
00:23:02.130 --> 00:23:08.690 
access to passwords of
users. Let's finish this

296
00:23:08.890 --> 00:23:14.480 
short view about the attack
methods by mentioning

297
00:23:14.490 --> 00:23:20.400 
some very popular
password violation

298
00:23:20.480 --> 00:23:25.390 
incidents in the past. For
example in September 2014

299
00:23:26.250 --> 00:23:31.360 
1.2 billion stolen identity
data were released by

300
00:23:31.560 --> 00:23:35.950 
Russian hackers - 1.2
stolen identities

301
00:23:36.190 --> 00:23:41.600 
in one moment. The company namecheap
reported that there were

302
00:23:41.600 --> 00:23:45.140 
a lot of login attempts
with this data, so

303
00:23:45.300 --> 00:23:47.900 
the data are not only
stolen and published

304
00:23:48.050 --> 00:23:52.810 
but there are people that also
tried to misuse the data.

305
00:23:53.590 --> 00:23:57.440 
Presumably attackers successfully
passed the password guessing

306
00:23:57.440 --> 00:24:01.870 
attack on email addresses of
celebrities in the iCloud

307
00:24:02.260 --> 00:24:08.520 
and so they were able to get
access to private pictures

308
00:24:08.520 --> 00:24:11.060 
and you remember some
of the celebrities

309
00:24:11.250 --> 00:24:15.310 
had are stored
naked pictures

310
00:24:15.580 --> 00:24:20.940 
there and so it was
a big discussion

311
00:24:21.100 --> 00:24:25.640 
in the media about this
and it shows that it's very dangerous

312
00:24:25.830 --> 00:24:31.850 
if it's possible to steal
such identity data.

313
00:24:33.270 --> 00:24:37.380 
The incident was in the
public known under the name

314
00:24:38.050 --> 00:24:42.290 
"Celebgate"
or "Fappening".

315
00:24:43.040 --> 00:24:47.280 
Another major possible
violation incident

316
00:24:47.680 --> 00:24:50.700 
to mention here was from
two thousand and sixteen.

317
00:24:51.210 --> 00:24:55.090 
So the stolen user
database of the MySpace service

318
00:24:55.570 --> 00:25:02.640 
was sold on the dark web, leaked user
passwords name combinations of users

319
00:25:02.840 --> 00:25:08.080 
led to many account take over on
other services such as twitter.

320
00:25:08.290 --> 00:25:13.550 
So here you see that if the attackers
can get exact access to a

321
00:25:13.810 --> 00:25:19.260 
user name password combinations then it's
very likely that password allows them also

322
00:25:19.560 --> 00:25:23.700 
to get access to data and to
services that are not leaked.

323
00:25:24.240 --> 00:25:29.320 
So the problem here is the password
reuse. We discussed this already

324
00:25:29.320 --> 00:25:33.070 
and it should be avoided, it
should be definitely avoided.

325
00:25:33.790 --> 00:25:38.850 
The hacker group OurMine took
over various celebrity accounts

326
00:25:38.850 --> 00:25:42.710 
for example from Mark Zuckerberg,
Katy Perry and David

327
00:25:43.630 --> 00:25:52.610 
Guetta and so this shows
that it is a real security attack

328
00:25:52.850 --> 00:25:58.310 
if the attacker falls attack are very
interesting to attack such password

329
00:25:58.920 --> 00:26:05.140 
databases from internet services and with
the method I described in this clip,

330
00:26:05.260 --> 00:26:07.940 
it's possible to
reveal even

331
00:26:09.150 --> 00:26:12.100 
secured and hashed
passwords.
