WEBVTT

1
00:00:00.000 --> 00:00:05.630 
In our OpenHPI course, a half-century
of internet, now we discuss

2
00:00:05.750 --> 00:00:11.620 
about the Client Server Principle.
The client server principle is

3
00:00:11.740 --> 00:00:16.690 
the model for the interaction
in the internet,

4
00:00:17.100 --> 00:00:20.100 
the interaction between
the technical systems.

5
00:00:21.330 --> 00:00:27.030 
So common computer application
works as follows, all the

6
00:00:27.310 --> 00:00:31.240 
computation is done on
the same computer.

7
00:00:31.840 --> 00:00:39.340 
The inputs are sent by a keyboard or mouse
to the CPU, and they are processed,

8
00:00:39.790 --> 00:00:46.440 
the results are shown on the desktop
on the screen. So we have one system

9
00:00:46.690 --> 00:00:52.210 
here is the data processing and in the
desktop, there is a presentation.

10
00:00:53.350 --> 00:00:56.590 
When we look at the internet,
we have a different situation

11
00:00:56.960 --> 00:00:59.250 
we have distributed
applications,

12
00:00:59.870 --> 00:01:05.870 
so the processing of the
application is eventually

13
00:01:05.870 --> 00:01:11.430 
done on a different computer
system, then the display

14
00:01:13.160 --> 00:01:17.890 
systems which
contribute

15
00:01:18.650 --> 00:01:25.080 
to the processing to the input data
to display, they all communicate

16
00:01:25.390 --> 00:01:32.230 
via the internet. So here we have
an observer and we can connect

17
00:01:32.230 --> 00:01:36.380 
with different devices with
smartphones, with a tablet,

18
00:01:36.700 --> 00:01:41.120 
with a computer and what's
run and computed here

19
00:01:41.560 --> 00:01:45.270 
in the server and in the application
behind the server that

20
00:01:45.270 --> 00:01:53.280 
can be displayed on different
things. The action can be

21
00:01:53.730 --> 00:01:59.200 
put into the reality of when we speak
about the internet of things in

22
00:01:59.440 --> 00:02:05.730 
in a distributed, way so the computation
and the action or the display

23
00:02:05.960 --> 00:02:08.210 
they are distributed.

24
00:02:09.530 --> 00:02:13.270 
The question is how this
interaction is organised,

25
00:02:13.690 --> 00:02:21.380 
of course, we need communication
for such distributed applications

26
00:02:21.860 --> 00:02:28.890 
and to make this complex communication
task as simple as possible.

27
00:02:29.380 --> 00:02:36.200 
There are the ideas modelling of such an
interaction by the client-server paradigm,

28
00:02:37.140 --> 00:02:45.170 
so what is done on the internet, the
communication of the distributed application

29
00:02:45.630 --> 00:02:51.340 
is organized, is implemented
in a so-called

30
00:02:51.340 --> 00:02:54.150 
client-server paradigm.

31
00:02:55.120 --> 00:03:01.230 
So we have in this communication process,
two parties, there is a client

32
00:03:01.890 --> 00:03:04.170 
and the other party
is the server.

33
00:03:05.920 --> 00:03:11.780 
So the client is typically
the active component,

34
00:03:12.510 --> 00:03:18.350 
the client sends a request to an
application that's running on

35
00:03:18.580 --> 00:03:23.070 
another computer, so as
the client is requesting

36
00:03:23.650 --> 00:03:28.860 
something from the other
system and the server which

37
00:03:29.410 --> 00:03:34.140 
is the passive component is waiting
for such kind of requests.

38
00:03:34.590 --> 00:03:40.720 
And then the server checks whether
the requested resources are allowed

39
00:03:40.990 --> 00:03:47.690 
to transmit to the client and then if
yes then the server sends in reply.

40
00:03:48.620 --> 00:03:52.070 
So complicated
communication is

41
00:03:53.300 --> 00:03:56.400 
implemented in a very
simple way, so one

42
00:03:57.080 --> 00:04:02.460 
requests something, asks system
something and the system answers.

43
00:04:03.000 --> 00:04:07.600 
Then the next request can be
sent, the next answer can come,

44
00:04:08.740 --> 00:04:12.860 
it's a different system, for
example, says client system

45
00:04:13.380 --> 00:04:18.850 
can become a server system in
communication with another

46
00:04:19.310 --> 00:04:25.570 
computer. So the client and
server is not a characteristic

47
00:04:25.850 --> 00:04:28.010 
of a special computer.

48
00:04:28.680 --> 00:04:35.030 
It is a characteristic in one
communication cycle which role is played

49
00:04:35.240 --> 00:04:38.440 
by the system.

50
00:04:39.090 --> 00:04:42.060 
This is a system which
requests something

51
00:04:42.480 --> 00:04:47.840 
and this is a system which relies on.
So the requesting party is a client

52
00:04:48.140 --> 00:04:51.730 
and the replying
body is server.

53
00:04:52.690 --> 00:04:59.640 
So this client-server interaction,
it's implemented in a way that

54
00:04:59.880 --> 00:05:04.640 
on each side, there is a so-called
service access point as it's

55
00:05:04.640 --> 00:05:08.790 
needed for the communication. So
such a service access point

56
00:05:08.790 --> 00:05:11.750 
is on the client-side, as
well on the server-side.

57
00:05:12.830 --> 00:05:17.040 
We already spoke about this,
the service access points

58
00:05:17.470 --> 00:05:22.540 
are called Sockets. So we have
the client, we have the server,

59
00:05:22.540 --> 00:05:27.570 
they are connected over the internet.
The client for a specific

60
00:05:27.580 --> 00:05:34.230 
communication with the server that
means for using a special application

61
00:05:34.550 --> 00:05:40.380 
the server as there are sockets
in place and these two sockets

62
00:05:40.380 --> 00:05:42.460 
are the communicating
parties.

63
00:05:43.140 --> 00:05:49.530 
And remember as the sockets consist of
the IP addresses and a port number,

64
00:05:50.010 --> 00:05:55.760 
and the IP addresses it
characterizes the system.

65
00:05:55.770 --> 00:05:56.520 


66
00:05:56.530 --> 00:05:57.280 


67
00:05:57.290 --> 00:05:58.450 
it means the
address of a

68
00:05:58.450 --> 00:06:06.250 
system on the internet and the
port number that is the endpoint

69
00:06:06.370 --> 00:06:13.520 
for a certain application. So here with
the transport layer with the port

70
00:06:13.840 --> 00:06:18.170 
an endpoint for the communication
is provided with an input

71
00:06:18.170 --> 00:06:23.680 
buffer, with some other resources so that
the communication can be organized

72
00:06:23.910 --> 00:06:28.920 
in such a client-server principle.
So interaction is complicated

73
00:06:29.310 --> 00:06:33.720 
to implement this complicated
communication infrastructure

74
00:06:34.040 --> 00:06:37.650 
one looks to such
communication in a very

75
00:06:38.180 --> 00:06:45.450 
uniform way, one says in a specific
a time of a communication

76
00:06:45.580 --> 00:06:50.020 
one system has the
role of a client of

77
00:06:50.020 --> 00:06:54.360 
request something and the
other is the role of

78
00:06:54.360 --> 00:06:59.010 
the server, it is able to answer such a
request this is a client-server principle.

79
00:06:59.250 --> 00:07:05.150 
That is the basis for organizing
the communication for

80
00:07:05.940 --> 00:07:08.160 
almost all applications
in the internet.
