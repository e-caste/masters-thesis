WEBVTT

1
00:00:05.750 --> 00:00:06.210 
Now, lets consider cookies.

2
00:00:08.190 --> 00:00:13.850 
When we interact in the internet, when we apply applications,

3
00:00:13.850 --> 00:00:16.650 
for example: when we visiting a web shop,

4
00:00:17.400 --> 00:00:21.280 
then there are many steps in such an interaction,

5
00:00:22.370 --> 00:00:28.530 
so what is needed is a kind of memory of previous interaction with that application

6
00:00:28.940 --> 00:00:31.790 
of previous interaction between browser and web server.

7
00:00:32.540 --> 00:00:34.270 
For example, if we think in a

8
00:00:35.880 --> 00:00:38.380 
virtual shop visit,

9
00:00:39.320 --> 00:00:44.110 
then we start to open society and we look for a catalogs and we

10
00:00:44.860 --> 00:00:50.990 
decide for some product, then we put this in a car and then we decide

11
00:00:51.630 --> 00:00:56.610 
about payment methods, so online shopping is a good example to show

12
00:00:56.990 --> 00:01:00.630 
that we need something like the concept of a session,

13
00:01:01.380 --> 00:01:04.770 
same by the way is true if you

14
00:01:05.640 --> 00:01:10.660 
interact with openHPI and you has to log in and you ask to select the

15
00:01:11.110 --> 00:01:15.990 
content you are interested in, so we need a concept of session,

16
00:01:16.530 --> 00:01:21.060 
but HTTP,how you remember, is a stateless protocol.

17
00:01:22.420 --> 00:01:26.880 
There is request, there is respond and then it's over.

18
00:01:28.120 --> 00:01:32.090 
There is no memory, no possibility to remember

19
00:01:32.550 --> 00:01:34.100 
previous interactions.

20
00:01:35.100 --> 00:01:39.070 
So, what we need is strategies to overcome statelessness

21
00:01:39.580 --> 00:01:45.890 
and to implement such a session concept.

22
00:01:47.790 --> 00:01:52.130 
Such session is a set of related subsequent user interactions

23
00:01:52.700 --> 00:01:58.210 
that causes a request/response cycle between the client and the server.

24
00:02:00.450 --> 00:02:04.210 
Session are usually characterized by an ID

25
00:02:04.870 --> 00:02:10.680 
and this ID can be transmitted via different ways: they can

26
00:02:10.680 --> 00:02:16.790 
be transmitted via cookies, that is the key-value pair in the HTTP header,

27
00:02:17.420 --> 00:02:20.760 
it can be transmitted in form

28
00:02:21.730 --> 00:02:26.540 
in the hidden fields in HTML forms and

29
00:02:26.540 --> 00:02:28.760 
it can be communicated by means of

30
00:02:29.410 --> 00:02:36.220 
URL rewriting. Here, we want to consider the first method - the cookie method.

31
00:02:38.320 --> 00:02:44.000 
The cookies originally developed by Netscape, by first

32
00:02:44.730 --> 00:02:50.540 
popular browser in the 1990 and the cookie mechanism

33
00:02:50.540 --> 00:02:55.210 
allows to exchange status information for indentifying earlier

34
00:02:55.370 --> 00:03:00.440 
related request/response cycles, so it provides mechanisms to

35
00:03:00.990 --> 00:03:06.960 
communicate whether a new request/response cycle belongs to

36
00:03:06.960 --> 00:03:09.550 
a already started session or not,

37
00:03:10.270 --> 00:03:16.670 
and this should be possible without the need for persistent network connections.

38
00:03:17.840 --> 00:03:22.440 
So the procedure which is implemented by the cookie mechanism is the following:

39
00:03:23.030 --> 00:03:26.850 
The HTTP server initiates a session by sending cookies

40
00:03:27.500 --> 00:03:32.410 
to the browser in the response header field set-cookie,

41
00:03:33.460 --> 00:03:38.120 
then the browser stores the cookies in an internal database

42
00:03:38.710 --> 00:03:40.750 
and then on every request

43
00:03:41.520 --> 00:03:47.280 
to the same server the browser sends all stored cookies for that server

44
00:03:47.510 --> 00:03:52.680 
in the cookie request header field. In this way the browser communicates

45
00:03:53.600 --> 00:03:58.670 
information about the previous interaction with that server to the server

46
00:03:58.920 --> 00:04:04.980 
and the server is able to analyze the cookie and to remember

47
00:04:05.340 --> 00:04:08.320 
former interactions with the browser.

48
00:04:09.690 --> 00:04:15.290 
Usually, only IDs are stored in such cookies and the actual information

49
00:04:15.560 --> 00:04:18.130 
for example: as a virtual shopping cart or others

50
00:04:18.680 --> 00:04:21.930 
are stored on server-side in a

51
00:04:22.620 --> 00:04:23.910 
corresponding database.

52
00:04:24.980 --> 00:04:28.590 
The idea behind this only to communicate the ideas in that

53
00:04:28.590 --> 00:04:35.070 
mechanisms is to have smaller messages and to provide more efficient information.

54
00:04:35.860 --> 00:04:40.130 
So, if we look to this image then we have: the client,

55
00:04:40.810 --> 00:04:45.700 
we have the HTTP server and typically that sessions are needed

56
00:04:45.710 --> 00:04:47.500 
if there is an application

57
00:04:49.010 --> 00:04:55.820 
used for a e-shop application or an openHPI application, so you remember

58
00:04:55.960 --> 00:05:00.670 
the server is interacting with the application via

59
00:05:01.590 --> 00:05:03.160 
a common gateway interface

60
00:05:03.790 --> 00:05:09.510 
and the idea now is the following to remember that several such interactions

61
00:05:09.690 --> 00:05:11.290 
belong to the same session,

62
00:05:11.900 --> 00:05:17.470 
that the client starts to send its request to the HTTP server, the HTTP server

63
00:05:17.680 --> 00:05:21.180 
starts the application forwards the request there

64
00:05:21.590 --> 00:05:27.610 
and forwards the parameter and then the application generates a cookie.

65
00:05:28.340 --> 00:05:33.360 
So the application generates the information

66
00:05:34.250 --> 00:05:37.550 
it needs in the next interaction with the client,

67
00:05:38.220 --> 00:05:44.610 
so this cookie is sent together with the respond, while the HTTP server

68
00:05:44.760 --> 00:05:50.030 
to the client and then when the client has next request to the

69
00:05:50.140 --> 00:05:54.150 
HTTP server and to the application it sends together with the

70
00:05:54.150 --> 00:05:59.360 
request the cookie and then the server forwards

71
00:05:59.870 --> 00:06:02.510 
the request together with a cookie,

72
00:06:03.110 --> 00:06:07.220 
the application analyze the cookie and the application can

73
00:06:07.440 --> 00:06:12.270 
in this way remember exactly that client, can remember exactly

74
00:06:12.340 --> 00:06:16.450 
what kind of interaction was done before together with the client,

75
00:06:16.550 --> 00:06:23.540 
in this way the application can see this belongs to a session

76
00:06:24.000 --> 00:06:28.500 
with a client and then,for example, there is a new application perhaps the cookie

77
00:06:29.350 --> 00:06:34.190 
is changed to remember also the next action and then the cookie

78
00:06:34.190 --> 00:06:39.880 
is sent together with a response to the client and then this kind of interaction

79
00:06:40.540 --> 00:06:42.830 
can go on in this way.

80
00:06:43.580 --> 00:06:50.610 
A client can send many different requests that belong to the

81
00:06:50.610 --> 00:06:55.480 
same interaction with the application, although the underlying protocol,

82
00:06:55.750 --> 00:06:58.110 
the HTTP protocol is stateless.
