WEBVTT

1
00:00:00.930 --> 00:00:03.870 
Welcome to the second
week of our openHPI course

2
00:00:04.320 --> 00:00:06.350 
Blockchain -
Revealing the Myth.

3
00:00:07.070 --> 00:00:10.280 
And in the second week of our
course we want to speak about

4
00:00:10.280 --> 00:00:14.600 
the second generation of blockchain
and start point to do this

5
00:00:15.230 --> 00:00:18.310 
is the Ethereum solution.
So Ethereum,

6
00:00:18.970 --> 00:00:23.260 
besides bitcoin,
is a famous crypto currency.

7
00:00:23.730 --> 00:00:26.820 
It marks the beginning of the
new blockchain generation.

8
00:00:27.700 --> 00:00:30.240 
It was developed

9
00:00:31.040 --> 00:00:32.320 
in two thousand
fourteen

10
00:00:32.920 --> 00:00:38.960 
and so two thousand fourteen can
be seen as the beginning of

11
00:00:39.010 --> 00:00:42.080 
a new generation of
blockchain based projects.

12
00:00:42.790 --> 00:00:49.510 
This new generation is not only
characterized by the expansion

13
00:00:50.040 --> 00:00:52.880 
of the possibilities
of blockchain technology

14
00:00:53.380 --> 00:00:56.870 
but also it redefines
its meaning.

15
00:00:57.970 --> 00:01:03.300 
And what is characteristic that
compared to the bitcoin

16
00:01:03.300 --> 00:01:08.960 
technology here in the second
generation with Ethereum, we have

17
00:01:10.510 --> 00:01:16.390 
have a system, a blockchain based system
with accounts, where the current state

18
00:01:16.740 --> 00:01:19.180 
of an account
becomes important.

19
00:01:20.050 --> 00:01:23.590 
This brings us closer to what
we know from a bank where we

20
00:01:23.590 --> 00:01:27.680 
have an account, where we can see
the amount of money we have

21
00:01:28.010 --> 00:01:31.450 
while in the first generation,
in the bitcoin generation we

22
00:01:31.450 --> 00:01:33.870 
have a sequence
of transactions.

23
00:01:34.920 --> 00:01:36.610 
So the new generation

24
00:01:37.680 --> 00:01:42.640 
is also characterized by
the name account based

25
00:01:43.100 --> 00:01:44.730 
blockchain solution.

26
00:01:46.480 --> 00:01:51.610 
So Ethereum system has two
types of accounts. There are

27
00:01:51.830 --> 00:01:56.700 
so called external accounts and
there are internal accounts

28
00:01:57.410 --> 00:02:02.810 
and the external accounts they are
comparable with a bank account.

29
00:02:03.480 --> 00:02:07.520 
And the external accounts
belong to the users

30
00:02:08.010 --> 00:02:09.300 
of the Ethereum system.

31
00:02:10.040 --> 00:02:14.290 
And the internal accounts
are assigned to so called

32
00:02:15.550 --> 00:02:22.590 
autonomous objects and this autonomous
objects are called smart contracts.

33
00:02:23.900 --> 00:02:28.240 
So users have an account, these
are external accounts and

34
00:02:28.990 --> 00:02:34.870 
autonomous objects, smart contracts have
an account and as these are called

35
00:02:35.180 --> 00:02:36.300 
the internal account.

36
00:02:37.380 --> 00:02:41.330 
So the external accounts they
have an account number,

37
00:02:42.670 --> 00:02:44.570 
it's called the address

38
00:02:45.250 --> 00:02:49.360 
and it's comparable, this address
is comparable with the address

39
00:02:49.580 --> 00:02:51.010 
in the bitcoin system.

40
00:02:52.010 --> 00:02:57.840 
And such an external account provides
an information, an information

41
00:02:57.840 --> 00:03:03.160 
about the balance and the transactions
that have been made by the address, by

42
00:03:04.510 --> 00:03:06.420 
the user behind
that address

43
00:03:07.070 --> 00:03:11.340 
and the users of Ethereum
systems can transfer

44
00:03:11.740 --> 00:03:17.410 
Ethereum coins, so called either
by transaction to other users

45
00:03:18.170 --> 00:03:21.320 
or to active
internal accounts.

46
00:03:22.160 --> 00:03:28.070 
So users can transact Ethereum
coins so called Ethers

47
00:03:28.820 --> 00:03:36.170 
to other users or to the external
accounts and to the smart contracts,

48
00:03:36.380 --> 00:03:39.490 
these are the active
internal accounts.

49
00:03:41.120 --> 00:03:46.350 
Let's have a closer look to this smart
contracts, to this internal accounts.

50
00:03:47.400 --> 00:03:52.330 
They are more than simply
cryptographic boxes.

51
00:03:53.120 --> 00:03:57.230 
These are cryptographic boxes
with specific values

52
00:03:57.660 --> 00:04:02.730 
that can only be unlocked if
certain conditions are met.

53
00:04:04.730 --> 00:04:10.610 
So smart contracts can better be
described as autonomous agents

54
00:04:11.170 --> 00:04:15.470 
that are able in certain
circumstances to

55
00:04:16.230 --> 00:04:21.960 
do a transaction. The name
smart contracts describes this.

56
00:04:24.210 --> 00:04:30.080 
It is something, this autonomous agent
that needs some inputs and

57
00:04:30.300 --> 00:04:32.660 
after the inputs
it can do

58
00:04:33.400 --> 00:04:36.070 
transactions like
users can do.

59
00:04:36.990 --> 00:04:40.640 
So these smart contracts
they have accounts,

60
00:04:41.220 --> 00:04:45.360 
similar like the users is also
internal accounts and these

61
00:04:45.360 --> 00:04:50.990 
accounts also have account number
and are also called in this case

62
00:04:51.290 --> 00:04:58.410 
address. So the autonomous agents have
control over their own contents,

63
00:04:59.010 --> 00:05:03.730 
for example about the value
they contain, the conditions

64
00:05:03.820 --> 00:05:08.980 
under which the either balance can
be used for system dependent fees

65
00:05:09.180 --> 00:05:10.450 
or for other things.

66
00:05:13.330 --> 00:05:19.950 
So the internal accounts, they are
controlled by their contract code

67
00:05:20.790 --> 00:05:25.330 
and the contract code takes care that
if certain conditions are fulfilled

68
00:05:25.550 --> 00:05:27.730 
then for example a
transaction is made.

69
00:05:28.380 --> 00:05:34.460 
So the smart contracts always execute
a certain part of the source code

70
00:05:35.150 --> 00:05:38.780 
and they do this if they are
triggered by a special message.

71
00:05:38.980 --> 00:05:41.560 
A special method from
another smart contract

72
00:05:41.970 --> 00:05:44.790 
or from a user through
a transaction.

73
00:05:45.970 --> 00:05:49.220 
The code can implement
any rule and conditions

74
00:05:49.740 --> 00:05:56.300 
and low complete applications, so called
decentralised applications or DApps

75
00:05:56.540 --> 00:06:03.230 
for short. Such DApps run
without any central coordinator

76
00:06:04.080 --> 00:06:08.300 
in a specifically created
environment on computers

77
00:06:08.800 --> 00:06:14.120 
of a full node. So this is
the Ethereum Virtual Machine

78
00:06:15.060 --> 00:06:16.600 
or the EVM.

79
00:06:17.450 --> 00:06:20.490 
So without that
anyone takes care

80
00:06:21.190 --> 00:06:23.700 
only following this
contract code

81
00:06:24.310 --> 00:06:26.940 
DApps can do

82
00:06:29.070 --> 00:06:33.850 
special things and
create their own environment

83
00:06:34.610 --> 00:06:39.570 
on full nodes and these are
the Ethereum virtual machines.

84
00:06:41.100 --> 00:06:46.610 
And the network of these
autonomous agents together

85
00:06:46.610 --> 00:06:51.580 
with the user accounts, they
form a censorship resistant

86
00:06:52.020 --> 00:06:54.980 
decentralized
world computer

87
00:06:55.610 --> 00:06:59.050 
because it can automatically
do certain actions.

88
00:06:59.640 --> 00:07:06.610 
So this is a characterization of the second
generation of blockchain technology,

89
00:07:07.530 --> 00:07:11.540 
censorship-resistant,
decentralized world computer.

90
00:07:14.930 --> 00:07:20.540 
In general both Ethereum accounts, the
external as well as the internal

91
00:07:20.870 --> 00:07:27.330 
contain four fields. So it's Nonce,
Nonce is a counter used to make sure

92
00:07:27.470 --> 00:07:30.220 
that each transaction can
only be processed once,

93
00:07:30.650 --> 00:07:33.910 
there is an account's
current Ether balance,

94
00:07:34.540 --> 00:07:36.640 
there's an accounts
contract code,

95
00:07:37.680 --> 00:07:42.890 
this field is empty
by external accounts,

96
00:07:43.170 --> 00:07:47.240 
the external accounts
accounts of the users

97
00:07:47.650 --> 00:07:53.010 
and there is accounts storage
and also this is empty

98
00:07:53.410 --> 00:07:58.380 
in case of external accounts and
the storage is important to run

99
00:07:58.640 --> 00:08:00.230 
the contract code.

100
00:08:01.690 --> 00:08:06.870 
If the source code of a smart contract
account is activated by a message,

101
00:08:08.210 --> 00:08:10.910 
a message or a
transaction

102
00:08:11.750 --> 00:08:16.700 
from an user, it can
access the internal storage

103
00:08:17.620 --> 00:08:20.900 
to read something or
to write something

104
00:08:21.330 --> 00:08:27.910 
or to send messages to other smart contracts
or to create new smart contracts

105
00:08:28.500 --> 00:08:36.250 
by itself. The Ethereum, or the
transactions in Ethereum systems

106
00:08:36.710 --> 00:08:42.120 
they are a bridge between
two different states.

107
00:08:43.130 --> 00:08:47.670 
The current state of an account
like the current state of a UTXO

108
00:08:48.520 --> 00:08:52.780 
in a bitcoin based system is
updated by a transaction.

109
00:08:53.910 --> 00:08:57.640 
And in this way a transaction
represents a bridge.

110
00:08:58.390 --> 00:09:04.480 
A valid transition between two states
the previous states and the new one.

111
00:09:06.050 --> 00:09:12.530 
The transaction structure in the Ethereum
system is significantly more complex

112
00:09:12.860 --> 00:09:17.780 
compared to the transaction
structure of a bitcoin system

113
00:09:18.240 --> 00:09:23.740 
and the reason is that for this
automatic activities,

114
00:09:24.290 --> 00:09:29.060 
the activities by the smart codes
more information is needed.

115
00:09:29.640 --> 00:09:33.630 
If we look to the transaction in
Ethereum systems, there are two

116
00:09:34.070 --> 00:09:37.760 
different types of transactions.
There's one type

117
00:09:38.260 --> 00:09:43.110 
that is more or less the usual transactions,
this is an exchange between the accounts.

118
00:09:43.710 --> 00:09:49.490 
So transactions made by an external accounts
as are transactions between users

119
00:09:49.960 --> 00:09:54.030 
and then there are so called
messages that are exchanged

120
00:09:54.030 --> 00:09:58.910 
between the internal accounts, between
the smart contracts. One, two,

121
00:09:59.250 --> 00:10:04.540 
and then we have a complete new
type of transaction which is

122
00:10:04.540 --> 00:10:10.300 
used to create new smart
contracts. So let's go back

123
00:10:10.920 --> 00:10:15.520 
to consider it here in the illustration.
These are the transactions

124
00:10:15.520 --> 00:10:19.810 
between users, these are the transactions
between smart contracts and

125
00:10:19.910 --> 00:10:24.770 
this is the transaction to
create a new smart contract.

126
00:10:26.370 --> 00:10:31.840 
If we consider Ether transactions
in more detail then they

127
00:10:31.840 --> 00:10:35.570 
consist of the following - there
is a nonce, this is a value

128
00:10:35.610 --> 00:10:40.830 
that corresponds to the number of
transactions carried out by the sender.

129
00:10:41.340 --> 00:10:46.880 
Then we have the recipient address in
case of a contract creation transaction

130
00:10:47.300 --> 00:10:52.900 
this field is empty. Then we have
a value, that amount of Ether

131
00:10:53.320 --> 00:10:56.090 
to be transferred from
sender to recipient.

132
00:10:57.030 --> 00:11:01.840 
In case of a contract creation
transactions this amount of

133
00:11:01.840 --> 00:11:06.180 
Ether for the newly created
smart contract this is

134
00:11:07.090 --> 00:11:11.920 
the amount for the creation of
the new smart contract and then

135
00:11:12.060 --> 00:11:16.970 
we have in an Ether transaction the
data - the data that are used

136
00:11:16.980 --> 00:11:22.160 
for signing the transaction and to
determine the sender of the transaction.

137
00:11:22.980 --> 00:11:28.850 
Then the very important part we
have as the smart contract code

138
00:11:29.240 --> 00:11:35.180 
inside the serial transactions,
this is important in case for

139
00:11:35.560 --> 00:11:40.970 
contract creation transactions and
then we have data for a message

140
00:11:42.040 --> 00:11:46.650 
transactions that are exchanged
between the smart contract.

141
00:11:48.720 --> 00:11:52.830 
And finally there are
two specific values

142
00:11:53.390 --> 00:11:59.870 
which are needed for such an Ethereum
transaction - this is gasPrice

143
00:12:00.230 --> 00:12:05.880 
and the gasLimit. What is a gasPrice?
The gasPrice is a fee

144
00:12:06.290 --> 00:12:11.980 
that is a fee charged in the Ethereum
system for every calculation step

145
00:12:12.390 --> 00:12:13.960 
in a smart contract.

146
00:12:15.840 --> 00:12:22.280 
It is imposed for protection against
denial of service attacks because each

147
00:12:22.840 --> 00:12:25.900 
each step has
to be paid

148
00:12:27.300 --> 00:12:31.820 
by every user including the
attackers should pay for every

149
00:12:31.820 --> 00:12:35.070 
resource that is used.

150
00:12:35.620 --> 00:12:40.040 
And resources, calculations,
bandwidth, storage.

151
00:12:41.240 --> 00:12:45.980 
The fee is measured
in units of gas

152
00:12:46.510 --> 00:12:49.160 
and has to be paid in Ether.

153
00:12:51.710 --> 00:12:55.150 
The gasPrice is noted in
determining the cost

154
00:12:55.580 --> 00:12:58.190 
to execute the
transaction.

155
00:13:00.600 --> 00:13:03.550 
The second value
was gasLimit

156
00:13:05.020 --> 00:13:09.800 
in the Ethereum system and the gasLimit
is a value that corresponds

157
00:13:09.800 --> 00:13:14.210 
to the maximum amount of gas

158
00:13:14.840 --> 00:13:18.820 
that is to be used in
executing the transactions.

159
00:13:19.980 --> 00:13:26.360 
This gasLimit needs to be paid in
advance before any calculation is made

160
00:13:26.730 --> 00:13:32.560 
and cannot be increased later.
The gasLimit is used to avoid

161
00:13:32.920 --> 00:13:39.460 
accidental or other calculation problems in
the code for example cycle or other things.

162
00:13:40.190 --> 00:13:44.700 
So for this reason in every
transaction a limit is set

163
00:13:45.080 --> 00:13:51.120 
on the number of calculation steps
that can be carried out in the code.

164
00:13:54.280 --> 00:13:56.240 
Now what is an
Ethereum block?

165
00:13:57.560 --> 00:14:02.660 
In comparison to the bitcoin
system and the bitcoin block

166
00:14:03.510 --> 00:14:07.780 
and also in comparison in particular
to the bitcoin block header

167
00:14:08.050 --> 00:14:13.960 
which consists of six entries, here
in case of Ethereum blocks

168
00:14:14.320 --> 00:14:16.010 
there are fifteen
entries

169
00:14:16.860 --> 00:14:20.230 
which are stored in the
Ethereum block header.

170
00:14:21.060 --> 00:14:22.600 
And this shows clearly

171
00:14:23.210 --> 00:14:27.740 
that there is a much higher
complexity in the Ethereum system

172
00:14:28.060 --> 00:14:30.160 
compared to the
bitcoin system.

173
00:14:31.230 --> 00:14:37.270 
So the Ethereum system uses an advanced
technology for a cryptographic authentication

174
00:14:37.780 --> 00:14:39.460 
dedicated data
structure

175
00:14:40.070 --> 00:14:45.660 
and this is the Merkle Patricia tree.
Merkle Patricia tree you remember,

176
00:14:45.910 --> 00:14:51.770 
this Merkle tree was helped in
the bitcoin block header

177
00:14:52.290 --> 00:14:59.440 
to comprise the information of the
transactions inside a block and here

178
00:14:59.900 --> 00:15:03.940 
because it's much more complex we
need a more complex data structure.

179
00:15:04.610 --> 00:15:10.610 
So this Merkle Patricia tree
enables fast search for content.

180
00:15:11.340 --> 00:15:15.610 
It is easy to implement and
needs little storage space.

181
00:15:17.170 --> 00:15:22.470 
So if we look in
more detail

182
00:15:22.930 --> 00:15:25.170 
to the Ethereum block header

183
00:15:26.390 --> 00:15:28.340 
and the Merkle
Patricia tree.

184
00:15:29.250 --> 00:15:33.980 
Then there is a transactions
root, this is the root of

185
00:15:33.980 --> 00:15:38.400 
Merkle Patricia root,
of the transaction list.

186
00:15:39.230 --> 00:15:43.340 
There is a state root, this
is the root of the states.

187
00:15:43.910 --> 00:15:45.220 
There is a global state

188
00:15:46.250 --> 00:15:51.230 
tree that is updated over time.
Then we have a recipients root

189
00:15:51.620 --> 00:15:55.990 
that is the root of the recipients
in the Ethereum system.

190
00:15:56.010 --> 00:16:01.650 
A recipient is graded for each transaction
that contains the specific information

191
00:16:01.890 --> 00:16:07.790 
regarding its execution. So these
are the three different roots.

192
00:16:09.150 --> 00:16:12.820 
It makes no sense to go in more detail
because then it becomes very complex

193
00:16:12.980 --> 00:16:19.500 
but it's important to understand that
we have here with the Ethereum system

194
00:16:20.150 --> 00:16:23.630 
a much more complex
system

195
00:16:24.230 --> 00:16:32.750 
blockchain system and this system is
available for the electronic transaction

196
00:16:33.170 --> 00:16:40.850 
on coins, on Ethers and this is
possible without relaying on trust.

197
00:16:41.120 --> 00:16:47.320 
So this was our original goal in such
a blockchain based cryptocurrency

198
00:16:47.790 --> 00:16:54.070 
that we can exchanged values
without a third party we have

199
00:16:54.070 --> 00:16:56.410 
to trust, without
an intermediary party.

200
00:16:57.700 --> 00:17:02.250 
The implementation of blockchain
technology now is moved from

201
00:17:02.250 --> 00:17:06.390 
the area of cryptography or
decentralized registry

202
00:17:06.830 --> 00:17:11.610 
as it was in the case of
bitcoin, to a programmable

203
00:17:12.120 --> 00:17:17.660 
decentralised trust infrastructure and
exactly this is the categorization

204
00:17:17.930 --> 00:17:23.940 
of the second generation of
blockchain based system.

205
00:17:24.700 --> 00:17:29.470 
Here's some literature. If you
are interested in more details

206
00:17:30.370 --> 00:17:34.410 
we can recommend
this. And this is the

207
00:17:35.850 --> 00:17:40.540 
presentation of Ethereum
system; it is a rough

208
00:17:40.980 --> 00:17:47.680 
presentation but it helps to understand
what it was the development

209
00:17:48.170 --> 00:17:52.570 
of the blockchain technology from
the first to the second generation.

210
00:17:52.900 --> 00:17:59.720 
The first generation we introduced was
the bitcoin cryptocurrency and here

211
00:18:00.150 --> 00:18:04.670 
the Ethereum crypto-
currency, the

212
00:18:05.570 --> 00:18:09.760 
most important example to categorize
the second generation

213
00:18:09.760 --> 00:18:11.000 
of blockchain
technology.
