WEBVTT

1
00:00:00.530 --> 00:00:03.530 
in different situations we already
mentioned ditches images

2
00:00:03.840 --> 00:00:07.340 
and now we want to have a
closer look what does it mean

3
00:00:07.670 --> 00:00:13.540 
to digital sign message generally
saying is ditches signature

4
00:00:13.690 --> 00:00:17.710 
is a security protocol
a security protocol

5
00:00:17.970 --> 00:00:22.500 
that ensures the following security
goals it ensures the out

6
00:00:22.500 --> 00:00:26.910 
in the city of the center and
the integrity of the message

7
00:00:29.460 --> 00:00:33.490 
digital signature security
protocol is based on the two key

8
00:00:33.490 --> 00:00:38.040 
encryption and of is the
use of hash method

9
00:00:38.600 --> 00:00:41.510 
and the idea behind is
simply the following

10
00:00:42.080 --> 00:00:44.850 
the message as under wants
to send to receiver

11
00:00:45.350 --> 00:00:51.090 
he z a message if hashed on z
as and as i said and then

12
00:00:51.340 --> 00:00:55.630 
this hash is encrypted
with z a private key

13
00:00:55.910 --> 00:01:01.790 
of c then says encryption
of c hashed value

14
00:01:01.980 --> 00:01:06.340 
this is called c message is
the gene digitally signed

15
00:01:07.710 --> 00:01:13.600 
and then you see a signature is
sent together with a message

16
00:01:13.600 --> 00:01:18.060 
to the receiver and then the
receiver takes a message

17
00:01:18.380 --> 00:01:24.160 
and computes a hash value on
inside and outside c a receiver

18
00:01:24.430 --> 00:01:29.590 
take the public key of the sender
and decrypts c a set and

19
00:01:29.600 --> 00:01:35.380 
decrypts says digital signature
when the scripting when a a

20
00:01:35.390 --> 00:01:40.260 
descriptive the digital signature
then see a receiver c is

21
00:01:40.280 --> 00:01:45.570 
hash of some message before i
z a send i sent a message

22
00:01:45.780 --> 00:01:49.820 
and what he simply has
to do is to compare

23
00:01:50.130 --> 00:01:54.870 
see a computed hash with c a hash
out of the digital signature

24
00:01:54.870 --> 00:01:59.610 
and then those he agreed then
it's proved that the matches

25
00:01:59.610 --> 00:02:06.290 
was not modify it was not manipulated
a and z a open internet

26
00:02:07.060 --> 00:02:11.340 
because both agree and the second
point which is proved is

27
00:02:11.360 --> 00:02:14.600 
that the message really
comes from the center

28
00:02:15.070 --> 00:02:19.480 
and the proof is based on
the fact that the sender's

29
00:02:19.720 --> 00:02:25.530 
public key and is able to a day
crypt see a that you signature

30
00:02:28.180 --> 00:02:32.920 
the idea of c is a security
protocol but it's important

31
00:02:33.170 --> 00:02:39.420 
to mention first set to prove
defense on sic correct use of

32
00:02:39.420 --> 00:02:45.430 
situ encryption dah
scheme see a public key

33
00:02:45.640 --> 00:02:51.180 
that it's needs for center that's
needed a it side of the receiver

34
00:02:51.440 --> 00:02:55.560 
needs to be really is public
key of c not otherwise

35
00:02:55.810 --> 00:02:59.970 
there is a a otherwise it's
note the proof of a to z

36
00:03:00.430 --> 00:03:06.360 
and then a a and then this
means that also public keys

37
00:03:06.830 --> 00:03:10.990 
needs to be a located
in the right away

38
00:03:11.350 --> 00:03:14.220 
to its owner and the second
way a it's truly a

39
00:03:14.580 --> 00:03:18.370 
private key of the sender needs
to be a taking very careful

40
00:03:18.970 --> 00:03:23.570 
so if the a a a look here
a in an illustration

41
00:03:23.880 --> 00:03:27.270 
then we have the message that
is under ones to send to the

42
00:03:27.270 --> 00:03:31.970 
receiver first step of signing
the message is to compute

43
00:03:32.170 --> 00:03:36.590 
to compute hash value
remember hash values as was

44
00:03:37.230 --> 00:03:41.080 
short fingerprint of an
eventually very long message

45
00:03:41.490 --> 00:03:48.320 
and then this hash value is encrypted
with the private key of center

46
00:03:51.880 --> 00:03:55.330 
this is the high encrypted
hash well this is which

47
00:03:55.340 --> 00:03:59.040 
signature and together with
the original message

48
00:03:59.260 --> 00:04:05.100 
ditches signature is sent a a to
z it is sent to the receiver

49
00:04:06.400 --> 00:04:10.010 
to guess are we'll see a data
and with the digital signature

50
00:04:10.040 --> 00:04:13.930 
also sent fifty cades
certificated is sent

51
00:04:14.260 --> 00:04:17.800 
from the sender to the
receiver and you remember

52
00:04:18.020 --> 00:04:23.970 
into certificated there is
the a link between z a name

53
00:04:23.970 --> 00:04:27.710 
of the sender and is a
a and his public key

54
00:04:28.330 --> 00:04:34.590 
so that then if c data the
certificated signature is sent over

55
00:04:34.590 --> 00:04:38.740 
the internet to the receiver then
revisit lever can start to

56
00:04:38.740 --> 00:04:45.630 
verify see a a a verifies a
message so he gets the data it

57
00:04:45.630 --> 00:04:48.770 
gets a certificate and the
hits the a signature

58
00:04:49.410 --> 00:04:53.800 
from the data the receiver
compute hash value

59
00:04:54.380 --> 00:04:58.480 
it could be that the message on
the open route through the

60
00:04:58.480 --> 00:05:04.010 
internet was manipulated so it
could be is that xis hash value

61
00:05:04.010 --> 00:05:08.010 
does not agree with the hash value
on this side of the center

62
00:05:08.440 --> 00:05:14.310 
and when both are not agreeing
this is an proof that the data

63
00:05:14.660 --> 00:05:20.070 
was manipulated a and z a
a a way it's was in it

64
00:05:21.050 --> 00:05:24.440 
so computer takes the data
and computes a hash value

65
00:05:24.710 --> 00:05:30.220 
and then see a a a receiver
takes public key

66
00:05:31.380 --> 00:05:35.640 
this and now it's simple
to take it out from z

67
00:05:35.640 --> 00:05:41.130 
a certificate and then he
decrypts with this public key

68
00:05:41.470 --> 00:05:45.900 
c a signature the
digital signature here

69
00:05:45.900 --> 00:05:50.020 
she received from the center
so after decryption

70
00:05:50.560 --> 00:05:56.800 
z had originally hash value here
which was a if you're computed

71
00:05:56.800 --> 00:06:01.020 
on then outside is decrypted
out of the signature

72
00:06:01.460 --> 00:06:05.270 
and now the question
is does is a creed

73
00:06:06.100 --> 00:06:10.530 
and when it agrees then
it's clear the message

74
00:06:10.950 --> 00:06:14.430 
has to reach the sender
in the origin version

75
00:06:14.720 --> 00:06:17.930 
that are was sent
by the receiver

76
00:06:18.650 --> 00:06:22.040 
vices and authority and and
the second would is proved

77
00:06:22.840 --> 00:06:26.220 
it really the message
really was sent by the

78
00:06:26.710 --> 00:06:32.060 
center there was no not as
proving or a other things

79
00:06:32.310 --> 00:06:35.950 
really sent by zenda
because his public key

80
00:06:36.510 --> 00:06:43.690 
works for decryption of signature
so you see a a a digital

81
00:06:43.690 --> 00:06:48.850 
signature is a a security protocol
that really helps to check

82
00:06:48.860 --> 00:06:51.930 
a tent city of and message
and the integrity

83
00:06:52.630 --> 00:06:56.560 
there are some when known
methods are which are

84
00:06:56.560 --> 00:07:00.700 
used in the internet for
such a digital signature

85
00:07:00.950 --> 00:07:05.480 
a to generate such signature
most are are popular

86
00:07:05.480 --> 00:07:10.000 
a come on a deal
they are schnorr

87
00:07:10.750 --> 00:07:15.990 
all this signature schemes are
based on two key encryption

88
00:07:15.990 --> 00:07:20.820 
methods which are based on an
mathematica on the method the

89
00:07:20.830 --> 00:07:24.800 
problem of computing the
discrete log r isn't

90
00:07:25.330 --> 00:07:32.080 
a a or a a on our it's a a issue
which is based on the mathematical

91
00:07:32.080 --> 00:07:37.760 
problem of a a finding was a
a large numbers a composed

92
00:07:38.150 --> 00:07:42.280 
of subprimes say
after a popular

93
00:07:42.280 --> 00:07:44.970 
a methods for producing
that your signature

94
00:07:45.310 --> 00:07:51.530 
he-cd is a and easy a a in
gd as a which are based on

95
00:07:51.750 --> 00:07:56.560 
elliptic curve encryption have
no chance to go into detail

96
00:07:56.560 --> 00:08:00.500 
it's in both cases as well discrete
loris months the composition

97
00:08:00.500 --> 00:08:05.610 
a a decomposition problem see a
a a encryption curve problem

98
00:08:06.040 --> 00:08:08.800 
that are very difficult
mathematical problems

99
00:08:09.250 --> 00:08:14.600 
that need a huge fault to
be a e to be cracked

100
00:08:14.790 --> 00:08:19.160 
without a a here without
access to z keys

101
00:08:21.690 --> 00:08:26.330 
the signature needs is a
a two key encryption

102
00:08:26.970 --> 00:08:31.870 
for getting signature encrypted
but the signature also needs

103
00:08:31.870 --> 00:08:35.560 
a hash hash method to hash
the message because

104
00:08:35.840 --> 00:08:40.610 
to take the complete message
avenger vu or valley long

105
00:08:40.840 --> 00:08:44.820 
a a message and to apply
it to encryption scheme

106
00:08:45.030 --> 00:08:48.920 
is too inefficient for that reason
the message is hashed and

107
00:08:48.920 --> 00:08:53.060 
for the hash a a is they
are can be a were

108
00:08:53.250 --> 00:08:57.030 
taken any of c a cryptographic
hash method so it's

109
00:08:57.390 --> 00:09:01.670 
as long as it is compatible with
situ key encryption that is

110
00:09:01.670 --> 00:09:07.370 
used so for example heiress a
compute z module with a large

111
00:09:07.370 --> 00:09:10.020 
company have a large
composite number

112
00:09:10.390 --> 00:09:16.160 
and the hash method that used
maps produce resolved within

113
00:09:16.200 --> 00:09:20.190 
that in or in the by as the
numbers are taken from

114
00:09:22.220 --> 00:09:25.740 
what about for this to say about the
security of digital signatures

115
00:09:26.070 --> 00:09:30.390 
z is security of a digital
signature depends on z purity a

116
00:09:30.750 --> 00:09:34.740 
and of c use of c use of
the two key encryption

117
00:09:35.210 --> 00:09:41.710 
and of c use of c hash function
a a so z key length of the

118
00:09:41.710 --> 00:09:45.780 
private key that it's taken
to encrypt a message

119
00:09:46.070 --> 00:09:50.050 
to encrypt the hash of some message
length of the private key

120
00:09:50.050 --> 00:09:54.420 
must be large enough to protect
against brute force attacks

121
00:09:55.440 --> 00:10:00.240 
compared to a a the encryption
where the content of the message

122
00:10:00.580 --> 00:10:05.430 
typically is a a relative
the act or or you can be a

123
00:10:05.750 --> 00:10:08.310 
he worked and are
important in that moment

124
00:10:08.910 --> 00:10:13.440 
signature also as you need
to stay well it in future

125
00:10:14.130 --> 00:10:17.220 
so typically fall such
a a digital signature

126
00:10:17.600 --> 00:10:22.650 
applications c a two key
encryption are used is

127
00:10:22.870 --> 00:10:29.020 
more longer keys and concerning is
see a security of hash function

128
00:10:29.410 --> 00:10:33.010 
then a or what we a ve
already discussed

129
00:10:33.320 --> 00:10:35.470 
in the context of hash
function is important

130
00:10:35.940 --> 00:10:41.560 
it must be a very difficult it
must be almost impossible

131
00:10:41.900 --> 00:10:45.650 
to create conditions
collision means that

132
00:10:46.400 --> 00:10:51.260 
not a document with exactly
the same hash can be found

133
00:10:51.820 --> 00:10:56.460 
a a we take signatures for
example to sign contracts

134
00:10:56.810 --> 00:10:59.460 
and so it should be a
almost impossible

135
00:10:59.870 --> 00:11:05.280 
to fake a contract and a in such
a way that the contract has

136
00:11:05.280 --> 00:11:09.140 
at the end if a contract
has the same hash value

137
00:11:12.180 --> 00:11:15.820 
so it security a a of
the digital signature

138
00:11:16.010 --> 00:11:21.520 
depends on the ride applications
of two way encryption and

139
00:11:22.890 --> 00:11:28.500 
what are the attainable security goes
by means of digital signatures

140
00:11:28.780 --> 00:11:31.620 
i already mentioned it
is how ten ticity

141
00:11:31.960 --> 00:11:35.490 
and a is so it's the
identification of the center

142
00:11:35.940 --> 00:11:40.840 
that can be a a a proved by
means of digital signature

143
00:11:41.280 --> 00:11:46.760 
so as long as is possible
to decrypt send us

144
00:11:46.770 --> 00:11:51.900 
message send a signature
with his public key

145
00:11:52.350 --> 00:11:56.650 
so it's proved that he was the
only one who could send who

146
00:11:56.650 --> 00:12:01.920 
could great signature a in that
way no one else has access

147
00:12:02.150 --> 00:12:05.930 
to the private key that
corresponds to his public key

148
00:12:06.450 --> 00:12:11.660 
and second security go is that a is
reached by the of the signature

149
00:12:11.660 --> 00:12:16.440 
is integrity if the message has
been modified on transport

150
00:12:16.440 --> 00:12:20.900 
pause which is open and that
everyone a a has access

151
00:12:21.140 --> 00:12:23.350 
to the data package that
are transport-layer

152
00:12:23.860 --> 00:12:28.030 
then the hash are recalculated
for verification by the

153
00:12:28.030 --> 00:12:32.940 
receiver difference from the a
a from z decrypted hash into

154
00:12:32.940 --> 00:12:39.420 
signature so as a equivalence
of says so z a a a coincide

155
00:12:39.640 --> 00:12:44.240 
of says two values see a hash sets
computed on to send outside

156
00:12:44.330 --> 00:12:47.720 
with the decrypted
from the sender

157
00:12:48.170 --> 00:12:51.200 
if say agree a then this
is a proof of decreed

158
00:12:55.300 --> 00:12:59.500 
and alpha security or that can be
reached by the digital signatures

159
00:12:59.660 --> 00:13:02.810 
and that's not really
a put gation

160
00:13:05.030 --> 00:13:07.770 
this the signature is
successfully verified

161
00:13:08.050 --> 00:13:12.770 
to send i has no shanks to deny
is our tended city of some

162
00:13:12.770 --> 00:13:16.250 
message that i cannot say all
this message is not for me

163
00:13:17.430 --> 00:13:21.680 
he was only one by means
of his private key

164
00:13:21.920 --> 00:13:27.350 
to encrypt message exactly in
that way to give you a feeling

165
00:13:27.760 --> 00:13:31.490 
how does it work to compute
such a digital signature

166
00:13:31.900 --> 00:13:36.850 
let's consider an example
so message that are

167
00:13:36.940 --> 00:13:40.990 
we want to a ditches sign is
internet security is important

168
00:13:42.430 --> 00:13:46.970 
so first what we have to do to
generate a digital signature

169
00:13:47.120 --> 00:13:50.310 
we have to fix the two
key encryption system

170
00:13:50.720 --> 00:13:54.930 
which we use and let's
take a in this example

171
00:13:55.150 --> 00:13:57.440 
it's a very popular
heiress a a

172
00:13:57.840 --> 00:14:02.910 
a is a very popular as a
a encryption in arris a

173
00:14:03.190 --> 00:14:07.820 
public key consists of
two a a of two numbers

174
00:14:08.240 --> 00:14:12.270 
he also to number six may and as
three hundred fifty five thousand

175
00:14:12.270 --> 00:14:15.530 
five hundred sixty one and
or five hundred eighty

176
00:14:15.530 --> 00:14:19.960 
two million forty five thousand
seven hundred ninety one

177
00:14:20.190 --> 00:14:24.060 
and the corresponding private
key is six hundred forty one

178
00:14:24.840 --> 00:14:28.710 
and his same value here as
in the second component

179
00:14:29.030 --> 00:14:32.610 
f five hundred eighty two
million forty five thousand

180
00:14:32.850 --> 00:14:37.680 
seven hundred ninety one then we
have to fix the hash method

181
00:14:37.960 --> 00:14:43.010 
in this example we take see a hash
met so it to c or c sixteen

182
00:14:43.350 --> 00:14:47.900 
will reason as we a one to play
here in example with small

183
00:14:47.900 --> 00:14:52.150 
numbers so is is a it
gives energy value

184
00:14:53.510 --> 00:14:58.050 
and now we look how we produce
generate a digital signal nature

185
00:14:58.370 --> 00:15:04.440 
by means of heiress a and c
a c sixteen a hash value

186
00:15:04.940 --> 00:15:08.160 
so we start with computing
the hash value

187
00:15:08.600 --> 00:15:12.140 
so hash value of our message
see our message was in the it

188
00:15:12.140 --> 00:15:16.760 
security the ball so if we apply
it as this hash method on

189
00:15:16.770 --> 00:15:21.260 
the is this string of course a
string need to be a need to

190
00:15:21.260 --> 00:15:25.720 
be encoded as do string
then we get as this

191
00:15:26.020 --> 00:15:31.860 
do string so a is this number thirty
nine thousand three hundred

192
00:15:31.990 --> 00:15:37.530 
thirty one next this we have
to calculate the signature

193
00:15:37.890 --> 00:15:43.330 
signature of an internet
security is important

194
00:15:43.710 --> 00:15:48.040 
so what we have to do we have
to apply a an heiress eight

195
00:15:48.360 --> 00:15:52.780 
to this value to the session
value and thirty nine thousand

196
00:15:53.050 --> 00:15:58.820 
three hundred thirty one c heiress
eight works that we have

197
00:15:58.820 --> 00:16:02.290 
to take the private key to
private key for signature

198
00:16:02.630 --> 00:16:06.780 
and compute a certain nine thousand
three hundred thirty one

199
00:16:07.200 --> 00:16:10.070 
to a in the power to
six hundred forty one

200
00:16:10.630 --> 00:16:15.820 
modulo five hundred eighty two
million forty five thousand

201
00:16:16.140 --> 00:16:21.280 
seventy seven hundred ninety one
and the value is three hundred

202
00:16:21.600 --> 00:16:24.860 
and twenty five million one
hundred eighty five thousand

203
00:16:25.070 --> 00:16:30.400 
six nine seven of course all
stand in a doers system but

204
00:16:30.610 --> 00:16:34.850 
to see what does so is this number
now that this is signature

205
00:16:34.990 --> 00:16:39.150 
that signature of since message
internet security is a ball

206
00:16:40.380 --> 00:16:49.850 
so now a is z a a a receiver
checks c a signature verifies

207
00:16:49.860 --> 00:16:53.290 
signature so is there
is the receiver gets

208
00:16:53.520 --> 00:16:59.450 
z to a a two sides gets the message
security is very important

209
00:16:59.740 --> 00:17:03.180 
and gets the digital signature
the three hundred twenty five

210
00:17:03.180 --> 00:17:08.830 
million one hundred eighty five
a a six hundred ninety seven

211
00:17:10.230 --> 00:17:13.860 
first what needs to
be done by the

212
00:17:13.860 --> 00:17:17.140 
receiver to verify the
signature is to calculate

213
00:17:17.370 --> 00:17:20.700 
the hash of some message
he is receiving

214
00:17:21.630 --> 00:17:25.430 
so and segment then has
to decode signature

215
00:17:26.050 --> 00:17:29.300 
in our case we assume
the message or

216
00:17:29.680 --> 00:17:34.190 
he read the origin the original
method the message was not

217
00:17:34.190 --> 00:17:37.990 
manipulated so what
see a receiver gets

218
00:17:38.180 --> 00:17:43.850 
if he computes crc a sixteen
applies to fish a a function

219
00:17:44.120 --> 00:17:49.030 
c sixteen to internet security is
a bond he gets the hash value

220
00:17:49.030 --> 00:17:52.160 
a certain nine thousand
a is three hundred

221
00:17:52.430 --> 00:17:57.770 
thirty one and now receiver
has to date crypt

222
00:17:57.960 --> 00:18:01.860 
signature and signature you
remember was three hundred

223
00:18:02.150 --> 00:18:04.660 
twenty five million one
hundred eighty five thousand

224
00:18:04.970 --> 00:18:09.140 
six hundred ninety seven
and it's a receiver

225
00:18:09.390 --> 00:18:13.750 
the receiver can be grouped
this a is the signature

226
00:18:14.030 --> 00:18:20.350 
by means of c send us public key
to the public key unfortunately

227
00:18:20.350 --> 00:18:24.770 
is a on the slide back but you
can see it the cr slides

228
00:18:25.080 --> 00:18:30.220 
so z signatures three hundred
twenty five million

229
00:18:30.600 --> 00:18:33.670 
one hundred eighty five thousand
six hundred ninety seven

230
00:18:33.960 --> 00:18:38.780 
has to be it taking into a
supportent up to six million

231
00:18:39.020 --> 00:18:42.350 
three hundred fifty five thousand
five hundred sixty one

232
00:18:42.600 --> 00:18:46.560 
model a a five hundred
eighty two million forty

233
00:18:46.560 --> 00:18:50.340 
five forty four thousand seven
hundred ninety one and

234
00:18:50.850 --> 00:18:57.110 
if one computes is where you send
one reads thirty nine thousand

235
00:18:57.470 --> 00:19:04.220 
three hundred thirty one and
xis value decrypted signature

236
00:19:04.650 --> 00:19:09.250 
and this value hash value
of the received message

237
00:19:09.500 --> 00:19:13.500 
say agree and say cream
and the coincide with

238
00:19:13.860 --> 00:19:19.440 
a verifies that say a
receiver can trust

239
00:19:19.650 --> 00:19:24.070 
sets a message was sent by the
sender because as public key

240
00:19:24.070 --> 00:19:27.820 
worked and this is the it's
a message was not modified

241
00:19:28.100 --> 00:19:30.640 
a on the way through
the internet because

242
00:19:30.880 --> 00:19:35.610 
to hash value is computed one and
the decrypted one they agree
