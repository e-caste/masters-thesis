WEBVTT

1
00:00:00.820 --> 00:00:06.279 
Welcome to the introduction to the Mainframe Architecture and the Mainframe Paradigm.

2
00:00:06.280 --> 00:00:10.059 
My name is Prof. Dr. Philip Brune from the Neu-Ulm University of Applied Sciences.

3
00:00:11.560 --> 00:00:16.119 
When we think about the mainframe as an idea, not only as a certain

4
00:00:16.120 --> 00:00:20.829 
hardware, then we should think about the difference between scale

5
00:00:20.830 --> 00:00:22.239 
up and scale out.

6
00:00:23.560 --> 00:00:28.999 
The mainframe paradigm means that we have a classical system,

7
00:00:29.000 --> 00:00:33.829 
which has multiple CPUs and the CPUs are

8
00:00:33.830 --> 00:00:38.359 
symmetrically accessing the main memory

9
00:00:38.360 --> 00:00:40.399 
and have the same rights to access the main memory.

10
00:00:40.400 --> 00:00:43.705 
As you can see on the left hand side. So, this is a classical mainframe architecture.

11
00:00:43.706 --> 00:00:48.649 
In the mainframe architecture we have one big server system

12
00:00:48.650 --> 00:00:53.929 
which has, of course, CPUs and RAM and storage disks, but

13
00:00:53.930 --> 00:00:58.489 
all the CPUs share a common main memory, a common ram,

14
00:00:58.490 --> 00:01:01.640 
and can access this with equal rights.

15
00:01:02.930 --> 00:01:07.399 
This means that in such a system, parallel processes which we need, for

16
00:01:07.400 --> 00:01:11.869 
example, for transaction processing are able to know about the status of

17
00:01:11.870 --> 00:01:14.629 
other parallel running processes in the same system.

18
00:01:14.630 --> 00:01:19.099 
Since they share the RAM, they share a common memory to

19
00:01:19.100 --> 00:01:24.509 
exchange information in a very efficient way inside the machine.

20
00:01:24.510 --> 00:01:29.269 
On the other hand, when we look in the research, in computer science research and

21
00:01:29.270 --> 00:01:33.799 
also of course, on I.T. practice today, the dominating paradigm

22
00:01:33.800 --> 00:01:37.369 
is the cloud or grid paradigm.

23
00:01:37.370 --> 00:01:42.169 
That means that we have in such an environment we would have a big number

24
00:01:42.170 --> 00:01:46.053 
of servers which are, every server itself

25
00:01:47.970 --> 00:01:52.259 
is rather simple compared to, for example, a mainframe.

26
00:01:52.260 --> 00:01:56.769 
So, I illustrated this here by just giving them one CPU, of course,

27
00:01:56.770 --> 00:02:01.319 
in reality they might have also a few CPUs, but the servers

28
00:02:01.320 --> 00:02:06.089 
are rather simple, they are commodity hardware and they are connected to each other using

29
00:02:06.090 --> 00:02:10.589 
a network. OK, so they communicate over a network and this

30
00:02:10.590 --> 00:02:15.539 
could be a high speed network, but it's still a network outside their individual boxes

31
00:02:15.540 --> 00:02:20.759 
and they might share as well a common storage with the access of network

32
00:02:20.760 --> 00:02:21.760 
components as well.

33
00:02:22.800 --> 00:02:27.029 
This paradigm is the typical paradigm that we have in all the cloud and Internet

34
00:02:27.030 --> 00:02:29.190 
providers like Google, Amazon and so on.

35
00:02:30.730 --> 00:02:35.399 
You can, even as a customer, get rather cheap access

36
00:02:35.400 --> 00:02:39.959 
to some of these virtual service that then might be connected to such kind of cluster.

37
00:02:39.960 --> 00:02:43.289 
In this case, we have the so-called scale out.

38
00:02:43.290 --> 00:02:47.429 
That means if you want to increase performance and you want to increase the capacity of

39
00:02:47.430 --> 00:02:52.349 
the system, you can just add further further

40
00:02:52.350 --> 00:02:55.229 
servers to the network and

41
00:02:57.390 --> 00:03:01.889 
an increase of computing capacity is achieved by adding more servers to

42
00:03:01.890 --> 00:03:03.470 
the network. This is called scale-out.

43
00:03:05.430 --> 00:03:10.019 
In contradiction or in an opposite is the scale-up in which we would have

44
00:03:10.020 --> 00:03:14.279 
the mainframe paradigm. Scale-up means if you want to increase the performance of the

45
00:03:14.280 --> 00:03:18.449 
system, you can put in more ram, you could put in more CPUs in this one big box.

46
00:03:19.530 --> 00:03:24.015 
And this increasing number of CPUs may communicate internally.

47
00:03:25.620 --> 00:03:30.179 
And the question, of course, is now why, for example, Google doesn't need a mainframe

48
00:03:30.180 --> 00:03:32.909 
or Amazon or all the other Internet providers?

49
00:03:32.910 --> 00:03:37.919 
And the answer to that is Amazon and Google and all the Internet companies,

50
00:03:37.920 --> 00:03:42.509 
they have their core applications written in a way that they perform well on such

51
00:03:42.510 --> 00:03:46.580 
kind of distributed grid or cloud cluster architecture.

52
00:03:47.880 --> 00:03:52.026 
But if you look at businesses where you need transaction security, where they need

53
00:03:54.540 --> 00:03:59.399 
the possibility to execute a business transaction in a safe way, then

54
00:03:59.400 --> 00:04:03.989 
this requires that parallel running transactions know the state of other transactions

55
00:04:03.990 --> 00:04:08.489 
and there is the need to share information and this is, of course, achieved much better

56
00:04:08.490 --> 00:04:11.279 
in an architecture that have a shared main memory.

57
00:04:11.280 --> 00:04:15.779 
And this is the important concept of the mainframe, for

58
00:04:15.780 --> 00:04:19.645 
example. So mainframe like architectures are scale-up based

59
00:04:20.760 --> 00:04:23.129 
scalable architectures.

60
00:04:23.130 --> 00:04:27.719 
And this is what we want to sort of bit look

61
00:04:27.720 --> 00:04:29.619 
deeper into in the following.

62
00:04:29.620 --> 00:04:34.169 
When we talk about the mainframe paradigm, we mean by mainframe, we mean

63
00:04:34.170 --> 00:04:38.939 
a high end server supporting concurrent operation of

64
00:04:38.940 --> 00:04:43.619 
a large number of users, a large number of different parallel

65
00:04:43.620 --> 00:04:47.429 
running transactions as well as different operating systems.

66
00:04:48.450 --> 00:04:53.129 
This server usually has the capacity to host thousands

67
00:04:53.130 --> 00:04:56.249 
of users and applications simultaneously.

68
00:04:56.250 --> 00:05:00.749 
So, it's a big centralized machine and it's usually used as

69
00:05:00.750 --> 00:05:05.109 
a central data store of an enterprise data center as well.

70
00:05:05.110 --> 00:05:08.879 
There are all other applications to access the core data of the company.

71
00:05:08.880 --> 00:05:13.349 
For example, in automotive industry, we have the product data, for example, in

72
00:05:13.350 --> 00:05:18.089 
this kind of core system. And so it's a server

73
00:05:18.090 --> 00:05:22.619 
with a maximum number of hardware

74
00:05:22.620 --> 00:05:27.389 
capacity and since it's a central, crucial and critical system, of course,

75
00:05:27.390 --> 00:05:32.249 
the server needs to have the maximum possible availability, guaranteed

76
00:05:32.250 --> 00:05:37.019 
availability and security. So these are the the core properties, what we classify

77
00:05:37.020 --> 00:05:38.370 
as a mainframe system.

78
00:05:40.080 --> 00:05:44.699 
Of course, when we talk today about mainframes, we usually refer to

79
00:05:44.700 --> 00:05:49.379 
a certain architecture, certain hardware, and this hardware architecture

80
00:05:49.380 --> 00:05:54.479 
originates from the original IBM s/360 generation

81
00:05:54.480 --> 00:05:59.279 
of computers, which was first presented in 1964.

82
00:05:59.280 --> 00:06:03.779 
And the 360 in the name stands for 360

83
00:06:03.780 --> 00:06:07.589 
degrees. So, it was considered a general purpose machine for different kinds of

84
00:06:07.590 --> 00:06:12.239 
customers, for different kind of tasks and workloads,

85
00:06:12.240 --> 00:06:17.249 
scientific computing, business computing and so on, which before that was usually

86
00:06:17.250 --> 00:06:21.449 
separated and addressed by differently individually created computers.

87
00:06:21.450 --> 00:06:26.009 
And over the years, this original s/360

88
00:06:26.010 --> 00:06:30.659 
architecture evolved and it was renamed and it evolved to the

89
00:06:30.660 --> 00:06:33.599 
what we call today, the z Systems architecture.

90
00:06:33.600 --> 00:06:38.309 
So, this is a long term history of a certain CPU

91
00:06:38.310 --> 00:06:43.289 
and hardware architecture, meaning that these machines have a specific instructions

92
00:06:43.290 --> 00:06:46.739 
tset and a specific CPU architecture and system architecture.

93
00:06:48.420 --> 00:06:52.919 
In the past, different companies offered compatible systems for

94
00:06:52.920 --> 00:06:57.449 
these kind of machines since IBM released the specification

95
00:06:57.450 --> 00:06:59.759 
of the hardware in a document.

96
00:06:59.760 --> 00:07:04.619 
And so it was possible to build custom compatible systems

97
00:07:04.620 --> 00:07:09.419 
by other vendors. But during the decades, all the others

98
00:07:09.420 --> 00:07:12.315 
sort of went out of the market except Fujitsu.

99
00:07:13.500 --> 00:07:18.149 
Fujitsu, formerly Siemens Fujitsu, still is selling

100
00:07:18.150 --> 00:07:22.799 
mainframe systems that are originating on the same architecture.

101
00:07:22.800 --> 00:07:26.339 
They are based on the s/390 generation of the mainframes.

102
00:07:26.340 --> 00:07:30.329 
And we will learn also a little bit later about that.

103
00:07:30.330 --> 00:07:35.069 
So if you look at the picture, you see that from the original s/360

104
00:07:35.070 --> 00:07:37.109 
to the more modern mainframes.

105
00:07:37.110 --> 00:07:41.789 
It's a long way and these systems don't look very similar but still, the

106
00:07:41.790 --> 00:07:46.289 
modern mainframe is fully backward compatible to the

107
00:07:46.290 --> 00:07:51.179 
original one. So, you could run in principle, a binary program written for the original

108
00:07:51.180 --> 00:07:55.619 
s/360 machines on a modern mainframe as well, if you need to

109
00:07:55.620 --> 00:08:00.479 
do that. So, this is the hardware architecture, it has a long standing,

110
00:08:00.480 --> 00:08:04.170 
backward compatibility of all existing architectures today.

111
00:08:08.730 --> 00:08:13.289 
So, what is typical for mainframe workloads, so mainframes are

112
00:08:13.290 --> 00:08:16.980 
a high end technology and high end technology means that it's also a

113
00:08:18.330 --> 00:08:23.039 
very costly technology

114
00:08:23.040 --> 00:08:27.869 
and this means that it's, of course, used for only the important

115
00:08:27.870 --> 00:08:32.529 
applications. So, all or many large mission critical applications,

116
00:08:32.530 --> 00:08:36.149 
traditional enterprises run on mainframes.

117
00:08:36.150 --> 00:08:41.099 
The mainframe guarantees the highest availability of very high or the possibility

118
00:08:41.100 --> 00:08:45.539 
to process large data volumes, high data volumes, since it is an

119
00:08:45.540 --> 00:08:50.219 
architecture that was optimized for our input output operations - IO operations

120
00:08:50.220 --> 00:08:55.139 
from the beginning, it enables, it

121
00:08:55.140 --> 00:08:58.829 
features a very high transaction throughput.

122
00:08:58.830 --> 00:09:02.370 
So, the mainframe itself is not necessarily mainly

123
00:09:03.420 --> 00:09:08.279 
a CPU centric architecture, which is very focusing on quick

124
00:09:08.280 --> 00:09:12.779 
calculations, for example, but it's an architecture that is balanced in a way

125
00:09:12.780 --> 00:09:17.219 
to achieve the highest possible throughput of parallel running transactions and this

126
00:09:17.220 --> 00:09:21.779 
involves more than CPU, it's the CPU, the memory, and IO as well.

127
00:09:21.780 --> 00:09:26.459 
And of course, it supports the special security

128
00:09:26.460 --> 00:09:30.480 
requirements, special security features like encryption and other things in hardware.

129
00:09:31.770 --> 00:09:36.749 
Examples for typical mainframe workloads are, of course, the traditional

130
00:09:36.750 --> 00:09:41.969 
mainframe applications are bookkeeping systems, as we know from aircraft

131
00:09:41.970 --> 00:09:46.439 
industry, planes, bookings, travel bookings, financial

132
00:09:46.440 --> 00:09:51.059 
bookings, financial industry and all these industries, you have

133
00:09:51.060 --> 00:09:55.289 
the need to do a very fast and consistent bookings.

134
00:09:56.560 --> 00:10:01.119 
On the other hand, we have the mainframe as a centralized data

135
00:10:01.120 --> 00:10:05.829 
store, a centralized database server for all important enterprise

136
00:10:05.830 --> 00:10:09.340 
data. As I said, for example, in the car manufacturers,

137
00:10:10.480 --> 00:10:15.759 
the mainframe can also run SAP, ERP or CRM application servers,

138
00:10:15.760 --> 00:10:20.259 
which then could be or is is a business critical

139
00:10:20.260 --> 00:10:24.879 
central application for many companies as well and here typically

140
00:10:24.880 --> 00:10:29.529 
for the application servers, Linux or the z systems, for example, would be used.

141
00:10:29.530 --> 00:10:34.419 
Data warehousing, data mining, artificial intelligence, big data analytics are typical

142
00:10:34.420 --> 00:10:38.139 
workloads that could benefit from the mainframe architecture.

143
00:10:38.140 --> 00:10:43.599 
More modern workloads in recent years, cloud computing, cloud hosting,

144
00:10:43.600 --> 00:10:48.279 
the possibility to run the backends for mobile services, highly scalable

145
00:10:48.280 --> 00:10:53.409 
backends for mobile services, for example, in retail business are

146
00:10:53.410 --> 00:10:55.719 
workloads that could run on the mainframe.

147
00:10:55.720 --> 00:11:00.279 
And of course, blockchain is also an interesting hot topic at the moment because block

148
00:11:00.280 --> 00:11:04.749 
chain applications benefit a lot from cryptographic features which the mainframe

149
00:11:04.750 --> 00:11:06.460 
architecture supports in hardware.

150
00:11:08.130 --> 00:11:12.719 
If you look at the typical architecture of a modern mainframe

151
00:11:12.720 --> 00:11:17.849 
system, then you can see that it is designed for the highest possible availability,

152
00:11:17.850 --> 00:11:22.049 
which is crucial for critical, mission critical applications.

153
00:11:22.050 --> 00:11:26.251 
And so the hardware is highly redundant, everything's redundant in the mainframe box -

154
00:11:26.252 --> 00:11:30.989 
the CPU, the RAM, and it allows to configure

155
00:11:30.990 --> 00:11:35.579 
the resources at runtime to assign resources and move

156
00:11:35.580 --> 00:11:40.169 
resources around between different parallel running applications

157
00:11:40.170 --> 00:11:44.259 
at runtime without, for example, shutting down the system.

158
00:11:44.260 --> 00:11:48.719 
And by coupling multiple mainframe boxes, which

159
00:11:48.720 --> 00:11:53.549 
are called CEC, to a so-called Parallel

160
00:11:53.550 --> 00:11:57.989 
Sysplex, which is kind of a very sophisticated cluster mechanism.

161
00:11:57.990 --> 00:12:03.089 
It allows even to have systems that achieve the highest possible performance

162
00:12:03.090 --> 00:12:04.530 
availability of

163
00:12:07.630 --> 00:12:11.999 
99.999 Percent. So the "five nines" and this is the maximum you could get

164
00:12:13.500 --> 00:12:17.969 
because these systems allow, for example, to move around workloads at runtime without

165
00:12:17.970 --> 00:12:21.997 
shutting them down if one of the cluster partners breaks down.

166
00:12:21.998 --> 00:12:26.549 
The CPU architecture of the modern z14

167
00:12:26.550 --> 00:12:31.049 
is the most recent generation of the mainframes is a 64

168
00:12:31.050 --> 00:12:35.669 
bit architecture CPU, one CPU has 10 cores and

169
00:12:35.670 --> 00:12:40.229 
these cores are called PU - processing units and it's

170
00:12:40.230 --> 00:12:44.099 
possible to have about 170 PUs available to the customer.

171
00:12:44.100 --> 00:12:48.299 
There are some more for internal administration things.

172
00:12:48.300 --> 00:12:51.906 
This generation runs at 5.2GHz

173
00:12:53.400 --> 00:12:58.169 
clock speed and it still is a complex

174
00:12:58.170 --> 00:13:01.110 
instruction set computer. So, the mainframe architecture of the

175
00:13:02.670 --> 00:13:07.259 
binary instructions are complex instructions.

176
00:13:07.260 --> 00:13:11.849 
So, the mainframe processor has a very, very

177
00:13:11.850 --> 00:13:16.559 
large set of machine instructions with very special instructions for encryption,

178
00:13:16.560 --> 00:13:21.149 
for binary coded decimal arithmetics and for many other special things that we will

179
00:13:22.410 --> 00:13:25.350 
go bit deeper into in the following units.

180
00:13:26.820 --> 00:13:30.659 
One important feature of the mainframe is that you can partition the system and you can

181
00:13:30.660 --> 00:13:35.129 
partition it in different sort of virtual machines

182
00:13:35.130 --> 00:13:39.479 
and these different partitions then can run different operating systems.

183
00:13:39.480 --> 00:13:44.549 
So every partition can run another operating system and serve as a

184
00:13:44.550 --> 00:13:49.109 
sort of virtual server. And resources may be allocated dynamically between these

185
00:13:49.110 --> 00:13:53.309 
partitions at runtime. This is a virtualization mechanism that's built in the hardware

186
00:13:53.310 --> 00:13:56.789 
and in the firmware of the system and allow us to

187
00:13:57.810 --> 00:14:02.399 
divide a physical machine into multiple servers, even before

188
00:14:02.400 --> 00:14:03.870 
you install an operating system.

189
00:14:06.080 --> 00:14:10.579 
One important thing is that how we use a mainframe, traditional mainframe

190
00:14:10.580 --> 00:14:15.109 
customers typically think of mainframe using a terminal,

191
00:14:15.110 --> 00:14:18.443 
a terminal, which is called the 3270

192
00:14:19.550 --> 00:14:21.799 
terminal, which you can see on the left hand side.

193
00:14:21.800 --> 00:14:26.389 
This is a classical terminal, physical device, sort of a dumb

194
00:14:26.390 --> 00:14:31.219 
input output device that is connected to the machine, to the central machine

195
00:14:31.220 --> 00:14:34.519 
where the user can just enter data and get data.

196
00:14:34.520 --> 00:14:38.899 
And this in the past used to be a dedicated hardware.

197
00:14:38.900 --> 00:14:41.239 
So, it's really the device that you can see here.

198
00:14:41.240 --> 00:14:45.679 
But of course, today we don't have these devices anymore, but we use software

199
00:14:45.680 --> 00:14:50.269 
emulation of this classical text-based screens that

200
00:14:50.270 --> 00:14:52.459 
are used to interact with the system.

201
00:14:52.460 --> 00:14:55.315 
So, that was the classical approach and for many, many, many decades

202
00:14:57.590 --> 00:15:02.419 
sort of defined for the users, what would a mainframe look like.

203
00:15:02.420 --> 00:15:06.889 
But, of course, today, users are not mainly interacting with these kind of terminals with

204
00:15:06.890 --> 00:15:11.329 
the system anymore. But since the high end server, of course, we

205
00:15:11.330 --> 00:15:15.829 
have other features, usually from our end users perspective

206
00:15:15.830 --> 00:15:20.539 
the mainframe is hidden behind web frontends, behind mobile apps

207
00:15:20.540 --> 00:15:24.889 
that call the mainframe transactions, for example, using web services.

208
00:15:24.890 --> 00:15:30.409 
And for the developers, typically we have modern tools like Eclipse to program and

209
00:15:30.410 --> 00:15:34.759 
of course, all the other tools that a developer developers are used, thw FTP, SSH login,

210
00:15:34.760 --> 00:15:39.469 
and so on. And so today, this classical

211
00:15:39.470 --> 00:15:44.299 
term and a user interface is mainly used by administrators and people who are directly

212
00:15:44.300 --> 00:15:46.039 
configuring, for example, the system.

213
00:15:48.110 --> 00:15:52.249 
Finally, a short overview about operating systems, when we talk about the mainframe and

214
00:15:52.250 --> 00:15:56.239 
thinking, OK, what kind of operating systems are running there, you will see that there

215
00:15:56.240 --> 00:16:01.799 
are other operating systems than Linux and Windows that you might know from the

216
00:16:01.800 --> 00:16:06.289 
your daily life. So, on the on the mainframe, we have operating systems that

217
00:16:06.290 --> 00:16:10.819 
have a long time history and these are IBM specific operating systems

218
00:16:10.820 --> 00:16:15.349 
but also, of course, we have Linux on the mainframe, which is very important nowadays

219
00:16:15.350 --> 00:16:19.939 
and of course, there is another operating system for the Fujitsu, formerly

220
00:16:19.940 --> 00:16:25.009 
Siemens line of mainframes, which is called year BS2000

221
00:16:25.010 --> 00:16:28.343 
and you will also get a short introduction to that during the course.

222
00:16:28.344 --> 00:16:32.809 
The traditional IBM mainframe operating systems

223
00:16:32.810 --> 00:16:37.819 
start with so-called MVS, the MVS family of systems,

224
00:16:37.820 --> 00:16:41.899 
which today it is called z/Os and then, of course, we have

225
00:16:42.920 --> 00:16:47.599 
something that used to be DOS/VSE, which today is called the z/VSE,

226
00:16:47.600 --> 00:16:49.549 
and we have the z/VM.

227
00:16:49.550 --> 00:16:54.139 
The z/VM is a hypervisor virtualization environment that we

228
00:16:54.140 --> 00:16:56.759 
also have a deeper look on later.

229
00:16:56.760 --> 00:17:01.249 
OK, so these are the three families of systems, over the years the

230
00:17:01.250 --> 00:17:05.749 
features and also the name has changed, but it's more or less the same line of

231
00:17:05.750 --> 00:17:07.879 
operating system until today.

232
00:17:07.880 --> 00:17:12.379 
The most important one is z/Os, this is flagship operating system for the mainframe,

233
00:17:12.380 --> 00:17:16.879 
which features all the highly specialized features

234
00:17:16.880 --> 00:17:20.118 
like Parallel Sysplex and all the other things.

235
00:17:20.119 --> 00:17:23.749 
And besides this, of course, today, mainly Linux is a very important.

236
00:17:24.890 --> 00:17:29.479 
VSE declined over the years, nevertheless, there are still some installations

237
00:17:29.480 --> 00:17:31.549 
running, but it's not as important.

238
00:17:31.550 --> 00:17:36.379 
It used to be the sort of the small brother of MVS for, let's say, smaller companies,

239
00:17:36.380 --> 00:17:40.849 
for example. And VM has become became

240
00:17:40.850 --> 00:17:45.559 
more important in recent years, as well as the virtualization environment to host

241
00:17:45.560 --> 00:17:49.999 
multiple Linux instances. So this is the family and here you can see also

242
00:17:50.000 --> 00:17:54.709 
the evolution of the hardware starting from 16 or 24 bit for the original

243
00:17:54.710 --> 00:17:58.399 
s/360 until the 64 bit today.

244
00:17:58.400 --> 00:18:03.469 
And this would be a short overview on the platform and the architecture and the history.

245
00:18:03.470 --> 00:18:08.149 
And in the following chapters of this course, we will now look at all these different

246
00:18:08.150 --> 00:18:11.419 
technologies in more detail.

247
00:18:11.420 --> 00:18:12.420 
Thank you very much.
