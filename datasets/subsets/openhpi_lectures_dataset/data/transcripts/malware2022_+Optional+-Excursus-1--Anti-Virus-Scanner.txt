WEBVTT

1
00:00:00.930 --> 00:00:05.330 
Dear learners welcome back to our openHPI
online course on Cyber Threats: Malware.

2
00:00:05.720 --> 00:00:10.060 
Today we're going to have a deeper dive
into the topic of Anti-Virus Scanner.

3
00:00:10.810 --> 00:00:16.040 
Let's have a short repetition, what
did we learn so far, so anti-virus

4
00:00:16.040 --> 00:00:20.700 
scanners they offer methods to
detect viruses but furthermore

5
00:00:20.710 --> 00:00:24.590 
they are able to detect other
forms of malware such as worms,

6
00:00:24.590 --> 00:00:29.240 
trojans or spyware as well. So,
in general, we could say anti-

7
00:00:29.240 --> 00:00:33.730 
malware programs instead of anti-virus
scanner and both terms are

8
00:00:33.880 --> 00:00:35.290 
used interchangeably.

9
00:00:36.810 --> 00:00:39.840 
Anti-virus scanner can also
monitor internet connections

10
00:00:39.840 --> 00:00:44.680 
and warn before accessing unsafe
websites or warn before downloading

11
00:00:44.680 --> 00:00:49.980 
attachments or other unsafe programs, so
whenever you're running an anti-virus scanner

12
00:00:50.400 --> 00:00:54.620 
on your device, it will help to
keep your device secure. But

13
00:00:54.640 --> 00:00:56.140 
how does that
work in detail?

14
00:00:56.890 --> 00:01:02.540 
So, let's have a more detailed look:
the anti virus scanner contains or

15
00:01:02.650 --> 00:01:07.900 
consists of one part a database
and those databases contain

16
00:01:07.900 --> 00:01:12.490 
the so-called signatures. So, a
signature is any kind of what's

17
00:01:12.490 --> 00:01:15.890 
called a fingerprint of an already
known malware, so something

18
00:01:15.890 --> 00:01:18.370 
that identifies the malware
that we already know.

19
00:01:19.410 --> 00:01:23.710 
With the fingerprints, they can
be of different types, so most

20
00:01:23.710 --> 00:01:28.430 
commonly they can be consisting
of a hash value of a file so

21
00:01:28.430 --> 00:01:32.160 
if we have an overall file, the
whole malware and we generate

22
00:01:32.160 --> 00:01:36.430 
the hash value which precisely
identifies this file then this

23
00:01:36.430 --> 00:01:39.080 
hash value would be identified
or would be called the

24
00:01:39.080 --> 00:01:40.360 
fingerprint of
the malware.

25
00:01:41.070 --> 00:01:45.040 
Furthermore, the fingerprint can
also be characteristic code

26
00:01:45.040 --> 00:01:49.540 
sequences of a malware. So, if a
malware at any point somewhere

27
00:01:49.540 --> 00:01:53.850 
has its byte code for delete all
the files on the computer then

28
00:01:53.850 --> 00:01:57.010 
this byte code could be
characteristic for that malware and

29
00:01:57.010 --> 00:02:00.040 
could be also considered the
signature for that malware.

30
00:02:01.010 --> 00:02:05.380 
And then we have our anti-virus
scanner, those would look constantly,

31
00:02:05.380 --> 00:02:09.580 
look in our operating system, in our
devices for known fingerprints

32
00:02:09.810 --> 00:02:13.390 
and whenever we find a known
fingerprint, so either the hash

33
00:02:13.390 --> 00:02:17.220 
value of a file that we already
know is malicious or a

34
00:02:17.300 --> 00:02:21.830 
characteristic code sequence of a
malicious file then we would try

35
00:02:22.410 --> 00:02:27.310 
to identify that file to the
fingerprint and be able to say

36
00:02:27.310 --> 00:02:31.100 
that this is most probably a malicious
file, most probably a malware.

37
00:02:32.510 --> 00:02:37.040 
So, the files that are corresponding
to the fingerprints are

38
00:02:37.040 --> 00:02:40.290 
then removed or quarantined.
The quarantine

39
00:02:40.710 --> 00:02:44.650 
is a space on the device where
the files would be put so that

40
00:02:44.650 --> 00:02:48.140 
they cannot cause any other harm
to the device, but the user

41
00:02:48.140 --> 00:02:52.650 
could later say ok this was wrongly
quarantined, I actually need this file

42
00:02:52.900 --> 00:02:57.790 
and there was a false positive,
a false match and then can get

43
00:02:57.790 --> 00:02:59.310 
the file back from
the quarantine.

44
00:03:00.620 --> 00:03:04.610 
Let's look into how this process
of detection works: So, we know

45
00:03:04.610 --> 00:03:08.270 
we have our anti-virus scanner
with the signature database

46
00:03:08.510 --> 00:03:11.930 
and in the signature database,
you can imagine it as some kind

47
00:03:11.930 --> 00:03:15.430 
of table, so we have the different
malware types that are stored

48
00:03:15.430 --> 00:03:18.700 
in there. So, for example, some
viruses, some worms, some trojans,

49
00:03:18.850 --> 00:03:22.890 
whatever kind of malware and we have
the corresponding hash signatures.

50
00:03:23.300 --> 00:03:26.630 
And now what happens is that in the
operating system, in the device

51
00:03:27.220 --> 00:03:32.320 
a new file somehow comes into being,
so maybe the user downloaded

52
00:03:32.320 --> 00:03:36.390 
a file, maybe the user created
a file, maybe the user opened

53
00:03:36.390 --> 00:03:40.240 
a file from your stick and this file
might be our course-information.txt

54
00:03:40.240 --> 00:03:44.040 
for this particular example. So,
what's going to happen now

55
00:03:44.040 --> 00:03:48.670 
is that the anti-virus software
is going to analyze the file,

56
00:03:48.670 --> 00:03:53.300 
so perform the calculation of the
hash of the file and whenever it,

57
00:03:53.700 --> 00:03:56.940 
or once it has found this hash it
is going to compare the hash

58
00:03:56.940 --> 00:03:59.970 
of the new file against
all the hashes in its

59
00:04:00.420 --> 00:04:04.320 
database and in this particular
case it would find out that

60
00:04:04.320 --> 00:04:09.510 
there's a match so in fact the
anti-virus scanner already had an

61
00:04:09.950 --> 00:04:13.420 
entry for the wurm_1
in its database

62
00:04:14.770 --> 00:04:19.570 
and this entry corresponds to the
file that we found, so most

63
00:04:19.570 --> 00:04:24.610 
probably the file that was named
course-information.txt can be considered malicious.

64
00:04:25.070 --> 00:04:26.840 
So, we have detected
the worm.

65
00:04:27.930 --> 00:04:31.920 
Let's look into another
example: So, now we want

66
00:04:31.920 --> 00:04:36.290 
to look into this byte signature-based
detection and we know that

67
00:04:36.510 --> 00:04:40.650 
the database of the
anti-virus scanner now no

68
00:04:40.650 --> 00:04:45.280 
longer has the hashes but the
representation of bytes, so the

69
00:04:45.280 --> 00:04:48.780 
actual commands that are going
to happen in the malware,

70
00:04:48.790 --> 00:04:51.530 
they are stored in the
signature database.

71
00:04:51.950 --> 00:04:56.080 
In this particular case
or in any other cases

72
00:04:56.520 --> 00:05:01.390 
the byte representation now
will be shown in hexadecimal

73
00:05:01.480 --> 00:05:05.710 
format, so this will be for
example, for virus_1 56-

74
00:05:05.710 --> 00:05:11.020 
69 and so on is the actual commands
that are happening in the file.

75
00:05:11.640 --> 00:05:14.790 
And so, we have our exemplary file
again the course-information.txt

76
00:05:15.170 --> 00:05:18.810 
and what's going to happen is the
anti-virus scanner is going

77
00:05:18.810 --> 00:05:23.060 
to look at all the byte sequences that are
found in the course-information text file

78
00:05:23.630 --> 00:05:28.310 
or potentially text file, as for
what we know now it is just a

79
00:05:28.310 --> 00:05:33.520 
file with the extension of .txt,
so there could be even some

80
00:05:33.530 --> 00:05:37.860 
runnable code in it and the
anti-virus scanner is going to

81
00:05:38.140 --> 00:05:41.160 
check through all this code from
the file that we're looking at

82
00:05:41.420 --> 00:05:44.100 
and check for all the byte
sequences and check whether the

83
00:05:44.100 --> 00:05:47.520 
byte sequences match for any of
the byte sequences that we

84
00:05:47.520 --> 00:05:51.640 
have in our database and in fact,
we will find a match again.

85
00:05:52.410 --> 00:05:56.280 
In this particular case, at the very
end of the byte sequence of our

86
00:05:56.450 --> 00:06:00.520 
text file we will have
the match for virus_2.

87
00:06:01.090 --> 00:06:04.590 
So, now the under virus
scanner will be able to

88
00:06:04.590 --> 00:06:08.080 
to say that we detected this virus and
move it to the quarantine again.

89
00:06:09.470 --> 00:06:12.570 
A very important thing about
anti-virus scanners is the updates.

90
00:06:12.580 --> 00:06:17.620 
We know that with any software that
we use, updates are very important,

91
00:06:17.850 --> 00:06:22.540 
but in particular for anti-virus
scanners, developers or researchers,

92
00:06:22.760 --> 00:06:26.330 
they constantly find new malware
that is brought out on onto the

93
00:06:26.710 --> 00:06:29.970 
what's called market or brought out
into the internet by cybercriminals.

94
00:06:30.240 --> 00:06:34.640 
So, we constantly have new signatures
that need to be added to the databases.

95
00:06:35.140 --> 00:06:37.980 
Those signatures that are
added to the databases

96
00:06:38.610 --> 00:06:42.570 
will be brought in there by regular
updates, most probably those

97
00:06:42.570 --> 00:06:46.010 
updates that you as users don't
even realize because they're just

98
00:06:46.010 --> 00:06:48.730 
happening in the background and
it's not the software itself

99
00:06:48.730 --> 00:06:52.130 
which needs to be updated but the
software needs to have internet

100
00:06:52.130 --> 00:06:55.770 
access to be able to update
its virus databases.

101
00:06:57.180 --> 00:07:01.160 
Therefore, if we perform regular
updates we ensure that on the

102
00:07:01.160 --> 00:07:04.900 
one hand we have the most current
information available for each scanner

103
00:07:05.240 --> 00:07:09.270 
and on the other hand as with
every other software updates,

104
00:07:09.270 --> 00:07:13.540 
help to keep the software itself
secure. So, if there would be any

105
00:07:13.930 --> 00:07:17.970 
maliciousness or any bug, any
vulnerability in the software

106
00:07:18.710 --> 00:07:21.200 
then the updates would
help to remedy that.

107
00:07:23.020 --> 00:07:24.660 
However, anti-virus
scanners

108
00:07:25.360 --> 00:07:30.110 
face the challenge and the challenge is that
malware can be very easily modified by

109
00:07:30.440 --> 00:07:35.280 
cybercriminals to receive a new or
at least a different signature,

110
00:07:35.900 --> 00:07:40.460 
which would mean that, for example,
any change in the original

111
00:07:40.460 --> 00:07:44.690 
malware would cause the hash fingerprint
to be completely different.

112
00:07:45.160 --> 00:07:50.210 
This is one of the core requirements for
cryptographic hash functions that whenever

113
00:07:50.450 --> 00:07:54.700 
we have or whenever we perform any
change on the input the output

114
00:07:54.940 --> 00:07:59.980 
should change drastically. So, if there's
just a single, for example, comma or

115
00:08:01.030 --> 00:08:04.930 
point or whatever added to any
output of a virus for example,

116
00:08:04.930 --> 00:08:09.360 
any message that is shown to a user, the hash
of the virus would be completely different.

117
00:08:10.160 --> 00:08:15.190 
So, it would not be recognizable
anymore by the anti-virus software.

118
00:08:15.930 --> 00:08:20.010 
Furthermore, the byte signature
can also be changed slightly

119
00:08:20.010 --> 00:08:22.750 
by modifying the commands
that are executed

120
00:08:23.170 --> 00:08:26.590 
and therefore we would no longer
have byte signature which

121
00:08:26.590 --> 00:08:30.350 
exactly matches the signature that
we have in the virus database.

122
00:08:30.820 --> 00:08:36.430 
So, we need to find some way
to circumvent those problems

123
00:08:36.960 --> 00:08:41.930 
and in fact, there's actually a group of
malware that alter themselves, so they

124
00:08:42.150 --> 00:08:45.950 
transform themselves constantly
whenever getting access

125
00:08:46.540 --> 00:08:50.330 
to a new system to circumvent the
anti-virus scanner and those

126
00:08:50.330 --> 00:08:54.510 
are called Polymorphic malware. So,
whenever this malware spreads

127
00:08:54.510 --> 00:08:59.130 
to any new computer, it changes some
of its code, it changes some of its

128
00:08:59.860 --> 00:09:03.590 
details, its commands and whatever
and thereby receives a new

129
00:09:03.590 --> 00:09:06.660 
signature to bypass the
next anti-virus scanner.

130
00:09:08.030 --> 00:09:14.490 
So, to fight against all those
challenges, by changing malware,

131
00:09:15.380 --> 00:09:20.130 
we have another way of analyzing malware
and this is the Heuristic Analysis.

132
00:09:20.570 --> 00:09:24.270 
So, the idea of the Heuristic
Analysis is to find a method

133
00:09:24.270 --> 00:09:25.810 
to identify
new malware.

134
00:09:26.410 --> 00:09:31.500 
So, because any malware that has
changed is for us by definition

135
00:09:31.500 --> 00:09:33.980 
a new malware because we
haven't seen it yet,

136
00:09:35.170 --> 00:09:38.670 
and so we differentiate two approaches
for the Heuristic Analysis:

137
00:09:39.040 --> 00:09:42.230 
The first would be the Static
Heuristic Analysis which is

138
00:09:42.240 --> 00:09:46.750 
similar to the byte-based signature
analysis in the idea that

139
00:09:46.770 --> 00:09:50.860 
we will assess the byte sequences
of the file, however, this

140
00:09:50.860 --> 00:09:54.600 
time we will not look for an
exact match if the sequence is

141
00:09:54.600 --> 00:09:58.590 
exactly in this file as it is
in our signature database but

142
00:09:58.610 --> 00:10:03.040 
we will analyze whether there are any
partial sequences known. So, for

143
00:10:03.040 --> 00:10:08.000 
example, if we have a malware
which does something like

144
00:10:08.680 --> 00:10:12.820 
copy all files from a certain
directory and then delete all

145
00:10:12.820 --> 00:10:17.490 
the files in that directory and we
will have our signature match for

146
00:10:17.700 --> 00:10:21.100 
exactly this copy of files and
then delete the files from there

147
00:10:21.490 --> 00:10:25.780 
and now we have this malware and
this malware will transform

148
00:10:25.780 --> 00:10:29.990 
itself and will maybe not copy the
files anymore, so just delete them,

149
00:10:30.250 --> 00:10:34.080 
just delete the files from that
directory. In that case, we wouldn't

150
00:10:34.080 --> 00:10:36.710 
have an exact match anymore to
what we have in our signature

151
00:10:36.710 --> 00:10:40.880 
database because this copy action
in advance is missing but

152
00:10:40.880 --> 00:10:44.470 
we would have a partial match
because probably 40 or

153
00:10:44.470 --> 00:10:49.380 
50% of the code of the commands
that are run, they are identical.

154
00:10:50.030 --> 00:10:53.480 
And so, we could match with a
partial sequence of our known

155
00:10:53.480 --> 00:10:55.360 
malware that matches
to any other

156
00:10:56.110 --> 00:10:58.070 
signatures from
our database

157
00:10:58.930 --> 00:11:06.020 
and depending on the level of risk, so
maybe depending on the percentage of

158
00:11:06.230 --> 00:11:09.950 
how similar the things were
that we compare, an alarm can

159
00:11:09.950 --> 00:11:13.100 
then be raised or the files can
be moved to quarantine or

160
00:11:13.110 --> 00:11:14.450 
can be removed
completely.

161
00:11:15.330 --> 00:11:18.760 
The next approach would be the
Dynamic Heuristic Analysis, with

162
00:11:18.760 --> 00:11:23.050 
that we would bring the file
which is to be assessed

163
00:11:23.050 --> 00:11:27.500 
into a shielded separated execution
environment, so some sort

164
00:11:27.500 --> 00:11:31.340 
of environment which does not
intervene with the overall system

165
00:11:31.340 --> 00:11:36.390 
that the user is using and in there the
file would then be executed or opened

166
00:11:36.610 --> 00:11:40.480 
and its behaviour would be monitored,
which would mean that whenever

167
00:11:40.480 --> 00:11:44.140 
we execute the file in such a
shielded environment and we see

168
00:11:44.140 --> 00:11:48.820 
that the file is, for example, accessing
all the different documents that

169
00:11:48.820 --> 00:11:50.210 
are stored in this
environment

170
00:11:51.160 --> 00:11:54.480 
and deleting all of them then we
would write that this behaviour

171
00:11:54.480 --> 00:11:58.920 
is very anomalous or let's say
strange and depending on the

172
00:11:58.920 --> 00:12:03.900 
behaviour that we monitor when we
actually execute the file, we can then

173
00:12:04.150 --> 00:12:09.680 
raise alarms again and possibly
move the file to quarantine

174
00:12:09.850 --> 00:12:14.340 
or ideally this whole step of
analyzing whatever the file does

175
00:12:14.670 --> 00:12:18.570 
is performed before we actually
transfer the file to our computer.

176
00:12:18.930 --> 00:12:25.230 
So, in many cases, this happens for
example in a central firewall

177
00:12:25.230 --> 00:12:28.650 
where all the traffic from the
internet has to pass through

178
00:12:29.010 --> 00:12:32.660 
and on this firewall all the
downloads, the files could be then

179
00:12:32.680 --> 00:12:36.180 
assessed, could be opened, could
be executed, the behaviour could

180
00:12:36.180 --> 00:12:40.190 
be monitored and only if it's a
secure file, it could be forwarded

181
00:12:40.480 --> 00:12:42.770 
to the user that actually
wanted to download them.

182
00:12:44.080 --> 00:12:47.960 
That is it for our topic
of anti-virus scanner.

183
00:12:48.850 --> 00:12:52.570 
I hope you were able to get into
the topic a bit more in depth

184
00:12:52.570 --> 00:12:55.710 
and to understand a bit of the
underlying mechanics and I look

185
00:12:55.710 --> 00:12:57.700 
forward to seeing you
in our next video.
