WEBVTT

1
00:00:00.820 --> 00:00:05.829 
Hello, it's me again, Wolfram Greis from the European Mainframe Academy,

2
00:00:05.830 --> 00:00:09.969 
and in the next video clip, I want to talk about Job management.

3
00:00:09.970 --> 00:00:14.619 
I already mentioned Job management in our last video clip where I talked about

4
00:00:14.620 --> 00:00:19.179 
key components within the z/OS operating system,

5
00:00:19.180 --> 00:00:23.919 
and one of its components was Job management,

6
00:00:23.920 --> 00:00:28.539 
and it has a sub-component. I will also go into a little more detail,

7
00:00:28.540 --> 00:00:33.069 
as this is the Job Entry Subsystem and each and every

8
00:00:33.070 --> 00:00:37.569 
user, especially when he wants to submit batch job, he gets in contact

9
00:00:37.570 --> 00:00:42.099 
with the Job management. All the other users and also starter tasks are

10
00:00:42.100 --> 00:00:45.579 
controlled by the Job management and the JES.

11
00:00:45.580 --> 00:00:50.019 
But the most important interface, in fact, is the interface for batch

12
00:00:50.020 --> 00:00:52.720 
jobs. But let's first talk about Job management.

13
00:00:53.830 --> 00:00:58.639 
Also, operator commands, it's a very different interface for

14
00:00:58.640 --> 00:01:03.789 
so-called operators that are responsible for keeping

15
00:01:03.790 --> 00:01:05.739 
the system up and running.

16
00:01:05.740 --> 00:01:10.239 
The operator commands are forwarded to the communication task and are

17
00:01:10.240 --> 00:01:13.989 
processed by the command processor as part of the job management.

18
00:01:13.990 --> 00:01:18.519 
We don't go into more detail concerning operator interfaces because

19
00:01:18.520 --> 00:01:23.529 
it's not within the scope of our MOOC, but batch processing we

20
00:01:23.530 --> 00:01:26.979 
want to talk a little more about that.

21
00:01:26.980 --> 00:01:31.424 
And Job batch processing is executed via the Job

22
00:01:31.425 --> 00:01:36.669 
Entry Subsystem. Also, TSO or user-TSO time sharing,

23
00:01:36.670 --> 00:01:39.529 
interactive users deal with JCL.

24
00:01:39.530 --> 00:01:44.049 
JCL is the top command language, the language that

25
00:01:44.050 --> 00:01:47.229 
controls job processing.

26
00:01:47.230 --> 00:01:52.419 
Also, TSO users have JCL behind their TSO

27
00:01:52.420 --> 00:01:57.009 
activities, even if they don't know that and never get in touch

28
00:01:57.010 --> 00:02:01.599 
with it. There is a so-called logon procedure, it's JCL controlling

29
00:02:01.600 --> 00:02:04.449 
the TSO address spaces.

30
00:02:04.450 --> 00:02:08.918 
And one remark, by the way, JES the job entry subsystem was

31
00:02:08.919 --> 00:02:14.079 
developed by the National Space Agency in Houston in the United States

32
00:02:14.080 --> 00:02:18.510 
and that's why the test messages start with $HASP,

33
00:02:22.420 --> 00:02:26.559 
it's the abbreviation for Houston Automatic Spooling Package.

34
00:02:26.560 --> 00:02:31.509 
So, it was developed in the field at NASA in the United States and is

35
00:02:31.510 --> 00:02:36.009 
still available today in the very newest operating system

36
00:02:36.010 --> 00:02:41.289 
z/OS. Now let's go into more details,

37
00:02:41.290 --> 00:02:45.189 
into the job entry subsystem stuff.

38
00:02:45.190 --> 00:02:48.729 
It is divided into five so-called phases.

39
00:02:48.730 --> 00:02:53.769 
So the first phase is the input phase and input means as it states

40
00:02:53.770 --> 00:02:58.359 
that some data into the system and

41
00:02:58.360 --> 00:03:02.949 
in formal, that's where the mainframe comes from, we

42
00:03:02.950 --> 00:03:05.799 
had punched cards as the input source.

43
00:03:05.800 --> 00:03:08.979 
Of course, we don't have any punch cards anymore.

44
00:03:08.980 --> 00:03:13.569 
The input today comes from interactive

45
00:03:13.570 --> 00:03:18.789 
terminals. The job is submitted and it gets into the system

46
00:03:18.790 --> 00:03:23.559 
or another. Also, very often used possibility is

47
00:03:23.560 --> 00:03:28.210 
to set them up on this on on on

48
00:03:29.920 --> 00:03:34.929 
disk space and say, then automatically

49
00:03:34.930 --> 00:03:39.669 
called from libraries especially very important

50
00:03:39.670 --> 00:03:44.889 
for automation processes and especially when it comes to automation.

51
00:03:44.890 --> 00:03:50.109 
The batch jobs that are running in a productive environment

52
00:03:50.110 --> 00:03:56.109 
on the IBM system is normally automatically

53
00:03:56.110 --> 00:04:01.089 
submitted. And the estimation, just an estimation

54
00:04:01.090 --> 00:04:05.979 
is that around 95 percent of all production jobs are controlled

55
00:04:05.980 --> 00:04:11.439 
automatically by a so-called job automation system.

56
00:04:11.440 --> 00:04:13.369 
The input looks like this.

57
00:04:13.370 --> 00:04:17.799 
This is a job control language very,

58
00:04:17.800 --> 00:04:22.329 
very brief, and just two states important things.

59
00:04:22.330 --> 00:04:27.069 
And this job is coming into the system in the input phase

60
00:04:27.070 --> 00:04:31.539 
and is stored on a spool volume

61
00:04:31.540 --> 00:04:36.489 
and directly after this input phase

62
00:04:36.490 --> 00:04:40.929 
comes the conversion means that these job control language

63
00:04:40.930 --> 00:04:45.609 
you can really compare it to a compile is compiled into

64
00:04:45.610 --> 00:04:47.799 
an internal structure.

65
00:04:47.800 --> 00:04:52.269 
This internal structure is called internal text and again, start on the spool

66
00:04:52.270 --> 00:04:57.069 
volume. It's now compiled and JCL ready for

67
00:04:57.070 --> 00:05:00.559 
execution and the next phase.

68
00:05:00.560 --> 00:05:04.730 
In fact, is processing, the processing means that

69
00:05:05.810 --> 00:05:09.529 
the batch job now gets to one.

70
00:05:09.530 --> 00:05:14.089 
And processing also means that for a batch job can run, we need

71
00:05:14.090 --> 00:05:18.829 
a so-called initiator. The initiator is a kind of system software

72
00:05:18.830 --> 00:05:23.299 
belonging to the top end result system and is responsible for leading

73
00:05:23.300 --> 00:05:28.129 
a job during this processing phase, from

74
00:05:28.130 --> 00:05:32.839 
start-upto the end and an important idea is

75
00:05:32.840 --> 00:05:37.939 
that these batch jobs are divided into

76
00:05:37.940 --> 00:05:39.979 
or set into classes.

77
00:05:39.980 --> 00:05:44.569 
And as examples, we have different execution cues and execution

78
00:05:44.570 --> 00:05:49.009 
classes and the control in which class, such as JCL,

79
00:05:49.010 --> 00:05:53.539 
such a batch job runs. We see the class statement in the

80
00:05:53.540 --> 00:05:58.309 
JCL. So with this class statement, in this case, class equals 'A' means

81
00:05:58.310 --> 00:06:02.809 
it runs in the execution class A,

82
00:06:02.810 --> 00:06:07.759 
and it has to have an initiator that is started for this class.

83
00:06:07.760 --> 00:06:12.889 
So always a number of initiators started for each and every class and we can control

84
00:06:12.890 --> 00:06:17.509 
how many batch jobs are really running in parallel in this

85
00:06:17.510 --> 00:06:19.730 
processing phase.

86
00:06:21.020 --> 00:06:26.089 
During this processing phase, the output is

87
00:06:26.090 --> 00:06:29.509 
written and the output is not written directly to a printer.

88
00:06:29.510 --> 00:06:34.099 
The output is also written back to the spool volume,

89
00:06:34.100 --> 00:06:39.009 
so it's kept on the spool until the processing is done and the

90
00:06:39.010 --> 00:06:44.059 
batch job ends. When the batch job ends it frees the initiator

91
00:06:44.060 --> 00:06:48.679 
and the initiator then can look if there is another batch job in the same queue

92
00:06:48.680 --> 00:06:53.089 
or initiator can also be started for different queues.

93
00:06:53.090 --> 00:06:58.129 
And again, the number of initiators and for which class or classes

94
00:06:58.130 --> 00:07:02.959 
it started, controls how many batch jobs can be in parallel

95
00:07:02.960 --> 00:07:06.170 
in this processing and execution phase.

96
00:07:07.370 --> 00:07:11.989 
The next phase is the output, output now means the output which I

97
00:07:11.990 --> 00:07:16.609 
just mentioned that is written to the spool volume

98
00:07:16.610 --> 00:07:19.339 
is now taken from the spool and

99
00:07:21.110 --> 00:07:23.599 
printed on printer.

100
00:07:23.600 --> 00:07:28.369 
And also for this printer, we have different cues not

101
00:07:28.370 --> 00:07:33.049 
to conflict with the execution queues, these are different

102
00:07:33.050 --> 00:07:35.029 
queues, these are output queues.

103
00:07:35.030 --> 00:07:39.539 
They can have the same character as an example,

104
00:07:39.540 --> 00:07:43.759 
we could have a Class A, Class B, Class C, and so on.

105
00:07:43.760 --> 00:07:48.709 
And really comparable to the initiator,

106
00:07:48.710 --> 00:07:53.209 
we need and we have output

107
00:07:53.210 --> 00:07:58.039 
queues and output classes, and we have printers that are

108
00:07:58.040 --> 00:08:01.139 
started for different classes and with printers

109
00:08:02.660 --> 00:08:07.729 
started for different classes we can control which output goes, to which printer,

110
00:08:07.730 --> 00:08:10.579 
which form is needed and so on.

111
00:08:10.580 --> 00:08:14.209 
This is controlled by these output classes.

112
00:08:14.210 --> 00:08:18.799 
And again, you see in the JCL, here, in this case, we have

113
00:08:18.800 --> 00:08:23.389 
the DD statement. DD stands for Data Definition, where

114
00:08:23.390 --> 00:08:28.159 
you can control which output goes onto into each class,

115
00:08:28.160 --> 00:08:32.959 
and this class again controls on which printer the output is

116
00:08:32.960 --> 00:08:33.960 
printed.

117
00:08:35.230 --> 00:08:39.699 
And after the output phase comes the last phase, the last

118
00:08:39.700 --> 00:08:44.649 
phase means now the output can be purged, which means the job came

119
00:08:44.650 --> 00:08:49.179 
to an end. All of the output is printed and now the output can be

120
00:08:49.180 --> 00:08:54.519 
purged. In some cases, especially when it's production environments,

121
00:08:54.520 --> 00:08:58.329 
we have a special tool available.

122
00:08:58.330 --> 00:09:02.919 
It's called the so-called archive tool because there are

123
00:09:02.920 --> 00:09:07.359 
different rules for example, for banks and insurance

124
00:09:07.360 --> 00:09:12.309 
companies that they have to archive their print output, and sometimes

125
00:09:12.310 --> 00:09:16.809 
between output and purge there is a special tool interface

126
00:09:16.810 --> 00:09:21.489 
where all the output is archived on some storage

127
00:09:21.490 --> 00:09:25.959 
medium. If all this is done,the purge phase comes into

128
00:09:25.960 --> 00:09:30.429 
place and purge means all the data that was written to

129
00:09:30.430 --> 00:09:34.066 
the spool volume or the spool volumes can be more than one volume, and all

130
00:09:35.950 --> 00:09:38.749 
the output is purged.

131
00:09:38.750 --> 00:09:43.239 
And now we have one special treatment, we

132
00:09:43.240 --> 00:09:47.679 
have a special class normally defined

133
00:09:47.680 --> 00:09:52.509 
in our JES environment, and this is a so-called Hold class.

134
00:09:52.510 --> 00:09:57.009 
Hold class means that this output is not automatically

135
00:09:57.010 --> 00:10:01.449 
purged and the reason for this can be

136
00:10:01.450 --> 00:10:06.249 
many folds, but one reason is that for example, a developer

137
00:10:06.250 --> 00:10:11.019 
develops his program or programs

138
00:10:12.550 --> 00:10:17.019 
interactively at the terminal, submits,

139
00:10:17.020 --> 00:10:20.519 
for example, a COBOL program,

140
00:10:21.700 --> 00:10:26.319 
the combination of the COBOL program, and afterward, he wants to show and what to see,

141
00:10:26.320 --> 00:10:30.819 
if there are some mistakes and he doesn't want to get

142
00:10:30.820 --> 00:10:35.319 
the output written to a printer, he wants to control it on

143
00:10:35.320 --> 00:10:40.179 
his workstation, and that's why we have so-called

144
00:10:40.180 --> 00:10:44.859 
hold classes, hold classes again, hold the output in the

145
00:10:44.860 --> 00:10:49.299 
spool volume, and it's only purged if we

146
00:10:49.300 --> 00:10:52.209 
actively say now we want to purge it.

147
00:10:52.210 --> 00:10:57.369 
And in many cases, you can imagine that the users don't purge their output,

148
00:10:57.370 --> 00:11:01.839 
though they reside on the spool and if the spool volume gets full,

149
00:11:01.840 --> 00:11:04.299 
there is really some trouble in the computer center.

150
00:11:04.300 --> 00:11:08.319 
And that's why this is prevented, for example, you can set up some rules.

151
00:11:08.320 --> 00:11:12.100 
The administrators of such an environment can set up

152
00:11:13.120 --> 00:11:17.589 
some rules, for example, saying that batch job

153
00:11:17.590 --> 00:11:22.629 
in the output class A is automatically deleted

154
00:11:22.630 --> 00:11:27.639 
if it's older than, let's say, five days, and this is really

155
00:11:27.640 --> 00:11:32.139 
common to prevent that the spool volumes are getting full.

156
00:11:33.500 --> 00:11:38.329 
This was the Job Entry subsystem and all these five phases

157
00:11:38.330 --> 00:11:43.099 
that are available. And as I already mentioned the system automation

158
00:11:43.100 --> 00:11:47.072 
with tools is really important. So batch processing normally,

159
00:11:48.290 --> 00:11:53.179 
especially in production environments, is automated, and all

160
00:11:53.180 --> 00:11:57.859 
these tools, for example, support dependencies.

161
00:11:57.860 --> 00:12:02.719 
Examples of such automation tools BAGJAS, a German

162
00:12:02.720 --> 00:12:07.729 
product, was developed by Bertelsmann, so

163
00:12:07.730 --> 00:12:09.160 
that's why it's called BAGJAS.

164
00:12:12.500 --> 00:12:15.769 
It's the German abbreviation.

165
00:12:15.770 --> 00:12:20.929 
There is a Control-M tool from BMC as a vendor.

166
00:12:20.930 --> 00:12:25.549 
There is CA7 from Computer Associates and especially from IBM

167
00:12:25.550 --> 00:12:30.169 
itself, we have OPC, and it was renamed in between to

168
00:12:30.170 --> 00:12:32.869 
the Tivoli Workload Scheduler (TWS).

169
00:12:32.870 --> 00:12:36.590 
These are very common products in place for automating

170
00:12:37.970 --> 00:12:38.970 
these batch jobs.

171
00:12:40.480 --> 00:12:44.919 
This was the batch job video clip, if you have any

172
00:12:44.920 --> 00:12:49.809 
questions, remarks, so on, please use the discussion forum.

173
00:12:49.810 --> 00:12:53.049 
Thank you for attending and see you in the next video clip.
