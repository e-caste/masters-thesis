WEBVTT

1
00:00:00.900 --> 00:00:04.670 
In our openHPI course "Confidential
Communication in the Internet",

2
00:00:05.080 --> 00:00:09.220 
we already discussed traditional
symmetric encryption methods.

3
00:00:09.710 --> 00:00:14.830 
Now with DES, with the data encryption
standard, I want to introduce

4
00:00:15.130 --> 00:00:22.890 
modern symmetric encryption methods.
But be aware it was very very popular,

5
00:00:23.100 --> 00:00:25.430 
but it's no more
considered secure.

6
00:00:26.670 --> 00:00:29.240 
The DES, the data

7
00:00:30.450 --> 00:00:33.530 
encryption standard
is a block cipher

8
00:00:34.310 --> 00:00:40.610 
and the idea of such a block cipher
is that the plaintext is split

9
00:00:40.760 --> 00:00:43.730 
into blocks of a
fixed length

10
00:00:44.340 --> 00:00:49.780 
and then the single blocks
are encrypted separately.

11
00:00:51.860 --> 00:00:56.070 
Before we go into more
detail, we remember to an

12
00:00:56.490 --> 00:01:04.510 
important objective which we have to
guarantee for such encryption methods.

13
00:01:04.810 --> 00:01:11.920 
And these were formulated, these requirements
for a secure encryption method

14
00:01:12.260 --> 00:01:15.370 
were formulated by
Shannon, a famous

15
00:01:16.080 --> 00:01:17.610 
famous computer
scientist

16
00:01:19.730 --> 00:01:21.800 
working at Stanford
University.

17
00:01:23.270 --> 00:01:28.250 
He claimed, for a good encryption
the encryption method should

18
00:01:28.350 --> 00:01:30.820 
have the property
of confusion.

19
00:01:31.800 --> 00:01:37.780 
Confusion means the ciphertext should
be a sequence of random letters,

20
00:01:38.350 --> 00:01:42.920 
so it should look like a sequence of
random letters. So there should not be

21
00:01:43.320 --> 00:01:47.950 
ability to get some idea of
the content of the plaintext.

22
00:01:48.590 --> 00:01:51.650 
And the second principle
is diffusion.

23
00:01:52.790 --> 00:01:57.750 
It is not so obvious like
the confusion property

24
00:01:58.260 --> 00:02:01.590 
and diffusion says
each plaintext bit

25
00:02:02.490 --> 00:02:06.830 
should influence as many
ciphertext bits as possible

26
00:02:07.360 --> 00:02:09.160 
during the
encryption method.

27
00:02:09.820 --> 00:02:13.870 
And the idea behind this is
that if there are

28
00:02:14.670 --> 00:02:17.890 
plaintext with only
small differences

29
00:02:18.990 --> 00:02:21.150 
then they should
nevertheless have

30
00:02:22.350 --> 00:02:23.920 
large differences

31
00:02:25.190 --> 00:02:26.460 
in the ciphertext.

32
00:02:27.140 --> 00:02:31.810 
So otherwise it would be
more easy to manipulate a

33
00:02:32.900 --> 00:02:39.090 
text by only minor places and
then to have only a minor

34
00:02:39.580 --> 00:02:41.800 
motivation of the

35
00:02:43.560 --> 00:02:51.150 
ciphertext. So with this block length
these two ideas are implemented

36
00:02:51.500 --> 00:02:54.610 
and of course the blocks can be
short, the blocks can be long.

37
00:02:54.860 --> 00:03:01.610 
So here for the DES, the block length sixty
four was considered a good compromise

38
00:03:01.780 --> 00:03:06.820 
between confusion and
diffusion.

39
00:03:08.460 --> 00:03:11.390 
When we have a block
length binary string

40
00:03:11.810 --> 00:03:16.740 
of the length sixty
four, then we have two

41
00:03:17.180 --> 00:03:20.460 
to the sixty four
and this is equal to,

42
00:03:21.410 --> 00:03:23.590 
so two to the sixty four

43
00:03:24.430 --> 00:03:28.390 
different keys.

44
00:03:30.150 --> 00:03:33.500 
This is a huge amount. It's
eighteen trillion keys

45
00:03:34.450 --> 00:03:38.630 
but to, for
example, perform a

46
00:03:40.900 --> 00:03:43.390 
brute-force
attack, it costs

47
00:03:44.780 --> 00:03:47.880 
unlimited time. So this
time is not available

48
00:03:48.330 --> 00:03:52.290 
because there are so many different
keys are possible even with the best

49
00:03:52.500 --> 00:03:57.190 
machines that can test many keys
in a second. It is too long,

50
00:03:57.740 --> 00:04:03.030 
it was too long when it was designed
and used for being attacked

51
00:04:03.060 --> 00:04:04.490 
with a brute-force
attack.

52
00:04:05.910 --> 00:04:13.440 
So the DES, the data encryption
standard has long been the most popular

53
00:04:13.780 --> 00:04:15.310 
asymmetric encryption

54
00:04:15.990 --> 00:04:20.750 
in the early years
of the digital age.

55
00:04:21.510 --> 00:04:25.230 
It was originally developed
by IBM, by Horst Feistel in the

56
00:04:25.640 --> 00:04:32.740 
seventies, and later on it was recognized
as a standard for data encryption

57
00:04:33.110 --> 00:04:38.870 
by the US standardization authority
NIST in nineteen seventy seven

58
00:04:39.380 --> 00:04:42.970 
and they, before they
standardized that,

59
00:04:43.470 --> 00:04:46.360 
they run a public
tendering process

60
00:04:47.810 --> 00:04:51.260 
with the reason,
what is the best procedure.

61
00:04:52.070 --> 00:04:57.090 
Kerckhoffs principle says for the
encryption the procedures should

62
00:04:57.090 --> 00:05:02.150 
be public, they should be
investigated by the best

63
00:05:02.210 --> 00:05:04.940 
cyber analytics people
around the world.

64
00:05:06.330 --> 00:05:12.900 
And then because the computers become
faster and faster to perform attacks,

65
00:05:13.570 --> 00:05:20.530 
to break this encryption, there was in the
implementation there was fixed that

66
00:05:20.640 --> 00:05:23.900 
after every five years, this

67
00:05:27.150 --> 00:05:31.630 
procedure has to
be re-certificated.

68
00:05:32.530 --> 00:05:37.450 
So the last certification was in
ninety three. So from ninety

69
00:05:37.450 --> 00:05:40.430 
eight on last
century, DES

70
00:05:41.070 --> 00:05:44.450 
was no more considered
secure enough.

71
00:05:46.050 --> 00:05:50.980 
This DES algorithm's popularity
came from the fact that

72
00:05:50.980 --> 00:05:55.600 
it was not only standardized
by NIST but also by other

73
00:05:56.870 --> 00:06:00.790 
institutions, standardization
institute for example ANSI

74
00:06:01.410 --> 00:06:07.580 
and the popularity comes also
to express that the DES

75
00:06:09.220 --> 00:06:15.490 
procedure forms the basis of many real
life application like PIN encryption,

76
00:06:15.730 --> 00:06:19.060 
financial transaction,
key distribution.

77
00:06:20.620 --> 00:06:23.290 
Here is a short overview
how it works.

78
00:06:24.320 --> 00:06:28.860 
So the DES encryption
uses very very simple

79
00:06:29.420 --> 00:06:33.990 
bit operations. The
exclusive OR, this is an

80
00:06:34.750 --> 00:06:39.600 
operation, logical operation. Here
are the two bits 0 1, and here

81
00:06:39.600 --> 00:06:41.600 
are the other
two bits and

82
00:06:42.380 --> 00:06:44.900 
0 XOR 0 is 0,

83
00:06:46.090 --> 00:06:48.320 
0 XOR 1 is 1

84
00:06:49.040 --> 00:06:56.180 
1 XOR 0 is 1 and
1 XOR 1 is 0.

85
00:06:56.730 --> 00:07:01.130 
So this is an operations
that is used. A permutation

86
00:07:02.180 --> 00:07:09.290 
of bit sequences is used. The
substitution or replacements of

87
00:07:09.300 --> 00:07:16.120 
one bit by another or one sequence by another
is used. So very very simple implementations,

88
00:07:16.850 --> 00:07:24.470 
so that DES can be considered a
combination of a one time pad

89
00:07:24.880 --> 00:07:29.500 
a permutation and a substitution cipher.

90
00:07:31.190 --> 00:07:36.670 
The applied operations, they have
been selected because they

91
00:07:36.670 --> 00:07:39.480 
can be performed very
efficiently in hardware.

92
00:07:40.040 --> 00:07:43.210 
This is how our chips in
the computers are working,

93
00:07:44.040 --> 00:07:47.160 
on the basis of such simple
logical operations.

94
00:07:47.660 --> 00:07:52.500 
And so this DES and the symmetric
operations which work similar

95
00:07:52.810 --> 00:07:56.620 
are very very fast because they
can be implemented in hardware.

96
00:07:58.070 --> 00:08:02.920 
So in DES the keys
have length sixty four.

97
00:08:03.420 --> 00:08:06.160 
The blocks have length sixty
four, the keys have length four.

98
00:08:06.860 --> 00:08:12.240 
But we have to look very careful
about how the keys are designed.

99
00:08:12.780 --> 00:08:17.620 
In the DES algorithms the keys are
designs that from sixty four bits,

100
00:08:18.170 --> 00:08:21.520 
eight bits are taken
as a checksum.

101
00:08:22.170 --> 00:08:26.040 
So it means
the freely combined

102
00:08:27.520 --> 00:08:30.960 
bits are only fifty six.

103
00:08:31.690 --> 00:08:36.980 
So we have not two to
the sixty four many

104
00:08:38.160 --> 00:08:43.510 
possible keys, we only have
two to the fifty six and these are

105
00:08:45.020 --> 00:08:50.630 
about seventy two
billion possible keys.

106
00:08:52.790 --> 00:08:58.310 
Now how DES is, the data encryption
standard is performed.

107
00:08:58.730 --> 00:09:04.820 
The plaintext, I mentioned DES is
a block cipher, so the plaintext

108
00:09:05.140 --> 00:09:09.300 
is divided into
sixty bit blocks

109
00:09:11.850 --> 00:09:15.990 
eight letters at eight
bits per character

110
00:09:16.860 --> 00:09:20.610 
and these blocks then
are encrypted

111
00:09:21.700 --> 00:09:26.390 
separately. And the encryption
of a block consists in

112
00:09:27.240 --> 00:09:31.130 
sixty round processing
procedures.

113
00:09:32.220 --> 00:09:34.320 
And the ciphertext,

114
00:09:35.630 --> 00:09:40.320 
the resulting ciphertext after the
sixteen rounds is also a block

115
00:09:40.540 --> 00:09:44.370 
of the length sixty four. So each
block of the plaintext

116
00:09:44.840 --> 00:09:50.510 
is encrypted in a block of the
same length in the ciphertext.

117
00:09:51.180 --> 00:09:56.720 
So now let's have a closer look to
what is done in the sixteen rounds,

118
00:09:56.910 --> 00:10:03.310 
in the sixteen computational rounds that
mix all the bits of a block sequence

119
00:10:03.650 --> 00:10:09.870 
and produce this randomly looking cipher

120
00:10:10.310 --> 00:10:17.970 
block. So we have sixty bits as an input
in such a one round computation

121
00:10:18.670 --> 00:10:23.470 
and what is done with the sixty bit
block? The sixty bit block is divided

122
00:10:23.780 --> 00:10:28.990 
in a thirty bit, in the first thirty
bits and the second thirty bits

123
00:10:29.300 --> 00:10:33.880 
and these both are processed
in different ways.

124
00:10:35.350 --> 00:10:38.210 
So here we compute
so called "Feistel"

125
00:10:38.990 --> 00:10:40.830 
function. You remember
Feistel was the

126
00:10:41.570 --> 00:10:46.680 
inventor of DES and this
Feistel function is controlled

127
00:10:46.690 --> 00:10:48.610 
by a so called
round key.

128
00:10:49.280 --> 00:10:54.860 
So the round keys are
produced out of the key

129
00:10:55.450 --> 00:11:03.020 
that is given. We later have a closer look.
And then this resulting sequence,

130
00:11:03.370 --> 00:11:10.140 
it is thirty bit long, is XORed with the
thirty two bit sequence, the second half

131
00:11:10.250 --> 00:11:15.490 
of our block. And then
we get the new first,

132
00:11:16.050 --> 00:11:21.250 
we get the new first thirty two
bits of our sequence and

133
00:11:21.250 --> 00:11:23.860 
the second thirty
two bits are

134
00:11:24.740 --> 00:11:30.340 
first half of the row. so in
one round the first half

135
00:11:31.300 --> 00:11:32.770 
of the first half of

136
00:11:34.290 --> 00:11:35.910 
the first half of the

137
00:11:37.220 --> 00:11:42.090 
the first half of the sequence
of the block is the second half

138
00:11:42.780 --> 00:11:45.470 
of the new
block. And

139
00:11:46.510 --> 00:11:47.830 
from the second half of

140
00:11:48.950 --> 00:11:52.320 
the key, the new first
half is computed.

141
00:11:53.550 --> 00:11:59.470 
So now it's interesting how this
Feistel function is organized.

142
00:12:00.370 --> 00:12:04.170 
We have as an input a thirty
bit blocks. This was the

143
00:12:05.690 --> 00:12:10.920 
first half of our block of our
sixty four block. And then we

144
00:12:10.920 --> 00:12:16.910 
have this round key. The round key
has a length of forty eight bits

145
00:12:17.540 --> 00:12:26.520 
and it is a partial key. The round key that
it's derived from the original key

146
00:12:27.570 --> 00:12:32.160 
of the DES function
which is applied to the

147
00:12:32.160 --> 00:12:33.610 
encryption of the key.

148
00:12:34.210 --> 00:12:40.990 
So the thirty two bit block is
expanded by expansion functions

149
00:12:40.990 --> 00:12:45.360 
to a forty eight bit block. We
have this forty eight bit round

150
00:12:45.890 --> 00:12:51.640 
key and then we have two sequence of
the same length and we can compute

151
00:12:51.930 --> 00:12:57.900 
piece by piece the XOR and then
there are result in a forty eight

152
00:12:58.640 --> 00:13:03.000 
bit result is
separated in

153
00:13:03.780 --> 00:13:09.710 
eight so called S pieces,
S1 to S8. And

154
00:13:10.190 --> 00:13:17.840 
each of this as six bit long. So we
have eight times six bit

155
00:13:18.390 --> 00:13:23.580 
eight blocks, eight small
sequences each of length six.

156
00:13:23.720 --> 00:13:25.580 
It's exactly forty
eight bit.

157
00:13:26.260 --> 00:13:28.590 
And then this is

158
00:13:29.350 --> 00:13:33.920 
brought together to come down
from the forty eight bits to

159
00:13:33.920 --> 00:13:39.460 
the final thirty-two bits. Then this
is promoted and this gives the

160
00:13:40.130 --> 00:13:45.680 
result so that with the permutation we
have diffusion and confusion applied.

161
00:13:46.030 --> 00:13:51.550 
This is the Feistel
function. Remember this was the

162
00:13:51.550 --> 00:13:54.340 
one function in the one
round computation.

163
00:13:55.020 --> 00:14:02.140 
Now it remains open
how the key is derived.

164
00:14:02.660 --> 00:14:06.720 
So for decryption the same algorithm
can be used as for encryption.

165
00:14:07.220 --> 00:14:12.330 
I mentioned only that the
partial keys, they must applied

166
00:14:12.340 --> 00:14:18.750 
they are derived from the original
key, the sixty four bit length key.

167
00:14:19.080 --> 00:14:23.280 
So the partial forty eight keys
for the sixteen rounds have

168
00:14:23.280 --> 00:14:27.090 
to be right in the decryption
in the reverse order.

169
00:14:29.370 --> 00:14:32.460 
If I choose weak keys,

170
00:14:33.520 --> 00:14:40.290 
so a few differences are recurring
pattern. So if a sequence applies often

171
00:14:40.960 --> 00:14:48.430 
then is that making partial keys different
and then they came out the same and then

172
00:14:49.040 --> 00:14:56.390 
the application of this method
is no more so secure as

173
00:14:56.390 --> 00:14:58.330 
when one works with
complicated keys.

174
00:15:00.790 --> 00:15:01.560 
So this is a

175
00:15:02.950 --> 00:15:04.920 
rough understanding
how this DES

176
00:15:06.220 --> 00:15:10.200 
encryption is working. Of course
compared to the tradition methods

177
00:15:10.340 --> 00:15:15.180 
which could be done with paper and
pencil, here you need a computer

178
00:15:15.940 --> 00:15:18.910 
and computing device
to perform the

179
00:15:19.820 --> 00:15:22.480 
computations that are
necessary to encrypt a block.

180
00:15:23.440 --> 00:15:28.890 
Now let's have a look on the
situation and the results into

181
00:15:28.890 --> 00:15:30.660 
crypto analysis
of DES.

182
00:15:32.230 --> 00:15:37.010 
DES provides a confirmation of
the Kerckhoffs principle. Since the

183
00:15:37.330 --> 00:15:39.680 
seventies, since

184
00:15:40.890 --> 00:15:43.390 
more than forty
years the DES

185
00:15:44.110 --> 00:15:50.470 
algorithm is known but no one
has found a weakness in that.

186
00:15:51.230 --> 00:15:55.280 
So it makes sense to publish
the encryption method so that

187
00:15:55.280 --> 00:15:56.830 
all the cryptoanalytics

188
00:15:58.120 --> 00:16:02.170 
analysts from the world can
check, can try to find whether

189
00:16:02.170 --> 00:16:05.910 
they find a way to
break this encryption.

190
00:16:06.370 --> 00:16:11.460 
But here the DES is a proof for
the Kerckhoffs principle that

191
00:16:11.940 --> 00:16:16.120 
the disclosure of the
algorithm has increased the security.

192
00:16:17.520 --> 00:16:20.050 
Even after more than
thirty years

193
00:16:20.660 --> 00:16:23.160 
in the beginning it needs
time to make it public

194
00:16:23.590 --> 00:16:26.270 
crypto analysts have
not found weakness,

195
00:16:26.920 --> 00:16:31.590 
only brute force attacks have
reached their goal since the

196
00:16:31.590 --> 00:16:36.360 
mid of the ninetees due to the greatly
increased performance of computers

197
00:16:36.700 --> 00:16:42.090 
so the fifty four bits
the fifty four bits

198
00:16:42.890 --> 00:16:45.940 
the key was sixty four bit
but eight bits were the

199
00:16:47.140 --> 00:16:52.280 
checksum, so only forty six
freely available bit and the

200
00:16:52.820 --> 00:16:55.950 
key space of the
two to the

201
00:16:57.170 --> 00:17:04.610 
fifty four possible keys is too
small. It can be in time

202
00:17:05.340 --> 00:17:09.110 
can be brought
by brute force.

203
00:17:09.930 --> 00:17:11.080 
Let's have a closer look.

204
00:17:13.720 --> 00:17:18.760 
We will learn more about RSA later
when we discuss about asymmetric methods.

205
00:17:19.260 --> 00:17:25.380 
So the company that designs the most popular
asymmetric methods, RSA methods,

206
00:17:25.770 --> 00:17:30.090 
they also want to know
how secure is a DES

207
00:17:30.940 --> 00:17:35.110 
algorithm and so they
published the DES challenge

208
00:17:35.970 --> 00:17:38.660 
and offered ten
thousand US dollar

209
00:17:39.480 --> 00:17:44.560 
to whom who
decrypt the DES

210
00:17:45.810 --> 00:17:52.570 
encryption method. And really there are
success, I already mentioned the

211
00:17:53.690 --> 00:17:58.440 
brute force approach. So
the first successful

212
00:17:58.860 --> 00:18:02.410 
known plaintext attack
was ninety seven.

213
00:18:02.860 --> 00:18:09.300 
Here a key was cracked with
fourteen thousand PCs

214
00:18:10.120 --> 00:18:15.160 
distributed incorporating on the
internet over a period of four months.

215
00:18:17.220 --> 00:18:19.280 
You see for practical

216
00:18:20.150 --> 00:18:23.230 
communication for some
secrets which are

217
00:18:23.780 --> 00:18:26.600 
public in a few days,

218
00:18:27.350 --> 00:18:34.410 
it makes no sense to approach this. But
if it's a secret that has

219
00:18:35.130 --> 00:18:39.690 
to remain secret over
a long period of four months

220
00:18:39.810 --> 00:18:45.580 
are too short. And then in the early
nineteen ninety eight

221
00:18:45.980 --> 00:18:51.450 
decoding was possible
after a little

222
00:18:51.450 --> 00:18:55.440 
bit more than a month, after
thirty nine days and then

223
00:18:55.980 --> 00:18:59.300 
in the middle of that years, you
see there was a competition.

224
00:18:59.300 --> 00:19:02.930 
And this competition was
of course pushed by the

225
00:19:03.770 --> 00:19:09.030 
publicity of this challenge. So
in the mid-nineties, the decryption

226
00:19:09.610 --> 00:19:17.050 
could be performed in fifty six
hours. So in a few days using

227
00:19:17.710 --> 00:19:19.860 
two hundred
fifty thousand

228
00:19:20.970 --> 00:19:25.490 
250,000$ a special
computer which was exactly

229
00:19:25.810 --> 00:19:34.060 
designed only to perform such
brute-force attacks to DES. Then

230
00:19:36.060 --> 00:19:40.480 
brute-force runs faster and faster.
In ninety nine the decryption

231
00:19:40.920 --> 00:19:46.880 
was done by more than a hundred thousand
internet users cooperating together

232
00:19:47.050 --> 00:19:53.090 
in less than a day, in twenty two
hours. And this was the time to

233
00:19:53.550 --> 00:19:57.190 
state and to say
DES is no more

234
00:19:57.850 --> 00:20:06.740 
secure, should be no more used to encrypt
secret information to guarantee confidentiality

235
00:20:07.190 --> 00:20:09.180 
in the communication
in the internet.

236
00:20:10.600 --> 00:20:14.910 
If we look for some
algorithmic weaknesses,

237
00:20:15.840 --> 00:20:22.610 
then the have minor
things found in the design

238
00:20:23.800 --> 00:20:28.250 
for hardware
implementation,

239
00:20:29.650 --> 00:20:34.520 
which is very fast into software
processing

240
00:20:34.520 --> 00:20:38.390 
permutation and the
a computation of DES,

241
00:20:38.840 --> 00:20:40.710 
as this is much slower.

242
00:20:41.990 --> 00:20:45.620 
So for example to compute
the permutation.

243
00:20:46.730 --> 00:20:50.940 
So new possibilities in chip design
make faster computation possible

244
00:20:51.930 --> 00:20:57.070 
for hardware as well and particularly
also for hardware to crack

245
00:20:57.460 --> 00:21:05.600 
this DES algorithm. So further crypto
analytic investigation showed that

246
00:21:05.730 --> 00:21:11.240 
neither the initial nor the final
permutation improves the security

247
00:21:12.110 --> 00:21:19.030 
of the DES encryption method, but they
slow down the software implementations.

248
00:21:19.530 --> 00:21:25.270 
So these are very tricky proofs to
shows this and the result is simply

249
00:21:25.530 --> 00:21:28.960 
that sixty four bits
is too short for

250
00:21:29.610 --> 00:21:36.060 
a secure encryption method
today, because with not only

251
00:21:36.060 --> 00:21:38.510 
with special hardware
but meanwhile with the

252
00:21:39.000 --> 00:21:45.470 
graphic GPUs, it's easy to crack
such a DES computation.

253
00:21:46.970 --> 00:21:49.090 
So what was the
continuing

254
00:21:50.730 --> 00:21:55.420 
development? And the first
idea was, okay. When a

255
00:21:56.020 --> 00:21:58.890 
fifty six bit is too short
for a key of DES,

256
00:21:59.430 --> 00:22:04.210 
then let's apply two times
with two different keys.

257
00:22:04.790 --> 00:22:09.930 
And the idea was fifty six plus fifty
six is one hundred and twelve and this

258
00:22:10.130 --> 00:22:14.380 
should be secure. This is
the so called 2-DES.

259
00:22:16.210 --> 00:22:21.680 
So with the dual use of DES with two
different keys to increase the

260
00:22:22.070 --> 00:22:25.100 
keyspace by doubling
the length. But

261
00:22:26.190 --> 00:22:31.390 
it didn't work. It didn't work because
a meet-in-the-middle attack could be

262
00:22:32.500 --> 00:22:36.490 
could be generated. It's simple
here that from the plaintext

263
00:22:36.490 --> 00:22:37.710 
and from the ciphertext

264
00:22:38.570 --> 00:22:41.700 
the brute force methods
are done to

265
00:22:42.650 --> 00:22:46.100 
encrypt the plaintext to
decrypt the ciphertext

266
00:22:46.530 --> 00:22:53.110 
and in this way one could see that
the key length, real key length

267
00:22:53.510 --> 00:22:58.230 
is only increased by one.
So it's only doubled.

268
00:22:58.730 --> 00:23:02.580 
Instead of the idea, it's only

269
00:23:03.390 --> 00:23:04.700 
doubled. The

270
00:23:05.460 --> 00:23:08.620 
key space is doubled,
the length of these

271
00:23:09.020 --> 00:23:15.830 
two keys, the real length for the
encryption is only simply increased.

272
00:23:16.120 --> 00:23:19.680 
So 2-DES approach
didn't work. The 2-DES

273
00:23:20.610 --> 00:23:25.130 
didn't work because of this
possible meeet in the middle attack.

274
00:23:25.630 --> 00:23:31.560 
But the better idea was to use three
DES. And so today 3-DES

275
00:23:31.920 --> 00:23:34.360 
is in place, is working,
is considered

276
00:23:35.340 --> 00:23:42.610 
as secure. So the improved
process is that one does a

277
00:23:44.460 --> 00:23:50.610 
a 3-DES procedure
with three different keys.

278
00:23:51.360 --> 00:23:56.830 
And this is triple DES and
the key size here is

279
00:23:57.810 --> 00:24:01.310 
really doubled in the
length of the key.

280
00:24:01.730 --> 00:24:07.190 
So the key, the efficient key
length here is one hundred twelve

281
00:24:07.410 --> 00:24:13.030 
and two to the one hundred twelve this
is a huge space of keys. So here

282
00:24:13.870 --> 00:24:18.230 
at least in the moment meet-as-a-
middle attack, so in the moment

283
00:24:18.660 --> 00:24:20.480 
brute-force attacks
are no more possible.

284
00:24:20.980 --> 00:24:27.060 
But you see also here, it's not three
times fifty six because we can

285
00:24:27.320 --> 00:24:32.060 
we have to understand this Meet-
in-the-Middle attack after two

286
00:24:32.060 --> 00:24:36.820 
DES and then when we take the
third DES then we get the

287
00:24:37.390 --> 00:24:41.610 
improvement of the efficient
length.

288
00:24:43.280 --> 00:24:47.580 
So this was an example beside of
the traditional examples which

289
00:24:47.580 --> 00:24:52.100 
could be formed and paper and
pen. Here this was now a

290
00:24:53.180 --> 00:24:59.910 
simple asymmetric encryption method that
used for many years very successfully

291
00:25:00.320 --> 00:25:03.220 
in the internet to

292
00:25:05.140 --> 00:25:06.720 
guarantee confidential

293
00:25:07.380 --> 00:25:08.340 
communication.
