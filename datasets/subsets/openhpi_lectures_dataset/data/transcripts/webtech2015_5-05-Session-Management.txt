WEBVTT

1
00:00:04.810 --> 00:00:06.850 
Now let's speak about Session Management.

2
00:00:09.630 --> 00:00:13.820 
You remember HTTP- the hypertext transfer protocol

3
00:00:14.350 --> 00:00:15.880 
is a stateless protocol.

4
00:00:16.550 --> 00:00:20.080 
It cannot remember a previous interaction. It simply

5
00:00:20.960 --> 00:00:24.140 
consists of cycles, requests,

6
00:00:24.760 --> 00:00:29.530 
response. A client is requesting something from the server. A server is responding,

7
00:00:29.760 --> 00:00:35.450 
and then it's over. But when we consider for example how you

8
00:00:35.760 --> 00:00:39.780 
interact with the OpenHPI application or how you interact

9
00:00:39.780 --> 00:00:43.140 
with an online shop, then there are many

10
00:00:43.780 --> 00:00:46.890 
such cycles which belong together.

11
00:00:47.780 --> 00:00:51.030 
You say you want to see this and then you select that and then

12
00:00:51.030 --> 00:00:56.750 
you have to do this. Such cycles that belong together are called a session.

13
00:00:57.530 --> 00:01:01.440 
So many web application need a session management.

14
00:01:02.280 --> 00:01:07.440 
So a session- that's a dialogue of multiple request and response cycles

15
00:01:08.020 --> 00:01:10.150 
between client server and it

16
00:01:11.280 --> 00:01:16.680 
assumes collection and caching of information. So the

17
00:01:17.140 --> 00:01:22.010 
server should recognize you that you did before that or that action.

18
00:01:23.340 --> 00:01:28.890 
We want to speak to take as an example an online shop system

19
00:01:28.930 --> 00:01:32.340 
with a shopping card. So how

20
00:01:33.650 --> 00:01:38.560 
management can be implemented over the stateless HTTP protocol?

21
00:01:39.440 --> 00:01:44.680 
And there are three ways to do this- the first approach is to

22
00:01:44.680 --> 00:01:47.640 
implement this by means of so called hidden fields.

23
00:01:48.490 --> 00:01:50.910 
The next approach is to

24
00:01:51.540 --> 00:01:54.510 
use and do this with

25
00:01:55.520 --> 00:02:02.370 
URL rewriting and then perhaps the most famous is to do is by means of cookies.

26
00:02:04.040 --> 00:02:09.030 
Let's start to consider session management implemented by hidden fields.

27
00:02:09.760 --> 00:02:15.760 
These hidden fields are HTML form elements which are comparable

28
00:02:15.760 --> 00:02:20.940 
to text field, selection, checkbox. But these fields are invisible

29
00:02:20.940 --> 00:02:25.570 
for the user. Exactly this is what's the name hidden fields come from.

30
00:02:26.910 --> 00:02:32.060 
The transmission is done by name value pair

31
00:02:32.560 --> 00:02:36.500 
between client and server. So we have the web client, http server.

32
00:02:36.770 --> 00:02:39.420 
There is a request with Form 1.

33
00:02:40.810 --> 00:02:48.790 
Then the http server answers with delivering the form 1, then

34
00:02:48.790 --> 00:02:54.330 
the user types in its data, then the form one with the data

35
00:02:54.680 --> 00:02:59.950 
transferred to the http server. And then the http server comes

36
00:02:59.950 --> 00:03:03.240 
with answering in the next form.

37
00:03:04.350 --> 00:03:09.670 
The application evaluates the data parameters

38
00:03:09.670 --> 00:03:13.330 
sent from the first form, and then they adapted to come with

39
00:03:13.330 --> 00:03:16.960 
the next form. For example you have asked for a certain product

40
00:03:16.960 --> 00:03:22.370 
family and then they send you the result as a form to select

41
00:03:22.430 --> 00:03:25.350 
a concrete product inside this product family.

42
00:03:26.080 --> 00:03:28.560 
So to remember what

43
00:03:29.170 --> 00:03:31.860 
the HTTP server already get

44
00:03:32.700 --> 00:03:35.930 
for data, it sends the data

45
00:03:37.210 --> 00:03:40.640 
from the form one as hidden fields,

46
00:03:41.040 --> 00:03:44.690 
and asked with a new form for the next data.

47
00:03:45.240 --> 00:03:47.610 
So when now the client answers

48
00:03:48.280 --> 00:03:54.170 
this data, when the client sends this data back from the form 1,

49
00:03:54.530 --> 00:03:59.590 
from 2 to http server, then the http server does not only the

50
00:04:00.450 --> 00:04:05.130 
parameters sent hand over with the form one but in the hidden field

51
00:04:05.490 --> 00:04:10.770 
this server also sees the data from the first form.

52
00:04:13.100 --> 00:04:18.260 
To give an example here we use the method "post" and

53
00:04:18.750 --> 00:04:23.710 
the action is and the application is an online shop and then there is an

54
00:04:24.080 --> 00:04:29.520 
input field with a shopping card and then there is an first item

55
00:04:30.000 --> 00:04:33.580 
which the user already is elected into

56
00:04:34.910 --> 00:04:38.870 
to put into the shopping card and then he can select the second one,

57
00:04:38.990 --> 00:04:41.680 
and the third. So in this

58
00:04:42.730 --> 00:04:48.370 
interaction the http interaction between client and server, the server sees

59
00:04:48.620 --> 00:04:51.450 
inside the hidden fields all the information

60
00:04:52.300 --> 00:04:56.760 
which comes also from former interaction with the client.

61
00:04:58.430 --> 00:05:01.670 
What are the pros for this hidden field approach?

62
00:05:02.290 --> 00:05:07.430 
It is generally supported by any browser. There is no special

63
00:05:07.430 --> 00:05:12.940 
provision at the client or at the server side necessary, and

64
00:05:13.050 --> 00:05:16.930 
the client remains completely anonymous beyond

65
00:05:17.690 --> 00:05:22.490 
the dialogue. All the data the server needs to know about the client

66
00:05:22.690 --> 00:05:27.980 
are collected in the hidden fields, in this interactions.

67
00:05:28.810 --> 00:05:33.590 


68
00:05:34.270 --> 00:05:38.690 
So successive forms must be dynamically generated in succession

69
00:05:38.820 --> 00:05:41.850 
at the server side, if for example the client

70
00:05:42.790 --> 00:05:47.820 
steps out for a while to check, for example certain information

71
00:05:48.190 --> 00:05:52.230 
then it's difficult for the server to realize whether

72
00:05:52.650 --> 00:05:56.310 
the next action belongs to that session or whether the new session start.

73
00:05:56.770 --> 00:06:00.670 
So the problems occur when this dialogue is interrupted,

74
00:06:01.100 --> 00:06:03.610 
for example, to read terms of conditions.

75
00:06:07.740 --> 00:06:11.980 
Hidden forms where only one method of session method of session management

76
00:06:12.160 --> 00:06:19.150 
or another method is possible by means so called URL Rewriting.

77
00:06:20.080 --> 00:06:24.920 
Here the session information is transmitted as part of the

78
00:06:27.020 --> 00:06:31.280 
URL. The URL Integration is done via a form and GET parameter,

79
00:06:31.860 --> 00:06:36.310 
so you see, this is the online shop. Then we have our question mark.

80
00:06:36.660 --> 00:06:42.150 
And then the data are handed over to the server which were

81
00:06:42.150 --> 00:06:44.130 
collected in form direction.

82
00:06:45.100 --> 00:06:51.570 
So when the forms are read delivered, the server must supplement all hyperlinks dynamically

83
00:06:51.780 --> 00:06:55.040 
with the current session information. So here

84
00:06:56.790 --> 00:07:01.440 
square brackets, the information that were collected in former

85
00:07:01.920 --> 00:07:05.570 
interaction of the session are mentioned.

86
00:07:08.700 --> 00:07:12.930 
There are special character needed for the URL encoding.

87
00:07:15.030 --> 00:07:19.540 
This is this question mark. The third method we have to mention perhaps the most

88
00:07:19.540 --> 00:07:24.370 
important method for session management, is the method based on cookies.

89
00:07:25.240 --> 00:07:31.710 
Cookies are an extension of the http protocol, which is described in RFC

90
00:07:32.030 --> 00:07:35.990 
2109. Here there is a new header

91
00:07:36.420 --> 00:07:41.140 
introduced, the so called http

92
00:07:43.260 --> 00:07:49.420 
header cookie. The header cookie allow the storage of the session data at the client side.

93
00:07:49.910 --> 00:07:54.690 
So the cookies are set via http response header.

94
00:07:55.540 --> 00:07:58.450 
So the server sends back the cookie

95
00:07:59.430 --> 00:08:04.940 
with a name value pair and then the cookie is stored on the client side.

96
00:08:05.350 --> 00:08:10.290 
And if the client next time is interacting with the server,

97
00:08:10.590 --> 00:08:15.530 
he sends back the cookie, so that the server can check and can remember

98
00:08:15.830 --> 00:08:17.790 
formal interaction with the client.

99
00:08:18.900 --> 00:08:24.030 
So the server determines the lifetime of such a cookie, and then

100
00:08:24.500 --> 00:08:30.130 
the cookie is transmitted in all subsequent http request to the server

101
00:08:30.340 --> 00:08:32.930 
regardless of the server response.

102
00:08:33.540 --> 00:08:37.660 
So all the interactions that are done between the client and the server

103
00:08:38.160 --> 00:08:40.440 
are transported

104
00:08:41.830 --> 00:08:47.010 
remembered and transported by the cookie, so whenever the client

105
00:08:48.800 --> 00:08:53.140 
contacts the server automatically, the cookie is

106
00:08:53.570 --> 00:08:59.390 
included so that the server can remember all the former interactions with the client.

107
00:09:01.110 --> 00:09:05.700 
Of course the user has a possibility to suppress the automatic transmission

108
00:09:05.850 --> 00:09:09.130 
when he does not like to be

109
00:09:10.060 --> 00:09:15.430 
detected by the server, to be remembered by the server,

110
00:09:15.850 --> 00:09:21.990 
and the cookie information is independent of current surfing history.

111
00:09:24.410 --> 00:09:27.840 
To have a closer look we have our client - our web client, we

112
00:09:27.840 --> 00:09:32.260 
have the http server. They are communicating via http. We have

113
00:09:32.260 --> 00:09:33.910 
the web application and the

114
00:09:35.280 --> 00:09:41.950 
CGI interface. The client sends a request to the http server, the http server recognizes

115
00:09:42.080 --> 00:09:46.030 
the web application the client want to use, and forward

116
00:09:47.580 --> 00:09:53.370 
his request to the web application. And then beside doing the

117
00:09:53.370 --> 00:09:56.240 
works, the web application generates a cookie.

118
00:09:57.300 --> 00:10:01.090 
So when the web application sends back the answer

119
00:10:01.860 --> 00:10:07.180 
via the http server to the client, it includes a cookie

120
00:10:07.860 --> 00:10:09.180 
into this answer.

121
00:10:11.290 --> 00:10:17.190 
Sorry wrong way. And then the cookie is sent

122
00:10:17.900 --> 00:10:22.660 
together with the answer to the client with the comment set cookie.

123
00:10:22.900 --> 00:10:26.590 
And that means that this cookie is stored on client side.

124
00:10:27.440 --> 00:10:29.590 
So if the client next time

125
00:10:30.430 --> 00:10:35.750 
interacts with this application, the cookie automatically is included.

126
00:10:36.070 --> 00:10:41.780 
And then together with the parameters the cookie is forwarded to the application.

127
00:10:42.390 --> 00:10:47.130 
And then the application can analyze the cookie and can remember or

128
00:10:47.900 --> 00:10:54.850 
customer with that wishes and can adapt the answer exactly on

129
00:10:55.160 --> 00:10:59.480 
what it remembers about the the customer

130
00:10:59.910 --> 00:11:05.100 
in the cookie. So the cookie is together with the data

131
00:11:05.870 --> 00:11:10.490 
manipulated in a sense that all the new interaction maybe remember

132
00:11:10.780 --> 00:11:16.250 
and it's sent back to the client and then on client side the cookie overwrites

133
00:11:16.580 --> 00:11:17.510 
the former cookie

134
00:11:20.350 --> 00:11:24.590 
for remembering the actual session with this application.

135
00:11:27.090 --> 00:11:30.980 
This is the basic idea of succession management by cookies.

136
00:11:33.320 --> 00:11:36.920 
It becomes more and more complicated when the cookie

137
00:11:37.410 --> 00:11:41.050 
contains all the information about the interaction with the server.

138
00:11:41.420 --> 00:11:47.340 
So in RFC 6265, it requires on one side that

139
00:11:47.340 --> 00:11:52.590 
the browser can store at least 50 different cookies per domain.

140
00:11:53.850 --> 00:11:58.770 
The maximum size of each is 4096 bytes,

141
00:11:59.520 --> 00:12:02.410 
but the minimum size sorry

142
00:12:03.360 --> 00:12:05.360 
upper limit is not defined.

143
00:12:06.210 --> 00:12:08.670 
So all the stored data

144
00:12:09.500 --> 00:12:14.750 
of the cookie data besides the parameters must be transmitted at every

145
00:12:15.080 --> 00:12:20.520 
request to the server and this becomes a performance problem

146
00:12:20.940 --> 00:12:23.590 
over a while. And for that reason

147
00:12:24.240 --> 00:12:28.440 
a new idea was developed and this was the idea that the

148
00:12:29.120 --> 00:12:31.510 
information about the session is not stored

149
00:12:32.170 --> 00:12:36.530 
within the cookie completely on the client side.

150
00:12:36.970 --> 00:12:40.440 
The idea is to store this information at the server side

151
00:12:41.010 --> 00:12:45.990 
and to use the cookie only to indemnify a client.

152
00:12:46.550 --> 00:12:48.770 
To indemnify the client and the session,

153
00:12:49.680 --> 00:12:54.170 
and this can be done by means of a session ID.

154
00:12:55.530 --> 00:13:01.010 
So the server then sends back all the interacted data. It sends only back

155
00:13:01.210 --> 00:13:04.250 
the session ID and if the client

156
00:13:05.030 --> 00:13:09.960 
makes a new request, he only sends its session ID-

157
00:13:10.530 --> 00:13:16.370 
the corresponding information about former direction is stored

158
00:13:16.670 --> 00:13:18.820 
under the session id on the server side.

159
00:13:20.540 --> 00:13:23.120 
This reduces the communication

160
00:13:23.720 --> 00:13:27.570 
a lot because not all the data

161
00:13:29.120 --> 00:13:33.980 
of the interaction are stored, but only ID is stored. The data

162
00:13:33.980 --> 00:13:35.500 
as a complete data history

163
00:13:36.220 --> 00:13:41.110 
is on the server side. So in this way performance comes more

164
00:13:41.920 --> 00:13:43.870 
becomes more efficient

165
00:13:44.500 --> 00:13:48.040 
because it's more compact, but on the other side

166
00:13:48.670 --> 00:13:50.870 
one needs a mechanism to

167
00:13:51.480 --> 00:13:56.000 
terminate a session. And this can be done

168
00:13:56.620 --> 00:13:59.320 
by means of time-out or

169
00:14:01.780 --> 00:14:02.900 
or explicitly.

170
00:14:04.800 --> 00:14:08.860 
Let's have a look to the session management with cookies with the

171
00:14:09.420 --> 00:14:15.540 
ID, for the session ID. So we have the client, we have the http communication

172
00:14:15.760 --> 00:14:22.500 
with the web server, and then here on the application side behind of the

173
00:14:22.640 --> 00:14:27.570 
web server there is a database. And the client sends its request.

174
00:14:28.730 --> 00:14:33.820 
The server creates a session ID. The session ID in our case 0815

175
00:14:34.130 --> 00:14:38.570 
is stored in the database and then all the information about this

176
00:14:39.030 --> 00:14:42.390 
interaction, about the data, the client sends

177
00:14:42.810 --> 00:14:45.740 
are stored under this

178
00:14:46.490 --> 00:14:53.020 
session ID. So the answer sends back from the http server is the

179
00:14:53.170 --> 00:14:56.140 
forms which the application

180
00:14:56.990 --> 00:15:02.060 
needs to get more parameters together with the cookie. And the

181
00:15:02.060 --> 00:15:06.920 
cookie only contains this session ID. And then the

182
00:15:07.980 --> 00:15:13.490 
client has the next request, send the next request to the http server.

183
00:15:13.750 --> 00:15:20.160 
And then the cookie is included with the session ID so the server

184
00:15:20.530 --> 00:15:27.000 
and the application are able to recognize this customers, and for example

185
00:15:27.520 --> 00:15:31.070 
to put some new article in the shopping cart.
