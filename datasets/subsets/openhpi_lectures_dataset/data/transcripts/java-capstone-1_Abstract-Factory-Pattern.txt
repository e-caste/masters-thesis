WEBVTT

1
00:00:01.570 --> 00:00:06.650 
Okay, so.. examples. Good thing,
yay! So let's start with the

2
00:00:06.860 --> 00:00:10.920 
Abstract Factory Pattern and
that's a Creational Pattern

3
00:00:11.410 --> 00:00:14.550 
and the problem
is that we need,

4
00:00:15.480 --> 00:00:19.000 
depending on some
configuration, either

5
00:00:21.740 --> 00:00:25.830 
one product or another product,
or one representation

6
00:00:25.830 --> 00:00:28.290 
of a product and another
representation of a product

7
00:00:28.950 --> 00:00:32.470 
of an object basically in
software and in Java code.

8
00:00:33.580 --> 00:00:37.710 
We can do that! So,
I could just

9
00:00:37.710 --> 00:00:41.520 
write my constructor
and I have a configuration

10
00:00:41.520 --> 00:00:45.790 
file and I read it and it's done.
So, where's the actual problem? Why

11
00:00:45.790 --> 00:00:48.190 
did I need a pattern for
that? Well, and then you have

12
00:00:48.190 --> 00:00:51.580 
the configuration file and you have
it in your constructor and then you..

13
00:00:51.590 --> 00:00:55.520 
Whenever you need to decide
where you want to have the red

14
00:00:55.520 --> 00:00:58.680 
button or the blue
button: ah, let me ask

15
00:00:58.680 --> 00:01:02.180 
the configuration file. If
it's red then put the red button

16
00:01:02.180 --> 00:01:06.570 
and if it's blue put the blue button;
and at some other position:

17
00:01:06.570 --> 00:01:08.890 
oh, there is a text field and
then it's a completely

18
00:01:08.910 --> 00:01:12.750 
different view and.. yeah, and where is
the problem? I mean, it's kind of,

19
00:01:12.760 --> 00:01:16.510 
you distribute this decision
all over your code. Yes.

20
00:01:18.530 --> 00:01:21.470 
And now comes the bad customer,
Dr. Demanding,

21
00:01:22.450 --> 00:01:24.820 
and what does he
want? "Ah, Ralph,

22
00:01:24.970 --> 00:01:27.130 
I want to have it all
completely different".

23
00:01:27.370 --> 00:01:31.990 
Ok, so, now I've got a problem.
I see that.
So, we want to more or less

24
00:01:32.000 --> 00:01:36.200 
consolidated or all
configuration things into

25
00:01:36.200 --> 00:01:39.790 
one class, in this case, and this
is going to be our factory.

26
00:01:40.040 --> 00:01:45.140 
And with this factory we can then
create different products but

27
00:01:45.140 --> 00:01:50.090 
they more or less all are the
same kind of product but

28
00:01:50.090 --> 00:01:53.840 
they have got different attributes,
different behavior or whatever.

29
00:01:54.240 --> 00:01:57.890 
So, basically, we have the
abstract factory, that says we

30
00:01:57.890 --> 00:02:01.330 
need just some sort of factory
and then we decide if we let our

31
00:02:01.970 --> 00:02:05.450 
products be built by FactoryA
or by FactoryB, and in the

32
00:02:05.450 --> 00:02:10.170 
end, kind of.. you know that
a lot of factories build

33
00:02:10.680 --> 00:02:13.780 
different things, washing
machines for example

34
00:02:13.780 --> 00:02:18.950 
and as a kind of this famous
company FactoryA which builds

35
00:02:18.950 --> 00:02:22.230 
the most terrific washing
machines and then there's the other

36
00:02:22.230 --> 00:02:25.700 
company FactoryB which also claims
to build the most terrific

37
00:02:25.700 --> 00:02:28.800 
washing machines but theirs'..
(inaudible). There's a little

38
00:02:28.800 --> 00:02:31.430 
difference, here a little
difference there.

39
00:02:31.570 --> 00:02:33.580 
Basically, a difference
in the price tag

40
00:02:35.010 --> 00:02:38.320 
and sometimes also a difference
in the label they

41
00:02:38.320 --> 00:02:42.060 
put on it, and sometimes.. also
the (inaudible) they come with,
but they are all

42
00:02:42.060 --> 00:02:46.530 
washing machines. Exactly, but
they're different. And so,

43
00:02:46.530 --> 00:02:52.590 
depending if you kind of give
the task to FactoryA,

44
00:02:52.590 --> 00:02:56.030 
it will build a washing
machine slightly different

45
00:02:56.220 --> 00:02:58.900 
than if you give the task to
FactoryB, which also will build

46
00:02:58.900 --> 00:03:03.600 
a washing machine, but.. a
slightly different one.
And the thing is,

47
00:03:03.950 --> 00:03:07.470 
here this is all implemented
with plain.. all the things we

48
00:03:07.470 --> 00:03:11.010 
already know, like plain Java
classes, so we kept interfaces

49
00:03:11.010 --> 00:03:14.750 
we've got abstract classes, we've
got concrete classes,
we've got associations

50
00:03:14.750 --> 00:03:17.680 
between this; so we already
know all this,

51
00:03:17.840 --> 00:03:21.540 
and, in this case, more or less
the abstract factory is more

52
00:03:21.570 --> 00:03:24.390 
or less kind of an interface
for us, because we want to have

53
00:03:24.390 --> 00:03:27.200 
the concrete factories, FactoryA
and FactoryB,

54
00:03:27.450 --> 00:03:30.720 
but we have it as an Abstract
Factory here because we could

55
00:03:30.730 --> 00:03:34.370 
already implement some common
behavior or at least a

56
00:03:34.900 --> 00:03:38.720 
constructor for certain product
also in the abstract factory,

57
00:03:38.730 --> 00:03:41.600 
so, yeah, therefore it's
the abstract factory.

58
00:03:41.790 --> 00:03:44.270 
And also the pattern is called
the "Abstract Factory", so..

59
00:03:44.460 --> 00:03:48.710 
So, yeah, and you
will get the

60
00:03:48.780 --> 00:03:51.770 
full implementation
of exactly this..

61
00:03:55.710 --> 00:03:56.770 
diagram. And, um.. yeah.

62
00:03:58.860 --> 00:04:00.790 
The code will be
there on GitHub.
