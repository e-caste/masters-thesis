WEBVTT

1
00:00:01.180 --> 00:00:05.800 
Now we want to consider some Public Key
Infrastructures (PKI) in the Internet

2
00:00:05.960 --> 00:00:10.220 
in our openHPI course- Confidential
Communication in the Internet.

3
00:00:11.200 --> 00:00:16.840 
You remember the Public Key Infrastructures,
we discussed it in detail,

4
00:00:17.320 --> 00:00:23.900 
say, the Trust Problem, a trust problem
for asymmetric cryptosystems.

5
00:00:23.933 --> 00:00:35.990 
The trust problem consists of problems that we need to
tamper-proof liaise the public keys to their users.

6
00:00:36.000 --> 00:00:42.320 
So, the PKIs allow in this
way the secure application

7
00:00:42.560 --> 00:00:49.500 
of asymmetric cryptoprotocols for encryption
and also particularly for digital signature.

8
00:00:49.610 --> 00:00:56.660 
And they provide a basis of the
hierarchical trust model and the

9
00:00:56.660 --> 00:01:04.000 
hierarchical structure of such Public Key
Infrastructures (PKI). So first, PKI

10
00:01:04.044 --> 00:01:07.580 
and the most important
PKI in the internet

11
00:01:08.037 --> 00:01:16.280 
is connected to the HTTP, the
HyperText Transfer Protocol, that's

12
00:01:16.280 --> 00:01:23.860 
the protocol that allows to use the web-applications
over the internet and the Public Key

13
00:01:23.860 --> 00:01:32.160 
Infrastructure is in place for the
HTTPS protocol, the HyperText

14
00:01:32.250 --> 00:01:42.960 
Transfer Protocol Secure. And this HTTPS protocol
secures the protocol for communication

15
00:01:42.970 --> 00:01:49.100 
with web servers- the interaction
between web browsers and web servers.

16
00:01:49.699 --> 00:01:57.260 
Originally, the HTTP protocol was
introduced to this end and this was

17
00:01:57.460 --> 00:02:04.440 
all of the communication running in cleartext. And
then with this version of the HTTPS protocol,

18
00:02:04.900 --> 00:02:10.180 
the connection between the web
browser and the web server could

19
00:02:10.180 --> 00:02:17.180 
be secured. So, in the case of using
an HTTPS connection in the internet,

20
00:02:17.840 --> 00:02:21.620 
the identity of the requested
web page is checked.

21
00:02:22.140 --> 00:02:28.200 
So, the communication does not start before the
partners are authenticated to each other.

22
00:02:28.200 --> 00:02:34.220 
And all the communication is
encrypted. These are the two main

23
00:02:34.780 --> 00:02:39.400 
features that are provided
by the HTTPS protocol,

24
00:02:39.920 --> 00:02:47.840 
compared to the HTTP protocol. HTTPS
because we need it for our authentication

25
00:02:47.880 --> 00:02:49.440 
or we need it for
the exchange of

26
00:02:50.780 --> 00:03:01.960 
security encryption keys. HTTPS is based on
hierarchical Public Key Infrastructures.

27
00:03:01.960 --> 00:03:13.140 
Here, in this hierarchical Public Key Infrastructures,
the "Root CA" certificates are stored in the browser

28
00:03:13.800 --> 00:03:19.800 
of the user or in operating system,
particularly for the smart devices.

29
00:03:21.480 --> 00:03:26.400 
And if you connect to
critical internet services,

30
00:03:26.680 --> 00:03:36.620 
definitely, you should only
use this HTTPS protocol

31
00:03:37.740 --> 00:03:44.160 
when a browser displays a certificate
warning, then you should be careful.

32
00:03:44.600 --> 00:03:49.440 
So, the certificate guarantees that
you are communicating with the

33
00:03:49.440 --> 00:03:56.620 
right owner, with the right service, and
that all the internet communication is

34
00:03:57.700 --> 00:04:04.240 
encrypted. To give an example, in the
beginning of such a connection,

35
00:04:04.980 --> 00:04:09.960 
such an interaction in the World
Wide Web, a connection needs

36
00:04:10.140 --> 00:04:13.680 
to be established and
here in our example,

37
00:04:13.873 --> 00:04:22.720 
Let's assume that the user wants
to connect to his saving bank.

38
00:04:22.940 --> 00:04:28.798 
The browser verifies, so, he gives in
the URL and the browser verifies the

39
00:04:29.287 --> 00:04:45.212 
signature of the certificate on the "www.sparkasse.de"(URL)
with the help of superordinate certificate.

40
00:04:45.294 --> 00:04:50.800 
This superordinate certificate
comes from D-Trust. It is an

41
00:04:51.700 --> 00:04:59.180 
organization that issues such certificates.
So, in this step, it is checked

42
00:04:59.400 --> 00:05:10.710 
whether the connection between you (user) and your bank, if
it's really your bank which is communicating with you.

43
00:05:11.100 --> 00:05:18.560 
And here in the browser, in the URL field,
one can see this (D-Trust Certificate).

44
00:05:19.840 --> 00:05:24.480 
Now, one has to check the signature, not
one (you), the browser is doing this

45
00:05:24.520 --> 00:05:29.740 
the signature of the D-Trust
certificate is verified.

46
00:05:30.800 --> 00:05:37.560 
The browser is doing this, so it checks
the signature and checks whether

47
00:05:37.570 --> 00:05:44.620 
the certificate is valid.
The browser is doing this

48
00:05:45.600 --> 00:05:51.140 
with the trustworthy
"Root CA" certificate

49
00:05:51.660 --> 00:05:58.960 
of the service. And then the browser
can establish a chain of trust up to

50
00:05:58.960 --> 00:06:06.740 
the certificate of the saving bank. Starting from
the certificate of the D-Trust "Root CA" up

51
00:06:08.640 --> 00:06:13.480 
to the certificate of the
savings bank. And if you like,

52
00:06:13.660 --> 00:06:20.720 
you can follow this on your
browser, in any case, if you have

53
00:06:20.720 --> 00:06:24.780 
an HTTPS connection, there
is a small lock icon

54
00:06:25.980 --> 00:06:32.980 
displayed. When connecting to a critical
internet service, the browser should show

55
00:06:33.420 --> 00:06:40.900 
such a small lock icon. Here, this
is a lock symbol, it's green.

56
00:06:40.920 --> 00:06:44.800 
Otherwise, it is red and the lock
is open. It differs a little bit

57
00:06:44.800 --> 00:06:48.540 
on what kind of browser you are
using, but this guarantees

58
00:06:48.540 --> 00:06:57.430 
you that there is a valid certificate and
that you are really connected with your

59
00:06:57.790 --> 00:07:03.980 
savings bank. Anyone who is interested
to see the certificate chain in the

60
00:07:03.980 --> 00:07:07.700 
hierarchy, can do this
in his browser.

61
00:07:08.172 --> 00:07:12.000 
For example, in Firefox, it
looks like the following -

62
00:07:12.340 --> 00:07:14.660 
You can click here on
this green lock.

63
00:07:15.180 --> 00:07:19.620 
Then you can click on the arrow
next to the secure connection,

64
00:07:19.800 --> 00:07:25.980 
and then you see further information which
shows you the certificate details.

65
00:07:26.521 --> 00:07:30.260 
Definitely, you should do
this to get a feeling that

66
00:07:30.860 --> 00:07:35.970 
when you are connecting to your bank
in the background this Public Key

67
00:07:35.980 --> 00:07:41.600 
Infrastructure is working. Certificates
are exchanged when the connection is

68
00:07:41.610 --> 00:07:50.780 
established, so that both partners
know that they are exactly connected

69
00:07:50.980 --> 00:07:58.400 
to each other. Another example
of a PKI in practice is

70
00:07:58.610 --> 00:08:04.320 
"My ELSTER". My ELSTER is an official online
portal of the German tax authorities.

71
00:08:05.440 --> 00:08:09.800 
For example, for filling
in-context returns or others.

72
00:08:10.860 --> 00:08:17.840 
The log-in into this portal, into "My
ELSTER" portal is possible via a Public

73
00:08:17.840 --> 00:08:25.340 
Key Infrastructure. So, the certificate
file contains a signed certificate and

74
00:08:25.400 --> 00:08:31.340 
private key and is stored in the
user's computer. This is when you

75
00:08:31.340 --> 00:08:37.720 
establish a connection to interconnect
and interchange messages with ELSTER.

76
00:08:38.360 --> 00:08:45.500 
Then you can also use an electronic identity
card plus the ID card App2 software.

77
00:08:46.200 --> 00:08:51.220 
This is a chip card which after checking the
Authorization Certificate of "My ELSTER"

78
00:08:51.220 --> 00:08:58.480 
issues your stored identity data
assigned by the BSI. BSI in

79
00:08:58.480 --> 00:09:05.340 
Germany is a federal authority for
security in information technology.

80
00:09:06.200 --> 00:09:13.960 
And you can interact with "My ELSTER"
by means of a security stick or

81
00:09:13.960 --> 00:09:21.270 
a chip card and the "ELSTER" authenticator
software which contains a private key and

82
00:09:21.440 --> 00:09:28.620 
signed certificate to prove your identity
for this interaction. So, this works in a

83
00:09:28.620 --> 00:09:35.600 
different way, like the PKI, it's a
different PKI that we discussed first

84
00:09:35.680 --> 00:09:39.840 
in the internet, which is
used when we make secure

85
00:09:40.660 --> 00:09:48.600 
communications via the HTTPS protocol. So, there
are many such public key infrastructures

86
00:09:48.600 --> 00:09:59.680 
in internet. The PKI which is on the basis
of HTTPS protocol is of particular

87
00:09:59.760 --> 00:10:03.900 
importance, and is very
very popular in use.
