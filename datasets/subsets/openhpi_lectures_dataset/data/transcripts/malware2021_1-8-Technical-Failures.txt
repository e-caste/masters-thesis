WEBVTT

1
00:00:01.070 --> 00:00:05.300 
In our openHPI course about Cyber
threats by Malware, we now

2
00:00:05.750 --> 00:00:12.530 
want to have a closer look at technical
failures that are misused to

3
00:00:12.980 --> 00:00:20.060 
install malware on the targeted system,
on the system of the victims.

4
00:00:22.270 --> 00:00:23.210 
Technical failures

5
00:00:24.520 --> 00:00:27.730 
are one of the main
reasons for malware attacks,

6
00:00:28.240 --> 00:00:34.530 
because malware needs an access point
into any computer system that could be

7
00:00:34.640 --> 00:00:39.540 
human factors (we will discuss in the
next lecture video)

8
00:00:39.660 --> 00:00:41.260 
or technical failures.

9
00:00:43.040 --> 00:00:45.980 
What is a technical failure? A
technical failure is a deviation

10
00:00:45.980 --> 00:00:50.860 
of the state of a computer
system from its expected state.

11
00:00:51.390 --> 00:00:54.470 
So, for example, it could be
a software design error,

12
00:00:55.010 --> 00:00:58.200 
it could be a software
implementation error,

13
00:00:58.660 --> 00:01:05.030 
it could be a hardware error, it could be
an administrative error, for example,

14
00:01:05.970 --> 00:01:10.400 
a lack of knowledge or awareness,
bad configuration or others.

15
00:01:11.840 --> 00:01:14.840 
So software
design errors,

16
00:01:15.690 --> 00:01:22.710 
to go in more detail, is what we can
observe as many software products

17
00:01:23.380 --> 00:01:29.370 
are designed and developed without
considering security aspects in depth.

18
00:01:30.450 --> 00:01:34.010 
Often software developers
are no security expects.

19
00:01:35.390 --> 00:01:36.950 
The software
developers trust that

20
00:01:37.560 --> 00:01:42.310 
the security expert with other
systems do something to prevent

21
00:01:42.780 --> 00:01:48.640 
attacks against their software,
but in reality it does not work.

22
00:01:48.950 --> 00:01:52.190 
That's the reason that
when we teach software

23
00:01:52.710 --> 00:01:58.910 
development, that we every time
teach the principle of security

24
00:01:58.990 --> 00:02:04.660 
by design or privacy by design
because about security aspects

25
00:02:04.910 --> 00:02:09.710 
one has to consider in the moment
one is designing software.

26
00:02:10.950 --> 00:02:15.020 
So entire internet protocol
suite has been designed

27
00:02:15.630 --> 00:02:19.080 
almost without security mechanisms.
I already mentioned when I

28
00:02:19.930 --> 00:02:24.750 
told you that the internet started
as a research project and

29
00:02:24.750 --> 00:02:30.690 
then the prototype was immediately
used and got this popularity and

30
00:02:30.810 --> 00:02:35.190 
big application around the
world. So all these protocol suites,

31
00:02:35.900 --> 00:02:42.290 
IP protocol, TCP protocol, UDP
protocol, they come almost without any

32
00:02:42.980 --> 00:02:46.890 
security mechanisms. Same as with
application protocols like

33
00:02:46.890 --> 00:02:55.210 
FTP or NFS transfer, both transfer passwords
in plaintext so that everyone

34
00:02:55.320 --> 00:02:58.690 
who has access
to the internet

35
00:02:59.310 --> 00:03:04.010 
infrastructure can also have
access to such kind of

36
00:03:05.230 --> 00:03:13.760 
data. TCP/IP cannot predict network notes.
It is not clear how the route is chosen

37
00:03:14.700 --> 00:03:18.190 
through the internet. It can
differ from packet to packet.

38
00:03:18.640 --> 00:03:23.610 
So network sniffing is
possible and very dangerous

39
00:03:24.130 --> 00:03:29.210 
for the users. So if one looks to
the early internet standards,

40
00:03:29.720 --> 00:03:35.970 
they even explicitly state that
security concerns are not covered.

41
00:03:38.390 --> 00:03:47.630 
Even if in the design of a software, also
protection mechanisms - mechanisms are foreseen.

42
00:03:48.470 --> 00:03:54.170 
Then this design has to be
converted into program code.

43
00:03:54.920 --> 00:03:59.790 
This is called implementation. So also
in the course of implementation,

44
00:04:00.280 --> 00:04:02.820 
errors can occur
that later

45
00:04:03.520 --> 00:04:08.580 
provide possibilities for the
attackers to exploit these errors

46
00:04:08.870 --> 00:04:13.500 
to attack a system. So also design
of a software may be secure

47
00:04:13.500 --> 00:04:16.360 
the implementation can
open holes for attacks.

48
00:04:16.770 --> 00:04:18.790 
So for example
unchecked inputs,

49
00:04:19.590 --> 00:04:24.530 
that there is no check how
long the input is and this

50
00:04:24.980 --> 00:04:26.650 
we know for example by

51
00:04:27.750 --> 00:04:30.030 
by buffer overflow,
the attacker

52
00:04:31.060 --> 00:04:35.090 
gives much more input
in and then it is not

53
00:04:35.580 --> 00:04:39.650 
deleted it is simply
checked in the system.

54
00:04:40.540 --> 00:04:45.530 
Missing for back criteria - so the
attacker can try out things,

55
00:04:45.530 --> 00:04:50.610 
they can try to do something. So
even if the system owner sees

56
00:04:50.610 --> 00:04:52.810 
that someone tries to
misuse the system,

57
00:04:53.530 --> 00:04:56.560 
there is no security
protection against this.

58
00:04:58.360 --> 00:05:02.630 
Then missing distinction
between user groups is a very

59
00:05:04.560 --> 00:05:07.800 
often misused reason

60
00:05:08.700 --> 00:05:13.940 
and opens doors for attackers.
So some users have

61
00:05:14.790 --> 00:05:17.700 
deeper rights, for
example administrators

62
00:05:18.280 --> 00:05:22.240 
compared to standard users. Standard
users should not be able

63
00:05:22.240 --> 00:05:25.540 
to easily install a system or
to switch off another system.

64
00:05:25.910 --> 00:05:30.860 
This is the task of administrators.
So in many implementations

65
00:05:31.290 --> 00:05:37.580 
although simple users have rights to
get super user rights

66
00:05:37.880 --> 00:05:41.310 
to do something serious
with the system,

67
00:05:42.310 --> 00:05:47.490 
but often users have not the
knowledge for such kind of activity.

68
00:05:47.780 --> 00:05:52.920 
So a professional
programmer should divide

69
00:05:52.920 --> 00:05:56.980 
between what can standard users
do, what can administrators do.

70
00:05:57.390 --> 00:06:01.450 
Eventually there are even
more rules to provide.

71
00:06:01.950 --> 00:06:07.690 
Then insecure cryptographic methods -
they provide tools for attacks,

72
00:06:08.060 --> 00:06:14.840 
hard coded keys or passwords, hard
to understand code without any

73
00:06:15.030 --> 00:06:16.560 
comment, code

74
00:06:18.090 --> 00:06:19.910 
not available
for checking,

75
00:06:20.570 --> 00:06:24.650 
(Test-) backdoors - all of which
are not closed after the test

76
00:06:25.590 --> 00:06:30.880 
or the typical
default access

77
00:06:31.730 --> 00:06:36.910 
possibilities to a program. When the
program is installed, they need to be

78
00:06:37.110 --> 00:06:42.530 
closed after the installation but
often they are not. This all provides

79
00:06:42.840 --> 00:06:46.400 
holes for attacks
that the

80
00:06:48.390 --> 00:06:49.710 
attacker can misuse.

81
00:06:51.210 --> 00:06:56.650 
If we look at the hardware, then also
hardware errors and failures help

82
00:06:58.900 --> 00:07:05.140 
to install their malware on
the systems of the users.

83
00:07:06.410 --> 00:07:11.330 
So, for example, substantial security
risks come from unreliable,

84
00:07:11.730 --> 00:07:18.330 
unprotected or faulty hardware: design errors
in the different components, open ports

85
00:07:18.680 --> 00:07:24.340 
in the facility - for example USB
or RJ45 as examples

86
00:07:24.340 --> 00:07:28.740 
for such kind of attacks,
insecure reboot sequences -

87
00:07:29.520 --> 00:07:34.470 
for example in case of power outage.
This is one of the motivations

88
00:07:34.470 --> 00:07:37.860 
for Denial-of-Service attacks
to let the system crash

89
00:07:38.270 --> 00:07:40.760 
and then the system
automatically

90
00:07:41.430 --> 00:07:47.670 
re- starts and often if it's not
correctly configured, then it restarts

91
00:07:48.080 --> 00:07:53.730 
in default settings which are known
to the attackers and can be misused.

92
00:07:54.220 --> 00:08:00.350 
Physical accessible devices for example Wi-Fi
router, switches, terminals, computers

93
00:08:00.720 --> 00:08:05.340 
can be manipulated, the
attacker can install

94
00:08:05.810 --> 00:08:07.980 
malware on the systems.

95
00:08:08.830 --> 00:08:11.390 
Also administrative errors

96
00:08:12.920 --> 00:08:18.290 
provide possibilities for
attackers like lack of awareness.

97
00:08:18.930 --> 00:08:23.470 
So administration errors - these are
a common source for attacks.

98
00:08:24.060 --> 00:08:30.680 
So for example default credentials, such
as username: root, password: root,

99
00:08:31.050 --> 00:08:38.330 
these are when a system is spied.
Then there are default settings

100
00:08:38.550 --> 00:08:44.220 
that the user after installation of the
system can start to configures the system.

101
00:08:45.010 --> 00:08:51.120 
And of course the default credentials,
default access ways they need

102
00:08:51.480 --> 00:08:57.410 
to be closed otherwise all people
that know the default credentials

103
00:08:57.670 --> 00:09:02.470 
can access and can misuse the
system. Wrong domain settings

104
00:09:02.470 --> 00:09:07.120 
or errors in the settings of a firewall
of an intrusion detection system,

105
00:09:07.880 --> 00:09:11.940 
of an IPS, of a SPAM filter,
of a sandboxing environment -

106
00:09:12.430 --> 00:09:16.970 
all are protection measures
and protection tools

107
00:09:17.380 --> 00:09:21.290 
and if they are configured
in a wrong way,

108
00:09:21.720 --> 00:09:26.740 
then they can be overcome
by the attackers.

109
00:09:28.850 --> 00:09:34.470 
Generally there is a lot of software
on a computer that's not used

110
00:09:35.000 --> 00:09:42.010 
by the user. So unused standard software
on components provide possibilities

111
00:09:42.470 --> 00:09:44.590 
to attack a system, to

112
00:09:45.330 --> 00:09:51.170 
misuse vulnerabilities for
installing malware on a system.

113
00:09:51.750 --> 00:09:56.320 
Errors in networking, (reverse-) proxy,
routing provides a possibility

114
00:09:56.770 --> 00:10:02.660 
and very important missing patches
and updates of old hardware

115
00:10:02.660 --> 00:10:09.400 
and of old software are a huge problem
for users and

116
00:10:09.470 --> 00:10:14.590 
provide a very good situation for
attackers because they can misuse

117
00:10:14.840 --> 00:10:18.680 
known vulnerabilities,

118
00:10:19.430 --> 00:10:21.450 
by means of
known exploits

119
00:10:22.150 --> 00:10:26.120 
to the end of
installing malware.

120
00:10:26.980 --> 00:10:30.300 
Working with administrator
root accounts -

121
00:10:31.130 --> 00:10:33.210 
these are important

122
00:10:34.940 --> 00:10:38.550 
failure sources
that support

123
00:10:39.210 --> 00:10:41.700 
a security attackers,

124
00:10:42.610 --> 00:10:45.520 
cybercriminals to
installs their malware.

125
00:10:47.170 --> 00:10:52.520 
If we look at the security practices in
software development,

126
00:10:53.340 --> 00:10:57.780 
we have to say as errors and
failures are wide ranging,

127
00:10:58.350 --> 00:11:05.350 
the security precautions need to be
taken seriously. So here is a list

128
00:11:05.990 --> 00:11:13.250 
which proposes the best security
practices for a secure software development

129
00:11:13.710 --> 00:11:17.210 
and often this is not
known to the developer.

130
00:11:17.790 --> 00:11:23.330 
So the advice is to give
the least privilege

131
00:11:24.460 --> 00:11:28.630 
for an application that
is needed to run this.

132
00:11:29.270 --> 00:11:34.720 
This is to prevent, to give the highest
privilege - the administrator privilege,

133
00:11:35.150 --> 00:11:39.100 
which of course allows to do
all things on a computer.

134
00:11:39.890 --> 00:11:42.840 
Avoid security by

135
00:11:43.640 --> 00:11:48.620 
obscurity. So use
methods, show the

136
00:11:51.090 --> 00:11:54.040 
security methods to find,

137
00:11:55.350 --> 00:12:00.240 
by the colleagues, by the good
people - to find holes, to find

138
00:12:00.590 --> 00:12:05.120 
problems that later on can be
misused. By the way, that is a very

139
00:12:05.680 --> 00:12:11.130 
important argument for open source. Open
source that could be checked and

140
00:12:11.430 --> 00:12:12.930 
evaluated by everyone.

141
00:12:13.860 --> 00:12:16.690 
Keep security
measures simple

142
00:12:17.520 --> 00:12:22.080 
because the more complex systems are,
the same is true for security systems,

143
00:12:22.540 --> 00:12:28.440 
the more mistakes they can contain
and the more difficult it is

144
00:12:28.880 --> 00:12:31.580 
to the detect
mistakes which

145
00:12:33.010 --> 00:12:36.820 
can become vulnerabilities that
can be misused by the attacker.

146
00:12:38.080 --> 00:12:41.880 
Another advice for best
security practices is

147
00:12:42.410 --> 00:12:44.990 
to minimize
attack surfaces.

148
00:12:45.700 --> 00:12:47.410 
That means delete all

149
00:12:48.070 --> 00:12:52.780 
unneeded programs, also on your
smartphone, on your computer -

150
00:12:53.390 --> 00:12:58.180 
programs that you are not using, that
you do not need - you should

151
00:12:58.790 --> 00:13:06.310 
uninstall because even these programs
provide attack possibilities by

152
00:13:06.480 --> 00:13:10.430 
their vulnerabilites that can be
misused by the attackers.

153
00:13:11.640 --> 00:13:17.900 
So there is a wide range of technical
failures which help cyber security

154
00:13:18.250 --> 00:13:20.860 
to perform their cyber
threats by malware.
