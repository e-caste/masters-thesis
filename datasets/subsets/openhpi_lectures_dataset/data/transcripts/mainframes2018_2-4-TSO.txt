WEBVTT

1
00:00:00.770 --> 00:00:05.809 
Hello, it's me again, Wolfram Greis from the European Mainframe Academy,

2
00:00:05.810 --> 00:00:09.859 
and in the next video clip, I want to talk about Time Sharing Option (TSO), the

3
00:00:09.860 --> 00:00:14.449 
interactive interface to a z/OS system

4
00:00:14.450 --> 00:00:17.929 
that uses so-called 3270 interface.

5
00:00:17.930 --> 00:00:22.759 
I will come afterwards with a few information.

6
00:00:22.760 --> 00:00:26.539 
What is 3270 and why do we need it?

7
00:00:26.540 --> 00:00:30.619 
What is TSO, it stands for time sharing option.

8
00:00:30.620 --> 00:00:35.629 
So it began in 1972 and before we had this option, the

9
00:00:35.630 --> 00:00:40.099 
IBM mainframe was a pure batch operating batch

10
00:00:40.100 --> 00:00:44.659 
processing system. And in 1972, IBM came up

11
00:00:44.660 --> 00:00:47.929 
with the timesharing as an option.

12
00:00:47.930 --> 00:00:52.639 
Of course, in between, it's no longer an option, but it's still called  TSO - Time

13
00:00:52.640 --> 00:00:53.719 
Sharing Option.

14
00:00:55.550 --> 00:01:00.019 
Some terms comparisons that are in many cases, useful to

15
00:01:00.020 --> 00:01:04.729 
compare our environment with other environments, we have an address

16
00:01:04.730 --> 00:01:09.379 
space in other environments, you would say,

17
00:01:09.380 --> 00:01:13.849 
a process called Virtual Telecommunication access method

18
00:01:13.850 --> 00:01:18.859 
and on the other for example, on Unix and Linux system

19
00:01:18.860 --> 00:01:23.329 
that could be a Telnet server. And Telnet server on a Unix or Linux is nothing

20
00:01:23.330 --> 00:01:27.772 
more than a process. And TSO, the time

21
00:01:27.773 --> 00:01:32.569 
sharing option as an interactive interface, is comparable to a shell

22
00:01:32.570 --> 00:01:37.579 
and in the next video clip, we also talk about the interactive system productivity

23
00:01:37.580 --> 00:01:41.764 
facility. This is really comparable as example to a VI

24
00:01:43.250 --> 00:01:47.209 
editor in Unix or Linux environment.

25
00:01:47.210 --> 00:01:51.769 
And another interface to TSO, or can also be the Rational

26
00:01:51.770 --> 00:01:54.019 
Developer for C systems.

27
00:01:54.020 --> 00:01:57.079 
It's an eclipse based graphical user interface.

28
00:01:57.080 --> 00:02:01.519 
We also come to eclipse and such kind of

29
00:02:01.520 --> 00:02:05.659 
graphical interfaces in a later video clip.

30
00:02:08.259 --> 00:02:12.819 
Let's look at a TSO environment and the creation of

31
00:02:12.820 --> 00:02:14.979 
a TSA or address space.

32
00:02:14.980 --> 00:02:20.019 
We have a user at a terminal, today not a dumb terminal, today normally

33
00:02:20.020 --> 00:02:23.956 
at a workstation, on this workstation runs 30270

34
00:02:25.120 --> 00:02:29.739 
emulation and this is the interface

35
00:02:29.740 --> 00:02:31.749 
to the so-called VTAM.

36
00:02:31.750 --> 00:02:36.549 
I just introduced VTAM as comparatively comparable to a Telnet

37
00:02:36.550 --> 00:02:41.409 
server. And in this case, it's called VTAM, and

38
00:02:41.410 --> 00:02:45.639 
now the user at the workstation wants to

39
00:02:47.120 --> 00:02:51.639 
log on to TSO and

40
00:02:51.640 --> 00:02:56.439 
this message or this request goes to the

41
00:02:57.760 --> 00:03:01.599 
VTAM, and this is the 3270 interface.

42
00:03:01.600 --> 00:03:05.463 
And today the workstations normally are connected

43
00:03:06.520 --> 00:03:10.719 
no longer via the SNA, the system network architecture.

44
00:03:10.720 --> 00:03:15.159 
It was the former proprietary network architecture from IBM.

45
00:03:15.160 --> 00:03:19.819 
Today we connect our workstations

46
00:03:19.820 --> 00:03:24.489 
on these TCP/IP and TCP/IP that is Telnet defined but

47
00:03:24.490 --> 00:03:27.250 
because we now need 3270

48
00:03:29.290 --> 00:03:32.620 
interface stream, we need a Telnet 3270

49
00:03:34.600 --> 00:03:39.069 
means this is 3270 data stream and

50
00:03:39.070 --> 00:03:44.499 
connected via TCP IP between a workstation and the

51
00:03:44.500 --> 00:03:46.599 
telecommunication access method.

52
00:03:46.600 --> 00:03:50.947 
Now the request comes in to VTAM and the

53
00:03:52.840 --> 00:03:57.339 
user in this case want set up a

54
00:03:57.340 --> 00:04:01.180 
TSO environment, though the information is

55
00:04:04.420 --> 00:04:08.407 
given further onto a TSO communication address space

56
00:04:10.030 --> 00:04:14.529 
and the TSO communication address space wants to have more information, not just

57
00:04:14.530 --> 00:04:19.148 
the user ID from the user, but also

58
00:04:19.149 --> 00:04:23.559 
for example, a password, compare it

59
00:04:23.560 --> 00:04:27.459 
to a security interface, some more information.

60
00:04:27.460 --> 00:04:31.929 
It means it gets to a menu where that can

61
00:04:31.930 --> 00:04:34.029 
be filled out with some information.

62
00:04:34.030 --> 00:04:38.829 
Then that comes back to the articles as the information concerning

63
00:04:38.830 --> 00:04:42.507 
security and now it's compared with the security database,

64
00:04:43.540 --> 00:04:48.429 
does this user have the authority to to

65
00:04:48.430 --> 00:04:52.059 
call and set up a TSO address space?

66
00:04:52.060 --> 00:04:56.348 
If yes, the information is passed on and the new address

67
00:04:58.120 --> 00:05:02.859 
space is created and this new address space has a name

68
00:05:02.860 --> 00:05:07.719 
which the user gave in to the the log on

69
00:05:07.720 --> 00:05:12.189 
request. And now the user gets a new address space and in this new

70
00:05:12.190 --> 00:05:16.819 
address space, there is a special program executed and activated,

71
00:05:16.820 --> 00:05:21.999 
it's the TMP, TMP stands for Terminal Monitoring Program.

72
00:05:22.000 --> 00:05:26.619 
And it's really comparable to a shell, it just gives out a prompt

73
00:05:26.620 --> 00:05:31.209 
to the user and the promt in this case is 'ready',

74
00:05:31.210 --> 00:05:34.363 
means TSA is now ready to

75
00:05:36.760 --> 00:05:40.059 
get commands and instructions from the user.

76
00:05:40.060 --> 00:05:44.739 
And in many cases, we come to that on the next video clip, the user calls

77
00:05:44.740 --> 00:05:49.689 
ISPF. It's see an editor, not just an editor but

78
00:05:49.690 --> 00:05:54.249 
a productivity facility that has a menu structure.

79
00:05:54.250 --> 00:05:56.260 
We will see it later how it looks like.

80
00:05:58.150 --> 00:06:02.799 
I mentioned in one of the former video clips that

81
00:06:02.800 --> 00:06:07.749 
also TSO users get in contact with JCL,

82
00:06:07.750 --> 00:06:12.399 
even if they don't know that, though connected to a TSO

83
00:06:12.400 --> 00:06:17.139 
user, is a so-called log on procedure and in this log on procedure,

84
00:06:17.140 --> 00:06:22.389 
you'll see there is an an EXEC, means a program is executed

85
00:06:22.390 --> 00:06:27.129 
and these IKJEFT01 is nothing more

86
00:06:27.130 --> 00:06:30.339 
than the terminal monitor program I just mentioned.

87
00:06:30.340 --> 00:06:34.899 
And with the data definition statements, in this case, we have a lot of allocations of

88
00:06:34.900 --> 00:06:39.549 
different libraries and these libraries, as example,

89
00:06:39.550 --> 00:06:44.079 
are necessary to call afterwords ISPF, and you don't have to

90
00:06:44.080 --> 00:06:48.129 
allocate all these data sets before you call ISPF.

91
00:06:48.130 --> 00:06:52.569 
This is the ideal and the function of a future

92
00:06:52.570 --> 00:06:53.570 
log on procedure.

93
00:06:55.150 --> 00:07:00.219 
This is your TSO log on screen, I mentioned the user gets when

94
00:07:00.220 --> 00:07:04.839 
he makes a log on to the TSO and here you

95
00:07:04.840 --> 00:07:09.489 
can fill in some fields. The most important fields are the username

96
00:07:09.490 --> 00:07:14.589 
and password that is compared with the security information in the database.

97
00:07:14.590 --> 00:07:19.059 
Some other information, we don't want to go into too much detail

98
00:07:19.060 --> 00:07:24.099 
here just to show you some information can be

99
00:07:24.100 --> 00:07:27.270 
given here into this prompt.

100
00:07:29.690 --> 00:07:34.939 
Then afterwards from this ready prompt, we can execute

101
00:07:34.940 --> 00:07:37.198 
TSO commands as example, LISTCAT.

102
00:07:37.199 --> 00:07:41.059 
LISTCAT means List Catalog.

103
00:07:41.060 --> 00:07:46.369 
Show me all the data sets I have

104
00:07:46.370 --> 00:07:50.959 
normally with my high level qualifier and connect

105
00:07:50.960 --> 00:07:53.080 
the two. It's very similar to an 'ls -l'

106
00:07:56.700 --> 00:07:59.119 
in a Linux or Unix environment.

107
00:07:59.120 --> 00:08:03.589 
Some other commands here, but

108
00:08:03.590 --> 00:08:08.059 
normally we don't use TSO on this so-called

109
00:08:08.060 --> 00:08:11.637 
native level. I come with the next video clip with ISPF.

110
00:08:11.638 --> 00:08:16.069 
ISPF is much more convenient to use,

111
00:08:16.070 --> 00:08:21.589 
you don't have to know all the parameters, you have to specify with

112
00:08:21.590 --> 00:08:25.850 
TSO commands and so on. So in many cases today, when you work with

113
00:08:27.650 --> 00:08:32.119 
a z/OS operating system, you will work with not just with TSO, you work with

114
00:08:32.120 --> 00:08:36.639 
TSO ISPF, and ISPF is a productivity facility.

115
00:08:37.789 --> 00:08:42.109 
Again, for questions and remarks, please use the forum.

116
00:08:42.110 --> 00:08:46.760 
And yeah, thanks for attending and see you in our next video clip.
