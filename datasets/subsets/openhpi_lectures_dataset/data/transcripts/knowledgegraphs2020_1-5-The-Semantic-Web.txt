WEBVTT

1
00:00:01.270 --> 00:00:04.900 
Welcome to knowledge graphs. This
is lecture one knowledge graphs

2
00:00:04.900 --> 00:00:08.850 
in the web of data. In this lecture
we are going to look into

3
00:00:08.850 --> 00:00:10.790 
the details of the
semantic web.

4
00:00:11.420 --> 00:00:14.740 
So here you see the semantic
web technology stack.

5
00:00:15.490 --> 00:00:19.240 
The bottom layer is the web
platform since semantic web is

6
00:00:19.240 --> 00:00:24.110 
based on the web. Then it consists
of several formats

7
00:00:24.110 --> 00:00:27.760 
such as xml, turtle, rdfa
and microformats.

8
00:00:28.300 --> 00:00:31.260 
These formats are necessary
but not very important.

9
00:00:32.630 --> 00:00:37.210 
Information can be exchanged
with the help of rdf and then

10
00:00:37.430 --> 00:00:42.850 
this data can be accessed with the help
of the query language which is SPARQL.

11
00:00:44.150 --> 00:00:48.990 
Finally this information can be used for
building different applications.

12
00:00:50.490 --> 00:00:54.370 
Linked data actually uses a
support of these technologies.

13
00:00:57.600 --> 00:01:01.630 
As you saw in the previous lecture
also that the semantic web

14
00:01:01.640 --> 00:01:08.520 
is an extension of the current web which helps
in explicitly representing the semantics

15
00:01:08.740 --> 00:01:12.560 
with the help of formal and standardized
knowledge representations.

16
00:01:14.480 --> 00:01:19.010 
It then makes it possible to process the
meaning of information automatically

17
00:01:19.390 --> 00:01:22.340 
to relate and integrate
heterogeneous data

18
00:01:22.900 --> 00:01:26.410 
to deduce implicit information
from the evident information.

19
00:01:28.350 --> 00:01:33.020 
In this case the semantic is
sort of a global database that

20
00:01:33.020 --> 00:01:36.940 
contains a universal network of
semantic propositions.

21
00:01:39.550 --> 00:01:46.130 
The bottom layer contains URI which is
uniform resource identifier.

22
00:01:46.570 --> 00:01:52.010 
For each of the entity there
exist a unique URI. For example

23
00:01:52.240 --> 00:01:53.880 
in case of
mount Everest.

24
00:01:56.220 --> 00:02:00.630 
URIs identifies each of
these entities unambiguously.

25
00:02:03.840 --> 00:02:07.020 
So now the information about Mt.
Everest can be represented

26
00:02:07.020 --> 00:02:11.310 
in the form of rdf were Mount
Everest is a mountain

27
00:02:12.290 --> 00:02:15.250 
and it has a name Mount
Everest which is a literal here.

28
00:02:15.950 --> 00:02:20.260 
And then the elevation of Mount
Everest is eight thousand eight

29
00:02:20.260 --> 00:02:21.440 
hundred and forty eight

30
00:02:22.890 --> 00:02:25.480 
and it is named after
George Everest,

31
00:02:26.430 --> 00:02:27.750 
who is a person

32
00:02:29.000 --> 00:02:33.680 
and he has a birth date fourth
July seventeen ninety.

33
00:02:34.700 --> 00:02:38.680 
So this information is actually
represented in the form of rdf triples.

34
00:02:40.690 --> 00:02:46.320 
Let us take the example of the first triple
where we have Mount Everest rdf type

35
00:02:46.960 --> 00:02:52.990 
mountain. Mount Everest here is the
subject, rdf type is the property,

36
00:02:53.010 --> 00:02:54.730 
mountain is the object.

37
00:02:57.170 --> 00:03:00.800 
Further schema level information
can also be represented.

38
00:03:01.610 --> 00:03:06.220 
So mountain has an rdf of type
class, mountain is a subclass

39
00:03:06.220 --> 00:03:08.630 
of landform and so
on and so forth.

40
00:03:10.400 --> 00:03:15.060 
This can be represented in the form that
you see on the bottom of the slide,

41
00:03:15.400 --> 00:03:20.620 
mountain is a subclass of landform
and it is named after a person.

42
00:03:24.440 --> 00:03:27.740 
So let us consider the
information about the entity

43
00:03:28.200 --> 00:03:31.140 
Mount Everest named
after George Everest.

44
00:03:32.650 --> 00:03:36.450 
George Everest has an rdf
type dead people,

45
00:03:37.370 --> 00:03:39.520 
which is a subclass
of a person.

46
00:03:42.010 --> 00:03:47.740 
A dead person cannot be a living person hence
we can define a logical constraint that

47
00:03:48.260 --> 00:03:53.200 
there are no common elements between
living people and the dead people.

48
00:03:54.410 --> 00:03:56.550 
So the result would
be an empty set.

49
00:03:58.170 --> 00:04:02.190 
This can also be represented
in the form of logical rules.

50
00:04:02.830 --> 00:04:05.360 
X has a
death date Y

51
00:04:06.000 --> 00:04:07.900 
which represents
dead people.

52
00:04:12.780 --> 00:04:15.270 
In order to access
this rdf data

53
00:04:16.320 --> 00:04:20.310 
SPARQL queries are used. More
details on SPARQL queries will

54
00:04:20.310 --> 00:04:23.250 
be given in the coming
lectures. So here

55
00:04:23.950 --> 00:04:28.770 
what we are asking DBpedia which
is one of the cross domain

56
00:04:28.770 --> 00:04:32.760 
knowledge graphs and more details
on DBpedia will come afterwards.

57
00:04:33.850 --> 00:04:37.470 
List all mountains and the people
who died there ordered by

58
00:04:37.470 --> 00:04:38.560 
the number of deaths.

59
00:04:39.550 --> 00:04:42.730 
So if you want to have a look
at the results of this query

60
00:04:43.450 --> 00:04:46.630 
you can simply click
on this link here.

61
00:04:48.690 --> 00:04:53.200 
This is the SPARQL endpoint for DB
pedia and you can just simply run

62
00:04:53.370 --> 00:04:58.710 
run query. Here you can actually
see that most of the people died

63
00:04:59.250 --> 00:05:00.370 
on Mt. Everest.

64
00:05:06.080 --> 00:05:08.960 
A similar quality can
be run on wikidata.

65
00:05:09.960 --> 00:05:13.640 
The query looks a little bit
different because wikidata follows

66
00:05:13.650 --> 00:05:16.230 
a different structure as
compared to DBpedia.

67
00:05:16.750 --> 00:05:19.290 
More details will follow
in the coming lectures.

68
00:05:20.610 --> 00:05:25.890 
So wikidata uses identifiers
for each of the entities and

69
00:05:26.300 --> 00:05:29.300 
and the properties. So if
you want to have a look

70
00:05:30.030 --> 00:05:33.880 
on the query here, on the answers
of the query here you can

71
00:05:34.360 --> 00:05:36.490 
click on the link
on the right side.

72
00:05:39.440 --> 00:05:41.460 
Here is the answer
of the query.

73
00:05:43.720 --> 00:05:46.980 
So here you find that the
philosopher Empedocles

74
00:05:47.620 --> 00:05:51.260 
died on Mount Etna
in four thirty BC.

75
00:05:53.610 --> 00:05:56.930 
For more details about linked
data and the web of data

76
00:05:57.440 --> 00:05:59.790 
next lecture will
follow. Thank you.
