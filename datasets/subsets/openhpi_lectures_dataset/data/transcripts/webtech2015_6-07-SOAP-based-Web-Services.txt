WEBVTT

1
00:00:05.850 --> 00:00:08.380 
Now let's consider SOAP-based web services.

2
00:00:10.470 --> 00:00:11.720 
What are web services?

3
00:00:12.610 --> 00:00:15.130 
Web services are a general approach

4
00:00:15.770 --> 00:00:21.440 
to the development of distributed applications, distributed applications

5
00:00:21.840 --> 00:00:25.580 
based on the interconnection of distributed object systems

6
00:00:26.040 --> 00:00:27.290 
across the web.

7
00:00:29.860 --> 00:00:33.410 
The web services subsume different technologies,

8
00:00:34.430 --> 00:00:41.180 
but in common it is a platform independent access

9
00:00:41.320 --> 00:00:46.590 
that it provides a platform independent access to services from different providers

10
00:00:47.100 --> 00:00:51.290 
in distributed systems and are independent of operating systems,

11
00:00:51.620 --> 00:00:55.610 
independent of programming languages and binary transmission protocols.

12
00:00:56.050 --> 00:01:00.570 
So the idea is we already discussed when we discuss the future of the web

13
00:01:00.980 --> 00:01:03.760 
that the web should allow all those that

14
00:01:04.900 --> 00:01:09.390 
applications can speak to each other, and by means of this web

15
00:01:09.390 --> 00:01:14.060 
service exactly this is implemented it provides the possibility that

16
00:01:14.520 --> 00:01:16.340 
applications may have applications

17
00:01:17.120 --> 00:01:21.190 
designed in different languages running on different operating systems

18
00:01:21.480 --> 00:01:27.090 
can interact in a platform-independent way over

19
00:01:27.320 --> 00:01:28.280 
the world wide web.

20
00:01:29.850 --> 00:01:36.510 
In this way the web services make the internet a global platform for communication

21
00:01:36.690 --> 00:01:39.030 
between distributed applications.

22
00:01:40.580 --> 00:01:44.610 
The old web was a platform

23
00:01:45.130 --> 00:01:48.460 
for information,

24
00:01:49.270 --> 00:01:52.660 
then we had the social web,

25
00:01:53.810 --> 00:02:00.710 
this was a platform for human interaction, and now with this web service

26
00:02:00.840 --> 00:02:07.590 
we see an approach which make it possible that distributed applications

27
00:02:07.820 --> 00:02:13.260 
running on different servers can communicate

28
00:02:13.260 --> 00:02:15.660 
and interact over the internet.

29
00:02:16.570 --> 00:02:21.680 
If we look for a definition for a formal definition from such web services

30
00:02:21.990 --> 00:02:27.120 
then we can say a web service is a software system designed

31
00:02:27.130 --> 00:02:31.500 
to support interoperable machine to machine interaction over the network.

32
00:02:31.980 --> 00:02:37.300 
This is a definition given by the world wide web consortium and

33
00:02:38.570 --> 00:02:43.450 
as a reminder we already discussed web services. was what we did.

34
00:02:43.620 --> 00:02:47.280 
Last week we discussed light weighted web services

35
00:02:48.060 --> 00:02:51.760 
and the light weighted web services have been explained earlier

36
00:02:53.170 --> 00:02:55.040 
and this only provide

37
00:02:55.980 --> 00:03:03.230 
an approach for simple interaction of such distributed applications now with the

38
00:03:03.350 --> 00:03:06.200 
web services we consider the

39
00:03:07.860 --> 00:03:15.200 
standard way how to even design great enterprise systems distributed systems

40
00:03:15.700 --> 00:03:20.250 
by letting different applications in different services

41
00:03:20.760 --> 00:03:22.050 
interact with each other.

42
00:03:24.950 --> 00:03:32.010 
Web services are based on remote procedures or remote method calls,

43
00:03:33.310 --> 00:03:37.830 
there are other middleware solutions which were in place until

44
00:03:37.830 --> 00:03:39.720 
now for example, CORBRA,

45
00:03:40.380 --> 00:03:45.430 
and CORBRA came with a binary protocol, the IIOP protocol

46
00:03:46.160 --> 00:03:48.750 
web service technology

47
00:03:49.360 --> 00:03:52.500 
does not need such an binary protocol

48
00:03:53.700 --> 00:03:58.050 
web services and the protocol that's used by web services

49
00:03:58.470 --> 00:04:03.710 
that relay directly on the application layer protocol or HTTP,

50
00:04:04.240 --> 00:04:10.850 
and an important protocol that's used for interchanging messages between web applications

51
00:04:11.190 --> 00:04:14.640 
is the xml based SOAP protocol.

52
00:04:15.420 --> 00:04:19.430 
So here on top of the world wide web is

53
00:04:20.470 --> 00:04:26.460 
using the HTTP protocol then directly as there is a protocol placed

54
00:04:26.620 --> 00:04:33.360 
SOAP protocol that allows application to interact over the HTTP protocol.

55
00:04:33.830 --> 00:04:36.280 
So here we have the network, the internet

56
00:04:36.880 --> 00:04:43.250 
the web is running as a service on the internet and the communication

57
00:04:43.250 --> 00:04:48.210 
is organized by means of the HTTP protocol and on top there

58
00:04:48.210 --> 00:04:53.830 
is a web service protocols, the SOAP protocol which allows that application

59
00:04:54.030 --> 00:04:58.460 
on different servers in the world wide web

60
00:04:58.590 --> 00:05:00.570 
can interact with each other.

61
00:05:03.260 --> 00:05:06.660 
Let's have a look at different technologies

62
00:05:07.070 --> 00:05:12.070 
for providing such middleware solution. Middleware is

63
00:05:12.180 --> 00:05:17.560 
on top of the operating system, a layer that allows the applications

64
00:05:17.570 --> 00:05:19.260 
to interact with each other.

65
00:05:20.310 --> 00:05:27.090 
So web services are conceptually based on middleware solutions for the execution

66
00:05:27.610 --> 00:05:30.040 
of code on remote systems.

67
00:05:31.440 --> 00:05:35.830 
They are using the remote procedure calls or RPCs

68
00:05:36.290 --> 00:05:38.770 
which were defined very early

69
00:05:39.770 --> 00:05:42.450 
by RFC 1057

70
00:05:43.320 --> 00:05:49.510 
and the RPC allows a program at one machine

71
00:05:50.050 --> 00:05:53.700 
to cause a sub routine to be executed on another machine,

72
00:05:54.310 --> 00:05:58.260 
and then to continue its computation with the results of the

73
00:05:58.260 --> 00:06:04.160 
subroutine that are communicated to the application.

74
00:06:04.810 --> 00:06:12.700 
Then we have another techniques, the RMI, remote method invocation

75
00:06:13.180 --> 00:06:17.670 
and this is available, this is a java framework

76
00:06:18.270 --> 00:06:23.260 
that offers an object oriented equivalent to an RPC.

77
00:06:24.260 --> 00:06:28.550 
From functionality RPCs and RMIs are the same. RMIs

78
00:06:29.070 --> 00:06:34.510 
are using a java framework and then I

79
00:06:36.250 --> 00:06:40.650 
mentioned already another middleware solutions a CORBAR, common

80
00:06:40.660 --> 00:06:43.060 
object request program architecture,

81
00:06:43.760 --> 00:06:47.570 
this is a standard that allows the interaction of different

82
00:06:47.570 --> 00:06:50.420 
software on different machines across the network,

83
00:06:50.920 --> 00:06:54.310 
and this is independent of the programming language that were

84
00:06:54.310 --> 00:07:00.740 
used, but it comes with an own binary protocol. So with our

85
00:07:02.040 --> 00:07:07.460 
SOAP based web services, we want to go a step more in

86
00:07:07.970 --> 00:07:11.340 
the direction which is important

87
00:07:11.970 --> 00:07:13.890 
which is usable for the world wide web.

88
00:07:15.610 --> 00:07:18.120 
If we look to the first generation of

89
00:07:18.730 --> 00:07:22.080 
web services, then the

90
00:07:22.810 --> 00:07:26.650 
web service protocols of the first generation

91
00:07:27.100 --> 00:07:32.240 
still form the basis of many of the web service standards used today.

92
00:07:33.020 --> 00:07:38.220 
And this was the SOAP protocol, I already mentioned that is

93
00:07:38.220 --> 00:07:40.610 
XML based network protocol

94
00:07:41.790 --> 00:07:48.510 
to exchange data between systems and to invoke our RPCs in a

95
00:07:48.520 --> 00:07:52.170 
uniform message format, using a uniform message format

96
00:07:52.720 --> 00:07:56.690 
which was standardized by the world wide web consortium.

97
00:07:57.700 --> 00:08:04.270 
Formally the SOAP was an acronym for simple object access protocol,

98
00:08:04.930 --> 00:08:08.470 
but today this meaning is no longer correct,

99
00:08:09.010 --> 00:08:15.650 
it does not longer applies to SOAP, so we have to take the name the SOAP

100
00:08:16.440 --> 00:08:18.970 
in its own and not as an acronym.

101
00:08:21.080 --> 00:08:25.340 
When we speak about web service protocol and web service

102
00:08:26.560 --> 00:08:31.170 
inventory of the first generation, then beside of the SOAP protocol

103
00:08:31.370 --> 00:08:35.780 
we have the web service description language, WSDL.

104
00:08:36.860 --> 00:08:41.670 
This web service description language, that's an xml based description language

105
00:08:42.240 --> 00:08:45.290 
to describe the interfaces of web services.

106
00:08:46.060 --> 00:08:51.710 
We need this platform independent description and this is given by

107
00:08:51.900 --> 00:08:55.150 
the web service description language. And then

108
00:08:56.030 --> 00:09:03.080 
the third column of this web service infantry of the first generation where the

109
00:09:04.010 --> 00:09:08.300 
UDDI, the universal discovery description and integration.

110
00:09:09.660 --> 00:09:14.900 
Meanwhile over many years of development it has lost

111
00:09:15.790 --> 00:09:20.950 
its meaning, so it has proven not to be successful, but the idea

112
00:09:20.950 --> 00:09:23.980 
behind WSDL to provide a directory service

113
00:09:24.390 --> 00:09:28.530 
in which the service provider of such web services

114
00:09:28.850 --> 00:09:34.840 
can register their web services and then users can search for them,

115
00:09:35.120 --> 00:09:38.040 
but as already mentioned it has not proved to be

116
00:09:38.720 --> 00:09:41.540 
successful. So SOAP, WSDL, UDDI

117
00:09:42.240 --> 00:09:47.620 
these were the web service inventory of the first generation.

118
00:09:49.150 --> 00:09:53.660 
Let's have a closer look to the window, to the SOAP protocol.

119
00:09:55.140 --> 00:10:01.360 
SOAP messages come in form of envelopes,

120
00:10:02.490 --> 00:10:06.960 
the SOAP envelopes are in xml format

121
00:10:07.660 --> 00:10:10.950 
and like HTTP, such an

122
00:10:12.140 --> 00:10:16.080 
SOAP envelope consists of a header and then body.

123
00:10:17.000 --> 00:10:22.370 
So here that's it envelope defined and then the first part

124
00:10:23.260 --> 00:10:26.100 
is header describing all the meta information

125
00:10:26.530 --> 00:10:33.680 
necessary for letting two applications interact with each other, and then

126
00:10:33.820 --> 00:10:36.730 
SOAP body comes with the

127
00:10:38.110 --> 00:10:38.870 
parameters and others.

128
00:10:40.620 --> 00:10:47.940 
So the SOAP envelope is sent as a payload in the body of an http request

129
00:10:48.210 --> 00:10:55.560 
or an http response, so the hypertext transfer protocol is used for the communication

130
00:10:56.000 --> 00:10:59.180 
and SOAP message format,

131
00:11:00.460 --> 00:11:03.830 
SOAP messages, or SOAP envelopes

132
00:11:04.620 --> 00:11:09.070 
are sent as payloads in the body of such http messages.

133
00:11:10.460 --> 00:11:16.920 
Typically, all requests are carried out using a HTTP post method,

134
00:11:18.170 --> 00:11:24.560 
because of its format as a separate envelope so up does not necessary rely

135
00:11:24.700 --> 00:11:29.310 
on HTTP as a transport protocol. So in principle it's possible

136
00:11:29.320 --> 00:11:35.660 
to send SOAP envelopes also by means of other protocols, but HTTP protocol

137
00:11:36.170 --> 00:11:42.180 
is in place everywhere on the world wide web so typically such SOAP

138
00:11:42.380 --> 00:11:43.990 
envelopes, such SOAP

139
00:11:44.720 --> 00:11:48.930 
messages are sent by means of the HTTP protocol.

140
00:11:50.350 --> 00:11:56.450 
Let's have a look at the SOAP request, here is an example

141
00:11:56.570 --> 00:12:02.510 
one wants to get the lecture of an openHPI course, the web tech

142
00:12:02.580 --> 00:12:04.360 
course 2015,

143
00:12:05.670 --> 00:12:08.590 
course name web technologies and

144
00:12:09.300 --> 00:12:12.500 
the SOAP request it calls a function

145
00:12:13.320 --> 00:12:16.360 
in this case it calls a function get lecturer,

146
00:12:16.990 --> 00:12:19.180 
and the parameters

147
00:12:20.870 --> 00:12:25.590 
of this function are course code and course name.

148
00:12:26.530 --> 00:12:31.410 
So the course code webtech2015 and the

149
00:12:32.470 --> 00:12:34.960 
name is web technologies.

150
00:12:36.310 --> 00:12:42.980 
And this is the SOAP response, where the

151
00:12:45.000 --> 00:12:52.070 
result are returned. In this case the result which is returned is

152
00:12:52.070 --> 00:12:53.720 
the name of a lecturer,

153
00:12:54.440 --> 00:12:57.330 
for this openHPI course

154
00:12:58.080 --> 00:13:00.260 
webtech2015

155
00:13:00.960 --> 00:13:02.480 
about web technologies.

156
00:13:06.040 --> 00:13:06.790 
Let's consider

157
00:13:08.740 --> 00:13:14.090 
WSDL, WSDL was the description language for describing the interface, web

158
00:13:14.090 --> 00:13:16.500 
services can be seen as an application or

159
00:13:16.960 --> 00:13:23.100 
an application with multiple methods, each providing a specific functionality.

160
00:13:24.420 --> 00:13:30.020 
The access to that functionality is carried out by invoking the appropriate method

161
00:13:30.520 --> 00:13:31.470 
of the application.

162
00:13:33.040 --> 00:13:40.150 
For the remote method invocation, the application must implement an interface

163
00:13:40.510 --> 00:13:43.160 
for the web service,

164
00:13:43.770 --> 00:13:49.640 
and exactly to describe such interfaces the web service description language

165
00:13:49.760 --> 00:13:57.090 
is used. The specification of such interfaces can be done platform independent

166
00:13:57.310 --> 00:13:59.880 
with this a web service description language.

167
00:14:00.520 --> 00:14:04.750 
So WSDL allow us to describe, which function

168
00:14:05.210 --> 00:14:10.510 
can be provided over which ports and which messages

169
00:14:10.800 --> 00:14:15.890 
and protocols may be used in order to use an individual function.

170
00:14:20.300 --> 00:14:27.510 
The WSDL description specifies which web service it is and what functions

171
00:14:27.510 --> 00:14:33.630 
are rendered by the web service, so it allows to describe the what

172
00:14:34.550 --> 00:14:40.390 
in the WSDL version 1.1, it also can port type in

173
00:14:40.840 --> 00:14:44.260 
nowadays WSDL 1.2 it is interface.

174
00:14:45.880 --> 00:14:49.510 
But WSDL allows also to specify

175
00:14:50.220 --> 00:14:53.610 
how the considered service can be accessed.

176
00:14:54.990 --> 00:15:02.210 
In general SOAP over HTTP is used, but it is possible also

177
00:15:02.210 --> 00:15:07.460 
to accesses it in another way, so a binding describes in which way

178
00:15:07.780 --> 00:15:13.550 
the service is offered. And then one can describe by means of WSDL

179
00:15:14.160 --> 00:15:19.730 
the 'Where', over what URL can a web service observe this function be invoked,

180
00:15:20.020 --> 00:15:22.830 
and this is done by means of the service.

181
00:15:23.560 --> 00:15:29.240 
So with a web service description language, it's possible to describe

182
00:15:29.990 --> 00:15:33.410 
the interface of a web service, it's possible

183
00:15:33.410 --> 00:15:37.900 
to describe what is a web service doing, how a web service

184
00:15:38.120 --> 00:15:43.090 
can be accessed, and where I see a web service maybe in involved.

185
00:15:44.590 --> 00:15:48.820 
Let's have a short look at an example, every time it's a little bit difficult

186
00:15:49.110 --> 00:15:51.930 
to discuss code in such a way

187
00:15:52.900 --> 00:15:56.070 
but we try our best. So here

188
00:15:56.720 --> 00:16:01.440 
WSDL types is described and the type

189
00:16:03.130 --> 00:16:10.190 
is a definition of the data type used by the described web services.

190
00:16:10.920 --> 00:16:16.480 
So here the data type namespace is given, the element

191
00:16:17.260 --> 00:16:23.060 
that is used to communicate the data is, get lecturer

192
00:16:23.690 --> 00:16:28.920 
and this element get lecturer is a complex type is a complex type

193
00:16:29.230 --> 00:16:35.510 
and consists of a sequence of other elements, of the element course code,

194
00:16:36.030 --> 00:16:38.370 
and the element course name.

195
00:16:39.640 --> 00:16:45.220 
And then the data type get lecturer

196
00:16:45.820 --> 00:16:51.060 
contains a sequence of the course code and course name I mentioned this already,

197
00:16:51.590 --> 00:16:56.350 
and then to continue our example we have to close the description

198
00:16:56.840 --> 00:17:01.640 
and then we get the WSDL message.

199
00:17:02.500 --> 00:17:07.260 
And here the message gives a definition

200
00:17:07.790 --> 00:17:11.550 
for this get lecturer request and

201
00:17:12.260 --> 00:17:17.690 
get lecturer request references to data type for parameters.

202
00:17:18.130 --> 00:17:23.210 
So the data type was this element, get lecturer

203
00:17:23.660 --> 00:17:30.140 
and then in the body there is the response and how that response is

204
00:17:30.570 --> 00:17:37.310 
created from the parameters of the other elements is described,

205
00:17:39.900 --> 00:17:42.910 
When we speak about web services, we are

206
00:17:43.370 --> 00:17:48.680 
very fast confronted with such web service star

207
00:17:49.610 --> 00:17:52.730 
star protocols and standards.

208
00:17:53.660 --> 00:17:59.660 
With the first generation of web service standards and protocols, it is possible

209
00:18:00.140 --> 00:18:04.450 
we have seen this already to describe service that's done with

210
00:18:04.460 --> 00:18:10.380 
the web service description language. It is possible to describe where the

211
00:18:10.500 --> 00:18:15.390 
web service can be found, this is done by means of UDDI

212
00:18:15.870 --> 00:18:22.590 
and it's explained how web services can be invoked SOAP and WSDL.

213
00:18:25.320 --> 00:18:30.520 
But in the first generation of web service protocols, there are no standards

214
00:18:30.660 --> 00:18:32.850 
about the protection of web services.

215
00:18:33.490 --> 00:18:37.770 
There are no standards about the composition of multiple web services

216
00:18:38.570 --> 00:18:42.680 
i.e. orchestrator. There is no standards

217
00:18:43.500 --> 00:18:47.060 
about the reliable execution of web services

218
00:18:48.190 --> 00:18:52.240 
and many other requirements were not regulated. And if you think

219
00:18:52.250 --> 00:18:55.770 
that it's possible by means of a web service to create huge

220
00:18:56.220 --> 00:19:00.910 
applications, web applications, that let interact

221
00:19:00.920 --> 00:19:07.180 
different services and different servers provided by different providers,

222
00:19:07.390 --> 00:19:10.870 
and servers over the world wide web and you compose out of

223
00:19:10.870 --> 00:19:14.810 
it a new service, then of course it is important to see how

224
00:19:14.810 --> 00:19:19.390 
such web servers can be protected, that you can trust in the data

225
00:19:19.590 --> 00:19:24.770 
you transmit over the internet that it's possible to compose

226
00:19:26.260 --> 00:19:30.820 
created web services to form even more complex ones.

227
00:19:31.760 --> 00:19:36.900 
For that reason, in the next generation a large set of

228
00:19:37.410 --> 00:19:42.750 
web protocols of web service protocols were developed and I show you a

229
00:19:43.740 --> 00:19:47.810 
huge number of these protocols and that's the reason that with

230
00:19:47.810 --> 00:19:53.090 
this WSstar protocol, this

231
00:19:53.650 --> 00:19:58.070 
huge protocols with is referenced. So this

232
00:19:59.140 --> 00:20:07.090 
WS star protocol suite provides a web service standard of the second generation.

233
00:20:09.060 --> 00:20:13.350 
Let's have a look to a few of the

234
00:20:14.310 --> 00:20:20.860 
big number of web service standards.
Let us consider the web service standards

235
00:20:21.480 --> 00:20:24.770 
for security and for policy.

236
00:20:25.530 --> 00:20:30.010 
Such web service security and web service policy standard

237
00:20:30.290 --> 00:20:33.460 
allows for example an end to end encryption

238
00:20:34.060 --> 00:20:39.760 
or allow us to specify access restrictions for certain web services.

239
00:20:39.930 --> 00:20:43.350 
Which service load to access data, which not.

240
00:20:47.180 --> 00:20:49.990 
A service coordination, this is another

241
00:20:50.850 --> 00:20:57.930 
WS star knot it provides a framework for the implementation of distributed applications

242
00:20:58.620 --> 00:21:04.240 
that allows the involvement of several web service in a distributed transaction.

243
00:21:05.240 --> 00:21:07.570 
The web service federation is an

244
00:21:08.330 --> 00:21:12.600 
important standard in this, a WS standard port for

245
00:21:13.580 --> 00:21:19.130 
this allows to summary of web services, web service notification

246
00:21:19.710 --> 00:21:24.870 
is the notification system for communication between web services

247
00:21:25.300 --> 00:21:29.990 
to publish things, to subscribe pattern, and many many more standards,

248
00:21:32.090 --> 00:21:35.970 
for example web service atomic transaction, web service resource,

249
00:21:35.970 --> 00:21:41.920 
lifetime web service space faults. So you see this a WS star

250
00:21:42.030 --> 00:21:45.920 
stands for very many web service standards

251
00:21:46.330 --> 00:21:50.690 
which all are needed to compose out of different

252
00:21:52.350 --> 00:21:59.060 
services provided by different providers to create out of this different service

253
00:21:59.320 --> 00:22:03.520 
a common huge application or even an enterprise application.

254
00:22:03.990 --> 00:22:07.040 
And here is only illustration

255
00:22:07.670 --> 00:22:13.560 
about this huge web service protocol suite,

256
00:22:14.110 --> 00:22:18.480 
it's only over you you see here with the different colors the different topics.

257
00:22:18.640 --> 00:22:21.990 
Here for example, all the standards are used

258
00:22:22.770 --> 00:22:28.320 
and designed to specify meta-data relevant things. This blue

259
00:22:28.320 --> 00:22:33.210 
one here provides security specification, here with the yellow

260
00:22:33.210 --> 00:22:40.470 
one we have management specification, presentation specification, transaction specification,

261
00:22:40.630 --> 00:22:42.440 
so you can go messaging

262
00:22:43.640 --> 00:22:48.430 
specification, interoperability issues, you see that

263
00:22:48.430 --> 00:22:52.370 
a really huge amount of

264
00:22:52.980 --> 00:22:59.930 
standards and they are really needed when we think that we want to create

265
00:23:00.830 --> 00:23:06.680 
a functional environment which knows that machines can interact

266
00:23:07.030 --> 00:23:09.990 
over the world wide web in a secure way.
