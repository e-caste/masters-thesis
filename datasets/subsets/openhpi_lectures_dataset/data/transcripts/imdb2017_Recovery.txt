WEBVTT

1
00:00:00.000 --> 00:00:02.200 
Since we have locked we
can restart the system.

2
00:00:05.500 --> 00:00:09.900 
There is occasional
downtime and we have

3
00:00:09.900 --> 00:00:13.130 
to reload the system and
there is emergency recovery,

4
00:00:13.130 --> 00:00:16.160 
something happened there. Many
things which can happen and

5
00:00:16.160 --> 00:00:21.210 
can be repaired on the
fly, if a core fails

6
00:00:22.220 --> 00:00:25.250 
not much will happen, if
a CPU fails not much will

7
00:00:25.250 --> 00:00:28.280 
happen. If a whole board
failed, if a CPU fails

8
00:00:28.280 --> 00:00:31.310 
what would happen or can happen
is that we can not access the

9
00:00:31.310 --> 00:00:35.350 
memory anymore so that depends
on what fails in this corner

10
00:00:35.350 --> 00:00:40.400 
of a board. The real thing,
the real bad thing is

11
00:00:40.400 --> 00:00:43.430 
if the whole board goes down
then we have to go to another

12
00:00:43.430 --> 00:00:46.460 
board, but this has
to happen on the fly.

13
00:00:46.460 --> 00:00:50.500 
We have in the large, in
the very large systems,

14
00:00:50.500 --> 00:00:54.540 
like what we have here we
practise this here already and

15
00:00:54.540 --> 00:01:00.600 
what SAP has with-How
many nodes?-25 here.

16
00:01:00.600 --> 00:01:05.650 
In SAP we have 100.

17
00:01:05.650 --> 00:01:09.690 
There are whole boards idling
and if one board goes down

18
00:01:09.690 --> 00:01:14.740 
then the system takes over and
tells the other board it has

19
00:01:14.740 --> 00:01:18.780 
to do now what
this board did

20
00:01:18.780 --> 00:01:21.810 
and it has to go now to the disk
and little bootstrap and start

21
00:01:21.810 --> 00:01:25.850 
up and load the dictionary, the
table of contents of all the

22
00:01:25.850 --> 00:01:30.900 
tables which were on the system
and then stop taking jobs and

23
00:01:30.900 --> 00:01:33.930 
when the first query comes in
they start loading a table, when

24
00:01:33.930 --> 00:01:37.970 
the first insert comes in they
have to bring the table up and

25
00:01:37.970 --> 00:01:42.102 
then they can start
to execute the insert.

26
00:01:44.104 --> 00:01:47.107 
So parallel recovery. We
have to read the metadata

27
00:01:47.107 --> 00:01:52.112 
we know that we know about table
sizes, the latest snapshot,

28
00:01:52.112 --> 00:01:56.116 
all the the management
information, the transaction ID

29
00:01:56.116 --> 00:01:59.119 
last snapshotted
so that we can then

30
00:01:59.119 --> 00:02:03.123 
adjust with the
re-run of a log.

31
00:02:03.123 --> 00:02:06.126 
We can do this
in parallel.

32
00:02:07.127 --> 00:02:11.131 
We do this, as I
said, on request.

33
00:02:12.132 --> 00:02:15.135 
We play the dictionary
and the delta store

34
00:02:15.135 --> 00:02:22.000 
by replaying the logs, so this
is why we rebuilt the system and

35
00:02:24.144 --> 00:02:27.147 
we answered already the question,
so the big thing recovery is

36
00:02:27.147 --> 00:02:30.150 
not that big, but
availability is a big issue.

37
00:02:31.151 --> 00:02:34.154 
Every single
customer now of

38
00:02:35.155 --> 00:02:40.160 
implementing HANA, they
are afraid. Data is

39
00:02:40.160 --> 00:02:43.163 
only in memory, next question is
how do you do the restart, how long

40
00:02:43.163 --> 00:02:47.167 
does the
restart take and

41
00:02:47.167 --> 00:02:52.172 
how do we recover
from minor hardware

42
00:02:53.173 --> 00:02:58.178 
mishaps like core failures
to memory failures. How do we

43
00:02:58.178 --> 00:03:02.182 
basically re-establish
memory if memory is gone,

44
00:03:02.182 --> 00:03:05.185 
this is a little bit more complicated,
how much do we have to reload?

45
00:03:06.186 --> 00:03:08.188 
How much do we
have to replay?

46
00:03:08.188 --> 00:03:15.195 
To complete node failures
and we have to go to a

47
00:03:16.196 --> 00:03:20.200 
a vacant node to
complete system failures.

48
00:03:21.201 --> 00:03:25.205 
There is a general feel that
a memory based system is more

49
00:03:25.205 --> 00:03:29.209 
vulnerable to mishaps even
here when we discussed this

50
00:03:29.209 --> 00:03:32.212 
there is a natural
feeling this is safe,

51
00:03:32.212 --> 00:03:35.215 
shake it a little bit, pull the
plug and everything is gone,

52
00:03:35.215 --> 00:03:38.218 
a modern database system
is not much different.

53
00:03:39.219 --> 00:03:43.223 
To achieve good performance in
the DB2 oracle microsoft sequel

54
00:03:43.223 --> 00:03:48.228 
server, they are fully cached,
so they work also in memory.

55
00:03:49.229 --> 00:03:53.233 
They have the data in memory
and it has to be reloaded if the

56
00:03:53.233 --> 00:03:56.236 
system crashes. There is
actually not much different,

57
00:03:57.237 --> 00:04:01.241 
at the moment probably
recovery time could be

58
00:04:01.241 --> 00:04:04.244 
a little bit slower so
I don't even know this.

59
00:04:04.244 --> 00:04:07.247 
We have to measure this
or get the numbers.

60
00:04:07.247 --> 00:04:15.255 
It will go into a
replica, a mirrored system

61
00:04:15.255 --> 00:04:20.260 
or probably even a three way
replication that we have three

62
00:04:20.260 --> 00:04:23.263 
systems, one is the lead system,
two a slave systems and they

63
00:04:23.263 --> 00:04:27.267 
all have the same information
and they are updated

64
00:04:28.268 --> 00:04:34.274 
through replication instantly,
just for capacity reasons.

65
00:04:35.275 --> 00:04:39.279 
Then we have a combination
of failover, failover to

66
00:04:39.279 --> 00:04:43.283 
already a system which has
everything pre-loaded, any of these

67
00:04:43.283 --> 00:04:47.287 
replicated systems

68
00:04:47.287 --> 00:04:50.290 
with a little tweak can
take over the transactional

69
00:04:50.290 --> 00:04:55.295 
work again and we can
basically then guarantee

70
00:04:56.296 --> 00:05:00.300 
the availability
of the system

71
00:05:01.301 --> 00:05:02.302 
to a much higher degree.

72
00:05:04.304 --> 00:05:07.307 
If you run a
worldwide internet

73
00:05:07.307 --> 00:05:11.311 
application, you are on the press
if it doesn't work for an hour.

74
00:05:12.312 --> 00:05:16.316 
In a company it's
cumbersome if the

75
00:05:16.316 --> 00:05:20.320 
data warehouse is off
for an hour, there are

76
00:05:20.320 --> 00:05:23.323 
some problems but it never gets out
of a company. If a transactional

77
00:05:23.323 --> 00:05:27.327 
system is out, the
customers of the company

78
00:05:27.327 --> 00:05:29.329 
are already complaining
and there is an issue.

79
00:05:30.330 --> 00:05:34.334 
If the website is down, more
people see it, if Google is down

80
00:05:34.334 --> 00:05:39.339 
everybody in the world knows
it, so Google can not go down.
