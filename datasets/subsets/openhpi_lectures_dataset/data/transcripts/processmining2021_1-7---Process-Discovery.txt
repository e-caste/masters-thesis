WEBVTT

1
00:00:01.140 --> 00:00:05.100 
Welcome to this video clip in which
we discuss process discovery.

2
00:00:06.580 --> 00:00:12.700 
So, so far we have been investigating
how we use data in process

3
00:00:12.700 --> 00:00:18.290 
mining, how we can derive events
from data and how we can derive

4
00:00:18.300 --> 00:00:20.750 
traces also from
an event log.

5
00:00:21.410 --> 00:00:25.210 
And the idea of process discovery
is we use trace variants

6
00:00:25.210 --> 00:00:28.930 
to discover a process model.
Hence the process model

7
00:00:29.730 --> 00:00:35.490 
represents the process as it really
happens as we observe it in reality.

8
00:00:36.670 --> 00:00:41.350 
In our insurance claim example we
had three trace variants and

9
00:00:41.700 --> 00:00:45.330 
I'll show these three trace
variants here again

10
00:00:45.760 --> 00:00:52.520 
and basically the first variant
consists of the events for accepting

11
00:00:52.950 --> 00:00:57.420 
the claim, the second is the
events for rejecting the claim

12
00:00:57.570 --> 00:01:02.140 
and the third trace is the incomplete
trace where we only receive

13
00:01:02.140 --> 00:01:07.090 
the claim and check for claim coverage
and then the process ends already.

14
00:01:08.470 --> 00:01:13.820 
So process discovery take as
input the set of trace variants

15
00:01:14.480 --> 00:01:18.920 
and process discovery algorithms
investigates events and how

16
00:01:18.920 --> 00:01:22.850 
these events are ordered. But it's
not just the pure ordering

17
00:01:22.920 --> 00:01:27.430 
of the events but it's also
constraints like splits and joints

18
00:01:27.430 --> 00:01:30.910 
that we also find in
business process model

19
00:01:31.570 --> 00:01:36.140 
and obviously the particular
constraints that

20
00:01:36.810 --> 00:01:40.980 
we find in process discovery is
highly dependent on the process

21
00:01:40.980 --> 00:01:43.040 
discovery
algorithm we use.

22
00:01:45.120 --> 00:01:51.550 
So let's now discover the process
by hand using the trace variants

23
00:01:51.550 --> 00:01:54.310 
that we have found in
our sample scenario.

24
00:01:54.990 --> 00:01:59.420 
If we take a close look in our
scenario we find certain properties

25
00:02:00.190 --> 00:02:03.900 
and so the first property is
that the process always starts

26
00:02:03.900 --> 00:02:09.790 
with two particular events - namely
the rc event and the ccc event.

27
00:02:10.370 --> 00:02:14.840 
So every process, every case
starts with receiving the claim

28
00:02:15.090 --> 00:02:17.250 
and checking claim
completeness.

29
00:02:20.170 --> 00:02:24.730 
We also have two alternative
ends of the process, so

30
00:02:24.730 --> 00:02:29.590 
the process can end with either the
sequence pa, sal which means

31
00:02:30.030 --> 00:02:33.720 
prepare acceptance letter and
send acceptance letter or with

32
00:02:33.720 --> 00:02:39.440 
the sequence pr, srl standing
for preparing a rejection letter

33
00:02:39.660 --> 00:02:41.380 
and sending a
rejection letter.

34
00:02:42.510 --> 00:02:47.190 
Immediately before either of these
two sequences we observe dc

35
00:02:47.830 --> 00:02:51.290 
event which stands for
deciding on the claim.

36
00:02:53.100 --> 00:02:57.080 
We also see and we see this in
the third trace variant that

37
00:02:57.080 --> 00:03:01.430 
the process might end
immediately after ccc.

38
00:03:02.370 --> 00:03:06.230 
So we can now take this
characterization of the three trace

39
00:03:06.230 --> 00:03:10.350 
variants that we have and we can try
to mine by hand the process model

40
00:03:10.810 --> 00:03:15.850 
and I can show you the process model
right here and it's a BPMN diagram

41
00:03:16.120 --> 00:03:19.440 
where we have the first
activity and I try to

42
00:03:20.740 --> 00:03:24.560 
increase the size a little bit.
So the first activity that we

43
00:03:24.560 --> 00:03:30.390 
observed is the rc or the rc event
represents the claim the receive

44
00:03:30.500 --> 00:03:36.210 
claim activity. So the second activity
in the process is the check

45
00:03:36.510 --> 00:03:41.570 
claim completeness and here we
have a branching. So a decision

46
00:03:41.580 --> 00:03:44.370 
either the process
terminates here

47
00:03:45.040 --> 00:03:50.160 
and with its termination we
create the third trace variant

48
00:03:50.160 --> 00:03:52.970 
in which the process
ends prematurely,

49
00:03:53.580 --> 00:03:59.260 
or we can move on with the dc
activity, decide on claim coverage

50
00:03:59.830 --> 00:04:03.720 
and after that decide on claim
coverage which is represented

51
00:04:03.720 --> 00:04:08.010 
by the dc event. We have two
alternatives so there is a split

52
00:04:08.010 --> 00:04:11.050 
in the process where either
I take the upper path

53
00:04:11.500 --> 00:04:17.020 
and we have the prepare approval
letter activity represented by pa

54
00:04:17.640 --> 00:04:21.780 
or we have the send approve and
afterwards the send approval

55
00:04:22.340 --> 00:04:26.610 
letters or the sal activity or
we take the lower branch in

56
00:04:26.610 --> 00:04:33.460 
which case we prepare rejection letter pr
and then we send rejection letter

57
00:04:33.470 --> 00:04:40.490 
srl. So this is how we did by hand
process discovery and I think

58
00:04:41.100 --> 00:04:43.780 
it's pretty clear what happens
because each of these three

59
00:04:43.780 --> 00:04:48.740 
traces we can somehow replay
using the process model below.

60
00:04:49.460 --> 00:04:56.340 
So let's start with the first
trace variant - &lt;rc, ccc, dc, pa, sal&gt;

61
00:04:56.940 --> 00:04:59.560 
and we can walk through
this process model

62
00:05:00.330 --> 00:05:06.220 
rc receive claim, check claim
completeness, decide on claim coverage,

63
00:05:06.810 --> 00:05:09.960 
prepare approval letter, send
approval letter. That

64
00:05:10.470 --> 00:05:15.920 
path through the process is
represented by the first trace variant.

65
00:05:17.560 --> 00:05:20.460 
And it's very similar for the
second in which we just take

66
00:05:20.460 --> 00:05:23.920 
the lower path here. So the second
trace variant that we see

67
00:05:24.360 --> 00:05:29.690 
also starts here we have receive
claim check claim completeness

68
00:05:30.080 --> 00:05:33.690 
decide on claim coverage and then
we take the lower branch

69
00:05:33.690 --> 00:05:37.950 
to create the pr
and srl events.

70
00:05:38.810 --> 00:05:43.010 
And finally this process model
is also capable of replaying

71
00:05:43.860 --> 00:05:49.190 
this incomplete trace in which
we only have rc and ccc.

72
00:05:49.610 --> 00:05:54.880 
So we have rc ccc and then we
have here the decision to end

73
00:05:54.890 --> 00:05:56.640 
the process and
whenever you have

74
00:05:57.250 --> 00:06:02.090 
these end events this indicates
the ending of a particular

75
00:06:02.390 --> 00:06:03.440 
process instance.

76
00:06:06.100 --> 00:06:09.560 
So that was just an idea, just to
give you an idea of how process

77
00:06:09.560 --> 00:06:13.990 
discovery algorithms work. We do not
go into any detail of how these

78
00:06:14.950 --> 00:06:17.670 
process discovery
algorithms internally

79
00:06:18.140 --> 00:06:21.620 
work. I just like to say that
there's really a wide range of

80
00:06:21.630 --> 00:06:25.430 
different process discovery
algorithms that have been developed

81
00:06:25.620 --> 00:06:29.580 
by the BPM community in recent
years. These algorithms have

82
00:06:29.580 --> 00:06:34.710 
different assumption also different limitations
and they use very different notations.

83
00:06:35.680 --> 00:06:40.140 
Among the three most used notations
is probably the petri net. So

84
00:06:40.430 --> 00:06:43.250 
process discovery
started with

85
00:06:44.050 --> 00:06:45.230 
using petri nets.

86
00:06:47.140 --> 00:06:52.220 
We also see algorithms that create a
very simple form of process model

87
00:06:52.590 --> 00:06:55.690 
represented as directly
follows graphs

88
00:06:56.410 --> 00:06:59.160 
and we also find discovery
algorithms that

89
00:06:59.790 --> 00:07:05.310 
create BPMN but we can always
differ from a petri net also

90
00:07:05.310 --> 00:07:08.310 
BPMN diagrams so
that's also feasible.

91
00:07:10.910 --> 00:07:15.570 
Alright so let's take a look at where
process mining started. Basically

92
00:07:15.820 --> 00:07:20.460 
it started with creating petri
nets out of event logs

93
00:07:20.930 --> 00:07:23.830 
and here in the upper
part of this slide

94
00:07:24.990 --> 00:07:29.590 
I'll show you the petri net and the petri
net has the same execution semantics

95
00:07:29.800 --> 00:07:33.660 
as the BPMN diagram that we
discussed earlier and which you

96
00:07:33.660 --> 00:07:35.610 
can see here in the lower
part of this figure.

97
00:07:36.690 --> 00:07:40.820 
Other than activities we have
here places and transitions. So

98
00:07:40.820 --> 00:07:45.340 
here we have a transition and the
firing of a transition in a petri net

99
00:07:46.450 --> 00:07:49.600 
represents the execution of
the respective activity.

100
00:07:50.260 --> 00:07:55.410 
So we have rc, so the transition
rc represents the firing of

101
00:07:55.880 --> 00:08:02.530 
the transition and thereby the execution
of the receive claim activity.

102
00:08:03.740 --> 00:08:07.790 
After that is done, we have the
check claim completeness

103
00:08:08.490 --> 00:08:13.520 
activity that is represented by the
ccc transition in the petri net.

104
00:08:14.500 --> 00:08:18.990 
When the petri net comes to this
position, two things can happen.

105
00:08:19.390 --> 00:08:23.570 
Either the lower transition fires
and the process ends or the

106
00:08:23.570 --> 00:08:25.170 
dc transition fires

107
00:08:25.790 --> 00:08:28.760 
putting the token here and
then we have the same

108
00:08:29.890 --> 00:08:33.120 
process can proceed in a very
similar way than we've seen before.

109
00:08:33.120 --> 00:08:38.000 
So we have pa and sal or that's
the alternative in petri nets.

110
00:08:38.280 --> 00:08:42.580 
We have pr srl and then
there are again two ways

111
00:08:43.150 --> 00:08:44.890 
how the process
can terminate.

112
00:08:47.720 --> 00:08:52.270 
So directly follows graphs are
if you want an abstraction of

113
00:08:52.270 --> 00:08:54.570 
petri nets, so very
simple form

114
00:08:55.440 --> 00:08:58.180 
and as the name
indicates, well,

115
00:08:58.790 --> 00:09:03.840 
the base is if two events can follow
each other directly. Whenever

116
00:09:03.840 --> 00:09:07.290 
that is the case there is
we draw an arc between

117
00:09:07.860 --> 00:09:09.680 
those nodes in
the graph.

118
00:09:10.660 --> 00:09:15.310 
So a bit more formally whenever
b directly follows a in some

119
00:09:15.310 --> 00:09:19.960 
trace or in some trace variant,
we draw an edge from a to b.

120
00:09:21.320 --> 00:09:25.650 
In the example that we've seen,
so again we look at our traces

121
00:09:25.650 --> 00:09:29.740 
or trace variants that we have
here, we have nodes for each

122
00:09:30.440 --> 00:09:35.040 
each event. So rc ccc and so forth
so we have nodes in the graph

123
00:09:35.470 --> 00:09:40.080 
and we see that ccc immediately
follows rc and therefore we

124
00:09:40.080 --> 00:09:42.320 
draw an edge
from rc to ccc.

125
00:09:43.710 --> 00:09:47.100 
For instance here ccc
immediately follows rc,

126
00:09:47.980 --> 00:09:52.440 
dc also immediately follows ccc
and therefore we draw this arc

127
00:09:53.450 --> 00:09:58.900 
and we see that after dc we can
find a pa for the upper arc

128
00:09:59.150 --> 00:10:02.110 
or we find a pr for
the lower part.

129
00:10:03.190 --> 00:10:07.870 
And then we have direct successor
relationships between pa and sal

130
00:10:08.070 --> 00:10:10.590 
and between pr and srl.

131
00:10:11.780 --> 00:10:16.050 
So this is a very simple example
of a directly follows graph and

132
00:10:16.210 --> 00:10:20.520 
you see here really what are the what
are the events. So we have

133
00:10:21.640 --> 00:10:25.280 
these events in the process and we
can walk through that directly

134
00:10:25.280 --> 00:10:28.620 
follows graph to see the
possible sequence of events.

135
00:10:31.080 --> 00:10:35.190 
Directly follows graphs can also
take into account

136
00:10:35.190 --> 00:10:38.360 
how often a certain trace
was actually observed.

137
00:10:39.680 --> 00:10:44.090 
So in an earlier video clip we
discussed that we can write

138
00:10:44.240 --> 00:10:46.390 
the frequency how
often a certain

139
00:10:47.260 --> 00:10:50.590 
trace variant was
observed as a number

140
00:10:51.270 --> 00:10:55.390 
right behind as a superscript if
you want to that trace variants.

141
00:10:55.990 --> 00:10:59.850 
So we have here the acceptance
traces we observed five

142
00:10:59.850 --> 00:11:03.890 
acceptance traces based on
the data that we found.

143
00:11:04.330 --> 00:11:10.750 
We have also five reject traces
and we have two incomplete

144
00:11:10.750 --> 00:11:14.490 
traces, this is why we have the
five - the five and the two here

145
00:11:14.490 --> 00:11:17.160 
as superscripts to
these trace variants.

146
00:11:18.270 --> 00:11:20.940 
We can now use these
frequencies to

147
00:11:21.820 --> 00:11:26.370 
extend directly follows graphs
using the weight of an arc.

148
00:11:27.380 --> 00:11:31.160 
So the weight of an arc indicates
how often it was traveled

149
00:11:31.630 --> 00:11:37.650 
along and here we see that well
rc was in twelve cases,

150
00:11:37.930 --> 00:11:41.190 
coming back to our example the
first event that occurred,

151
00:11:42.210 --> 00:11:46.950 
then there are twelve direct
successor relationships to ccc,

152
00:11:48.490 --> 00:11:54.180 
then there are ten direct successor
relationships between ccc and dc.

153
00:11:54.640 --> 00:11:59.060 
So we observe ten times this
directly follows relationship.

154
00:11:59.910 --> 00:12:03.880 
We have five directly follows
relationships to pa

155
00:12:04.530 --> 00:12:07.930 
and five to pr and then we
have here five and here five.

156
00:12:08.820 --> 00:12:12.970 
And I hope you'll see that this
gives you a bit more information

157
00:12:12.970 --> 00:12:17.870 
because you know exactly how often
certain agents have been traveled along.

158
00:12:19.790 --> 00:12:23.560 
For a brief discussion of directly
follows graphs, first I like to

159
00:12:23.930 --> 00:12:29.310 
like to say that they are really
simple and also very intuitive

160
00:12:29.320 --> 00:12:31.930 
and also very useful
notation because

161
00:12:32.370 --> 00:12:34.170 
of its simplicity.

162
00:12:35.350 --> 00:12:40.390 
However, the execution semantics
is not very well defined. So

163
00:12:40.390 --> 00:12:42.250 
if you look at this dc,

164
00:12:43.040 --> 00:12:45.760 
we do not know exactly
if it is a split

165
00:12:46.750 --> 00:12:52.630 
if it is an AND split in which both
outgoing edges are signaled

166
00:12:52.720 --> 00:12:56.120 
at the same time to allow for
concurrency in the process model

167
00:12:56.590 --> 00:12:59.160 
or if it is
an alternative.

168
00:12:59.950 --> 00:13:02.560 
If you look at the numbers you
can almost guess that it's an

169
00:13:02.560 --> 00:13:06.390 
alternative because ten times dc
is reached and then five times

170
00:13:06.390 --> 00:13:10.550 
here five times here and the sum of
five and five is ten. So you can

171
00:13:10.880 --> 00:13:15.360 
somehow infer it based on these
numbers but of course that's not

172
00:13:15.600 --> 00:13:16.900 
always the case.

173
00:13:19.910 --> 00:13:23.660 
So some behavior can only be
seen in the values of this arc.

174
00:13:23.660 --> 00:13:27.890 
That's what I meant by the split
behavior that we can infer

175
00:13:27.930 --> 00:13:29.880 
based on the numbers
that we see here.

176
00:13:31.930 --> 00:13:35.380 
A closer look at the examples.
All the terminated cases after

177
00:13:35.380 --> 00:13:39.130 
check for claim completeness
are not really represented in

178
00:13:39.130 --> 00:13:43.300 
the model. So we don't see we don't
see a situation where from

179
00:13:43.300 --> 00:13:47.250 
ccc we have an arc saying all
the process ends at this point.

180
00:13:48.610 --> 00:13:53.030 
But if you look at the numbers
you can infer that two cases

181
00:13:53.110 --> 00:13:54.520 
seem to be lost here.

182
00:13:55.210 --> 00:13:59.220 
So we start with twelve cases
or with twelve times or

183
00:13:59.870 --> 00:14:04.650 
twelve times ccc and then we only
observe ten times the successor

184
00:14:04.650 --> 00:14:10.940 
relation between ccc and dc. So from the
twelve cases, two are obviously lost here.

185
00:14:11.570 --> 00:14:16.100 
So there is information about these
incomplete cases but it's not

186
00:14:16.500 --> 00:14:20.300 
explicit in the graph structure,
it's just implicit in the numbers

187
00:14:20.420 --> 00:14:23.370 
that we see here as
weights of the arcs.
