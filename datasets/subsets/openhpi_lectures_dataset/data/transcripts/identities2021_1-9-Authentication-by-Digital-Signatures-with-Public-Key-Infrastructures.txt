WEBVTT

1
00:00:00.880 --> 00:00:03.570 
In our openHPI course
about digital identities,

2
00:00:04.090 --> 00:00:07.860 
we shortly want to discuss
digital signatures

3
00:00:08.460 --> 00:00:13.090 
because it's needed, for example,
for the video authentication,

4
00:00:13.720 --> 00:00:17.660 
for digital signatures and
public key infrastructures.

5
00:00:19.380 --> 00:00:24.260 
You have heard about digital signatures. We
have also, we provide also online courses

6
00:00:24.690 --> 00:00:31.120 
on openHPI in which digital
signatures are discussed in detail

7
00:00:31.370 --> 00:00:35.990 
for example in our course "Confidential
Communication in the Internet".

8
00:00:36.940 --> 00:00:41.480 
Beside of the authentication methods,
we need methods to guarantee

9
00:00:41.910 --> 00:00:48.630 
sender and message integrity. We
need methods to guarantee that the

10
00:00:48.830 --> 00:00:56.530 
sender ID is not manipulated when
requesting, for example, access to a

11
00:00:56.850 --> 00:01:03.780 
service or that a message
that's sent is not manipulated

12
00:01:04.100 --> 00:01:10.490 
when she is transferred through the
open internet. And the means which is

13
00:01:10.610 --> 00:01:16.380 
exactly, which provides this
functionality that it guarantees

14
00:01:16.380 --> 00:01:17.780 
sender message
integrity are

15
00:01:18.530 --> 00:01:19.510 
digital signatures.

16
00:01:20.860 --> 00:01:27.360 
Digital signatures are model handwritten
signatures. For example a signature when

17
00:01:28.130 --> 00:01:33.840 
purchasing with a bank card then the
buyer signs a receipt and the cashier

18
00:01:35.550 --> 00:01:40.430 
compares the signature
with the signature on the card.

19
00:01:41.230 --> 00:01:44.520 
And something similar can be
done with a digital signature.

20
00:01:44.520 --> 00:01:49.240 
So an online service sends
user a random data object

21
00:01:49.930 --> 00:01:55.760 
and the user signs this object
and sends it back to the service.

22
00:01:56.260 --> 00:02:02.350 
And then the service verifies the
signature checking whether it's really

23
00:02:03.110 --> 00:02:03.840 
the same

24
00:02:05.130 --> 00:02:10.810 
that this message comes from the
person that claims to be the sender.

25
00:02:11.860 --> 00:02:14.620 
To this end a public key
infrastructure is needed.

26
00:02:15.170 --> 00:02:21.180 
So the digital signatures are created
with asymmetric cryptographic methods

27
00:02:21.500 --> 00:02:25.610 
and asymmetric cryptographic
methods are characterized

28
00:02:26.270 --> 00:02:30.840 
that the encryption and decryption
is done with different keys

29
00:02:31.610 --> 00:02:35.400 
and each user
needs two keys.

30
00:02:36.190 --> 00:02:41.320 
To secure use of such an
asymmetric cryptographic method,

31
00:02:41.960 --> 00:02:45.830 
a public key infrastructure
is necessary

32
00:02:46.240 --> 00:02:51.380 
because there is a trust problem.
The trust problem which

33
00:02:52.660 --> 00:02:58.880 
is important to have a
possibility to check whether

34
00:02:59.020 --> 00:03:04.240 
one of these two keys the public key is
really the public key of the person.

35
00:03:05.380 --> 00:03:12.210 
The public key infrastructure has
three components, at least three

36
00:03:12.450 --> 00:03:18.130 
important components - this is certification
authority, the registration authority

37
00:03:18.360 --> 00:03:24.570 
and the validation authority. And
now we can discuss in more detail

38
00:03:24.920 --> 00:03:30.870 
how digital signatures are working
when we have such a public key

39
00:03:31.020 --> 00:03:31.870 
infrastructure.

40
00:03:33.650 --> 00:03:37.650 
A participant of a public
key infrastructure or

41
00:03:38.120 --> 00:03:43.510 
an identity within this public key
infrastructure has to encrypt his key.

42
00:03:43.860 --> 00:03:48.390 
The private key - the private key
is needed to create a signature.

43
00:03:49.020 --> 00:03:51.790 
Creation of a signature
is simply to

44
00:03:52.460 --> 00:03:57.750 
encrypt something with a private
key. And this private key

45
00:03:58.580 --> 00:04:04.310 
is not allowed to leave the participant.
The participant must keep secret,

46
00:04:04.750 --> 00:04:09.370 
he must keep secret for
all the other participants.

47
00:04:10.240 --> 00:04:13.690 
Compared to the private key, there
is the other key and it's

48
00:04:13.690 --> 00:04:15.010 
called the public key

49
00:04:15.610 --> 00:04:19.460 
that's needed to verify, to check
whether the signature really

50
00:04:19.460 --> 00:04:22.790 
comes from the person
which owns the

51
00:04:23.270 --> 00:04:30.280 
key pair. And this public key, this is
distributed to each participant of the

52
00:04:30.480 --> 00:04:36.620 
PKI. To illustrate this, such
a key pair is something similar

53
00:04:37.060 --> 00:04:41.960 
like a signet ring and wax.

54
00:04:42.730 --> 00:04:44.620 
So the seal ring

55
00:04:45.760 --> 00:04:49.220 
corresponds to the secret
key, only the owner

56
00:04:50.150 --> 00:04:52.570 
has this key and
can use this key.

57
00:04:53.190 --> 00:04:56.690 
And the public key corresponds
to template

58
00:04:57.340 --> 00:05:03.230 
for checking seal and it
is proved that it belongs to the

59
00:05:03.890 --> 00:05:10.310 
owner of the private key because
he or she is creating

60
00:05:11.630 --> 00:05:12.530 
this special seal.

61
00:05:15.820 --> 00:05:20.990 
So the basic idea now is
that a user has to

62
00:05:21.750 --> 00:05:26.360 
register in a PKI to
request a certificate.

63
00:05:27.590 --> 00:05:33.710 
A certificate that confirms the
ownership of the public key.

64
00:05:34.520 --> 00:05:37.880 
So the certification authority
creates a certificate,

65
00:05:38.320 --> 00:05:42.390 
a certificate which proves that
the public key actually belongs

66
00:05:42.610 --> 00:05:49.290 
to a certain user. And the certificate is
authenticated by the digital signature

67
00:05:49.510 --> 00:05:51.610 
of the certification
authority.

68
00:05:52.700 --> 00:05:59.290 
So a digital signature is a message
encrypted with the sender's private key.

69
00:06:00.130 --> 00:06:04.580 
In practical application it's not a
complete message because it's too long.

70
00:06:05.010 --> 00:06:08.910 
It's only the hash of the
message that is encrypted but to

71
00:06:08.910 --> 00:06:12.580 
understand the digital signature
this difference is not important

72
00:06:12.930 --> 00:06:15.330 
and if you want to have
a closer look then

73
00:06:16.090 --> 00:06:21.740 
please go to the HPI course
about Confidential Communication.

74
00:06:22.420 --> 00:06:27.090 
So the digital signature encrypts the
message with the sender's private key

75
00:06:27.520 --> 00:06:33.720 
and this digital signature can only
be decrypted with the associated

76
00:06:33.790 --> 00:06:35.330 
public key of
the sender.

77
00:06:36.280 --> 00:06:44.400 
And the receiver of a digital signed message
can check whether the message really

78
00:06:44.620 --> 00:06:47.920 
was signed by
the sender

79
00:06:48.650 --> 00:06:56.020 
by taking its public key and checking
out whether this can be decrypted.

80
00:06:56.820 --> 00:07:00.980 
How to get the public key? The public
key gets out of the certificate.

81
00:07:01.130 --> 00:07:05.430 
Exactly that is the task of the
certification authority to

82
00:07:05.430 --> 00:07:11.920 
create a certificate which proves this
user to this user that public key

83
00:07:12.250 --> 00:07:13.550 
is belonging.

84
00:07:15.210 --> 00:07:20.810 
Now, for example, when
using this method in practice

85
00:07:21.150 --> 00:07:26.860 
in a communication with a website
by means of the HTTPS protocol

86
00:07:27.210 --> 00:07:29.120 
the secure web protocol,

87
00:07:29.840 --> 00:07:36.230 
when the browser connects to a
website via HTTPS, the authenticity

88
00:07:36.230 --> 00:07:37.750 
of the page is checked.

89
00:07:38.390 --> 00:07:44.750 
And for this purpose the website
sends its certificate to the browser

90
00:07:44.880 --> 00:07:50.430 
and the browser has a list of
certification authorities

91
00:07:51.780 --> 00:07:57.830 
it can trust. It is given by
the browser manufacturers

92
00:07:58.330 --> 00:08:02.710 
and this certification authority
are considered trustworthy.

93
00:08:03.010 --> 00:08:06.420 
So all the certificates coming
from such a trustworthy

94
00:08:06.990 --> 00:08:13.410 
certification authority is
considered secure by the browser.

95
00:08:13.630 --> 00:08:18.000 
The browser checks it
and if it is done, then

96
00:08:18.540 --> 00:08:23.240 
it can start the communication
and if the certificate comes

97
00:08:23.240 --> 00:08:27.370 
not from a certification authority,
a warning is sent to the

98
00:08:27.370 --> 00:08:33.390 
user of the browser, be careful. I
do not trust that certificate.

99
00:08:34.080 --> 00:08:38.320 
So if you can see
in the browser in the

100
00:08:39.080 --> 00:08:46.120 
line a green icon which is shown
in front of the URL and if

101
00:08:46.120 --> 00:08:49.550 
the browser does not trust
the certification authority

102
00:08:50.040 --> 00:08:54.640 
the red icon warns the browser does
not know and does not consider

103
00:08:55.150 --> 00:08:57.330 
the website as
trustworthy.

104
00:08:58.210 --> 00:09:03.010 
Now authentication can be done
also by digital signatures.

105
00:09:04.010 --> 00:09:08.370 
And this is a very interesting
approach but it needs that

106
00:09:08.370 --> 00:09:14.220 
all the participants belong to a
public key infrastructure which is

107
00:09:14.560 --> 00:09:20.810 
which needs to be established and
to run and it's a quite expensive

108
00:09:21.320 --> 00:09:26.250 
infrastructure. But if this
infrastructure is in place, you see

109
00:09:26.740 --> 00:09:33.600 
in the web with HTTP communication, with
a TLS SSL protocol this is in place.

110
00:09:34.080 --> 00:09:38.770 
So here authentication can also
be done by digital signatures.

111
00:09:40.590 --> 00:09:45.820 
How does online service know that
a user's published public key

112
00:09:46.140 --> 00:09:49.610 
actually belongs to that
user, to that identity?

113
00:09:50.350 --> 00:09:53.460 
Here the proof is provided
by its certificate.

114
00:09:54.090 --> 00:09:59.140 
Proof is provided by the certificate
that proves that the public key

115
00:09:59.320 --> 00:10:01.050 
belongs to this user.

116
00:10:02.250 --> 00:10:08.440 
And to authenticate a user, the
online service needs the

117
00:10:08.450 --> 00:10:15.390 
public key of that user and he
can't get it out of his or her

118
00:10:15.620 --> 00:10:20.330 
certificate. If the service
trusts the certificate,

119
00:10:20.840 --> 00:10:24.080 
if the service trusts the
certifying authority,

120
00:10:25.410 --> 00:10:28.980 
then, which digitalize
the certificate,

121
00:10:29.690 --> 00:10:35.160 
then it considers the
certificate as trustworthy

122
00:10:35.750 --> 00:10:38.610 
and can take out
the public key

123
00:10:39.350 --> 00:10:45.530 
and can use the public key to
decrypt the digital signature

124
00:10:45.990 --> 00:10:48.120 
which was encrypted
with the private key.

125
00:10:50.430 --> 00:10:55.520 
So prerequisite for such a digital authentication
by means of a digital signature

126
00:10:55.860 --> 00:11:00.110 
is a public key infrastructure
and it works as follows.

127
00:11:00.700 --> 00:11:03.080 
First a key pair

128
00:11:03.720 --> 00:11:10.510 
consisting of the private key and the
public key of a user is generated,

129
00:11:11.010 --> 00:11:16.460 
the public key is registered
with the registration authority.

130
00:11:16.910 --> 00:11:22.530 
This checks out entity and validity
of the public key by verifying

131
00:11:22.730 --> 00:11:29.410 
possession of the private key. If the validation
is confirmed, the certification authority

132
00:11:30.010 --> 00:11:36.260 
becomes active and issues a
certificate for the user.

133
00:11:36.700 --> 00:11:40.900 
In this certificate, the
certification authority

134
00:11:41.360 --> 00:11:49.760 
agrees and states that this user
is the owner of that public key.

135
00:11:51.470 --> 00:11:56.060 
Now to register with the service, a
user creates a digital signature,

136
00:11:56.890 --> 00:12:00.400 
take some data encrypted
with this private key

137
00:12:00.860 --> 00:12:05.150 
and sends this to the sequence
together with the certificate.

138
00:12:05.910 --> 00:12:10.820 
Then the service validates
the certificate with the

139
00:12:10.820 --> 00:12:12.850 
help of the validation
authority.

140
00:12:13.480 --> 00:12:17.700 
It checks the digital signature
of the certification authority

141
00:12:18.380 --> 00:12:25.700 
and this validation authority sends,
transmits the result to the service

142
00:12:26.210 --> 00:12:30.880 
and now the service can verify
the signature with the public

143
00:12:30.880 --> 00:12:36.050 
key taking out of the certificate and
then it can give the user access.

144
00:12:36.720 --> 00:12:43.610 
So when such a public key infrastructure is in
place, the authentication by digital signature

145
00:12:43.970 --> 00:12:47.480 
is a very secure way
of authentication.

146
00:12:48.100 --> 00:12:55.050 
Let's have a look back what we
have. We have our user. The user

147
00:12:55.170 --> 00:13:00.930 
wants, with the registration authority,
wants to get a certificate

148
00:13:01.370 --> 00:13:06.560 
for its public key. The public
key is checked by the

149
00:13:07.270 --> 00:13:12.000 
registration authority whether
it's really coming from the user

150
00:13:12.320 --> 00:13:19.230 
and if yes, the public key is forwarded with the
user data to the certification authority

151
00:13:19.490 --> 00:13:24.460 
and the certification authority
creates a certificate

152
00:13:24.940 --> 00:13:30.990 
and digitally signs this
certificate with the public key

153
00:13:30.990 --> 00:13:36.330 
of the certification authority.
Now the user has a certificate

154
00:13:36.900 --> 00:13:43.070 
and now a user can approach a service,
an online service. An online service

155
00:13:43.560 --> 00:13:48.780 
inside this public key infrastructure.
And then he sends his requests,

156
00:13:49.060 --> 00:13:53.120 
he sends this certificate
and the online service

157
00:13:53.820 --> 00:14:00.280 
asks the verification authority of the
public key infrastructure to check

158
00:14:00.560 --> 00:14:03.970 
whether this is a

159
00:14:05.270 --> 00:14:10.260 
valid certificate. So the
verification authority checks

160
00:14:10.550 --> 00:14:14.680 
the digital signature of the
certification authority and if it

161
00:14:15.320 --> 00:14:19.210 
agrees, then he sends the
certificate back and says

162
00:14:19.670 --> 00:14:21.050 
the service, yes,

163
00:14:23.840 --> 00:14:29.510 
the certificate is okay. And then the
service can take out the public key

164
00:14:29.690 --> 00:14:32.460 
from the service
and can check

165
00:14:33.300 --> 00:14:38.480 
the message that was
encrypted with the private

166
00:14:38.480 --> 00:14:44.770 
key of the user and if it can decrypt this
message then the user is authenticated.

167
00:14:46.500 --> 00:14:51.310 
Let's summarize the advantages
and the disadvantages of

168
00:14:51.320 --> 00:14:52.780 
this digital signature

169
00:14:53.550 --> 00:14:55.400 
approach for
authentication.

170
00:14:56.210 --> 00:15:00.810 
So in most, there's no
knowledge necessary.

171
00:15:01.460 --> 00:15:09.940 
The private key is property, the
communication works almost automatically.

172
00:15:10.770 --> 00:15:15.270 
The private key on the user side
need to be password protected

173
00:15:15.700 --> 00:15:19.250 
such that an attacker that get
access to the computer, to the

174
00:15:19.250 --> 00:15:23.760 
device of the user cannot
access his or her private key.

175
00:15:25.480 --> 00:15:31.690 
Another advantage is no previous contact between
the user and online service is necessary.

176
00:15:32.130 --> 00:15:34.660 
The authentication is

177
00:15:35.500 --> 00:15:38.480 
done on the basis of
a valid certificate.

178
00:15:39.540 --> 00:15:44.630 
Sending a signature
and a certificate that's enough.

179
00:15:44.870 --> 00:15:52.500 
The service can check the
user and can give him access or

180
00:15:52.610 --> 00:15:54.980 
can refuse this access.

181
00:15:55.880 --> 00:16:03.150 
The certificate to this end must have been
certified by a trustworthy authority.

182
00:16:03.560 --> 00:16:09.180 
So in this public key infrastructure,
that's not only used for authentication

183
00:16:10.230 --> 00:16:14.580 
it's a good way, a trustworthy
way to interact.

184
00:16:15.440 --> 00:16:21.000 
The disadvantage is that such public key
infrastructures which are required for

185
00:16:21.220 --> 00:16:27.160 
issuing the certificate, for
validating a certificate is

186
00:16:27.650 --> 00:16:34.340 
required and it is quite expensive
and one has to trust, the

187
00:16:34.340 --> 00:16:36.410 
service has to
trust the PKI.

188
00:16:37.240 --> 00:16:43.760 
Experience in correct use of the method
is required because it's a complex

189
00:16:44.070 --> 00:16:51.730 
infrastructure and the problem is here, if
a hacker, if a cybercriminal gets access

190
00:16:52.090 --> 00:16:58.610 
to a user's private key then the
attacker can impersonate their user

191
00:16:58.720 --> 00:17:04.500 
and can misuse these
credentials for using the resources

192
00:17:04.650 --> 00:17:05.460 
of a service.

193
00:17:07.910 --> 00:17:10.730 
So authentication
by digital signatures,

194
00:17:11.290 --> 00:17:17.760 
in summary, is a very secure
way of authentication. The

195
00:17:17.760 --> 00:17:21.370 
basic prerequisitive for authentication
with digital signature

196
00:17:21.670 --> 00:17:25.950 
is the existence of a
public key infrastructure.

197
00:17:26.490 --> 00:17:31.480 
The public key infrastructure work with
certificates and digital signatures.

198
00:17:31.920 --> 00:17:37.420 
The user has two keys, a private and a public
one and a digital signature is created

199
00:17:37.980 --> 00:17:39.570 
with the private key. This is

200
00:17:40.280 --> 00:17:44.870 
encrypted of a certain document,
this private key

201
00:17:45.340 --> 00:17:50.650 
stays all the time with the
user. No one gets access, no one can

202
00:17:51.820 --> 00:17:58.260 
can create such a digital signature. And
then the digital signature is sent

203
00:17:58.580 --> 00:18:02.930 
to the service and the
service can verify

204
00:18:03.770 --> 00:18:09.360 
this digital signature with the
corresponding public key. The public key

205
00:18:09.560 --> 00:18:12.570 
as a service can get out
of the certificate.
