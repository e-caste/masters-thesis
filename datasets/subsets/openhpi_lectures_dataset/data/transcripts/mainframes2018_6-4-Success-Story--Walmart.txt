WEBVTT

1
00:00:00.960 --> 00:00:05.700 
Hello it's me again Wolfram Greis from the European Mainframe Academy,

2
00:00:06.510 --> 00:00:08.190 
and in the next video clips

3
00:00:08.960 --> 00:00:13.380 
we want to present a real impressive success story from Walmart

4
00:00:13.380 --> 00:00:14.550 
in the United States.

5
00:00:15.750 --> 00:00:17.750 
Walmart is one of the biggest IBM

6
00:00:18.500 --> 00:00:23.530 
mainframe customers worldwide and the walmart adopted the

7
00:00:23.530 --> 00:00:29.640 
mainframe in 1975 and it has always played a very

8
00:00:30.830 --> 00:00:37.320 
important part in the IT environment of Walmart and of course developed during

9
00:00:37.910 --> 00:00:40.810 
this more than forty years.

10
00:00:41.620 --> 00:00:43.280 
And there's another

11
00:00:44.540 --> 00:00:49.840 
youtube video clip from Randy Frerking, distinguished engineer at Walmart

12
00:00:50.200 --> 00:00:55.690 
and he is interviewed by IBM and he tells in this interview

13
00:00:55.810 --> 00:00:59.370 
that Walmart processed in 2015, 500

14
00:00:59.370 --> 00:01:04.190 
million transactions a day and  150 million of these transactions

15
00:01:04.350 --> 00:01:11.150 
are in between web services. So very new technology to access

16
00:01:12.730 --> 00:01:16.250 
the data and transactions on the IBM mainframe.

17
00:01:18.470 --> 00:01:22.550 
There's a very interesting website I don't know if you're or you are

18
00:01:22.750 --> 00:01:27.770 
familiar with it. It is the IBM redbook website. Just point your browser to redbook.ibm.com

19
00:01:28.000 --> 00:01:31.860 
and you get a lot of information about

20
00:01:32.990 --> 00:01:39.690 
IBM platforms. Not just the mainframe but of course also about the IBM mainframe.

21
00:01:40.400 --> 00:01:44.070 
And then why do I show this because

22
00:01:45.090 --> 00:01:50.580 
Walmart contributed to some very new redbooks, starting in

23
00:01:50.630 --> 00:01:55.170 
2016 with redbook with the title Creating

24
00:01:55.240 --> 00:02:01.670 
IBM z/OS Cloud Services, followed in April 2016

25
00:02:01.920 --> 00:02:07.290 
with redbook how Walmart became a cloud service provider with IBM

26
00:02:07.760 --> 00:02:11.100 
CICS. And a third one quite new

27
00:02:11.760 --> 00:02:15.630 
in February 2018, CICS and the

28
00:02:16.750 --> 00:02:22.630 
IBM CICS and the Coupling Facility Beyond the Basics. Because we talked

29
00:02:22.930 --> 00:02:27.730 
during this MOOC about CICSplex,Parallel Sysplex and so on. And

30
00:02:28.160 --> 00:02:34.060 
this Walmart infrastructure is really a very impressive implementation

31
00:02:34.260 --> 00:02:37.530 
of such a clustering technique.

32
00:02:40.230 --> 00:02:46.680 
These out of a series from twelve video clips complementing the redbooks

33
00:02:46.940 --> 00:02:51.220 
mentioned. We show here the first with the introduction and

34
00:02:51.220 --> 00:02:55.430 
the last with the summary. All the others if you are interested in,

35
00:02:55.570 --> 00:03:01.210 
you can get from this redbook website. Let's start with the

36
00:03:01.210 --> 00:03:02.010 
introduction.

37
00:03:10.680 --> 00:03:13.380 
I'm Randy Frerking, distinguished engineer at Walmart

38
00:03:13.960 --> 00:03:17.210 
and I'm Rich Jackson, principal systems engineer at Walmart.

39
00:03:17.760 --> 00:03:20.840 
In 2007, Walmart averaged two hundred million

40
00:03:20.840 --> 00:03:24.620 
transactions a day in CICS primarily in thirty to seventy

41
00:03:24.660 --> 00:03:26.580 
MQ and btm sna access

42
00:03:27.430 --> 00:03:30.090 
In 2009, we introduced web services primarily

43
00:03:30.090 --> 00:03:33.500 
SOAP and primarily used as a data access layer, and by two thousand

44
00:03:33.500 --> 00:03:36.370 
and eleven we had grown to five hundred million transactions a day.

45
00:03:37.460 --> 00:03:40.590 
In 2013, we introduced rest services and developed

46
00:03:40.590 --> 00:03:44.510 
our first cloud services- a key-value database, a caching service

47
00:03:44.570 --> 00:03:47.870 
and a unique ID generator. We also created a dedicated

48
00:03:48.730 --> 00:03:50.190 
CICSplex called our CloudPlex.

49
00:03:51.950 --> 00:03:52.950 
You don't like that term, do you? I do not like that term.

50
00:03:53.610 --> 00:03:57.150 
You get used to it. And now we average about seven hundred million transactions a day.

51
00:03:58.260 --> 00:04:00.810 
We were able to achieve this volume by leveraging

52
00:04:01.260 --> 00:04:04.690 
coupling facility and fully utilizing Parallel Sysplex.

53
00:04:05.100 --> 00:04:09.160 
Some of the traditional components of Parallel Sysplex include things like grs,

54
00:04:09.440 --> 00:04:11.890 
group buffer pools are just two check points.

55
00:04:12.510 --> 00:04:15.890 
Most recently CICS has added new features to the coupling facility,

56
00:04:15.990 --> 00:04:20.850 
such as the Named Counter, Coupling Facility Data Table, Shared Temporary Storage Servers

57
00:04:21.010 --> 00:04:24.240 
and record level sharing. In this video course we'll share some

58
00:04:24.240 --> 00:04:27.490 
things that we've done with all of these CF technologies. Thank

59
00:04:27.490 --> 00:04:28.040 
you for watching.

60
00:04:34.760 --> 00:04:36.670 


61
00:04:38.960 --> 00:04:43.190 
Now let's show the summary.

62
00:04:51.630 --> 00:04:54.780 
In this video series, we've covered a number of specific CF technologies that

63
00:04:54.780 --> 00:04:56.280 
can be used in interesting ways.

64
00:04:57.300 --> 00:05:01.760 
These features can be combined to build reliable, available and highly scalable

65
00:05:01.910 --> 00:05:03.330 
application solutions.

66
00:05:03.980 --> 00:05:06.870 
We'll briefly cover a couple of examples where we've taken

67
00:05:06.870 --> 00:05:11.260 
some of the specific CF technologies and combine them into something greater.

68
00:05:11.780 --> 00:05:15.720 
The first example would be Sequencing captured updates in real

69
00:05:15.720 --> 00:05:17.090 
time in a fluid manner.

70
00:05:18.840 --> 00:05:20.590 
In our particular problem,

71
00:05:21.220 --> 00:05:26.560 
we have an application that needs to synchronize updates from that application

72
00:05:26.740 --> 00:05:28.070 
to another application.

73
00:05:28.960 --> 00:05:32.540 
The problem with that is, after the data has been captured it needs to be

74
00:05:33.020 --> 00:05:36.820 
transformed. And during the transformation process, which does take time

75
00:05:37.220 --> 00:05:38.600 
the data gets out of sequence.

76
00:05:39.240 --> 00:05:43.420 
So the challenge is reapplying the updates to the target system,

77
00:05:43.630 --> 00:05:46.340 
re-sequenced into the order that they actually occurred.

78
00:05:46.980 --> 00:05:50.790 
We use several CF technologies to create the solution. One of

79
00:05:50.790 --> 00:05:55.360 
them was VSAM RLS, which we used to house shared control information.

80
00:05:56.000 --> 00:05:59.840 
We also use CFDT. We stored a number of things in there, such

81
00:05:59.840 --> 00:06:03.530 
as additional control information, sequence numbers for the update

82
00:06:03.710 --> 00:06:07.300 
and we also used it for caching. We also use GRS for coordination

83
00:06:07.300 --> 00:06:09.330 
of information between parent and child task.

84
00:06:10.150 --> 00:06:12.980 
As well as establishing control in our transaction environment

85
00:06:12.980 --> 00:06:14.770 
by using it as global transit class.

86
00:06:15.590 --> 00:06:19.100 
In our next example, we had a requirement to process a one to

87
00:06:19.100 --> 00:06:21.750 
many parallel processing service.

88
00:06:22.880 --> 00:06:28.620 
For this particular problem, the scenario involved a single incoming request

89
00:06:28.780 --> 00:06:33.490 
that triggered numerous parallel outbound requests to remote sources.

90
00:06:34.020 --> 00:06:36.810 
The information from those remote sources needed to be combined,

91
00:06:36.810 --> 00:06:40.270 
aggregated and returned to the requester. To create the solution,

92
00:06:40.270 --> 00:06:44.080 
we use several CF components. One of them was using shared temporary

93
00:06:44.080 --> 00:06:47.890 
storage for task coordination between the primary and multiple secondary tasks.

94
00:06:48.390 --> 00:06:53.130 
Yes and we also used GRS to serialize activity against those TSQs.

95
00:06:53.360 --> 00:06:56.520 
We also use CFDT for caching information that was retrieved

96
00:06:56.520 --> 00:06:59.160 
from the secondary task provided to the primary task.

97
00:06:59.620 --> 00:07:02.410 
And that was very important in this case because the remote hosts

98
00:07:02.820 --> 00:07:05.830 
involved in this situation were network attached devices, so

99
00:07:05.830 --> 00:07:07.100 
there were significant latency.

100
00:07:08.070 --> 00:07:11.010 
More examples like these as well as additional details on everything

101
00:07:11.010 --> 00:07:13.910 
we've talked about in this video series are available in the redbook.

102
00:07:14.330 --> 00:07:15.070 
Thank you for watching. This was the introduction

103
00:07:25.020 --> 00:07:29.290 
to the Walmart success story. For questions and remarks

104
00:07:30.080 --> 00:07:34.470 
concerning our video clip, please use the discussion forum

105
00:07:34.730 --> 00:07:42.320 
on the OpenHPI platform. Thank you very much for attending and

106
00:07:42.610 --> 00:07:46.180 
we will see us in one of the next video clips.
