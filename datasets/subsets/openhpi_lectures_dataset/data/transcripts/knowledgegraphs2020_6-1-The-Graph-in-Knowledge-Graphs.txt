WEBVTT

1
00:00:00.030 --> 00:00:05.260 
This is knowledge graphs lecture number six
Advanced Knowledge Graph Applications.

2
00:00:06.150 --> 00:00:09.760 
This lecture we are going to
start with looking at the graph

3
00:00:09.900 --> 00:00:11.210 
within the
knowledge graphs.

4
00:00:12.190 --> 00:00:16.670 
Ok let's recap the knowledge graph
definition. A knowledge graph

5
00:00:16.670 --> 00:00:19.870 
basically is a graph. Therefore we
are talking about graphs today

6
00:00:20.270 --> 00:00:23.650 
consisting of concepts, classes,
properties, relationships and

7
00:00:23.650 --> 00:00:28.710 
entity descriptions and basically it's
based on formal knowledge representations

8
00:00:28.820 --> 00:00:34.250 
on RDF(S) and all. The data we are
looking on can be open, private

9
00:00:34.250 --> 00:00:38.680 
or closed it might be original,
derived or aggregated and there

10
00:00:38.680 --> 00:00:43.370 
we distinguish in within for
instance data, schema data as well

11
00:00:43.540 --> 00:00:47.410 
as metadata and we have several
organizing principles like

12
00:00:47.410 --> 00:00:51.930 
for example we are using taxonomies
to categorize our entities.

13
00:00:51.930 --> 00:00:55.110 
And there are links also between
the nodes in the knowledge

14
00:00:55.110 --> 00:01:00.780 
graph and also to external data and mappings
also to data stored in other systems

15
00:01:00.940 --> 00:01:02.900 
and databases
and basically

16
00:01:03.570 --> 00:01:08.120 
knowledge graphs are fully compliant
to the so called fair principles.

17
00:01:10.580 --> 00:01:14.760 
Where is the graph in the knowledge graph?
We see here that a knowledge graph is

18
00:01:15.080 --> 00:01:18.300 
more or less a knowledge
base that is a graph.

19
00:01:18.850 --> 00:01:24.060 
Knowledge base we already know, so you see here
several definitions ranging from wikipedia

20
00:01:24.340 --> 00:01:28.700 
over the free online dictionary of
computing to google dictionary, but

21
00:01:28.870 --> 00:01:33.410 
we have already talked about knowledge
bases when we were talking about

22
00:01:33.720 --> 00:01:38.760 
the difference between terminological and
assertional knowledge which both together

23
00:01:38.910 --> 00:01:44.810 
forms any kind of knowledge base given
as a knowledge representation.

24
00:01:44.810 --> 00:01:48.190 
So we know that. Let's
focus on the graph.

25
00:01:49.070 --> 00:01:53.770 
And for that we have to dive deeper
into a bit of graph theory.

26
00:01:53.770 --> 00:01:54.930 
So what is a graph?

27
00:01:55.530 --> 00:01:59.130 
First of all knowledge graphs
they have edges and these edges

28
00:01:59.130 --> 00:02:02.450 
of course represent triples and
these triples are directed

29
00:02:02.450 --> 00:02:04.790 
because we have always
first the subject

30
00:02:05.400 --> 00:02:11.360 
then a property then an object. So the
property is the edge connecting two

31
00:02:11.670 --> 00:02:16.910 
nodes or two vertices which first are
the subject, second the object.

32
00:02:17.350 --> 00:02:21.100 
So in knowledge graphs usually we
are going to talk about directed

33
00:02:21.100 --> 00:02:24.900 
graphs because you know these edges
are directed from the subject

34
00:02:25.400 --> 00:02:28.870 
to the object. So we have to
define what is a simple

35
00:02:29.350 --> 00:02:32.860 
directed graph. A simple
directed graph G

36
00:02:33.290 --> 00:02:37.420 
consists out of a vertex
set V of vertices

37
00:02:37.840 --> 00:02:43.170 
vertex size N, so the size of the set
is N and the set of E of directed

38
00:02:43.170 --> 00:02:49.020 
edges and this set E is a subset
of the cartesian product of

39
00:02:49.200 --> 00:02:50.470 
the set of vertices

40
00:02:51.740 --> 00:02:56.720 
with itself. And therein
each edge that you have

41
00:02:56.870 --> 00:03:02.260 
e sub i is an edge so this usually
reserved at a tuple. You have

42
00:03:02.410 --> 00:03:06.820 
v sub k and v sub l that are
connected by exactly this edge.

43
00:03:06.990 --> 00:03:09.650 
this is an ordered pair
of these two vertices.

44
00:03:10.790 --> 00:03:13.770 
If you would talk about an
undirected graph then this would

45
00:03:13.770 --> 00:03:17.630 
not be a tuple not an ordered
set, it would be simply a set

46
00:03:17.870 --> 00:03:21.430 
where you have exactly two vertices
which are connected by the edge.

47
00:03:21.600 --> 00:03:26.080 
But in a directed graph we have
to obey to the sequence,

48
00:03:26.370 --> 00:03:30.320 
in our knowledge graph first
subject then object.

49
00:03:31.690 --> 00:03:35.900 
Ok we have to consider a few
special things also when we talk

50
00:03:35.900 --> 00:03:37.310 
about knowledge
graphs because

51
00:03:37.990 --> 00:03:41.890 
the graph might contain for example
so called self loops. What's that?

52
00:03:42.360 --> 00:03:46.680 
A graph with self loops is a
graph extended with the option

53
00:03:46.870 --> 00:03:51.490 
of having edges that relate to a
vertex to itself, which means

54
00:03:51.700 --> 00:03:55.060 
you know you have an edge that
points it starts at a vertex and

55
00:03:55.170 --> 00:03:58.770 
ends at the same vertex. So this is
possible also in a knowledge graph.

56
00:04:00.630 --> 00:04:04.880 
Then we have to talk about
multi graphs because it might

57
00:04:04.880 --> 00:04:06.200 
be possible
that you know

58
00:04:07.040 --> 00:04:10.730 
two entities within the knowledge
graph might be related to

59
00:04:10.730 --> 00:04:15.440 
each other not only via a single property
but via many properties. This means

60
00:04:15.780 --> 00:04:19.620 
we are talking about multi graphs
and this is a graph that

61
00:04:19.620 --> 00:04:24.150 
may have multiple edges with the
same vertices. So we are talking

62
00:04:24.150 --> 00:04:25.390 
about a multi- graph.

63
00:04:27.070 --> 00:04:31.130 
Then the edge we are talking about
is associated to a property,

64
00:04:31.130 --> 00:04:35.520 
so we have to speak about edge
labeled graphs and this is a graph

65
00:04:35.680 --> 00:04:40.660 
that has an additional labeling
function that maps each edge

66
00:04:40.770 --> 00:04:44.970 
in the set E to an element
in a set of labels L.

67
00:04:45.650 --> 00:04:49.220 
So this works similar if you talk
about a vertex labeled graph

68
00:04:49.220 --> 00:04:52.500 
because you could also say the
vertices have something like

69
00:04:52.500 --> 00:04:56.190 
a label which could be the
URI of the vertices here.

70
00:04:56.830 --> 00:05:01.110 
So these are some specialties if
we want to define the knowledge

71
00:05:01.110 --> 00:05:02.540 
graph really
as a graph.

72
00:05:03.620 --> 00:05:07.640 
Ok let's look further
into graph theory.

73
00:05:08.660 --> 00:05:13.640 
An edge in a graph is said to be incidental
to the vertices it connects to.

74
00:05:14.180 --> 00:05:18.510 
So incident and then we have to
talk about the degree of a

75
00:05:18.510 --> 00:05:23.030 
vertex which means this is the number
of edges that are incidental to it

76
00:05:23.470 --> 00:05:27.390 
and in a directed graph you decide
or distinguish between the

77
00:05:27.490 --> 00:05:32.970 
so called in-degree of a vertex- this is
the number of edges pointing towards it,

78
00:05:33.320 --> 00:05:37.310 
and analogously you define the
so called out-degree- so this

79
00:05:37.310 --> 00:05:42.360 
has the number of edges that start from
that graph. So we have in-degree

80
00:05:42.770 --> 00:05:47.960 
edges coming into, out-degree,
edges going out of that node.

81
00:05:50.120 --> 00:05:55.350 
This is now only the single edges that
are either starting or arriving at

82
00:05:55.470 --> 00:05:57.520 
an at a node,
at a vertex.

83
00:05:58.280 --> 00:06:01.840 
You also have something like paths
which means you might have

84
00:06:01.840 --> 00:06:06.760 
two arbitrary entities within the
knowledge graph that are connected

85
00:06:06.960 --> 00:06:11.500 
by a chain of properties and
there you are talking about a

86
00:06:11.500 --> 00:06:16.850 
so called directed path. A directed
path in a directed graph

87
00:06:17.180 --> 00:06:21.580 
is a sequence of consecutive
edges and you can find this as

88
00:06:21.590 --> 00:06:26.420 
you know a set of edges, a sub
one, a sub two to a sub n where

89
00:06:26.530 --> 00:06:29.250 
each of the edges is defined in
the following way: you have

90
00:06:29.260 --> 00:06:34.700 
e sub i which connects to nodes
v sub l and v sub k and the

91
00:06:34.700 --> 00:06:39.790 
subsequent edges then e sub i
plus one connect the nodes

92
00:06:40.070 --> 00:06:42.940 
v sub k and then some
other node v sub n.

93
00:06:45.210 --> 00:06:49.080 
And you say a directed graph is
so called strongly connected

94
00:06:49.600 --> 00:06:55.630 
if there is a directed path from
any vertex to any other vertex.

95
00:06:57.260 --> 00:07:00.780 
So we know now already what is
in-degree, what is out-degree,

96
00:07:00.950 --> 00:07:06.140 
what is a directed path and when
a graph is strongly connected.

97
00:07:07.320 --> 00:07:12.380 
Why do I need that stuff? Ok,
consider the following situation-

98
00:07:12.380 --> 00:07:18.110 
you have a problem to solve and you have two
different knowledge graphs to compare.

99
00:07:18.290 --> 00:07:21.150 
That might be for example you
might think of yeah should I

100
00:07:21.150 --> 00:07:25.090 
better use DBpedia or should
I better use wikidata?

101
00:07:25.650 --> 00:07:30.010 
Of course it always depends on the kind
of problem that you want to solve.

102
00:07:30.470 --> 00:07:35.390 
However if you want to know more
about these two graphs of

103
00:07:35.390 --> 00:07:39.310 
course you have to look at their content
and also probably on their structure.

104
00:07:39.580 --> 00:07:43.890 
So to do a structural comparison
might be just an idea because

105
00:07:43.890 --> 00:07:47.110 
you want to know what's the size
of these graphs, what's the

106
00:07:47.110 --> 00:07:52.230 
coverage, how complete are they,
what's the level of detail, meaning

107
00:07:52.230 --> 00:07:57.030 
how many facts per entities are there
displayed, how accurate are they,

108
00:07:57.260 --> 00:08:01.210 
how much can I rely on these facts
and stuff like that. So these

109
00:08:01.210 --> 00:08:05.550 
are all criteria when I compare
to knowledge graphs to find out

110
00:08:05.930 --> 00:08:11.650 
which one of these I should use. So we
are going to do a structural comparison

111
00:08:11.860 --> 00:08:16.650 
of these knowledge graphs and we do this by
a structural comparison of the graphs.

112
00:08:18.060 --> 00:08:22.590 
And this now is where so called
graph centrality measures come

113
00:08:22.600 --> 00:08:26.210 
into play. And they started
in network analysis. So

114
00:08:26.930 --> 00:08:31.010 
network analysis has developed
methods to find out what are

115
00:08:31.010 --> 00:08:34.530 
the most important vertices within
a graph and that of course

116
00:08:34.530 --> 00:08:39.100 
would also be interesting for us or for
applications when we are dealing with

117
00:08:39.360 --> 00:08:43.270 
huge knowledge graphs like
DBpedia or wikidata.

118
00:08:44.070 --> 00:08:49.000 
And the vertex importance is based
there on the structure of such graphs

119
00:08:49.110 --> 00:08:50.890 
and this is called
centrality.

120
00:08:51.620 --> 00:08:54.670 
So the question that we
have asked ourself is

121
00:08:55.140 --> 00:09:03.080 
what exactly is it that makes a
note important? Many networks

122
00:09:03.200 --> 00:09:09.260 
can be considered to describe a flow
of something, like goods for example

123
00:09:09.380 --> 00:09:12.170 
or information or
anything else. And then

124
00:09:12.990 --> 00:09:15.350 
a note might be
important.

125
00:09:16.390 --> 00:09:21.380 
Either if a lot flows from it
which means as in a supply chain

126
00:09:21.510 --> 00:09:26.940 
or a lot flows to it like in a
network of links. So if many

127
00:09:26.940 --> 00:09:30.450 
links are pointing to me this means
many people are referring me

128
00:09:30.670 --> 00:09:34.870 
and then I am important. This is for
example the case in a citation network

129
00:09:35.320 --> 00:09:41.930 
or let's say a lot flows thru
that node like for example like

130
00:09:41.930 --> 00:09:46.300 
in a communication network then exactly
these nodes are of special importance.

131
00:09:47.270 --> 00:09:52.140 
How do I model that? So flow might be
modelled by so called weighted paths,

132
00:09:52.410 --> 00:09:55.660 
possibly factoring in
their length and number.

133
00:09:56.880 --> 00:10:00.550 
And these paths on the other hand
might be more important if they

134
00:10:00.710 --> 00:10:03.050 
pass through
important nodes.

135
00:10:04.220 --> 00:10:09.690 
However in a knowledge graph besides exactly
these kind of structural properties

136
00:10:10.610 --> 00:10:15.580 
also the importance of edges
and nodes may be dependent on

137
00:10:15.580 --> 00:10:18.590 
more complex features like for
example we have to look at the

138
00:10:18.590 --> 00:10:21.860 
edge labels, we have to look at
the vertex labels and probably

139
00:10:21.940 --> 00:10:25.410 
on other stuff. So there
is more. However,

140
00:10:25.930 --> 00:10:30.080 
the structure of knowledge graph
already gives us some information

141
00:10:30.080 --> 00:10:34.720 
what nodes might be important from
a structural point of view.

142
00:10:35.740 --> 00:10:38.010 
So let's look at
wikidata for example.

143
00:10:38.930 --> 00:10:42.110 
With data entity
might be important

144
00:10:42.560 --> 00:10:46.790 
for example, when might it be important?
So wikidata you might remember

145
00:10:47.030 --> 00:10:51.370 
that for example in wikidata
you will find structured data

146
00:10:51.380 --> 00:10:55.520 
about all things which are in
all of the wikipedias in all

147
00:10:55.520 --> 00:10:56.930 
languages that
you have.

148
00:10:57.770 --> 00:11:01.490 
However talking about a specific
entity you might consider

149
00:11:02.310 --> 00:11:06.770 
it is more important if it is
referenced, let's say, in lots

150
00:11:06.780 --> 00:11:10.500 
of wikipedias of different languages
which means lots of different

151
00:11:10.500 --> 00:11:14.270 
people in different countries
think of that thing of being

152
00:11:14.270 --> 00:11:18.840 
as important that they of course
included in their wikipedia.

153
00:11:19.460 --> 00:11:23.900 
If it's only locally important, so
let's say for example somebody born

154
00:11:24.150 --> 00:11:27.210 
in a little village of France
which might be a French national

155
00:11:27.210 --> 00:11:31.300 
hero but nobody let's say in Germany
knows that guy. Then probably

156
00:11:31.520 --> 00:11:35.480 
that guy is not necessary in the
German wikipedia but of course

157
00:11:35.480 --> 00:11:36.770 
in the French
wikipedia.

158
00:11:38.400 --> 00:11:42.490 
Another person, like for example,
an American president,

159
00:11:43.670 --> 00:11:47.900 
this guy might be of course referenced
in all of the wikipedia. So

160
00:11:48.150 --> 00:11:53.330 
you see this is somehow a way also
to determine importance within

161
00:11:53.530 --> 00:11:57.280 
this special case of wikidata. So
there what we want to do is simply

162
00:11:57.810 --> 00:12:01.160 
to based on the assumption that
a wiki data note or entity

163
00:12:01.160 --> 00:12:05.230 
might be important if its referenced
by many wikipedia pages

164
00:12:05.230 --> 00:12:09.320 
so in many languages we can find
out for example, so, what are

165
00:12:09.320 --> 00:12:13.210 
now the most important,
let's say, climatologists

166
00:12:13.680 --> 00:12:18.710 
in wikidata. And we have prepared a
small SPARQL query for you which means

167
00:12:18.920 --> 00:12:22.870 
we are first graph patterns selecting
simply the climatologists,

168
00:12:22.870 --> 00:12:27.150 
so saying the occupation of that
guy should be climatologists.

169
00:12:27.250 --> 00:12:30.890 
And then the next thing is we
are looking at a property here

170
00:12:30.890 --> 00:12:34.410 
which is called a wiki based
site links and this is simply

171
00:12:34.590 --> 00:12:39.710 
there exist a link to an external
wikipedia and these links

172
00:12:39.710 --> 00:12:43.130 
we are simply counting, which means
ok we want to have the label

173
00:12:43.130 --> 00:12:45.750 
of the climatologist and the
label should be in english so

174
00:12:45.750 --> 00:12:51.490 
that we see the name of that guy and we group
the stuff by the climatologist label,

175
00:12:52.090 --> 00:12:57.460 
we count the number of links, so
we sum up all the links and then

176
00:12:57.590 --> 00:13:02.050 
we order the stuff in descending
order. You can try it out and

177
00:13:02.050 --> 00:13:04.620 
then what you see is
exactly you know

178
00:13:05.920 --> 00:13:10.410 
a result page like that. And you
might see there that the most

179
00:13:10.410 --> 00:13:15.370 
important climatologists that they
find is Alexander von Humboldt

180
00:13:15.370 --> 00:13:18.420 
with one hundred
and seventeen

181
00:13:18.880 --> 00:13:23.460 
references. That's quite a lot.
Second in line his Paul Jozef

182
00:13:23.460 --> 00:13:27.130 
Crutzen, third oneWladimir
Köppen, so I don't know the

183
00:13:27.130 --> 00:13:30.310 
second and the third but at least
I know the first one. So he

184
00:13:30.580 --> 00:13:35.440 
really seems to be of some
importance. So this might be a way

185
00:13:35.440 --> 00:13:38.900 
to find out important
nodes within wikidata.

186
00:13:39.600 --> 00:13:44.020 
But we want to do this let's say
in a more generic way. So first

187
00:13:44.080 --> 00:13:47.250 
let's have a look what is so
called degree centrality.

188
00:13:48.170 --> 00:13:52.190 
A simple form of centrality
restricts simply to incoming and

189
00:13:52.200 --> 00:13:56.270 
outgoing paths of length one.
This means this is the number

190
00:13:56.440 --> 00:14:00.400 
of edges that arrive or go
out of a single vertex.

191
00:14:01.220 --> 00:14:04.680 
And there the in-degree centrality
of a directed graph is given

192
00:14:04.880 --> 00:14:10.370 
by the in degree of each single node
and the out degree centrality

193
00:14:10.620 --> 00:14:14.380 
and the degree centrality for
undirected graphs is defined in an

194
00:14:14.730 --> 00:14:21.430 
analogous way. So you can use this
format or you can even use more

195
00:14:21.960 --> 00:14:25.230 
sophisticated measures of this
centrality measures. Like for

196
00:14:25.230 --> 00:14:29.270 
example there is an eigenvector
centrality, very famous Katz

197
00:14:29.270 --> 00:14:32.740 
centrality or you might have heard
of PageRank; this is a centrality

198
00:14:32.740 --> 00:14:38.080 
measure for web pages introduced by
google and of course is responsible for

199
00:14:38.330 --> 00:14:42.740 
the ordering of your search results because
there the importance of web pages

200
00:14:42.920 --> 00:14:47.700 
is also determined via graph
centrality measures by

201
00:14:48.140 --> 00:14:51.710 
kind of degree centrality that
is a bit more complicated and

202
00:14:51.710 --> 00:14:55.760 
is computed iteratively. So this
is another story. So these are

203
00:14:55.760 --> 00:14:59.030 
also centrality measures that you
might have heard of to determine

204
00:14:59.110 --> 00:15:01.290 
the importance of
nodes in a network.

205
00:15:03.050 --> 00:15:05.280 
These are centrality
measures. There are more.

206
00:15:06.470 --> 00:15:09.510 
Further matters to characterize
the knowledge graphs are for

207
00:15:09.510 --> 00:15:12.640 
example simply sizes. You want to
know how large is the knowledge

208
00:15:12.640 --> 00:15:15.060 
graph, then you look at the number
of nodes. You want to know

209
00:15:15.060 --> 00:15:18.190 
how much knowledge is in there, then
you look at the number of facts.

210
00:15:18.360 --> 00:15:23.070 
And of course if you want to know how
well each entity is represented

211
00:15:23.070 --> 00:15:26.240 
you simply look at the average
number of facts per node.

212
00:15:27.800 --> 00:15:30.680 
Another thing you might be
interested in is for example the

213
00:15:30.680 --> 00:15:35.190 
so called knowledge graph diameter.
So how long are the paths in there?

214
00:15:35.660 --> 00:15:39.060 
And there you look at two
measures, one is the so called

215
00:15:39.150 --> 00:15:46.530 
eccentricity, sorry, of a node. The eccentricity
of a node is the maximum distance

216
00:15:46.940 --> 00:15:51.450 
between a certain node and any other
node. So the maximum distance

217
00:15:51.450 --> 00:15:56.070 
that you can go, the longest path
there. And then the diameter

218
00:15:56.070 --> 00:16:00.260 
of a graph is the maximum
eccentricity of a graph. This means

219
00:16:00.260 --> 00:16:04.330 
the greatest distance between any
pair of nodes, that's the diameter.

220
00:16:04.960 --> 00:16:07.790 
And to find the diameter of a
graph what you do is first you

221
00:16:07.790 --> 00:16:12.340 
find all the shortest paths between
each pair of nodes and then you take

222
00:16:12.560 --> 00:16:15.870 
the greatest length of any of these
parts and this is the diameter

223
00:16:15.870 --> 00:16:20.800 
of the graph. So this is a nice small
algorithm how to determine the diameter

224
00:16:21.020 --> 00:16:24.890 
in a graph. But you see how to
do that you have first to find

225
00:16:24.890 --> 00:16:28.780 
all the shortest paths and then again select
them and find the greatest lengths.

226
00:16:29.110 --> 00:16:32.220 
Graph algorithms and we will see
this also in the next lecture

227
00:16:32.540 --> 00:16:36.740 
are really always complex
which means they might need

228
00:16:36.740 --> 00:16:38.890 
a lot of time especially
if you have

229
00:16:39.660 --> 00:16:43.300 
knowledge graph sizes like wikidata
where we are talking about

230
00:16:43.310 --> 00:16:45.440 
more than seventy
million nodes.

231
00:16:46.150 --> 00:16:50.670 
And of course let's say hundreds of millions
of edges and then of course these

232
00:16:50.870 --> 00:16:53.940 
algorithms become
rather complex.

233
00:16:54.800 --> 00:16:57.880 
Besides the diameter, probably
you should also talk about the

234
00:16:57.880 --> 00:17:01.510 
radius; this is then vice versa.
The radius of a graph is the

235
00:17:01.510 --> 00:17:05.530 
minimum eccentricity of a graph.
This means the shortest of

236
00:17:05.540 --> 00:17:10.180 
the maximum distances between any pair
of nodes that you find. So this then

237
00:17:10.570 --> 00:17:14.350 
is the radius. And of course you
can also look at measures like

238
00:17:14.350 --> 00:17:19.540 
for example the average in and out
degree of any node, the average

239
00:17:19.540 --> 00:17:23.430 
path length within the
graph and many others.

240
00:17:25.880 --> 00:17:29.270 
Knowledge graphs we know this already
are special kind of graphs.

241
00:17:29.270 --> 00:17:33.930 
So therefore the importance of nodes might
further be depending on other features

242
00:17:34.230 --> 00:17:37.960 
like for example what kind of
property i'm looking at. So this

243
00:17:38.140 --> 00:17:41.290 
we have to look at the edge
attributes. We have to look at

244
00:17:41.290 --> 00:17:44.620 
the node labeled. So there might
be further attributes on nodes

245
00:17:44.620 --> 00:17:48.890 
that have to be considered and
there might be specific nodes

246
00:17:48.890 --> 00:17:51.790 
or edges on the other hand
that have to be ignored.

247
00:17:52.210 --> 00:17:56.670 
Just one example for that. In
almost any knowledge graph that

248
00:17:56.670 --> 00:18:01.370 
is based on OWL, the following
fact holds that any entity that

249
00:18:01.370 --> 00:18:05.860 
you have is of type owl:Thing so
anything is a thing. If it's

250
00:18:05.860 --> 00:18:09.870 
not stated explicitly you can make
it explicit simply then usually

251
00:18:10.160 --> 00:18:15.560 
by doing or trying to get the
so called transitive closure

252
00:18:15.960 --> 00:18:21.050 
by reasoning. Therefore I mean if
any node is connected to OWL

253
00:18:21.060 --> 00:18:24.840 
thing then of course OWL:Thing
should be according to centrality

254
00:18:24.840 --> 00:18:28.400 
measures the most important graph
in the most important point

255
00:18:28.400 --> 00:18:29.350 
in the graph at all.

256
00:18:30.670 --> 00:18:34.490 
Therefore we might simply
ignore this fact if we really

257
00:18:34.490 --> 00:18:37.780 
want to determine the importance of
all the other nodes because this

258
00:18:38.100 --> 00:18:42.310 
single node might influence all the
other nodes and might somehow

259
00:18:42.850 --> 00:18:48.380 
disturb our measurement. So you have
to carefully look at the stuff here.

260
00:18:49.970 --> 00:18:55.250 
So now you know a little bit about
graphs and mathematical theory

261
00:18:55.370 --> 00:19:00.580 
behind graphs. The most important
point here is that trying

262
00:19:00.580 --> 00:19:04.290 
to analyze the structure of a
graph based on these measures

263
00:19:04.420 --> 00:19:08.730 
and taking them into account for,
let's say, a subsequent development

264
00:19:08.730 --> 00:19:11.630 
of so called semantic
similarity measures.

265
00:19:12.700 --> 00:19:17.000 
This is a huge effort especially
if you look at large graphs.

266
00:19:17.000 --> 00:19:22.200 
So these algorithms are of higher
complexity, which means the more numbers

267
00:19:22.370 --> 00:19:24.450 
of nodes you have
in your graph

268
00:19:25.070 --> 00:19:28.550 
the longer it will take to run
your algorithms and at one point

269
00:19:28.550 --> 00:19:30.890 
they don't run at all because it
doesn't fit any more in the

270
00:19:30.890 --> 00:19:32.000 
memory of your
computer.

271
00:19:33.030 --> 00:19:38.560 
And one possibility or one idea how to
solve that solution is an approximation

272
00:19:38.920 --> 00:19:42.560 
that is called embeddings and this
is exactly what we will talk

273
00:19:42.730 --> 00:19:47.220 
about in the next part of the lecture.
These are the knowledge graph

274
00:19:47.340 --> 00:19:48.200 
embeddings.
