WEBVTT

1
00:00:00.360 --> 00:00:05.000 
This is knowledge graphs lecture
three querying rdfs with SPARQL.

2
00:00:05.490 --> 00:00:09.790 
In this lecture we are going to look
at the complex queries with SPARQL.

3
00:00:10.580 --> 00:00:15.920 
So here we are in the SPARQL layer
of the semantic web technology

4
00:00:15.930 --> 00:00:19.230 
stack where we use
SPARQL and query on.

5
00:00:20.230 --> 00:00:25.770 
So we have already seen this kind of filter
constraints in the previous lecture

6
00:00:26.100 --> 00:00:32.010 
where we are searching for authors and their
books and we are filtering the results

7
00:00:32.250 --> 00:00:36.220 
of these books
based on the labels,

8
00:00:36.700 --> 00:00:42.900 
the language of their labels, and then we are
only looking for environmental fictional books

9
00:00:43.420 --> 00:00:49.430 
and we want to only select first one
hundred results. So we have already seen

10
00:00:50.140 --> 00:00:54.970 
the constructs, the clauses which
are used for SPARQL in this case.

11
00:00:55.180 --> 00:01:02.050 
So in order to make some filtering
based on the languages on dbpedia

12
00:01:02.280 --> 00:01:07.880 
you can define lang clause and
then you can give the encoding

13
00:01:07.900 --> 00:01:11.160 
for the language such as in
this case it is English.

14
00:01:11.940 --> 00:01:15.470 
So let us have a look at
the SPARQL end point.

15
00:01:16.970 --> 00:01:20.820 
So here you can actually see the
same query that has been explained

16
00:01:20.820 --> 00:01:23.300 
before here you have
your filter clauses

17
00:01:24.000 --> 00:01:28.590 
here and here. So here we are
actually doing this filtering

18
00:01:28.670 --> 00:01:32.620 
the language filtering on the names
of the authors as well as the title.

19
00:01:33.050 --> 00:01:38.230 
Now let's run this query and here
we get these results. So we have

20
00:01:38.380 --> 00:01:42.680 
all the author names in English
and then of course the titles

21
00:01:42.680 --> 00:01:44.430 
of the books in
English also.

22
00:01:49.680 --> 00:01:54.030 
So we ran we try to run the same
query on wikidata, lets say, similar

23
00:01:54.030 --> 00:01:57.600 
query, so we are again searching
for authors and their books

24
00:01:57.670 --> 00:02:00.340 
and then we are trying
to filter the results

25
00:02:00.760 --> 00:02:05.150 
for the books in english, the
labels in english and then we

26
00:02:05.150 --> 00:02:10.780 
are looking for books on global warming.
So here on wikidata since you

27
00:02:11.020 --> 00:02:15.020 
can see in the query in front of
you, you use the IDs of the

28
00:02:15.020 --> 00:02:16.810 
properties and
the classes.

29
00:02:17.500 --> 00:02:23.530 
So p thirty one and the next long long
id that you see it actually represents

30
00:02:23.980 --> 00:02:29.090 
that some book in the variable is
an instance of a written work.

31
00:02:29.260 --> 00:02:33.860 
Similarly a book is defined by these
properties that are given in this query.

32
00:02:34.860 --> 00:02:36.600 
Here we have the author,

33
00:02:38.210 --> 00:02:42.330 
the main subject of this book
would be global warming and then

34
00:02:42.330 --> 00:02:47.370 
the publication date of the book.
Now in wikidata the querying

35
00:02:47.370 --> 00:02:51.880 
for, the filtering for the language
is a little bit different than

36
00:02:52.130 --> 00:02:56.710 
dbpedia. So wikidata has a
specific label service.

37
00:02:57.230 --> 00:03:02.740 
So let's try to run this query on
the wikidata SPARQL end point.

38
00:03:04.270 --> 00:03:08.200 
So here is our query that we just
saw before and here is our

39
00:03:08.210 --> 00:03:11.050 
our filter for
the language.

40
00:03:12.490 --> 00:03:15.170 
And when you run this
query you get this

41
00:03:15.580 --> 00:03:18.990 
books and the labels of the books
in English as well as the

42
00:03:18.990 --> 00:03:21.160 
authors and their
publication dates.

43
00:03:24.900 --> 00:03:29.930 
So this is actually the results
that you just saw in the

44
00:03:29.950 --> 00:03:33.440 
SPARQL end
point that I just showed.

45
00:03:34.410 --> 00:03:38.770 
Now there are many more SPARQL
operators such as logical

46
00:03:38.770 --> 00:03:43.390 
connectives like AND and OR. Then
we have comparison operators

47
00:03:43.650 --> 00:03:48.080 
so equal, not equal, less than,
greater than, less than or equal

48
00:03:48.080 --> 00:03:52.000 
to, greater than or equal to, for
numeric data types date and

49
00:03:52.000 --> 00:03:56.620 
time, string and the boolean. Then
we have comparison of operators

50
00:03:56.780 --> 00:04:00.970 
for other data types which is
equal and not equal to and then

51
00:04:00.970 --> 00:04:05.090 
finally we have some arithmetic
operators for addition, subtraction,

52
00:04:05.090 --> 00:04:08.230 
multiplication, divisions and of
course this applied to the

53
00:04:08.230 --> 00:04:10.360 
numeric
data types.

54
00:04:11.230 --> 00:04:16.010 
In addition to the to these
operators that we just saw there

55
00:04:16.010 --> 00:04:19.910 
is the regular expressions where you
give the string and the pattern

56
00:04:20.140 --> 00:04:24.600 
and this pattern matches against
the given string. And/or we

57
00:04:24.600 --> 00:04:26.560 
can also use it
with the flags.

58
00:04:27.540 --> 00:04:31.400 
Then we have same term and
the language matches.

59
00:04:34.190 --> 00:04:36.450 
So here let us
consider an example

60
00:04:37.690 --> 00:04:41.600 
where we are looking for the book
titles, for the book titles

61
00:04:41.600 --> 00:04:46.770 
which end with the word earth, which are
sorted by their publication dates.

62
00:04:47.480 --> 00:04:51.380 
So the basic graph pattern for such
a quality can be given here

63
00:04:51.380 --> 00:04:54.770 
like this. So book is an
instance of a written work.

64
00:04:55.750 --> 00:05:00.150 
Then we have an rdfs label of
which is the book label which

65
00:05:00.150 --> 00:05:01.340 
would be the book label,

66
00:05:02.120 --> 00:05:04.300 
and then we have an
author for the book,

67
00:05:05.960 --> 00:05:10.210 
then we have the publication date
of the book and finally since

68
00:05:10.210 --> 00:05:15.380 
we are looking for only those book
titles which are ending with earth,

69
00:05:16.050 --> 00:05:20.200 
we will define this filter
ending at the dollar sign

70
00:05:21.870 --> 00:05:23.870 
which is coming from the
regular expression.

71
00:05:24.270 --> 00:05:29.170 
So here in the SPARQL query
you define the filter clause

72
00:05:29.410 --> 00:05:33.800 
in the way that you can see here so
you have the string book label

73
00:05:33.910 --> 00:05:37.280 
and the regular expression earth
ending with a dollar sign

74
00:05:37.620 --> 00:05:39.450 
and then you
have the flags.

75
00:05:40.390 --> 00:05:44.550 
So if you want to run this SPARQL
query over

76
00:05:44.550 --> 00:05:46.520 
the endpoint we can
also see it here.

77
00:05:47.520 --> 00:05:51.380 
So this is the same query that
we have just defined and then

78
00:05:51.380 --> 00:05:55.840 
we tried to run this query and then we
should be able to get our results now.

79
00:05:56.120 --> 00:06:00.340 
So we have all the book labels
ending with earth, so you have

80
00:06:00.340 --> 00:06:03.880 
The Fruits of the Earth and so on
and so forth and they are all

81
00:06:04.250 --> 00:06:05.740 
organized by their date. So here is

82
00:06:13.500 --&gt; 00:06:18.030
one of the images of the answer of the
SPARQL end point that you just saw.

83
00:06:19.770 --> 00:06:23.410 
So here now what we do we take
the same quality that we just

84
00:06:23.410 --> 00:06:29.140 
saw and then we actually added
just one another constraint

85
00:06:29.290 --> 00:06:33.430 
which says if we have some image
available for the book then

86
00:06:33.430 --> 00:06:36.430 
we retrieve it. But if it is not
there the rest of the

87
00:06:36.440 --> 00:06:38.750 
information will be
retrieved anyway.

88
00:06:40.740 --> 00:06:44.880 
So such kind of constraints are
actually represented

89
00:06:44.880 --> 00:06:47.950 
with the with the help of
the optional constraint.

90
00:06:48.380 --> 00:06:53.040 
So you can actually it is like
the optional selection

91
00:06:53.040 --> 00:06:54.110 
of graph pattern.

92
00:06:56.480 --> 00:07:00.010 
So let's try to run this query
over the SPARQL endpoint

93
00:07:04.640 --> 00:07:08.380 
and then here it should retrieve
all the information about

94
00:07:08.380 --> 00:07:12.390 
the books and if the image is
available it should show the

95
00:07:12.390 --> 00:07:17.940 
image of that book on the
in the answer to that query.

96
00:07:19.550 --> 00:07:23.360 
So here you can actually see all
the information is available here

97
00:07:23.620 --> 00:07:27.750 
on the right side and
on the left side you'll see

98
00:07:27.750 --> 00:07:31.440 
one image which is actually
which is actually belonging

99
00:07:31.440 --> 00:07:34.180 
to to the book -
the fruits of the earth.

100
00:07:41.440 --> 00:07:48.100 
So now we are going to see more operators

101
00:07:48.100 --> 00:07:51.740 
and more kind of constraints that
we can give to the SPARQL query.

102
00:07:52.080 --> 00:07:56.960 
So now we want to look for
alternative results which can be

103
00:07:56.960 --> 00:08:01.410 
done with the help of union. So
you have, so here for example

104
00:08:01.410 --> 00:08:05.930 
we have this query we are looking
for books which mention

105
00:08:05.930 --> 00:08:10.620 
London in their title or we will
retrieve the books whose

106
00:08:10.970 --> 00:08:15.430 
narrative location is London. So
here you see the basic graph

107
00:08:15.430 --> 00:08:18.740 
pattern of the graph
pattern of this query,

108
00:08:20.820 --> 00:08:25.040 
and this query is given with the
help of this in the SPARQL

109
00:08:25.050 --> 00:08:28.550 
query is given with the help of
logical disjunction

110
00:08:28.780 --> 00:08:33.490 
that is the union operator. So
let's try to run this over the

111
00:08:33.550 --> 00:08:38.540 
wikidata endpoint. So we
have the query as are

112
00:08:38.990 --> 00:08:42.120 
said before and we are retrieving
the books with the label

113
00:08:42.800 --> 00:08:44.380 
with the labels
in english.

114
00:08:45.660 --> 00:08:47.150 
So you can actually see

115
00:08:47.790 --> 00:08:51.460 
that we have the author label, the
book label, the links to the

116
00:08:51.460 --> 00:08:57.060 
book, the IDs of the book and then we
have the dates of their publication.

117
00:09:02.300 --> 00:09:07.780 
Now finally we want what do we do if we
want to express negation in SPARQL?

118
00:09:08.130 --> 00:09:11.780 
So in this case for example let's
take an example of a query

119
00:09:12.070 --> 00:09:15.820 
which books are written by authors
who don't have an occupation?

120
00:09:16.300 --> 00:09:21.160 
So now in the a basic graph pattern,
in the graph pattern of the query

121
00:09:21.450 --> 00:09:25.060 
we have the book which is an
instance of a written work, then

122
00:09:25.060 --> 00:09:28.930 
we have the publication date,
we have the author as usual,

123
00:09:29.410 --> 00:09:31.640 
but then we are
looking for authors

124
00:09:32.880 --> 00:09:37.480 
with an occupation. Now the point
here this is not a negation.

125
00:09:37.610 --> 00:09:43.600 
So how do we want two find the authors
which do not have an occupation?

126
00:09:44.000 --> 00:09:49.930 
So for doing that we use the filter
clause, so we say filter not exists

127
00:09:50.260 --> 00:09:53.430 
or we can use minus or we
can use not bound.

128
00:09:53.880 --> 00:09:57.890 
So here the solution to this
question would be with the help

129
00:09:57.890 --> 00:10:05.900 
of filter not exist. So we use this
filter query a query result for existence.

130
00:10:06.250 --> 00:10:10.990 
So now let's run this query over
the SPARQL endpoint of wikidata.

131
00:10:12.510 --> 00:10:15.480 
Here you can actually see we
are retrieving the books with

132
00:10:15.480 --> 00:10:19.910 
the title of English, German,
Spanish and Italian and here

133
00:10:20.470 --> 00:10:23.770 
we have the author
label, the book label, and the date.

134
00:10:31.620 --> 00:10:36.750 
So here you can see the snapshot of
the quality that we just saw before.

135
00:10:38.260 --> 00:10:41.820 
Now we have more complex SPARQL
queries which you will see

136
00:10:41.820 --> 00:10:43.200 
in the next lecture.
