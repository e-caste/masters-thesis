WEBVTT

1
00:00:00.600 --> 00:00:07.300 
We have discussed about the trust problem of Assymetric encryption protocols.

2
00:00:08.160 --> 00:00:15.210 
To give a solution to the trust problem, we have to consider trust models

3
00:00:15.220 --> 00:00:23.740 
in our OpenHPI course about Confidential Communication. The solution of the trust

4
00:00:23.822 --> 00:00:27.840 
problem needs to consider suitable trust models.

5
00:00:28.500 --> 00:00:34.180 
there are three main trust models: It's the Direct trust, the Web

6
00:00:34.180 --> 00:00:40.800 
of Trust, and the Hierarchical Trust. The most

7
00:00:41.140 --> 00:00:52.100 
popular in internet is Hierarchical Trust model. This Hierarchical Trust model performs the basis

8
00:00:52.320 --> 00:00:58.380 
of public key infrastructures-PKI, which we have to consider later on.

9
00:00:58.390 --> 00:01:04.280 
In most cases, in the case of Web of Trust and the case of

10
00:01:04.360 --> 00:01:15.946 
Hierarchical trust, so-called certificates are used to solve the trust problem.

11
00:01:15.960 --> 00:01:23.300 
So the use of certificates that are documents signed by a trustworthy third party,

12
00:01:24.820 --> 00:01:30.280 
which testifies a relationship between a person and it's public key.

13
00:01:30.940 --> 00:01:36.020 
So certificate is something like an identity card, there is a name of

14
00:01:36.020 --> 00:01:43.370 
the owner of a public key and the public key. This is assigned by

15
00:01:43.810 --> 00:01:52.620 
a trusted third party. So if one trusts this third party then once can trust

16
00:01:53.260 --> 00:01:58.960 
what this party have signed. If such a party signed such certificate,

17
00:01:59.340 --> 00:02:06.120 
then I can trust the certificate. I can take the public key out

18
00:02:06.120 --> 00:02:12.800 
of a certificate of Bob when when I want to send him,

19
00:02:13.060 --> 00:02:19.121 
for example, an encrypted text file. But let's have a closer look at-

20
00:02:19.121 --> 00:02:23.300 
these different trust models. First, the Direct trust,

21
00:02:23.940 --> 00:02:30.180 
here it is a direct one to one interaction

22
00:02:30.820 --> 00:02:38.180 
between Elis and Bob before they want to communicate to each other. So Elis directly-

23
00:02:38.400 --> 00:02:47.680 
confirms the authenticity of a public key to her communication partner - to Bob. For

24
00:02:47.680 --> 00:03:00.080 
example, she sends her public key on a second channel, for example with same name to bob. Then Bob can use it

25
00:03:00.280 --> 00:03:05.700 
for encryption. So here's the advantage of this direct Trust model: no

26
00:03:05.700 --> 00:03:12.300 
infrastructure are necessary to the communication partners, they resolve the problem

27
00:03:13.380 --> 00:03:20.800 
between each other and need no help of anyone else. But there are a lot of

28
00:03:20.810 --> 00:03:28.120 
disadvantages: The key hand over to each communication partner is necessary,

29
00:03:28.400 --> 00:03:32.500 
and it's difficult if one has to use a second channel because one

30
00:03:32.500 --> 00:03:39.900 
cannot use internet, because there is no possibility without the Assymetric encryption

31
00:03:39.900 --> 00:03:45.460 
method and the keys to encrypt something. Then there is no binding also

32
00:03:45.460 --> 00:03:52.100 
for legal discussions. And then no authority to enforce security

33
00:03:52.900 --> 00:03:57.940 
policy for solving all the problems mentioned. For example, if a key is

34
00:03:57.940 --> 00:04:09.040 
compromised by others. So this is more or less as theoretical model only. More practical is the following trust model:

35
00:04:09.040 --> 00:04:14.980 
The trust model of Web of Trust. Here the idea is, the user

36
00:04:16.100 --> 00:04:21.906 
has a certificate, a document which assigned his name to his public key

37
00:04:21.920 --> 00:04:28.175 
and he asked all his friends to sign this certificate.

38
00:04:29.240 --> 00:04:36.257 
And the more friends and the more people sign this certificate,

39
00:04:36.392 --> 00:04:43.220 
the more valid it becomes. So the more users sign the certificate the more trustworthy

40
00:04:43.380 --> 00:04:46.260 
it is. So for example, if user A

41
00:04:46.880 --> 00:04:52.920 
trusts user B and the certificate from user C was

42
00:04:53.560 --> 00:05:00.240 
signed by User B, then A can also trust the Certificate of C.

43
00:05:01.260 --> 00:05:09.340 
So in this way a relation of trust is established in the web, that name here is

44
00:05:09.340 --> 00:05:16.242 
the Web of Trust, that one can conclude if this partner or that partner

45
00:05:17.420 --> 00:05:22.337 
recognized this combination of name and public key is true,

46
00:05:22.431 --> 00:05:24.800 
then I can also consider it as true.

47
00:05:25.680 --> 00:05:31.340 
Advantage here is, only a little infrastructure required, only the server

48
00:05:31.340 --> 00:05:38.100 
is needed to store multiple signed certificates. The other things can be

49
00:05:38.760 --> 00:05:47.060 
performed very informaly, such as asking friends and partners to sign a digital certificate

50
00:05:47.100 --> 00:05:52.660 
which binds the name to my public key. But

51
00:05:53.340 --> 00:05:59.605 
here are also many disadvantages in this Web of Trust model. Key Locking

52
00:05:59.745 --> 00:06:07.260 
is very tedious. So if a key was compromised or it was lost,

53
00:06:07.820 --> 00:06:13.140 
then it is difficult to change this and to bring it to everyone's knowledge

54
00:06:13.140 --> 00:06:16.880 
that new certificates are needed.

55
00:06:17.760 --> 00:06:23.870 
The binding nature is better than in the case of direct trust, but under legal

56
00:06:23.880 --> 00:06:29.140 
consideration, it's not sufficient, it could be that I asked my friends

57
00:06:29.140 --> 00:06:35.701 
to sign my certificate as Mallory, and I give my name not Mallory

58
00:06:35.817 --> 00:06:42.480 
in the certificate, but give the name of Bob in the certificate. The Security

59
00:06:42.480 --> 00:06:46.680 
policies are difficult to enforce because it's very lose-

60
00:06:47.320 --> 00:06:56.487 
lose relations between the people that signed the certificates.

61
00:06:56.500 --> 00:07:06.815 


62
00:07:06.820 --> 00:07:14.941 
The most popular in the internet is the trust model of Hierarchical trust.

63
00:07:14.941 --> 00:07:20.340 
This is implemented by hierarchical public key infrastructures.

64
00:07:21.380 --> 00:07:25.600 
We will discuss such infrastructures in more detail in another clip,

65
00:07:26.060 --> 00:07:31.280 
but for discussing the trust model, it's enough to know that

66
00:07:31.280 --> 00:07:36.660 
such an hierarchical PKI, Public Key Infrastructure has an initial

67
00:07:37.340 --> 00:07:43.960 
instance and that is the so-called "Root CA". CA means certification authority.

68
00:07:44.400 --> 00:07:51.540 
And it looks like this: We have this "Root CA" and many other CA's below

69
00:07:51.600 --> 00:07:59.780 
the certification authority of Root CA. So this is

70
00:07:59.780 --> 00:08:02.640 
a tree. I only show here the first line

71
00:08:03.340 --> 00:08:11.674 
And the subordinate instances, one can trust these subordinate

72
00:08:11.680 --> 00:08:22.662 
instances because the Root CA signs the certificate of these subordinate

73
00:08:22.907 --> 00:08:30.660 
CA's. And when someone wants to validate and verify the identity of an

74
00:08:30.840 --> 00:08:42.690 
CA, then it's simply possible to validate the CA's certificate, which is signed by the Root CA.

75
00:08:42.700 --> 00:08:45.223 
And then because the user trusts the Root CA,

76
00:08:46.440 --> 00:08:52.820 
say trusts the signature of Root CA, and say can trust the different

77
00:08:52.980 --> 00:09:00.570 
CA's below of those. So this is the Hierarchical trust model.

78
00:09:00.580 --> 00:09:09.860 
So advantages here are with this single key, the public key of the CA, all can verify the digital

79
00:09:09.916 --> 00:09:16.548 
certificates of all participants registered in this public key infrastructure.

80
00:09:16.560 --> 00:09:25.800 
Also revocation can be easily realized and binding nature can be established

81
00:09:26.020 --> 00:09:31.520 
because it's a trusted third party witha Root CA which

82
00:09:32.140 --> 00:09:40.100 
provides the trust into certificate, which come

83
00:09:41.140 --> 00:09:45.740 
from this infrastructure. But there has to be

84
00:09:46.460 --> 00:09:50.040 
a price paid for operation of such a

85
00:09:51.560 --> 00:09:57.760 
certification authority. It needs such a root certification, such a network,

86
00:09:57.760 --> 00:10:04.160 
a tree of such certification authorities. It requires the provision of an extensive

87
00:10:04.180 --> 00:10:10.920 
infrastructure, the so-called public key infrastructure. Potentially such public

88
00:10:11.011 --> 00:10:16.500 
key infrastructures are operated by independent and trustworthy carriers

89
00:10:16.720 --> 00:10:23.920 
in the internet. The participants that want to get a certificate

90
00:10:25.380 --> 00:10:31.480 
from such a public key infrastructure must register with the CA of the PKI and

91
00:10:31.480 --> 00:10:38.270 
then they receive their certificate and can show it also to other

92
00:10:38.340 --> 00:10:45.395 
participants. The participants need not trust such a certificate, they

93
00:10:45.476 --> 00:10:52.200 
also can directly go to this tree of certification authorities to access the

94
00:10:52.880 --> 00:11:02.420 
certificates of other participants. The CA must make certificates accessible and distribute

95
00:11:02.420 --> 00:11:08.660 
revocation lists. So all what was needed

96
00:11:09.360 --> 00:11:15.860 
to really deal with the certificates, to solve the trust problem,

97
00:11:15.870 --> 00:11:23.440 
which consisted the legally binding or at least binding

98
00:11:25.200 --> 00:11:29.760 
link: the relation between the name of a user, the name of the

99
00:11:30.400 --> 00:11:33.940 
participant, and his/her public key.
