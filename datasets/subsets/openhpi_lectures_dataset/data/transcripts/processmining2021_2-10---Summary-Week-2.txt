WEBVTT

1
00:00:00.720 --> 00:00:03.731 
Welcome to this video clip in which we summarize week two.

2
00:00:06.260 --> 00:00:10.991 
The first topic that we have covered was the quality aspects in process mining.

3
00:00:11.150 --> 00:00:15.859 
So, we discovered three basic quality dimensions and we discussed

4
00:00:15.860 --> 00:00:18.574 
fitness: does the model cover the traces from the event log?

5
00:00:19.670 --> 00:00:23.002 
We discussed precision: does the model allow for traces that are not

6
00:00:24.170 --> 00:00:25.170 
included in the event log?

7
00:00:26.120 --> 00:00:30.769 
And we discussed simplicity: does the model represent the event log as simple

8
00:00:30.770 --> 00:00:35.000 
as possible? This entire discussion we based on

9
00:00:35.300 --> 00:00:39.890 
the notion of underfeeding-overfitting, we showed a number of examples to

10
00:00:40.130 --> 00:00:44.659 
illustrate this. So, what we have shown is that this very

11
00:00:44.840 --> 00:00:49.369 
strict fragment of a sequence where the order is very strictly

12
00:00:49.370 --> 00:00:53.486 
defined, we can only execute these three activities in this very order, is a typical

13
00:00:53.930 --> 00:00:58.459 
example of overfitting, where we are too strict and the

14
00:00:58.460 --> 00:01:02.135 
fitness suffers, meaning that a lot of the traces from the small log cannot

15
00:01:03.230 --> 00:01:04.230 
be replayed.

16
00:01:05.150 --> 00:01:08.874 
It's positive with respect to precision because this fragment does not allow

17
00:01:09.650 --> 00:01:14.540 
for more but it's way too strict to properly represent this

18
00:01:14.840 --> 00:01:17.569 
small event log that we have using our example.

19
00:01:18.770 --> 00:01:23.131 
The other extreme we discussed was the notion of, in the Talk process, we used the notion

20
00:01:23.150 --> 00:01:27.739 
of in Talk process to illustrate that there is the possibility to execute these

21
00:01:27.740 --> 00:01:32.586 
three activities in any given order, providing us with a lot of flexibility

22
00:01:33.860 --> 00:01:37.535 
and from the perspective of fitness, that is positive because we can replay

23
00:01:38.450 --> 00:01:41.509 
all these different races in this fragment.

24
00:01:41.660 --> 00:01:46.519 
And what we cannot do, however, is what we do not have is an accurate

25
00:01:47.330 --> 00:01:51.860 
representation from a precision perspective, because this model fragment does allow for

26
00:01:51.890 --> 00:01:56.319 
many more traces that are actually not included in this event log.

27
00:01:56.720 --> 00:02:01.370 
And so this is would be a typical example of underfeeding.

28
00:02:01.670 --> 00:02:04.549 
So, it's not specific enough for our luck.

29
00:02:05.030 --> 00:02:08.509 
And so we try to use these notions and the notion of simplicity on top,

30
00:02:09.620 --> 00:02:13.197 
which then relates to the model only telling us is the model that we have

31
00:02:14.150 --> 00:02:17.150 
chosen, let's say the fitness and the precision are good.

32
00:02:17.300 --> 00:02:20.839 
Is this model also a good representation from a structural perspective?

33
00:02:20.840 --> 00:02:25.369 
Is it simple enough or can we represent this model in a better fashion?

34
00:02:26.300 --> 00:02:31.009 
So, these three metrics we have introduced and have used to assess

35
00:02:31.760 --> 00:02:36.259 
a discovered model and have introduced them, so to say, as a

36
00:02:36.260 --> 00:02:41.089 
means to assess discovery algorithms or the output of discovery

37
00:02:41.090 --> 00:02:42.090 
algorithms.

38
00:02:43.880 --> 00:02:47.653 
The second topic we discussed was the topic of conformance, checking where we

39
00:02:48.620 --> 00:02:53.300 
discussed how the comparison of log and model trace's allow us to automatically

40
00:02:53.600 --> 00:02:55.496 
detect so-called violation patterns.

41
00:02:56.300 --> 00:03:00.461 
We have shown that we have to compare event log and model traces,

42
00:03:00.920 --> 00:03:05.270 
and it is actually quite challenging first, because we need to find a

43
00:03:05.420 --> 00:03:09.565 
model trace that is close enough or that is close toour event log trace,

44
00:03:11.090 --> 00:03:14.959 
which is challenging because many models allow for an infinite number of traces and then

45
00:03:14.960 --> 00:03:18.782 
we have shown that this notion of an alignment where we directly compare these

46
00:03:19.520 --> 00:03:23.389 
two traces and identify these problems here,

47
00:03:24.320 --> 00:03:26.868 
how this then helps us to detect violation patterns.

48
00:03:27.840 --> 00:03:32.419 
We have illustrated that these two problems here then relate

49
00:03:32.480 --> 00:03:36.610 
to the wrong order, so there's a switch, as we've discussed it earlier.

50
00:03:37.100 --> 00:03:41.059 
So, here the decision on the claim was taken before the claim was received.

51
00:03:41.390 --> 00:03:46.099 
And this, of course, was not the way we intended the process to be executed.

52
00:03:46.610 --> 00:03:51.289 
And here the second problem relates to a skip, where the approval

53
00:03:51.350 --> 00:03:55.580 
was simply not sent, although we expected this to be sent according

54
00:03:55.790 --> 00:03:56.790 
to the model.

55
00:03:58.490 --> 00:04:01.729 
The third topic we covered was decision mining.

56
00:04:01.740 --> 00:04:05.839 
So, here we highlighted the importance of also considering data

57
00:04:06.230 --> 00:04:09.619 
and decisions besides the control flow perspective.

58
00:04:09.780 --> 00:04:14.240 
So, we've strongly focused on general process mining, strongly focusing on

59
00:04:14.540 --> 00:04:18.411 
control flow. So, the order of activities and we have motivated and illustrated

60
00:04:19.519 --> 00:04:24.139 
that there are additional perspectives that we should take into account and

61
00:04:24.140 --> 00:04:28.207 
we have shown that decision mining allows us to, on the one hand, complement models

62
00:04:28.850 --> 00:04:30.859 
with decision logic during discovery.

63
00:04:31.370 --> 00:04:35.929 
So, if we realize that this is the way how decisions are being taken or process,

64
00:04:35.930 --> 00:04:40.380 
we can use this and enhance a discovered process model with

65
00:04:40.400 --> 00:04:42.489 
respective labels, for instance, in this case.

66
00:04:43.250 --> 00:04:47.779 
And second, we can also use such a discovered decision model or decision

67
00:04:47.780 --> 00:04:52.339 
tree to use the technically correct term, to check whether decisions are

68
00:04:52.340 --> 00:04:54.888 
taken according to existing policies and guidelines.

69
00:04:55.110 --> 00:04:59.540 
So, we can also use these models in the context of conformance checking.

70
00:05:01.670 --> 00:05:04.190 
The fourth topic we discussed was time prediction.

71
00:05:04.220 --> 00:05:07.846 
So, we showed how to predict the remaining runtime of traces based on data

72
00:05:08.990 --> 00:05:13.519 
we collected about completed traces and we discussed

73
00:05:13.520 --> 00:05:15.790 
the importance of suitable state abstractions.

74
00:05:15.850 --> 00:05:19.926 
We have shown that a very strict notion of the state abstractions,

75
00:05:20.390 --> 00:05:23.526 
built in prefixes and then insist that we assign the very prefix

76
00:05:25.040 --> 00:05:29.107 
of this incomplete trace on our log. It can be somewhat inflexible because we might

77
00:05:29.660 --> 00:05:31.771 
not be able to make a prediction after all.

78
00:05:32.930 --> 00:05:37.399 
We have shown how this set-based representation of

79
00:05:37.400 --> 00:05:41.899 
states allows us to come up with a more flexible approach and we have shown

80
00:05:42.830 --> 00:05:47.439 
how to represent, so to say, a given event like using these set

81
00:05:47.470 --> 00:05:52.339 
based states. And once we have annotated this representation

82
00:05:52.580 --> 00:05:57.559 
that you see here, we can then use it for prediction by simply identifying

83
00:05:57.560 --> 00:06:02.220 
to which state a given incomplete trace belongs.

84
00:06:02.240 --> 00:06:05.694 
So, we have discussed this prefix here, this trace blongs to

85
00:06:07.580 --> 00:06:11.779 
this state, that this trace refers to this state and that

86
00:06:12.080 --> 00:06:15.800 
both of these traces refer to this state.

87
00:06:16.160 --> 00:06:20.839 
Yeah. So that, again, illustrates or highlights the importance

88
00:06:20.840 --> 00:06:25.370 
of this base abstraction here, because we can at least

89
00:06:26.360 --> 00:06:30.410 
abstract from the specific order in which activities occured

90
00:06:31.400 --> 00:06:33.829 
in the context of an end split, for instance.

91
00:06:35.610 --> 00:06:40.059 
Then we have also discussed practical aspects we have looked into two,

92
00:06:40.450 --> 00:06:43.040 
well we have looked at it from two perspectives.

93
00:06:43.050 --> 00:06:47.429 
We have discussed manual and also automated conformal

94
00:06:47.470 --> 00:06:52.259 
checking. We have discussed that especially the manual process

95
00:06:52.260 --> 00:06:55.919 
of conformal checking comes with a number of challenges.

96
00:06:55.920 --> 00:06:59.154 
So on the one hand, we have to know how the intended process looks

97
00:07:00.690 --> 00:07:04.610 
like. We have to keep that in mind all the time because all we see so to say the

98
00:07:04.770 --> 00:07:09.189 
discovered model, and we can analyze this discovered model

99
00:07:09.210 --> 00:07:12.983 
with respect to violations. But we then really need to know how the blueprint

100
00:07:14.010 --> 00:07:15.779 
process model looks like.

101
00:07:17.350 --> 00:07:21.660 
And second, we have discussed that this is also challenging because

102
00:07:22.380 --> 00:07:25.418 
analyzing these tiny flaws that we observe in such a model and

103
00:07:26.910 --> 00:07:30.519 
interpreting these flaws correctly can be very, very challenging.

104
00:07:30.540 --> 00:07:34.920 
So to really detect violation patterns for such a model can be

105
00:07:35.100 --> 00:07:38.530 
very, very complicated. In the next clip, we then move to an automated

106
00:07:39.600 --> 00:07:43.961 
fashion, automated way of conformance checking where we do have a blueprint process model

107
00:07:43.980 --> 00:07:47.850 
that we use as a basis. And we have shown that this, of course,

108
00:07:49.050 --> 00:07:53.730 
makes the process much easier because we immediately get feedback on

109
00:07:54.360 --> 00:07:58.427 
different violation patterns. So here we see a screenshot from the output that LANA

110
00:07:59.130 --> 00:08:03.779 
would provide. So, we see here that certain activities have been skipped and

111
00:08:03.780 --> 00:08:07.769 
by clicking on that, you can also obtain further information on the details of these

112
00:08:07.770 --> 00:08:11.999 
violation patterns. And here we see that there has been a switch or

113
00:08:12.240 --> 00:08:16.830 
the wrong order and these red lines then also indicate that

114
00:08:16.860 --> 00:08:21.149 
there are that there are flaws that we haven't anticipated in the models.

115
00:08:21.150 --> 00:08:26.160 
So, we can very nicely get an overview of the violation patterns

116
00:08:26.190 --> 00:08:27.870 
that have been detected.

117
00:08:30.060 --> 00:08:34.649 
If you're interested in further reading in material, we would like to point

118
00:08:34.650 --> 00:08:38.609 
you to two things. So the first is a book, so we have already

119
00:08:39.480 --> 00:08:42.665 
discussed different books and we have also pointed you to another

120
00:08:44.190 --> 00:08:45.190 
MOOC already.

121
00:08:46.650 --> 00:08:50.722 
So, this book here provides detailed and technical perspective on conformance

122
00:08:51.120 --> 00:08:54.256 
checking and this is if you're interested in it, particularly in

123
00:08:55.560 --> 00:09:00.210 
the technical details, this is something that we recommend you to have a look at.

124
00:09:00.810 --> 00:09:05.610 
And second, we would like to point you to the IEEE task force on process mining,

125
00:09:05.760 --> 00:09:10.409 
which is a community effort and there what you can see and find

126
00:09:10.410 --> 00:09:13.399 
on the website are a lot of events, resources and use related

127
00:09:15.210 --> 00:09:19.650 
process mining that provide you with further information and further

128
00:09:19.800 --> 00:09:21.169 
pointers as well.

129
00:09:23.230 --> 00:09:27.579 
With this, I would like to thank you very much for joining.

130
00:09:27.640 --> 00:09:30.335 
We hope that you enjoyed this course and we hope to see

131
00:09:32.080 --> 00:09:32.709 
you next time.
