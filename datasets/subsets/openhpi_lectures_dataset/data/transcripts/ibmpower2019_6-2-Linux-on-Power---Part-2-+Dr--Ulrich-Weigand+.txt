WEBVTT

1
00:00:00.870 --> 00:00:02.189 
This is part of the Future of

2
00:00:02.190 --> 00:00:03.599 
Computing - POWER9 and beyond

3
00:00:03.600 --> 00:00:04.409 
lecture series.

4
00:00:04.410 --> 00:00:05.969 
My name is Ulrich Weigand and I will

5
00:00:05.970 --> 00:00:07.979 
be talking on Linux and POWER.

6
00:00:07.980 --> 00:00:09.643 
And this is the second part where

7
00:00:09.644 --> 00:00:10.859 
I'll be talking about software

8
00:00:10.860 --> 00:00:13.169 
development for Linux on POWER,

9
00:00:13.170 --> 00:00:15.209 
including the standard Linux tools

10
00:00:15.210 --> 00:00:16.289 
that are provided with the

11
00:00:16.290 --> 00:00:18.479 
distributions, but also additional

12
00:00:18.480 --> 00:00:19.619 
languages, environments that are

13
00:00:19.620 --> 00:00:21.569 
available and also

14
00:00:21.570 --> 00:00:24.749 
tools and additional material

15
00:00:24.750 --> 00:00:26.939 
that IBM provides

16
00:00:26.940 --> 00:00:29.109 
to help software development.

17
00:00:29.110 --> 00:00:31.499 
And I'll finish with

18
00:00:31.500 --> 00:00:32.548 
an example of

19
00:00:33.560 --> 00:00:35.449 
a large porting project that we

20
00:00:35.450 --> 00:00:36.450 
did a few years ago.

21
00:00:38.300 --> 00:00:40.249 
Now, first of all,

22
00:00:40.250 --> 00:00:43.249 
as mentioned in the first part,

23
00:00:43.250 --> 00:00:45.259 
the underlying philosophy

24
00:00:45.260 --> 00:00:46.699 
we try to follow is the Linux is

25
00:00:46.700 --> 00:00:48.019 
Linux and, Linux and POWER should

26
00:00:48.020 --> 00:00:49.879 
look and feel just like Linux and

27
00:00:49.880 --> 00:00:52.129 
Intel does. And this applies also

28
00:00:52.130 --> 00:00:53.989 
to the software development

29
00:00:53.990 --> 00:00:55.520 
process, of course, to the

30
00:00:56.690 --> 00:00:58.339 
extent that is possible.

31
00:00:58.340 --> 00:01:00.529 
And therefore, all

32
00:01:00.530 --> 00:01:03.049 
the software development tools

33
00:01:03.050 --> 00:01:05.009 
that you are familiar with, Linux

34
00:01:05.010 --> 00:01:06.349 
and Intel ideally should be

35
00:01:06.350 --> 00:01:08.209 
available on Linux and POWER

36
00:01:08.210 --> 00:01:09.409 
just the same.

37
00:01:09.410 --> 00:01:11.359 
And obviously,

38
00:01:11.360 --> 00:01:13.219 
this includes the

39
00:01:13.220 --> 00:01:15.199 
traditional compiled languages

40
00:01:15.200 --> 00:01:16.200 
that are available.

41
00:01:17.460 --> 00:01:19.309 
With the new compiler collection,

42
00:01:19.310 --> 00:01:21.259 
including C, C++, Fortran,

43
00:01:21.260 --> 00:01:23.389 
Ada and a few other languages.

44
00:01:23.390 --> 00:01:25.669 
All of that is fully supported

45
00:01:25.670 --> 00:01:27.979 
on POWER where

46
00:01:27.980 --> 00:01:30.349 
we work as part of the respective

47
00:01:30.350 --> 00:01:32.269 
open source community to provide

48
00:01:32.270 --> 00:01:34.429 
the necessary support directly in

49
00:01:34.430 --> 00:01:36.229 
the upstream project.

50
00:01:36.230 --> 00:01:38.449 
And it's also available as part of

51
00:01:38.450 --> 00:01:41.239 
all Linux distributions.

52
00:01:41.240 --> 00:01:43.189 
In addition to the

53
00:01:43.190 --> 00:01:45.509 
traditional compiler GCC,

54
00:01:45.510 --> 00:01:47.659 
we now also support a

55
00:01:47.660 --> 00:01:49.699 
new compiler, LLVM,

56
00:01:49.700 --> 00:01:52.159 
which is also supporting

57
00:01:52.160 --> 00:01:54.109 
C and C++, but

58
00:01:54.110 --> 00:01:56.209 
also has a number of

59
00:01:56.210 --> 00:01:58.069 
other features, like

60
00:01:58.070 --> 00:02:00.889 
a Just-In-Time compile capability

61
00:02:00.890 --> 00:02:03.019 
that is being more and more used

62
00:02:03.020 --> 00:02:05.209 
by applications and

63
00:02:05.210 --> 00:02:06.799 
is now also fully available and

64
00:02:06.800 --> 00:02:07.800 
support and POWER.

65
00:02:09.430 --> 00:02:11.109 
Now, next to those compiled

66
00:02:11.110 --> 00:02:13.089 
languages we

67
00:02:13.090 --> 00:02:15.049 
support interpreted

68
00:02:15.050 --> 00:02:17.109 
languages, including Just-In-Time

69
00:02:17.110 --> 00:02:19.149 
compilers, most notably

70
00:02:19.150 --> 00:02:20.672 
Java and dotNet.

71
00:02:20.673 --> 00:02:22.719 
For Java,

72
00:02:22.720 --> 00:02:23.889 
we actually have two

73
00:02:23.890 --> 00:02:25.959 
implementations, so there is

74
00:02:25.960 --> 00:02:28.149 
the open JDK, which is available

75
00:02:28.150 --> 00:02:30.279 
on many platforms,

76
00:02:30.280 --> 00:02:31.539 
which also supports POWER.

77
00:02:31.540 --> 00:02:33.429 
And we also have a JIT for

78
00:02:33.430 --> 00:02:34.479 
POWER now.

79
00:02:34.480 --> 00:02:36.699 
And in addition, we have also

80
00:02:36.700 --> 00:02:39.069 
for a long time provided our

81
00:02:39.070 --> 00:02:41.619 
own separate IBM JDK,

82
00:02:41.620 --> 00:02:43.299 
which is also available for Linux

83
00:02:43.300 --> 00:02:44.300 
and POWER.

84
00:02:44.590 --> 00:02:46.539 
Now for dotNet at this

85
00:02:46.540 --> 00:02:49.299 
point, we support

86
00:02:49.300 --> 00:02:51.192 
the Mono

87
00:02:51.193 --> 00:02:53.019 
project, which is also available on

88
00:02:53.020 --> 00:02:53.949 
POWER.

89
00:02:53.950 --> 00:02:54.950 
The new

90
00:02:56.560 --> 00:02:58.539 
open source dotNet project itself,

91
00:02:59.680 --> 00:03:00.680 
does not support POWER yet.

92
00:03:02.960 --> 00:03:04.519 
For a variety of scripting

93
00:03:04.520 --> 00:03:05.929 
languages, including Perl, Python,

94
00:03:05.930 --> 00:03:06.930 
Ruby,

95
00:03:07.820 --> 00:03:09.409 
there is usually no porting request

96
00:03:09.410 --> 00:03:11.389 
for user code and in fact, the tools

97
00:03:11.390 --> 00:03:13.459 
themselves also just run

98
00:03:13.460 --> 00:03:15.349 
as open source tools on POWER

99
00:03:15.350 --> 00:03:17.299 
with no specific

100
00:03:17.300 --> 00:03:18.300 
support required.

101
00:03:20.280 --> 00:03:21.809 
An interesting development over the

102
00:03:21.810 --> 00:03:23.939 
past few years has been

103
00:03:23.940 --> 00:03:25.859 
that a number

104
00:03:25.860 --> 00:03:27.989 
of new languages have become

105
00:03:27.990 --> 00:03:30.359 
popular, which

106
00:03:30.360 --> 00:03:32.999 
didn't exist, say, 10 years ago.

107
00:03:33.000 --> 00:03:35.189 
These include things like

108
00:03:35.190 --> 00:03:37.319 
Node.js for web

109
00:03:37.320 --> 00:03:39.329 
server development and

110
00:03:39.330 --> 00:03:41.279 
the V8 JavaScript engine

111
00:03:41.280 --> 00:03:43.439 
in general, but

112
00:03:43.440 --> 00:03:45.569 
also includes

113
00:03:45.570 --> 00:03:47.429 
new compile languages,

114
00:03:47.430 --> 00:03:49.529 
including go, which is

115
00:03:49.530 --> 00:03:51.359 
championed by Google Swift,

116
00:03:51.360 --> 00:03:53.399 
which is championed by Apple and

117
00:03:53.400 --> 00:03:54.989 
rust which has been developed by

118
00:03:54.990 --> 00:03:57.282 
Mozilla and all of those

119
00:04:02.430 --> 00:04:04.529 
at this point, required

120
00:04:04.530 --> 00:04:05.699 
to build various

121
00:04:07.020 --> 00:04:08.759 
open source projects, for example,

122
00:04:08.760 --> 00:04:10.036 
Docker and Kubernetes are written in

123
00:04:10.037 --> 00:04:12.599 
go and to build Mozilla Firefox,

124
00:04:12.600 --> 00:04:14.399 
you now need rust and that is

125
00:04:14.400 --> 00:04:16.559 
partially written in rust already.

126
00:04:16.560 --> 00:04:18.419 
And for this background, we

127
00:04:18.420 --> 00:04:19.949 
decided to support all these tools

128
00:04:19.950 --> 00:04:21.299 
and POWER as well.

129
00:04:21.300 --> 00:04:23.399 
And all of those

130
00:04:23.400 --> 00:04:25.829 
at this point are available either

131
00:04:25.830 --> 00:04:27.089 
via your Linux distribution or in

132
00:04:27.090 --> 00:04:29.399 
some cases, via the upstream

133
00:04:29.400 --> 00:04:30.839 
projects.

134
00:04:30.840 --> 00:04:33.209 
In addition to the compilers

135
00:04:33.210 --> 00:04:34.169 
part of software development

136
00:04:34.170 --> 00:04:36.419 
includes debugging tools

137
00:04:36.420 --> 00:04:37.679 
and integrated development

138
00:04:37.680 --> 00:04:39.569 
environments and again,

139
00:04:39.570 --> 00:04:41.489 
all the traditional Linux

140
00:04:41.490 --> 00:04:43.139 
development tools starting from the

141
00:04:43.140 --> 00:04:44.969 
GDB debugger through

142
00:04:44.970 --> 00:04:46.439 
the valgrind memory debugging tool,

143
00:04:46.440 --> 00:04:48.119 
performance tools like OProfile and

144
00:04:48.120 --> 00:04:49.830 
PERF all fully supported on POWER.

145
00:04:51.540 --> 00:04:53.484 
The same applies to the Eclipse IDE,

146
00:04:54.960 --> 00:04:56.939 
and in fact, in

147
00:04:56.940 --> 00:04:58.499 
addition to traditional Eclipse, we

148
00:04:58.500 --> 00:05:00.119 
also have some extensions available

149
00:05:00.120 --> 00:05:01.679 
as part of an IBM software

150
00:05:01.680 --> 00:05:03.329 
development kit, which I will be

151
00:05:04.410 --> 00:05:06.470 
talking about in a minute.

152
00:05:08.560 --> 00:05:10.509 
Now, in addition to all those

153
00:05:10.510 --> 00:05:11.979 
standard tools that are just

154
00:05:11.980 --> 00:05:13.689 
available on Linux and POWER, just

155
00:05:13.690 --> 00:05:15.759 
like they are on other platforms,

156
00:05:15.760 --> 00:05:17.859 
there are also a number of resources

157
00:05:17.860 --> 00:05:19.119 
that IBM makes available to

158
00:05:19.120 --> 00:05:20.949 
specifically help

159
00:05:20.950 --> 00:05:22.989 
software development on POWER.

160
00:05:22.990 --> 00:05:24.819 
And all of these

161
00:05:24.820 --> 00:05:27.149 
are bundled on a

162
00:05:27.150 --> 00:05:28.179 
Linux on POWER Developer Portal

163
00:05:28.180 --> 00:05:30.129 
which is available on the URL listed

164
00:05:30.130 --> 00:05:32.259 
on this chart, which is

165
00:05:32.260 --> 00:05:34.479 
sort of just a starting point

166
00:05:34.480 --> 00:05:36.519 
that bundles all

167
00:05:36.520 --> 00:05:37.659 
these resources and makes them

168
00:05:37.660 --> 00:05:38.660 
available.

169
00:05:39.790 --> 00:05:42.099 
Just pointing out

170
00:05:42.100 --> 00:05:44.101 
a few of those,

171
00:05:45.280 --> 00:05:47.199 
there's a open

172
00:05:47.200 --> 00:05:49.089 
source POWER availability tool,

173
00:05:49.090 --> 00:05:51.039 
which is simply a collection of

174
00:05:51.040 --> 00:05:53.109 
information that we already have

175
00:05:53.110 --> 00:05:55.089 
about software that is already

176
00:05:55.090 --> 00:05:56.919 
available. So if you have a

177
00:05:56.920 --> 00:05:57.729 
software product and you're

178
00:05:57.730 --> 00:05:59.149 
wondering whether it is available on

179
00:05:59.150 --> 00:06:00.729 
Linux and POWER, you may want to

180
00:06:00.730 --> 00:06:01.730 
check that, too.

181
00:06:03.070 --> 00:06:05.109 
There's a porting guide which helps

182
00:06:05.110 --> 00:06:07.009 
you port your own application to

183
00:06:07.010 --> 00:06:08.010 
Linux and POWER.

184
00:06:08.740 --> 00:06:10.719 
There is a cloud enablement

185
00:06:10.720 --> 00:06:12.219 
guide which helps you make your

186
00:06:12.220 --> 00:06:14.079 
software available on

187
00:06:15.130 --> 00:06:16.420 
the IBM cloud and on the

188
00:06:18.280 --> 00:06:19.569 
private cloud implementation.

189
00:06:21.280 --> 00:06:23.679 
There are various performance

190
00:06:23.680 --> 00:06:25.539 
related materials that help

191
00:06:25.540 --> 00:06:27.669 
you tune your software to make

192
00:06:27.670 --> 00:06:29.649 
the best use of

193
00:06:31.110 --> 00:06:32.110 
the POWER hardware.

194
00:06:33.730 --> 00:06:35.499 
And if you don't have access to

195
00:06:35.500 --> 00:06:36.729 
POWER hardware yourself,

196
00:06:37.750 --> 00:06:40.269 
we make cloud resources available

197
00:06:40.270 --> 00:06:42.099 
that will

198
00:06:42.100 --> 00:06:44.139 
allow you to access a

199
00:06:44.140 --> 00:06:46.029 
POWER virtual machine

200
00:06:46.030 --> 00:06:47.030 
in the cloud.

201
00:06:48.220 --> 00:06:49.929 
And the intent is, for example, to

202
00:06:49.930 --> 00:06:51.999 
allow you to port your own open

203
00:06:52.000 --> 00:06:53.851 
source application to POWER.

204
00:06:57.750 --> 00:06:59.279 
Now, one of the tools that we make

205
00:06:59.280 --> 00:07:00.509 
available specifically

206
00:07:01.530 --> 00:07:03.359 
from IBM is

207
00:07:03.360 --> 00:07:04.792 
the Advanced Toolchain for Linux on

208
00:07:04.793 --> 00:07:06.809 
POWER. Now,

209
00:07:06.810 --> 00:07:08.399 
this is made available by IBM, but

210
00:07:08.400 --> 00:07:10.349 
it's still just open source code.

211
00:07:10.350 --> 00:07:12.599 
It is a build of

212
00:07:12.600 --> 00:07:14.899 
a collection of the standard

213
00:07:16.140 --> 00:07:16.979 
GNU software development tools,

214
00:07:16.980 --> 00:07:19.049 
including the new compiler library,

215
00:07:19.050 --> 00:07:21.899 
binutils, the debugger

216
00:07:21.900 --> 00:07:23.009 
and various other tools and

217
00:07:23.010 --> 00:07:24.159 
libraries.

218
00:07:24.160 --> 00:07:26.159 
Those are all based on

219
00:07:26.160 --> 00:07:27.659 
recent upstream versions of the

220
00:07:27.660 --> 00:07:28.619 
project.

221
00:07:28.620 --> 00:07:29.620 
They're just

222
00:07:31.360 --> 00:07:33.369 
very recent versions of them, and

223
00:07:33.370 --> 00:07:35.259 
the intent is if you're running

224
00:07:35.260 --> 00:07:37.119 
a Linux distribution, it

225
00:07:37.120 --> 00:07:39.025 
may bring well, a Linux

226
00:07:39.026 --> 00:07:39.879 
distribution will bring you to see

227
00:07:39.880 --> 00:07:41.469 
with it, but it may be a version

228
00:07:41.470 --> 00:07:43.119 
that a couple of years old.

229
00:07:43.120 --> 00:07:45.129 
If you want to exploit

230
00:07:45.130 --> 00:07:46.359 
the latest and greatest features

231
00:07:46.360 --> 00:07:47.717 
like support for the POWER9

232
00:07:47.718 --> 00:07:49.269 
processor, that may not be available

233
00:07:49.270 --> 00:07:51.219 
there yet and not a bridge that

234
00:07:51.220 --> 00:07:53.199 
gap will allow you to get

235
00:07:53.200 --> 00:07:55.119 
this pre-built set of

236
00:07:55.120 --> 00:07:57.849 
binaries installed

237
00:07:57.850 --> 00:07:59.199 
in addition to the tools that the

238
00:07:59.200 --> 00:08:01.149 
industry provides so that you can

239
00:08:01.150 --> 00:08:02.709 
make use of the latest and greatest

240
00:08:02.710 --> 00:08:04.269 
features without having to wait for

241
00:08:04.270 --> 00:08:05.274 
the next release of the distro.

242
00:08:08.050 --> 00:08:10.179 
Another set of tools we provide is

243
00:08:10.180 --> 00:08:12.159 
the IBM SDK, which is an

244
00:08:12.160 --> 00:08:13.299 
Eclipse based

245
00:08:14.800 --> 00:08:16.809 
IDE which

246
00:08:16.810 --> 00:08:17.949 
you can run on your POWER machine

247
00:08:17.950 --> 00:08:19.539 
directly, but which you can also run

248
00:08:19.540 --> 00:08:21.609 
on your Intel machine in order to to

249
00:08:21.610 --> 00:08:23.589 
cross development targeting a POWER

250
00:08:23.590 --> 00:08:24.579 
machine.

251
00:08:24.580 --> 00:08:26.049 
It integrates with all the classic

252
00:08:26.050 --> 00:08:28.059 
Linux tools, also integrates

253
00:08:28.060 --> 00:08:29.060 
with the Advanced Toolchain,

254
00:08:29.950 --> 00:08:32.439 
and has a number of features

255
00:08:32.440 --> 00:08:34.658 
on our list, just

256
00:08:34.659 --> 00:08:35.659 
a few of them.

257
00:08:36.640 --> 00:08:37.640 
Now,

258
00:08:38.740 --> 00:08:40.689 
one interesting tool is

259
00:08:40.690 --> 00:08:42.609 
the Migration Advisor,

260
00:08:42.610 --> 00:08:44.529 
which is a tool that scans

261
00:08:44.530 --> 00:08:46.359 
your software at the source

262
00:08:46.360 --> 00:08:49.869 
code level and tries to identify

263
00:08:49.870 --> 00:08:51.249 
a number of

264
00:08:52.450 --> 00:08:54.339 
places which we know from

265
00:08:54.340 --> 00:08:56.349 
experience are things that cause

266
00:08:56.350 --> 00:08:58.238 
issues when you try to port your

267
00:08:58.239 --> 00:09:00.009 
software to learn some POWER and

268
00:09:00.010 --> 00:09:01.959 
just one example that's listed here.

269
00:09:01.960 --> 00:09:04.329 
And we find here an example where

270
00:09:04.330 --> 00:09:05.969 
the source code uses an

271
00:09:07.310 --> 00:09:09.139 
intrinsic, a built in

272
00:09:09.140 --> 00:09:11.899 
function that

273
00:09:11.900 --> 00:09:13.909 
directly resolves to an Intel

274
00:09:13.910 --> 00:09:15.469 
vector instruction, which is of

275
00:09:15.470 --> 00:09:16.939 
course not available on POWER

276
00:09:16.940 --> 00:09:18.439 
because Intel specific instructions

277
00:09:18.440 --> 00:09:20.539 
or if your code uses

278
00:09:20.540 --> 00:09:22.399 
intrinsics like that, you will have

279
00:09:22.400 --> 00:09:24.529 
to write that code to use

280
00:09:24.530 --> 00:09:27.079 
something equivalent on POWER.

281
00:09:27.080 --> 00:09:28.939 
And the point

282
00:09:28.940 --> 00:09:30.679 
of the migration adviser is to try

283
00:09:30.680 --> 00:09:32.179 
to if you have a large source code

284
00:09:32.180 --> 00:09:34.729 
base to quickly identify

285
00:09:34.730 --> 00:09:36.559 
some of those places that

286
00:09:36.560 --> 00:09:37.609 
may need changes.

287
00:09:37.610 --> 00:09:38.610 
Now,

288
00:09:39.550 --> 00:09:40.929 
tools isn't perfect, will not find

289
00:09:40.930 --> 00:09:43.119 
every place, but

290
00:09:43.120 --> 00:09:44.470 
it has a number of

291
00:09:45.700 --> 00:09:48.099 
typical pitfalls

292
00:09:48.100 --> 00:09:49.299 
that we know from experience are

293
00:09:49.300 --> 00:09:50.409 
things that you should be looking

294
00:09:50.410 --> 00:09:51.410 
into.

295
00:09:53.060 --> 00:09:55.159 
Now, once you have got

296
00:09:55.160 --> 00:09:57.019 
your application, ported,

297
00:09:57.020 --> 00:09:58.609 
you might want to execute it in the

298
00:09:58.610 --> 00:09:59.704 
POWER machine. If you have a POWER

299
00:09:59.705 --> 00:10:01.909 
machine available either locally or

300
00:10:01.910 --> 00:10:03.799 
in the cloud, you can just

301
00:10:03.800 --> 00:10:05.089 
execute there, if you have neither

302
00:10:05.090 --> 00:10:07.117 
of them available, the

303
00:10:10.310 --> 00:10:12.949 
SDK also integrates with

304
00:10:12.950 --> 00:10:14.299 
emulated solutions, including both

305
00:10:14.300 --> 00:10:16.249 
the open source QEMU emulation

306
00:10:16.250 --> 00:10:18.889 
and also an IBM simulator

307
00:10:18.890 --> 00:10:21.289 
that allows you to simulate

308
00:10:21.290 --> 00:10:23.269 
or to execute your POWER

309
00:10:23.270 --> 00:10:25.699 
binary on a simulated

310
00:10:25.700 --> 00:10:26.700 
machine.

311
00:10:28.130 --> 00:10:30.169 
Once you have it running and

312
00:10:30.170 --> 00:10:31.849 
have it tested, the next step would

313
00:10:31.850 --> 00:10:34.039 
be to do performance analysis.

314
00:10:34.040 --> 00:10:35.899 
The SDK can help you with

315
00:10:35.900 --> 00:10:37.249 
that as well.

316
00:10:37.250 --> 00:10:39.059 
Again, there is a Source Code

317
00:10:39.060 --> 00:10:41.149 
Advisor tool which combines

318
00:10:41.150 --> 00:10:43.069 
looking at performance

319
00:10:43.070 --> 00:10:44.569 
results that you can collect, like,

320
00:10:44.570 --> 00:10:46.819 
for example, with the perf tool

321
00:10:46.820 --> 00:10:48.709 
and mirror run back to the

322
00:10:48.710 --> 00:10:50.609 
source. And then, just like with

323
00:10:50.610 --> 00:10:52.102 
the Migration Advisor, the Source

324
00:10:52.103 --> 00:10:54.319 
Code Advisor has knowledge

325
00:10:54.320 --> 00:10:56.629 
about potential

326
00:10:56.630 --> 00:10:58.639 
reasons for the software,

327
00:10:58.640 --> 00:11:00.619 
for the performance behavior.

328
00:11:00.620 --> 00:11:02.209 
You may see with a software like in

329
00:11:02.210 --> 00:11:03.210 
the example here,

330
00:11:04.400 --> 00:11:06.649 
the perfect output has indicated

331
00:11:06.650 --> 00:11:08.539 
a hotspot in this particular line.

332
00:11:08.540 --> 00:11:10.079 
And the Source Code Advisor will

333
00:11:10.080 --> 00:11:12.679 
recognize, oh, it's a call to a very

334
00:11:12.680 --> 00:11:14.599 
short function

335
00:11:14.600 --> 00:11:15.709 
in this case.

336
00:11:15.710 --> 00:11:17.299 
One of the issues you may be seeing

337
00:11:17.300 --> 00:11:19.939 
is the

338
00:11:19.940 --> 00:11:21.199 
function called overhead, which is a

339
00:11:21.200 --> 00:11:23.329 
little bit larger on

340
00:11:23.330 --> 00:11:24.859 
POWER than Intel because of changes

341
00:11:24.860 --> 00:11:25.699 
in the instruction set.

342
00:11:25.700 --> 00:11:27.559 
And the ABI and

343
00:11:27.560 --> 00:11:28.639 
the Source Code Advisor can

344
00:11:28.640 --> 00:11:30.469 
recommend solutions like marking

345
00:11:30.470 --> 00:11:32.359 
the function as

346
00:11:32.360 --> 00:11:34.399 
in line to avoid that overhead.

347
00:11:36.860 --> 00:11:39.199 
Going more to the big picture,

348
00:11:39.200 --> 00:11:41.299 
the CPI breakdown again

349
00:11:41.300 --> 00:11:43.399 
makes use of information

350
00:11:43.400 --> 00:11:45.799 
provided by PERF,

351
00:11:45.800 --> 00:11:47.749 
which is collecting

352
00:11:47.750 --> 00:11:49.249 
hardware counters that the POWER

353
00:11:49.250 --> 00:11:50.360 
processes provide.

354
00:11:51.530 --> 00:11:53.779 
Now, this will help you identify

355
00:11:53.780 --> 00:11:55.789 
places where

356
00:11:55.790 --> 00:11:57.859 
the processor is stalled,

357
00:11:57.860 --> 00:11:59.929 
for example, on waiting on a memory

358
00:11:59.930 --> 00:12:01.999 
access or

359
00:12:02.000 --> 00:12:03.072 
on a branch mispredict.

360
00:12:04.190 --> 00:12:06.289 
And this can give you a big picture

361
00:12:06.290 --> 00:12:08.619 
overview of sort of what

362
00:12:08.620 --> 00:12:10.869 
percentage of the time

363
00:12:10.870 --> 00:12:13.029 
your application is

364
00:12:13.030 --> 00:12:14.799 
spending, doing real work and watch

365
00:12:14.800 --> 00:12:16.659 
application and what percentage

366
00:12:16.660 --> 00:12:18.039 
of the time the application is sort

367
00:12:18.040 --> 00:12:20.659 
of just busy writing,

368
00:12:20.660 --> 00:12:22.669 
and if the letter percent is too

369
00:12:22.670 --> 00:12:24.679 
high, you want to try

370
00:12:24.680 --> 00:12:26.539 
to tune the application

371
00:12:26.540 --> 00:12:28.399 
to a avoid that and as part

372
00:12:28.400 --> 00:12:30.409 
of it, again, you

373
00:12:30.410 --> 00:12:33.169 
can drill down even further

374
00:12:33.170 --> 00:12:35.239 
on the identified hot spots

375
00:12:35.240 --> 00:12:37.459 
and how the performance advisor

376
00:12:37.460 --> 00:12:40.069 
also look at these counters

377
00:12:40.070 --> 00:12:41.809 
and identify things like

378
00:12:41.810 --> 00:12:43.909 
specifically where

379
00:12:43.910 --> 00:12:45.439 
you may hitting into branch,

380
00:12:45.440 --> 00:12:47.659 
mispredict or where

381
00:12:47.660 --> 00:12:49.824 
you may run into cache

382
00:12:49.825 --> 00:12:51.799 
problems and identify

383
00:12:51.800 --> 00:12:54.049 
these places so you can

384
00:12:54.050 --> 00:12:55.490 
work on your code to improve that.

385
00:12:59.690 --> 00:13:01.159 
As a general overview, whether you

386
00:13:01.160 --> 00:13:02.383 
use the SDK or not,

387
00:13:06.230 --> 00:13:08.089 
most porting projects

388
00:13:08.090 --> 00:13:09.929 
for a similar approach

389
00:13:09.930 --> 00:13:11.569 
and again, this list just sort of

390
00:13:11.570 --> 00:13:12.570 
main points.

391
00:13:14.420 --> 00:13:16.249 
First of all, you want to make sure

392
00:13:16.250 --> 00:13:18.289 
that the built system works on

393
00:13:18.290 --> 00:13:19.129 
your platform.

394
00:13:19.130 --> 00:13:20.697 
If you're porting from Linux on

395
00:13:20.698 --> 00:13:21.559 
Intel, Intel to Linux on POWER, this

396
00:13:21.560 --> 00:13:22.819 
will usually always be the case

397
00:13:22.820 --> 00:13:24.319 
because both systems are the same.

398
00:13:24.320 --> 00:13:25.999 
But if you reporting from AIX or

399
00:13:26.000 --> 00:13:27.739 
some other operating system, that

400
00:13:27.740 --> 00:13:28.789 
may not be true.

401
00:13:28.790 --> 00:13:30.199 
So you may want to migrate, for

402
00:13:30.200 --> 00:13:31.879 
example, to make or some other tool

403
00:13:31.880 --> 00:13:32.960 
that's available on Linux.

404
00:13:34.500 --> 00:13:36.439 
Once you have the building, you

405
00:13:36.440 --> 00:13:37.969 
may run into compiler choose, for

406
00:13:37.970 --> 00:13:40.039 
example, if your code

407
00:13:40.040 --> 00:13:41.359 
includes architecture dependent

408
00:13:41.360 --> 00:13:42.360 
features,

409
00:13:43.250 --> 00:13:45.019 
including the ones like that were

410
00:13:45.020 --> 00:13:47.119 
identified by the migration

411
00:13:47.120 --> 00:13:49.039 
advisor I mentioned earlier

412
00:13:49.040 --> 00:13:50.040 
on.

413
00:13:52.140 --> 00:13:54.299 
When you change your code

414
00:13:54.300 --> 00:13:56.129 
and fix

415
00:13:56.130 --> 00:13:58.139 
all those places, you

416
00:13:58.140 --> 00:14:00.069 
can build it again,

417
00:14:00.070 --> 00:14:01.529 
there may need to be some changes to

418
00:14:01.530 --> 00:14:02.519 
command and options like, for

419
00:14:02.520 --> 00:14:03.637 
example, selecting the correct CPU

420
00:14:03.638 --> 00:14:04.638 
setting

421
00:14:07.530 --> 00:14:09.479 
if you want to target a particular

422
00:14:09.480 --> 00:14:10.480 
POWER CPU, like the POWER9.

423
00:14:11.790 --> 00:14:13.619 
Once you've had built, you will

424
00:14:13.620 --> 00:14:15.749 
want to test and

425
00:14:15.750 --> 00:14:17.699 
troubleshoot the application,

426
00:14:17.700 --> 00:14:19.619 
either ideally on a

427
00:14:19.620 --> 00:14:21.089 
native system and the cloud or on

428
00:14:21.090 --> 00:14:22.090 
the simulator.

429
00:14:23.020 --> 00:14:24.989 
And once it's built

430
00:14:24.990 --> 00:14:26.849 
and tested and functional, the last

431
00:14:26.850 --> 00:14:28.899 
step usually is to tune

432
00:14:28.900 --> 00:14:30.869 
the performance using

433
00:14:30.870 --> 00:14:32.639 
either the Linux standard tools or

434
00:14:32.640 --> 00:14:34.499 
tools available with

435
00:14:34.500 --> 00:14:35.500 
the SDK.

436
00:14:39.640 --> 00:14:41.709 
Going a little bit more deeper

437
00:14:41.710 --> 00:14:44.169 
in some of the reasons

438
00:14:44.170 --> 00:14:46.225 
where you could run into issues

439
00:14:47.230 --> 00:14:49.059 
that you may not directly notice at

440
00:14:49.060 --> 00:14:51.459 
the source code level, and those

441
00:14:51.460 --> 00:14:52.869 
tend to be issues that have to do

442
00:14:52.870 --> 00:14:53.870 
with the,

443
00:14:55.420 --> 00:14:56.619 
as a very general term, the

444
00:14:56.620 --> 00:14:58.329 
application binary interface, which

445
00:14:58.330 --> 00:15:00.159 
I'm using here as a

446
00:15:00.160 --> 00:15:01.629 
term to collectively identify all

447
00:15:01.630 --> 00:15:03.639 
the aspects of the system that may

448
00:15:03.640 --> 00:15:05.319 
contribute to interoperability

449
00:15:05.320 --> 00:15:06.320 
issues.

450
00:15:07.870 --> 00:15:09.939 
And that includes both the platform

451
00:15:09.940 --> 00:15:11.889 
ABI like data types and alignments,

452
00:15:11.890 --> 00:15:13.749 
and just as an example, I have on

453
00:15:13.750 --> 00:15:15.639 
the chart to the right hand side

454
00:15:15.640 --> 00:15:16.959 
of the screen, some of the

455
00:15:16.960 --> 00:15:19.509 
differences between Intel and

456
00:15:19.510 --> 00:15:21.519 
POWER for the most basic data types

457
00:15:21.520 --> 00:15:22.809 
are the same.

458
00:15:22.810 --> 00:15:24.609 
For example, the long double is

459
00:15:24.610 --> 00:15:26.469 
different on the

460
00:15:26.470 --> 00:15:28.088 
POWER platform and on the Intel

461
00:15:28.089 --> 00:15:29.739 
platform. And if you have a code

462
00:15:29.740 --> 00:15:31.419 
that uses long double and uses the

463
00:15:31.420 --> 00:15:33.069 
particular properties or relies on

464
00:15:33.070 --> 00:15:34.449 
the particular properties of long

465
00:15:34.450 --> 00:15:36.399 
double on Intel, you

466
00:15:36.400 --> 00:15:38.049 
may have to change some things when

467
00:15:38.050 --> 00:15:39.309 
you port that application to POWER.

468
00:15:42.130 --> 00:15:43.959 
Other affected parts

469
00:15:43.960 --> 00:15:45.817 
of the ABI could be language

470
00:15:45.818 --> 00:15:47.949 
ABIs like C++

471
00:15:47.950 --> 00:15:48.819 
vtable layout.

472
00:15:48.820 --> 00:15:50.199 
Now, usually, again, if you porting

473
00:15:50.200 --> 00:15:51.399 
from Linux to Intel to Linux and

474
00:15:51.400 --> 00:15:53.079 
POWER, this is not an issue because

475
00:15:53.080 --> 00:15:54.080 
it's the same.

476
00:15:55.010 --> 00:15:57.409 
But what could be different is

477
00:15:57.410 --> 00:15:59.312 
library ABI like

478
00:16:00.350 --> 00:16:02.479 
sets of routines that are exported

479
00:16:02.480 --> 00:16:04.039 
from the libraries you're using,

480
00:16:04.040 --> 00:16:05.899 
which may not all be available

481
00:16:05.900 --> 00:16:07.969 
or ABIs provided

482
00:16:07.970 --> 00:16:09.829 
by the kernel in the form of

483
00:16:09.830 --> 00:16:11.899 
syscalls I/O controls, but also

484
00:16:11.900 --> 00:16:13.369 
files that are available like and

485
00:16:13.370 --> 00:16:15.049 
the procfs filesystem, where there

486
00:16:15.050 --> 00:16:17.179 
may be some architecture

487
00:16:17.180 --> 00:16:19.009 
specific differences.

488
00:16:19.010 --> 00:16:20.659 
And finally, in some cases, you can

489
00:16:20.660 --> 00:16:22.549 
even run into differences,

490
00:16:22.550 --> 00:16:24.366 
simply porting from one Linux

491
00:16:24.367 --> 00:16:25.489 
distribution to another one.

492
00:16:27.080 --> 00:16:29.539 
If your application relies on

493
00:16:29.540 --> 00:16:31.351 
particular details, like on the file

494
00:16:31.352 --> 00:16:32.319 
system load, which utility is

495
00:16:32.320 --> 00:16:34.159 
available, whether

496
00:16:34.160 --> 00:16:35.809 
you're interacting with the GNOME or

497
00:16:35.810 --> 00:16:37.789 
KDE desktop or some

498
00:16:37.790 --> 00:16:39.619 
services that may or may not

499
00:16:39.620 --> 00:16:41.509 
be made available

500
00:16:41.510 --> 00:16:43.700 
via D-Bus or similar interfaces.

501
00:16:47.150 --> 00:16:48.150 
Now,

502
00:16:49.390 --> 00:16:51.219 
talking about all those challenges

503
00:16:51.220 --> 00:16:53.889 
you may run into when porting

504
00:16:53.890 --> 00:16:55.659 
could leave you with the impression

505
00:16:55.660 --> 00:16:57.999 
that it's a difficult task to

506
00:16:58.000 --> 00:16:59.829 
port software to Linux on POWER,

507
00:16:59.830 --> 00:17:01.419 
but of course, that's not the

508
00:17:01.420 --> 00:17:03.069 
message I want to give you.

509
00:17:03.070 --> 00:17:04.598 
Rather, it's right quite the

510
00:17:04.599 --> 00:17:05.499 
opposite.

511
00:17:05.500 --> 00:17:07.358 
For a large majority of

512
00:17:07.359 --> 00:17:08.828 
in particular Linux software,

513
00:17:08.829 --> 00:17:11.289 
porting it to POWER is very

514
00:17:11.290 --> 00:17:12.969 
easy and straightforward.

515
00:17:12.970 --> 00:17:14.919 
And all those

516
00:17:14.920 --> 00:17:16.809 
problems I listed, you only

517
00:17:16.810 --> 00:17:18.818 
run into a very small

518
00:17:18.819 --> 00:17:20.709 
subset of

519
00:17:20.710 --> 00:17:22.449 
the software that is available.

520
00:17:22.450 --> 00:17:24.729 
And as one example,

521
00:17:24.730 --> 00:17:26.828 
to prove that point,

522
00:17:26.829 --> 00:17:29.229 
I wanted to conclude this session

523
00:17:29.230 --> 00:17:31.269 
with a report on one of the major

524
00:17:31.270 --> 00:17:33.459 
projects we did a few years ago

525
00:17:33.460 --> 00:17:35.589 
when we introduced a new

526
00:17:35.590 --> 00:17:37.199 
Little-endian PowerPC platforms.

527
00:17:37.200 --> 00:17:38.379 
The Linux on POWER used to be

528
00:17:38.380 --> 00:17:39.769 
Big-endian, but we switched over to

529
00:17:39.770 --> 00:17:41.679 
Little-endian again to be

530
00:17:41.680 --> 00:17:42.680 
more similar to

531
00:17:43.690 --> 00:17:44.690 
that respect.

532
00:17:46.140 --> 00:17:47.969 
But in the end, that required us

533
00:17:47.970 --> 00:17:48.970 
to rebuild

534
00:17:49.970 --> 00:17:50.970 
the full

535
00:17:52.040 --> 00:17:53.149 
Linux distributions, all the

536
00:17:53.150 --> 00:17:54.049 
necessary specification, all the

537
00:17:54.050 --> 00:17:55.609 
software that's available in there,

538
00:17:55.610 --> 00:17:57.529 
and as an example on this

539
00:17:57.530 --> 00:17:59.479 
chart are the experiences

540
00:17:59.480 --> 00:18:01.759 
we made with porting

541
00:18:01.760 --> 00:18:03.529 
the Debian platform from scratch to

542
00:18:03.530 --> 00:18:05.629 
this new architecture,

543
00:18:05.630 --> 00:18:07.759 
and we had about 90

544
00:18:07.760 --> 00:18:09.199 
percent of all the packages they

545
00:18:09.200 --> 00:18:10.999 
just built out of the box without

546
00:18:11.000 --> 00:18:12.979 
any changes, only 10 percent

547
00:18:12.980 --> 00:18:14.689 
needed any back fixes at all.

548
00:18:14.690 --> 00:18:16.525 
And of those that did need

549
00:18:16.526 --> 00:18:18.829 
back fixes, about 95

550
00:18:18.830 --> 00:18:20.359 
percent of those were very

551
00:18:20.360 --> 00:18:21.619 
straightforward porting issues and

552
00:18:21.620 --> 00:18:23.749 
only sort of five percent

553
00:18:23.750 --> 00:18:24.750 
of those 10 percent

554
00:18:26.210 --> 00:18:27.379 
needed major changes.

555
00:18:27.380 --> 00:18:28.489 
And that included the obvious

556
00:18:28.490 --> 00:18:30.559 
candidates, like the very platform

557
00:18:30.560 --> 00:18:32.419 
specific Linux kernel toolchain and

558
00:18:32.420 --> 00:18:33.599 
so forth.

559
00:18:33.600 --> 00:18:35.779 
And we also added some

560
00:18:35.780 --> 00:18:37.109 
changes where they were not

561
00:18:37.110 --> 00:18:38.389 
necessary for functional reasons.

562
00:18:38.390 --> 00:18:40.219 
But in order to get

563
00:18:40.220 --> 00:18:41.779 
the best performance we could, in

564
00:18:41.780 --> 00:18:43.369 
particular math libraries like

565
00:18:43.370 --> 00:18:44.710 
OpenBLAS, Atlas and Eigen.

566
00:18:47.730 --> 00:18:49.559 
As a result of

567
00:18:49.560 --> 00:18:51.479 
the about 14000

568
00:18:51.480 --> 00:18:53.069 
source packages available in Debian

569
00:18:53.070 --> 00:18:55.019 
today, more than 13000

570
00:18:55.020 --> 00:18:56.969 
just built, a

571
00:18:56.970 --> 00:18:59.009 
few hundred are not

572
00:18:59.010 --> 00:19:00.989 
available on the platform because

573
00:19:00.990 --> 00:19:02.849 
they make no sense, because

574
00:19:02.850 --> 00:19:04.799 
they are specific tools

575
00:19:04.800 --> 00:19:06.749 
to work with hardware

576
00:19:06.750 --> 00:19:07.859 
or features that are simply not

577
00:19:07.860 --> 00:19:09.569 
available on POWER.

578
00:19:09.570 --> 00:19:11.819 
And then there is just a few hundred

579
00:19:11.820 --> 00:19:14.729 
packages left that

580
00:19:14.730 --> 00:19:16.709 
could be useful in POWER, but just

581
00:19:16.710 --> 00:19:18.689 
currently don't build for

582
00:19:18.690 --> 00:19:19.739 
one reason or the other.

583
00:19:21.800 --> 00:19:24.319 
And this is just sort of the same

584
00:19:24.320 --> 00:19:26.149 
in pictures

585
00:19:26.150 --> 00:19:28.219 
you will notice at the

586
00:19:28.220 --> 00:19:30.169 
near the top of the chart,

587
00:19:30.170 --> 00:19:32.089 
the line in green, which

588
00:19:32.090 --> 00:19:33.379 
lists the number of packages that

589
00:19:33.380 --> 00:19:35.209 
are built and ready to use

590
00:19:35.210 --> 00:19:37.189 
in Debian on the PowerPC platform.

591
00:19:37.190 --> 00:19:38.389 
And if you compare that with Intel

592
00:19:38.390 --> 00:19:40.249 
platform, it goes a little bit up

593
00:19:40.250 --> 00:19:42.139 
and down, but it

594
00:19:42.140 --> 00:19:43.609 
is very similar,

595
00:19:45.470 --> 00:19:47.299 
just as a reminder,

596
00:19:47.300 --> 00:19:49.129 
not to confuse those, the

597
00:19:49.130 --> 00:19:51.109 
line in light blue, which is

598
00:19:51.110 --> 00:19:52.999 
somewhat below the 90 percent

599
00:19:53.000 --> 00:19:55.459 
bar, that is the 32

600
00:19:55.460 --> 00:19:57.469 
bit PowerPC, which is sort

601
00:19:57.470 --> 00:19:59.419 
of at this point a historical

602
00:19:59.420 --> 00:20:02.449 
release which is no longer

603
00:20:02.450 --> 00:20:05.269 
maintained and therefore,

604
00:20:05.270 --> 00:20:07.069 
several of the more recent packages

605
00:20:07.070 --> 00:20:08.534 
simply not supported there anymore.

606
00:20:11.390 --> 00:20:13.429 
And to give you the long

607
00:20:13.430 --> 00:20:15.799 
view of the past

608
00:20:15.800 --> 00:20:17.929 
10 years or so, the interesting

609
00:20:17.930 --> 00:20:19.669 
thing here is to notice that when we

610
00:20:19.670 --> 00:20:21.499 
started in 2014,

611
00:20:21.500 --> 00:20:22.699 
which was making

612
00:20:23.960 --> 00:20:25.969 
Debian available on the new

613
00:20:25.970 --> 00:20:28.189 
64 bit millennium platform,

614
00:20:28.190 --> 00:20:30.709 
you will notice the very large spike

615
00:20:30.710 --> 00:20:32.299 
where it goes from zero to 90

616
00:20:32.300 --> 00:20:33.300 
percent in,

617
00:20:34.710 --> 00:20:35.969 
just like that!

618
00:20:35.970 --> 00:20:38.279 
And then over the next few months,

619
00:20:38.280 --> 00:20:40.229 
we spent in

620
00:20:40.230 --> 00:20:42.209 
fixing the remaining packages to get

621
00:20:42.210 --> 00:20:43.619 
to where we are today.

622
00:20:44.730 --> 00:20:47.159 
And that

623
00:20:47.160 --> 00:20:49.169 
concludes the presentation,

624
00:20:49.170 --> 00:20:50.519 
unlike some parts of development.
