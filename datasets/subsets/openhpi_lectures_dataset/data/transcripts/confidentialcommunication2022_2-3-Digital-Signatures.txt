WEBVTT

1
00:00:01.130 --> 00:00:05.110 
Let's consider now cryptoprotocols
for Digital Signatures

2
00:00:05.620 --> 00:00:10.400 
in our openHPI course about Confidential
Communication in the Internet.

3
00:00:11.780 --> 00:00:13.240 
If you think about
signatures

4
00:00:14.220 --> 00:00:19.190 
in our real life then we see that
signatures play an important role

5
00:00:19.680 --> 00:00:23.870 
whether it's in business, whether
it's in state administration,

6
00:00:23.870 --> 00:00:29.220 
whether it's in personal sphere,
we have to sign contracts to

7
00:00:30.890 --> 00:00:36.990 
use our documents which are legally
binding. And for example,

8
00:00:37.210 --> 00:00:40.290 
to rent a flat or to

9
00:00:40.920 --> 00:00:43.380 
buy a car or
other things.

10
00:00:44.570 --> 00:00:49.150 
So, in our analogue world
when we consider such

11
00:00:50.170 --> 00:00:55.350 
hand written signed contracts and
we have the paper, the material

12
00:00:55.590 --> 00:01:00.110 
and on that paper there is a
contract printed or written

13
00:01:00.730 --> 00:01:03.810 
and then we sign this

14
00:01:04.910 --> 00:01:16.780 
by hand and then the text, as well as the signature,
are indissolubly connected with the paper.

15
00:01:17.430 --> 00:01:19.310 
Any kind of
manipulation

16
00:01:20.350 --> 00:01:21.260 
becomes visible.

17
00:01:22.850 --> 00:01:24.740 
So, the question
is how we could

18
00:01:25.390 --> 00:01:29.920 
simulate this in the digital world? Because
also in the digital communication

19
00:01:30.110 --> 00:01:36.190 
it would be great to have methods
to digitally sign a contract

20
00:01:37.100 --> 00:01:40.490 
to get in this way a
legal binding document.

21
00:01:41.460 --> 00:01:43.130 
The problem in the
digital world is

22
00:01:44.280 --> 00:01:49.420 
that we have no basic medium
materialize the paper, these are

23
00:01:50.400 --> 00:01:55.960 
bits carrying a message they are not
bounded to any particular medium.

24
00:01:56.270 --> 00:01:58.440 
These are electrical
signals or

25
00:01:59.920 --> 00:02:04.680 
light signals or others but we
have not the situation like

26
00:02:04.680 --> 00:02:08.510 
in the real world with the paper,
where the contract is printed and

27
00:02:09.410 --> 00:02:15.630 
a signature signed on it. So we have
to look for something similar

28
00:02:16.400 --> 00:02:20.320 
and to do this we have first to
look what are the characteristics

29
00:02:20.720 --> 00:02:24.830 
of a signature. A signature
should be authentic,

30
00:02:25.390 --> 00:02:28.960 
it should express the
will of the signee,

31
00:02:29.640 --> 00:02:37.000 
it should be forgery-proof, a signature
should be verifiable for authenticity.

32
00:02:37.350 --> 00:02:46.520 
You remember, if you go to a bank counter then
you see all the hand written signatures

33
00:02:47.270 --> 00:02:52.520 
of all the people working at that bank
then it should not be reusable,

34
00:02:52.660 --> 00:02:55.000 
it should not be
changeable.

35
00:02:56.720 --> 00:02:58.330 
What is most important

36
00:02:59.220 --> 00:03:04.400 
is the reason why we need such signature,
it should be legally binding

37
00:03:04.520 --> 00:03:06.710 
so, not to be disputed.

38
00:03:08.930 --> 00:03:13.950 
If we look at this characteristics
and we have to say that the

39
00:03:14.540 --> 00:03:16.300 
signatures by hand

40
00:03:17.700 --> 00:03:22.300 
on paper fulfill these
characteristics only

41
00:03:22.790 --> 00:03:24.970 
to limited amount.

42
00:03:27.680 --> 00:03:32.120 
Digital signatures, we already
started to discuss in the first

43
00:03:32.120 --> 00:03:37.400 
week of our course, digital
signatures or electronic signatures

44
00:03:38.560 --> 00:03:44.730 
are cryptoprotocols. A
cryptoprotocol that fulfills the

45
00:03:44.730 --> 00:03:49.680 
requirements for a signature
for digital documents.

46
00:03:50.390 --> 00:03:51.440 
I just mentioned.

47
00:03:52.810 --> 00:03:59.280 
There is a string generated when a digital
signature or a cryptoprotocol is executed,

48
00:03:59.870 --> 00:04:04.160 
it is associated with the document.
So, we have the document itself

49
00:04:04.330 --> 00:04:09.400 
and then we have a digital
signature as an additional

50
00:04:09.540 --> 00:04:15.130 
an additional document which is
associated with the original document.

51
00:04:16.080 --> 00:04:23.610 
And common cryptoprotocol for such
digital signatures are mostly based on

52
00:04:23.810 --> 00:04:26.300 
public key
cryptosystems.

53
00:04:27.500 --> 00:04:29.730 
There are some
more but the

54
00:04:30.590 --> 00:04:35.280 
typical scenario of
signature is signing

55
00:04:35.280 --> 00:04:36.820 
in the internet with

56
00:04:38.220 --> 00:04:43.170 
such asymmetric cryptographic
systems and protocols.

57
00:04:44.380 --> 00:04:48.570 
So here is an overview.
We have the data,

58
00:04:48.990 --> 00:04:51.660 
the contract that needs
to be designed,

59
00:04:52.310 --> 00:04:57.760 
and then the idea is to encrypt
this contract with a private key,

60
00:04:57.760 --> 00:05:00.450 
our private key.

61
00:05:01.840 --> 00:05:05.740 
And then we get what
we call a signature.

62
00:05:06.310 --> 00:05:12.850 
We get this document, encrypted
ciphertext with the private key.

63
00:05:13.650 --> 00:05:16.570 
What is the reason to
take the private key?

64
00:05:17.670 --> 00:05:21.750 
The private key, we will see this
when we look at the validation,

65
00:05:22.290 --> 00:05:27.230 
so, this is a signed document consisting
of the document of the data

66
00:05:27.950 --> 00:05:34.200 
of the certificate which gives
public key which belongs

67
00:05:34.200 --> 00:05:38.730 
to the private key and send the
ciphertext to encrypt this.

68
00:05:39.410 --> 00:05:44.610 
Now to verify that's really a document
which is signed by, say, Bob,

69
00:05:47.430 --> 00:05:51.780 
takes a data, the contract, one
takes a certificate of Bob with

70
00:05:51.780 --> 00:05:55.880 
his public key and
signature. And then

71
00:05:56.320 --> 00:05:58.500 
one starts to
take the data

72
00:05:59.210 --> 00:06:02.670 
and encrypt the data,

73
00:06:03.280 --> 00:06:09.530 
and then one takes the public key,
this was this additional document

74
00:06:09.840 --> 00:06:10.900 
which has his
signature,

75
00:06:11.690 --> 00:06:17.880 
and this was encrypted with
a private key of Bob.

76
00:06:18.090 --> 00:06:22.460 
Now one takes his public
key from the certificate

77
00:06:22.960 --> 00:06:29.150 
and then one gets here,
one gets a decryption

78
00:06:29.600 --> 00:06:33.610 
from the signature and
one gets the result,

79
00:06:34.240 --> 00:06:38.930 
of the document. Remember, the
digital signature was to

80
00:06:39.850 --> 00:06:43.790 
encrypt the data. Now,
the data is decrypted

81
00:06:44.520 --> 00:06:48.840 
and if both agree,
if the data

82
00:06:49.460 --> 00:07:00.130 
got as well as decrypted data agree then it's clear
that these are the original contract signed by Bob.

83
00:07:00.720 --> 00:07:07.470 
Otherwise, this encrypted document on the
side of Bob which was decrypted here

84
00:07:07.630 --> 00:07:13.060 
would not agree with the data,
if for example, Mallory

85
00:07:13.140 --> 00:07:17.040 
when the contract
was transferred,

86
00:07:17.430 --> 00:07:22.790 
he had managed this. So the
check for a match gives

87
00:07:23.660 --> 00:07:32.210 
a very valid answer to the question is this
the document which was signed by Bob.

88
00:07:35.130 --> 00:07:37.740 
Let's look at the
requirements.

89
00:07:38.360 --> 00:07:45.900 
Does this cryptoprotocol fulfill the desired
requirements of a digital signature?

90
00:07:46.600 --> 00:07:48.600 
First, we had the
authenticity.

91
00:07:49.570 --> 00:07:55.280 
When here in this
case Alice has

92
00:07:55.680 --> 00:07:57.530 
signed this contract,

93
00:07:58.130 --> 00:08:00.730 
has encrypted this with
her private key,

94
00:08:01.430 --> 00:08:05.260 
and it was decrypted
with her public key

95
00:08:05.980 --> 00:08:11.630 
then it's clear that only Alice was able
to sign this document in this way.

96
00:08:12.540 --> 00:08:15.500 
What about the forgery-proof
requirement?

97
00:08:16.590 --> 00:08:21.180 
Alice is the only one who has
access to her private key,

98
00:08:21.730 --> 00:08:27.830 
no one else has the chance to encrypt
the contract with her private key

99
00:08:28.700 --> 00:08:31.710 
only by herself.

100
00:08:32.580 --> 00:08:37.160 
Then the verifiability
of authenticity,

101
00:08:38.170 --> 00:08:45.190 
everyone who takes the
public key of Alice

102
00:08:45.740 --> 00:08:48.510 
can decrypt the
digital signature

103
00:08:49.390 --> 00:08:55.100 
and can see the contract not only
Bob but everyone can verify

104
00:08:55.280 --> 00:08:58.260 
this document was
signed by Alice.

105
00:08:59.390 --> 00:09:04.230 
And then important question when we
analyze various attack scenarios,

106
00:09:04.530 --> 00:09:07.660 
these digital signatures
are not reusable.

107
00:09:09.200 --> 00:09:12.300 
This signature cannot

108
00:09:12.680 --> 00:09:16.410 
be connected to
another contract.

109
00:09:17.170 --> 00:09:19.610 
The reason is
the signed

110
00:09:20.360 --> 00:09:23.310 
contract or the
signed document

111
00:09:23.780 --> 00:09:29.470 
is in the signature, so the digital
signature is distinctly linked

112
00:09:29.810 --> 00:09:35.250 
to the signed document. No
one can open this and so

113
00:09:35.390 --> 00:09:38.880 
the digital signature
is not re-usable.

114
00:09:39.930 --> 00:09:43.160 
Then we had the requirement
of the unchangeability.

115
00:09:44.220 --> 00:09:49.720 
Any change in the digital signature
after being decrypted with

116
00:09:49.820 --> 00:09:53.710 
the public key results in
a different document,

117
00:09:54.390 --> 00:10:00.370 
it's not possible to manipulate the
document so that the signature of

118
00:10:00.620 --> 00:10:10.460 
Alice remains valid, because signature of
Alice consists in the encrypted document,

119
00:10:10.500 --> 00:10:14.250 
So, any change in
the document

120
00:10:14.320 --> 00:10:17.950 
definitely has as a
consequence. A change in the

121
00:10:18.430 --> 00:10:21.210 
encrypted digital
signature.

122
00:10:22.180 --> 00:10:28.790 
And then binding, which also
is valid for the court.

123
00:10:29.800 --> 00:10:33.100 
Alice alone has access
to her private key,

124
00:10:33.510 --> 00:10:38.600 
so, if the document can
be decrypted with

125
00:10:38.600 --> 00:10:45.160 
the public key of Alice, then it must have
been encrypted with her private key,

126
00:10:45.720 --> 00:10:48.670 
so Alice cannot deny
her signature.

127
00:10:50.650 --> 00:10:53.980 
So, digital signatures
provide a really viable

128
00:10:54.480 --> 00:10:56.650 
counterpart to
signatures by hand,

129
00:10:57.280 --> 00:11:02.970 
and if you're honest they are much
more valid and much more secure

130
00:11:03.170 --> 00:11:06.240 
than hand-written
signatures.

131
00:11:07.250 --> 00:11:12.600 
So if a suitable cryptosystem
is chosen, the security

132
00:11:12.600 --> 00:11:17.110 
of a digital signature is even
significantly higher than that

133
00:11:17.120 --> 00:11:18.390 
of a manual signature.

134
00:11:19.340 --> 00:11:22.340 
But two basic
problems remain,

135
00:11:23.720 --> 00:11:29.270 
the encryption of the
extensive digital document

136
00:11:29.700 --> 00:11:34.590 
with a public key cryptosystem requires
enormous computational power,

137
00:11:34.840 --> 00:11:41.140 
you remember this needs a lot of
resources and if it is a long contract

138
00:11:41.380 --> 00:11:43.380 
so, it's really

139
00:11:44.210 --> 00:11:51.330 
very resource demanding procedure to
decrypt, to verify the digital signature.

140
00:11:52.560 --> 00:11:56.450 
So, the recipient who wants to
verify the signature document, it

141
00:11:57.220 --> 00:12:03.850 
is the other basic problem, needs
to be sure that he or she really

142
00:12:04.380 --> 00:12:07.380 
can get the correct
public key from Alice,

143
00:12:07.840 --> 00:12:12.510 
because all the
proof that it's a

144
00:12:13.170 --> 00:12:19.810 
true document which was signed by Alice
are based on the fact that only

145
00:12:20.440 --> 00:12:21.910 
the corresponding
public key

146
00:12:23.870 --> 00:12:26.790 
makes it possible to
decrypt the document.

147
00:12:27.660 --> 00:12:31.720 
So, those are the two
problems we have to deal to

148
00:12:32.570 --> 00:12:39.140 
get digital signatures in the
daily life in the practice

149
00:12:39.740 --> 00:12:41.960 
in the internet and
the digital world.
