WEBVTT

1
00:00:00.730 --> 00:00:02.810 
Welcome to knowledge
graphs lecture four

2
00:00:03.330 --> 00:00:06.700 
knowledge representation with
ontologies. In this lecture

3
00:00:06.700 --> 00:00:10.440 
we are going to see a little
bit about OWL so we are going

4
00:00:10.440 --> 00:00:13.610 
to see the first we are going
to take first steps in OWL.

5
00:00:14.540 --> 00:00:18.780 
So here we are in in this semantic
web technology stack we

6
00:00:18.780 --> 00:00:21.070 
are on web ontology
language OWL.

7
00:00:23.490 --> 00:00:28.820 
So OWL is actually already
there in different fragments

8
00:00:28.960 --> 00:00:33.380 
in different flavors so we have
a OWL is actually a semantic

9
00:00:33.380 --> 00:00:38.880 
fragment of first-order logic and as I
said it is there in different flavors.

10
00:00:39.050 --> 00:00:44.650 
So here you can actually see a
little bit of a picture on

11
00:00:44.650 --> 00:00:49.940 
your right here all these OWL
languages are actually organised

12
00:00:49.940 --> 00:00:55.140 
based on their increasing complexity.
So most all these languages

13
00:00:55.150 --> 00:00:59.990 
so far have the lower complexity
which is a which is polynomial

14
00:01:00.100 --> 00:01:05.470 
and then as soon as the expressivity
grows then the complexity

15
00:01:05.470 --> 00:01:07.440 
of these languages
also grows.

16
00:01:09.140 --> 00:01:14.150 
So here we have here we are
going to just I will just give

17
00:01:14.150 --> 00:01:18.160 
you an overview that OWL too is
actually based on the description

18
00:01:18.160 --> 00:01:22.760 
logics SROIQ and D here you have
already seen in the excursion

19
00:01:22.760 --> 00:01:28.000 
what each of these letters stand
for. So they keep with these

20
00:01:28.010 --> 00:01:32.700 
the class constructors used
by this language are class

21
00:01:32.700 --> 00:01:37.550 
names, disconnection disjunction
negation so on and so forth.

22
00:01:37.900 --> 00:01:42.690 
Then we have property names and
simple properties in words

23
00:01:43.010 --> 00:01:49.180 
then we have terminological box, roll
box and then we have a searchable box.

24
00:01:49.480 --> 00:01:55.310 
So we have in the role box we keep the
property axioms and terminological

25
00:01:55.310 --> 00:01:59.580 
box we keep the class axioms and in
the assertion box we keep the facts.

26
00:02:01.170 --> 00:02:05.560 
So now lets start with the
basic building blocks of OWL.

27
00:02:05.990 --> 00:02:11.450 
So the name space of OWL you
see here is is this is the

28
00:02:11.450 --> 00:02:16.570 
w3.org so on blah blah
blah and then we it can

29
00:02:16.570 --> 00:02:21.910 
be all given with the prefix OWL.
So and we know there is already

30
00:02:21.910 --> 00:02:26.360 
exist a Turtle syntax for the OWL.
So the basic three building

31
00:02:26.360 --> 00:02:30.660 
blocks of OWL our classes
individuals and the properties.

32
00:02:31.100 --> 00:02:35.980 
So classes are comparable to the
classes that we have been seeing now

33
00:02:36.140 --> 00:02:40.740 
there the similar as in RDFS.
Then we have individuals which

34
00:02:40.740 --> 00:02:44.580 
talk about the instances of
the classes same to RDFS.

35
00:02:45.030 --> 00:02:48.300 
Then we have the properties which
are comparable to the properties

36
00:02:48.300 --> 00:02:52.310 
in RDFS that you have already
seen in the in these lectures.

37
00:02:53.590 --> 00:02:58.880 
So now a we are going to talk a
little bit more into into the

38
00:02:58.880 --> 00:03:03.420 
details. So there are two existing
pre-defined classes which

39
00:03:03.420 --> 00:03:07.790 
is owl:thing and owl:nothing. So in
the description logic excursion

40
00:03:07.790 --> 00:03:12.090 
you have seen the concept of top
and bottom. So here you can

41
00:03:12.090 --> 00:03:17.170 
define OWL the owl:thing is actually
top and owl:nothing is the bottom.

42
00:03:17.700 --> 00:03:22.220 
So owl:thing is the class that
contains all individuals and

43
00:03:22.220 --> 00:03:26.340 
owl:nothing contains no individuals.
So it's an empty class.

44
00:03:27.190 --> 00:03:31.710 
Then you can define the classes in
owl with the help of owl:class.

45
00:03:31.710 --> 00:03:35.970 
So GreenhouseGas
is an owl:class.

46
00:03:37.960 --> 00:03:44.640 
So here there is a this is the owl
in RDF or turtle serialization.

47
00:03:45.730 --> 00:03:50.460 
So now let's move towards individuals.
So how the in the class

48
00:03:50.460 --> 00:03:54.520 
membership of the individual
is defined. So you have here

49
00:03:54.520 --> 00:03:58.000 
for example JosephFourier
who is a person.

50
00:03:58.760 --> 00:04:02.700 
And then he on the right you can
actually see how it is defined

51
00:04:02.710 --> 00:04:06.280 
in for example description logics.
So person Joseph Fourier.

52
00:04:06.880 --> 00:04:11.970 
Then individuals can also be
defined without class membership

53
00:04:12.390 --> 00:04:16.110 
such as with the help of named
individuals for example

54
00:04:16.110 --> 00:04:17.840 
HaraldSack is

55
00:04:18.570 --> 00:04:20.280 
Owl:NamedIndividual.

56
00:04:22.340 --> 00:04:25.880 
Then we moved towards the third
building block which is which

57
00:04:25.880 --> 00:04:29.390 
are the properties the upper and
now here we are going to talk

58
00:04:29.400 --> 00:04:33.540 
start with the object properties. So
we have two kinds of properties

59
00:04:33.550 --> 00:04:37.770 
object and the data type property.
So in order to define that

60
00:04:37.780 --> 00:04:43.660 
if a property is an object property you
define it with for example discoverer

61
00:04:44.240 --> 00:04:46.730 
is of type object
property.

62
00:04:47.420 --> 00:04:50.760 
And then what is actually difference
between object property

63
00:04:50.760 --> 00:04:53.430 
and a data type property
so in object property

64
00:04:53.950 --> 00:04:58.390 
the range is always a class. You
will see that you will see

65
00:04:58.390 --> 00:05:02.310 
the datatype property later where
the range is actually a data type.

66
00:05:02.600 --> 00:05:06.760 
So the domain and range of the
object properties can be defined

67
00:05:06.760 --> 00:05:09.220 
with the help of this
example that you see here

68
00:05:09.670 --> 00:05:13.950 
that discoverer is of type object
property and the domain of

69
00:05:13.950 --> 00:05:17.670 
this property is owl:thing and the
range of this property is a person.

70
00:05:18.180 --> 00:05:22.840 
So here you can actually see a
person is a class and on the

71
00:05:22.840 --> 00:05:27.700 
right hand side you see how you can define
this in the form of description logic.

72
00:05:28.610 --> 00:05:31.230 
So now let's move on to the
data type properties.

73
00:05:31.820 --> 00:05:36.530 
So in the data type properties the
range is a data type. You will see.

74
00:05:37.010 --> 00:05:42.100 
So for example first how can
you define it in OWL? It is

75
00:05:42.140 --> 00:05:45.470 
for example this property
DiscoveredIn is

76
00:05:45.940 --> 00:05:50.730 
a datatype property, owl datatype
property. Then we have domain

77
00:05:50.730 --> 00:05:55.360 
and range of the datatype properties.
So you have discovered in

78
00:05:55.660 --> 00:05:57.740 
which is a datatype property
which has said it.

79
00:05:58.310 --> 00:06:00.560 
Then it has the
domain thing

80
00:06:01.160 --> 00:06:05.110 
and the range is xsddate which
is a data type and we have

81
00:06:05.110 --> 00:06:08.340 
already seen some explanations
about the data type before.

82
00:06:09.530 --> 00:06:14.940 
So here in this slide you see
two parts. OWL terminological

83
00:06:14.940 --> 00:06:19.030 
box and the assertion box. So here
you can see from the beginning

84
00:06:19.030 --> 00:06:22.960 
you have atmospheric process and
person which is a class than

85
00:06:22.960 --> 00:06:27.490 
discoverer and DiscoveredIn which
is an object property and

86
00:06:27.500 --> 00:06:32.760 
a datatype property. So discoverer since it
has arranged person its object property

87
00:06:33.180 --> 00:06:38.700 
DiscoveredIn has the range date
xsdDate so it's a datatype property.

88
00:06:39.270 --> 00:06:42.690 
And then we have the assertion
box which keeps the information

89
00:06:42.690 --> 00:06:46.100 
about the individuals. So
we have Joseph Fourier

90
00:06:46.630 --> 00:06:51.260 
who is a person, so it it tells
that this is the instance of

91
00:06:51.270 --> 00:06:54.660 
this class which is defined
in the terminological

92
00:06:54.660 --> 00:06:56.770 
box and so on
and so forth.

93
00:06:58.410 --> 00:07:03.740 
And then we can also define OWL class
hierarchies so you have a physicist

94
00:07:04.330 --> 00:07:09.440 
who which is a class and it's a
subclassof scientist, scientist

95
00:07:09.450 --> 00:07:14.090 
is a subclass of person and person
is also a class. So here you can

96
00:07:14.190 --> 00:07:20.430 
actually already infer that physicist
is also a subclass of a person.

97
00:07:21.500 --> 00:07:24.270 
So here you can actually
see that we have used

98
00:07:24.810 --> 00:07:29.480 
RDFS sub-class of
property from the RDFS

99
00:07:30.100 --> 00:07:33.970 
For defining OWL class hierarchies.
And on the right you also

100
00:07:33.970 --> 00:07:37.380 
see how you can define it in the
form of description logics.

101
00:07:38.860 --> 00:07:43.940 
Then we move towards class
hierarchies and disjunctiveness.

102
00:07:44.080 --> 00:07:49.400 
So how can we a how can we define
the disjunctiveness in OWL?

103
00:07:49.800 --> 00:07:53.930 
So you have for example chemical
substance substance a person

104
00:07:53.930 --> 00:07:58.600 
and a greenhouse gas which is a
class. Then greenhouse gas is

105
00:07:58.600 --> 00:08:01.560 
a subclass of
chemical substance

106
00:08:02.060 --> 00:08:04.660 
and then scientist is a
subclass of person.

107
00:08:05.110 --> 00:08:08.830 
Now here we are we can
define the disjunctiveness

108
00:08:08.830 --> 00:08:12.960 
with the help of the keyword
owl:disjointwith. So chemical

109
00:08:12.960 --> 00:08:18.660 
substance is disjoint with a person.
And then from this information

110
00:08:18.660 --> 00:08:25.080 
it can be entailed that greenhouse gas
and scientists are also disjoint

111
00:08:25.340 --> 00:08:27.370 
because their super
classes are disjoint.

112
00:08:27.830 --> 00:08:32.880 
And then so in OWL everything
everything might be potentially

113
00:08:32.880 --> 00:08:37.480 
identical if we do not explicitly
state the difference between them.

114
00:08:38.110 --> 00:08:43.540 
And also you can see in on the
in gray on the side that

115
00:08:43.920 --> 00:08:46.900 
how can you represent the same
things which are given on the

116
00:08:46.900 --> 00:08:50.200 
left with the help of OWL in the
form of description logic.

117
00:08:50.440 --> 00:08:55.370 
So you define the
disjunctiveness

118
00:08:55.370 --> 00:09:00.580 
as follows- like chemical substance and
then we have the conjunction operator

119
00:09:00.700 --> 00:09:04.460 
person and which is
uh which is bottom.

120
00:09:07.210 --> 00:09:11.010 
So now we are going to talk about
class hierarchies and equivalence.

121
00:09:11.120 --> 00:09:16.280 
So for equivalence we use OWL
equivalent class. This keyword. So if

122
00:09:16.830 --> 00:09:21.800 
we have a physicist who is a
scientist means a physicist which

123
00:09:21.800 --> 00:09:25.630 
is a sub-class of scientists
and scientists and researcher

124
00:09:25.640 --> 00:09:30.120 
are the equivalence classes then
we can also say that physicist

125
00:09:30.130 --> 00:09:31.690 
is also a researcher.

126
00:09:33.830 --> 00:09:39.580 
Then we move towards the identity and OWL
disjunctiveness sorry distinctiveness.

127
00:09:39.870 --> 00:09:45.830 
So the for identical individuals
individuals I would

128
00:09:45.840 --> 00:09:50.910 
emphasize on this word we always
use owl:sameAs. This is actually

129
00:09:50.910 --> 00:09:55.390 
also used in making the connections
the mappings between two

130
00:09:55.390 --> 00:09:59.160 
different data sources if they are
describing the same individual.

131
00:09:59.730 --> 00:10:05.720 
And then we use OWL equivalent
class for the equivalent classes.

132
00:10:05.930 --> 00:10:10.890 
So here it shows in this example
you see that carbon dioxide

133
00:10:11.170 --> 00:10:13.830 
is same as ARX
blah blah blah.

134
00:10:14.990 --> 00:10:20.150 
So from this it can also
since a carbon dioxide is

135
00:10:20.650 --> 00:10:25.410 
a a greenhouse gas and carbon
dioxide is same as ARX

136
00:10:25.870 --> 00:10:28.500 
zero one two
three four then

137
00:10:29.470 --> 00:10:33.470 
it means that ARX is also
a chemical substance.

138
00:10:35.210 --> 00:10:41.380 
Sorry is a is also a greenhouse
gas. And then greenhouse gas

139
00:10:41.390 --> 00:10:45.130 
is also a chemical substance,
so we can also say that ARX

140
00:10:45.140 --> 00:10:46.890 
is also a chemical
substance.

141
00:10:47.580 --> 00:10:51.860 
So with the help of this and you
can also draw similar kind

142
00:10:51.860 --> 00:10:56.890 
of inferencing as we did in RDFS
with OWL. And now if we want

143
00:10:56.890 --> 00:11:01.130 
to tell if two individuals are
different for doing so we can

144
00:11:01.430 --> 00:11:05.470 
use owl:differentFrom. And here
you can see the example ARX

145
00:11:05.470 --> 00:11:10.710 
zero one two three four five
is different from the ARX

146
00:11:10.740 --> 00:11:13.690 
zero one two three four
six for example.

147
00:11:15.740 --> 00:11:19.470 
So in the next lecture you will
see more details about the OWL.
