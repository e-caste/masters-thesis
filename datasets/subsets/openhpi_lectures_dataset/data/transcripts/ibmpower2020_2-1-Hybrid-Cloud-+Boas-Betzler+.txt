WEBVTT

1
00:00:00.660 --> 00:00:04.680 
hello, my name is Boas Betzler
and IBM Distinguished Engineer.

2
00:00:04.690 --> 00:00:08.200 
and their lead the global architecture
guild for our cloud solution center.

3
00:00:08.630 --> 00:00:11.070 
today I'm going to talk
about a hybrid cloud.

4
00:00:11.650 --> 00:00:17.410 
first we'll talk about some terminology
around hybrid cloud and their definitions.

5
00:00:17.600 --> 00:00:22.650 
and second we're going to discuss market
drivers and also business drivers

6
00:00:22.930 --> 00:00:28.730 
that move us toward the hybrid cloud. we
will consider then some architectural

7
00:00:28.740 --> 00:00:32.490 
elements that are important for
an hybrid cloud architecture.

8
00:00:32.730 --> 00:00:38.330 
and walk through an example too
demonstrate those architecture

9
00:00:38.330 --> 00:00:40.660 
principles that are important
for hybrid cloud.

10
00:00:41.460 --> 00:00:46.470 
well then follow up with a understanding
the need for a hybrid cloud platform

11
00:00:46.630 --> 00:00:48.110 
and come to a
brief summary.

12
00:00:49.290 --> 00:00:53.210 
with that let us start with a lot of
perms that are floating around.

13
00:00:54.240 --> 00:00:59.250 
on premise or unpremeditated loud, public
cloud, private clouds are mentioned.

14
00:00:59.830 --> 00:01:03.480 
and then we talk about
multi-cloud and hybrid cloud.

15
00:01:04.040 --> 00:01:07.650 
what is the difference between
multi cloud and hybrid cloud?

16
00:01:07.840 --> 00:01:12.560 
and of course, now we see the
term edge computing emergent

17
00:01:13.130 --> 00:01:16.230 
and I also want to understand
how that is positioned within

18
00:01:16.230 --> 00:01:18.140 
all those other
cloud concepts.

19
00:01:18.890 --> 00:01:24.540 
so you're all familiar with using
multiple clouds as we sit

20
00:01:24.540 --> 00:01:29.350 
on our desktops or as we use our
mobile devices. we use services

21
00:01:29.360 --> 00:01:33.770 
from many different public clouds
or service providers. so we

22
00:01:33.770 --> 00:01:38.070 
might log on to a system and
receive an email that might

23
00:01:38.070 --> 00:01:40.580 
be the first cloud service
we're interacting with.

24
00:01:41.030 --> 00:01:45.870 
maybe we want to find out some
information on a topic that

25
00:01:45.880 --> 00:01:50.270 
we received an email from. so we
might go to some search engine

26
00:01:50.270 --> 00:01:57.180 
and use yet another cloud service that's
maybe sourced by different cloud provider.

27
00:01:57.380 --> 00:02:01.170 
and then we might set up a conference
call or video conference,

28
00:02:01.440 --> 00:02:05.760 
and still use another cloud
provider or service provider.

29
00:02:06.720 --> 00:02:11.660 
is that mean we're using hybrid cloud,
is that mean we're using multi-cloud?

30
00:02:12.330 --> 00:02:15.950 
well, one simple way
that I like to

31
00:02:16.600 --> 00:02:20.610 
demonstrate those terms is, let's
suppose you have two cars.

32
00:02:20.670 --> 00:02:26.110 
you own two cars one with a combustion
engine and one with an electrical engine.

33
00:02:26.750 --> 00:02:32.350 
would you say you use a hybrid
form of transportation? no

34
00:02:32.360 --> 00:02:36.280 
you have two cars, you had to choose
between either use this car or

35
00:02:36.280 --> 00:02:40.990 
that car. the one with a combustion engine
or the one with an electrical engine.

36
00:02:41.480 --> 00:02:43.490 
now you're using
multiple cars,

37
00:02:44.540 --> 00:02:48.780 
different if you own one car and
within that car there is a

38
00:02:48.780 --> 00:02:52.310 
combination of a combustion engine
and an electrical engine.

39
00:02:52.850 --> 00:02:57.860 
and driving and being transported
in this one car, you use the

40
00:02:57.860 --> 00:03:02.310 
combination or the hybrid of both
worlds of both engines. now

41
00:03:02.310 --> 00:03:06.210 
then also helps us to understand
the definition of a hybrid cloud.

42
00:03:07.140 --> 00:03:11.530 
one version of a definition is
to use both an unpromising and

43
00:03:11.530 --> 00:03:16.740 
at least one public cloud in conjunction
providing some service together.

44
00:03:16.870 --> 00:03:23.030 
or the second definition is using multiple
clouds, may be multiple public clouds

45
00:03:23.220 --> 00:03:27.920 
with some level of integration
or some level of dependency

46
00:03:28.020 --> 00:03:30.240 
for an application
being delivered here.

47
00:03:31.540 --> 00:03:36.200 
now let us come to some drivers for the
reason to move to a hybrid cloud.

48
00:03:36.510 --> 00:03:41.080 
one is the need for business
acceleration and yet a one four

49
00:03:41.360 --> 00:03:44.670 
develop productivity which is
closely linked together. so

50
00:03:44.670 --> 00:03:49.460 
as to quicker, you are able to
develop some services, the

51
00:03:49.460 --> 00:03:52.790 
quicker you can drive business
from those services. there are

52
00:03:52.790 --> 00:03:59.470 
also other needs like cost efficiency, needs
for regulatory compliance and security

53
00:03:59.720 --> 00:04:05.180 
at modernization of existing applications
or scaling. and we'll see how

54
00:04:05.300 --> 00:04:07.760 
those pan out in the example
that we go through.

55
00:04:09.340 --> 00:04:14.220 
so where are enterprises
in cloud adoption? so

56
00:04:14.880 --> 00:04:20.720 
take a guess, what's your thought on
the reality of enterprise cloud

57
00:04:20.860 --> 00:04:26.190 
consumption? the percentage of
workload that is in public cloud

58
00:04:26.190 --> 00:04:29.100 
for an enterprise or for the
average enterprise what do you

59
00:04:29.100 --> 00:04:33.480 
think it is? or what's the
percentage of workloads that have

60
00:04:33.480 --> 00:04:37.740 
not even been transformed to run
on any cloud, whether it's

61
00:04:37.750 --> 00:04:41.280 
on premise or in public cloud
on a hybrid environment.

62
00:04:42.150 --> 00:04:45.750 
or what is the percentage
of enterprises

63
00:04:46.570 --> 00:04:50.620 
that are already using two or
more public cloud providers?

64
00:04:51.370 --> 00:04:52.770 
did you take
your guesses?

65
00:04:53.540 --> 00:04:57.430 
well the reality is that only
twenty percent of workloads

66
00:04:57.430 --> 00:05:01.500 
have been moved to a public cloud.
and at this driven mainly

67
00:05:01.500 --> 00:05:05.220 
by new development, by greenfield
development of applications,

68
00:05:05.320 --> 00:05:09.390 
or by simple lift and shift of a
small subset of applications

69
00:05:09.390 --> 00:05:13.860 
that can easily be lifted and shifted
them and run in another environment.

70
00:05:14.420 --> 00:05:18.680 
now sixty percent of workloads have
not been transformed to cloud yet.

71
00:05:19.230 --> 00:05:25.100 
why's that? well maybe they
depend on some data that has

72
00:05:25.360 --> 00:05:30.080 
data residency requirements and
the data cannot move. or simply

73
00:05:30.080 --> 00:05:34.470 
because the application is set up
in a way that it has dependencies

74
00:05:34.610 --> 00:05:38.760 
on its current runtime environment
which is not available in

75
00:05:38.890 --> 00:05:42.810 
any cloud whether it is a public
cloud or an unpremeditated cloud.

76
00:05:43.970 --> 00:05:48.440 
at the same time, eighty percent
of enterprises use two or more

77
00:05:49.060 --> 00:05:53.460 
public cloud vendors and it
demonstrates that there is a

78
00:05:53.460 --> 00:05:58.980 
big gap between the reality of workloads
that are ready to run in different clouds,

79
00:05:59.180 --> 00:06:05.870 
and the reality of enterprises already using
services from multiple cloud providers.

80
00:06:07.820 --> 00:06:10.260 
now those challenges,

81
00:06:11.090 --> 00:06:17.120 
i like to think about those challenges as
architecture aspects and architecture domains

82
00:06:17.390 --> 00:06:21.600 
that we need to solve against. so
in my practice as architecture

83
00:06:21.600 --> 00:06:25.820 
gilt leader, I like to use a teacher
cheat sheet like the one that i

84
00:06:25.960 --> 00:06:30.810 
show you here. with different
aspects going through a variety

85
00:06:30.810 --> 00:06:34.770 
of technologies, and a variety
of functional elements, and a

86
00:06:34.770 --> 00:06:39.190 
variety of non-functional
elements. and then draw them

87
00:06:39.190 --> 00:06:42.460 
out into specific
domains. for example,

88
00:06:43.430 --> 00:06:48.370 
if you are a deploy an application
in a cloud, you need to think

89
00:06:48.370 --> 00:06:52.230 
about the runtime environment. so
to compute the environment. it is

90
00:06:52.230 --> 00:06:57.250 
just mainly on a bare metal server.
it is on a virtual server.

91
00:06:57.650 --> 00:07:02.380 
it is leveraging container technology
and leveraging some of the

92
00:07:02.390 --> 00:07:07.570 
capabilities that come with managing
a large number of containers.

93
00:07:07.720 --> 00:07:13.740 
or it said things like using function as a
service or just deploying capabilities and

94
00:07:13.870 --> 00:07:16.840 
pushing them into some runtime
environment, and leaving

95
00:07:16.840 --> 00:07:20.480 
up the management of often runtime
environment to a cloud provider.

96
00:07:21.670 --> 00:07:26.570 
now computers one aspect, another
important aspect is networking.

97
00:07:26.830 --> 00:07:29.080 
especially when we talk
about hybrid cloud.

98
00:07:29.840 --> 00:07:34.830 
we talk about the need of connecting
disparate elements of distributed elements.

99
00:07:35.130 --> 00:07:39.510 
so connectivity from enterprise
to those elements in the cloud

100
00:07:39.590 --> 00:07:44.240 
or connectivity across
multiple clouds is relevant.

101
00:07:44.690 --> 00:07:48.470 
in addition to that, there is
also the need for an additional

102
00:07:48.480 --> 00:07:53.000 
network functions in the environment.
for example, load balancing

103
00:07:53.000 --> 00:07:56.410 
for example routing or
other capabilities.

104
00:07:56.840 --> 00:08:01.430 
Now once we get into the environment
of one cloud provider.

105
00:08:01.440 --> 00:08:04.700 
There's obviously network segmentation
that needs to happen there

106
00:08:04.880 --> 00:08:09.460 
to better structure applications,
structure excess, and also

107
00:08:09.460 --> 00:08:12.810 
structure security around
those network elements.

108
00:08:13.470 --> 00:08:17.940 
Now a third area is that that
carries the most weight.

109
00:08:18.590 --> 00:08:23.330 
data storage and data which
both have gravity. storage is

110
00:08:23.340 --> 00:08:27.980 
a lower form of abstraction in the
form of block storage, object

111
00:08:27.980 --> 00:08:32.180 
storage, maybe file storage and in
some higher level abstractions

112
00:08:32.180 --> 00:08:36.820 
of that storage that represents
information as data which

113
00:08:37.100 --> 00:08:42.990 
then leverage just databases, which leverage
just other forms of data structures

114
00:08:43.170 --> 00:08:46.810 
that can be accessed through various
means of services around them.

115
00:08:47.750 --> 00:08:51.470 
so these three elements are
typically very much associated

116
00:08:51.470 --> 00:08:53.670 
with the infrastructure
of a hybrid cloud.

117
00:08:54.160 --> 00:09:00.380 
there are other higher-level services
like streaming services, like

118
00:09:00.610 --> 00:09:05.780 
analytic services, like message
queuing services or eventing

119
00:09:05.780 --> 00:09:12.490 
services that are needed to develop and assemble
applications into business processes.

120
00:09:12.720 --> 00:09:16.370 
also they need to be considered as
we look through the architecture

121
00:09:16.370 --> 00:09:19.790 
and architecture decisions
of a hybrid cloud.

122
00:09:21.190 --> 00:09:26.050 
very important is the security
aspect especially in a distributed

123
00:09:26.050 --> 00:09:31.580 
environment security is a major
concern and needs to be solved. now

124
00:09:31.860 --> 00:09:37.780 
there are good approaches, good
mechanisms to approach security and

125
00:09:38.150 --> 00:09:41.180 
have architecture set up in a
way that your environment is

126
00:09:41.180 --> 00:09:44.590 
secure also in the hybrid cloud.
but that requires making the

127
00:09:44.590 --> 00:09:49.520 
right architecture decisions around
network security, around data security,

128
00:09:49.790 --> 00:09:54.150 
round things like encryption
address and transit, things

129
00:09:54.150 --> 00:09:59.140 
like a key management and who has
access to keys and also around

130
00:09:59.520 --> 00:10:04.530 
security of your environment with
respect to your applications

131
00:10:04.530 --> 00:10:06.490 
and additional services
that you provide.

132
00:10:07.950 --> 00:10:14.150 
now deploying applications in a
distributed or hybrid cloud,

133
00:10:14.520 --> 00:10:18.740 
it means that there is a need for a
very structured devops approach

134
00:10:18.990 --> 00:10:23.300 
to your development and to your role
loud of your different systems whether

135
00:10:23.540 --> 00:10:27.030 
that is development or test
or production systems.

136
00:10:27.740 --> 00:10:33.210 
now all of these are still very much
focused on functions and features.

137
00:10:33.820 --> 00:10:38.140 
but there is also a big aspect
of non functional drivers that

138
00:10:38.620 --> 00:10:42.620 
in form or drive your architecture
decisions for hybrid cloud.

139
00:10:43.070 --> 00:10:47.540 
these are things like resiliency,
these things like availability is a

140
00:10:47.810 --> 00:10:52.610 
things like scalability, also the
throughput you can achieve

141
00:10:52.890 --> 00:10:57.130 
for a transaction number in a
certain amount of time that you

142
00:10:57.130 --> 00:10:59.940 
want to get through your
hybrid cloud construct.

143
00:11:00.460 --> 00:11:04.900 
now a lot of the capabilities
in a hybrid cloud

144
00:11:05.560 --> 00:11:10.550 
will make it relatively easy to
achieve resiliency, scalability

145
00:11:10.730 --> 00:11:15.020 
and also a throughput and even
performance. however, they need

146
00:11:15.020 --> 00:11:19.130 
to be applied in the right way.
and we'll see that in an example

147
00:11:19.130 --> 00:11:25.690 
that we go through. so what are the main
areas in this architecture heatmap

148
00:11:26.090 --> 00:11:28.280 
in our cheat sheet that
we want to consider?

149
00:11:28.780 --> 00:11:35.260 
well, it's especially security. some
of the nonfunctioning capabilities,

150
00:11:35.560 --> 00:11:38.170 
networking storage
and data.

151
00:11:39.110 --> 00:11:43.240 
and also the managed services
that have to do with not only

152
00:11:43.240 --> 00:11:47.060 
how we develop applications, how
we may be migrated applications,

153
00:11:47.290 --> 00:11:51.390 
and how we build environments
and applications, but also

154
00:11:51.560 --> 00:11:56.420 
once that is in operation how we
continuously manage such an environment.

155
00:11:57.570 --> 00:12:03.460 
let us go through some practical
considerations in a theoretical example

156
00:12:03.600 --> 00:12:06.570 
that i want to present to you.
and that we are going to use

157
00:12:06.570 --> 00:12:09.610 
to emphasize those
architecture points again.

158
00:12:11.430 --> 00:12:16.110 
let's take the example of an existing
application. it's an application

159
00:12:16.120 --> 00:12:20.320 
of the business in shipment and
transportation. let's take

160
00:12:20.320 --> 00:12:24.170 
a simple three-tier example of a
shipment management application

161
00:12:24.490 --> 00:12:30.370 
that is using some core application,
thinking about an enterprise

162
00:12:30.370 --> 00:12:35.040 
resource planning, maybe some
application around are managing

163
00:12:35.040 --> 00:12:38.910 
deliveries, and managing shipments,
and managing inventory.

164
00:12:39.480 --> 00:12:43.710 
then also there is a front and
uses can interact with that

165
00:12:43.710 --> 00:12:47.420 
application through a front, and
through a web browser and of

166
00:12:47.420 --> 00:12:49.510 
course you also have

167
00:12:50.510 --> 00:12:56.900 
a set of directories that contain personal
information, personal information about

168
00:12:57.510 --> 00:13:01.530 
parties in a shipment interaction,
personal information about

169
00:13:01.790 --> 00:13:06.910 
the contact and even about
the financial contacts

170
00:13:06.910 --> 00:13:09.800 
of those parties in a
shipment transaction.

171
00:13:10.460 --> 00:13:14.600 
now this application is running
on-premise today. It has been

172
00:13:14.600 --> 00:13:16.500 
running, let's assume
for a long time.

173
00:13:17.120 --> 00:13:23.670 
let's assume that there is a need to
modernise this application to allow

174
00:13:23.770 --> 00:13:29.220 
other business partners in a larger number
of users to interact with the system.

175
00:13:29.340 --> 00:13:32.580 
but they want to do so
from a mobile device.

176
00:13:33.210 --> 00:13:38.840 
now there would be an option to extend this
application in the on-premise environment

177
00:13:39.200 --> 00:13:45.480 
for this mobile capability. but
since there is a huge set of

178
00:13:45.480 --> 00:13:50.070 
the technology available ready to
use as platforms, as services,

179
00:13:50.070 --> 00:13:53.090 
as capabilities in a public
cloud. let's assume

180
00:13:53.520 --> 00:14:00.130 
this enterprise chose to modernize their
application by extending the mobile access

181
00:14:00.380 --> 00:14:02.450 
through capability
in a public cloud.

182
00:14:03.570 --> 00:14:07.460 
this might look like this, a
public cloud provider chosen

183
00:14:07.460 --> 00:14:13.220 
a regional chosen certain. so
in that region is chosen.

184
00:14:13.590 --> 00:14:18.910 
and since we are able to implement
this a mobile front end

185
00:14:19.130 --> 00:14:24.290 
in some container environment,
we can just plug it into a

186
00:14:24.660 --> 00:14:27.760 
container management environment
in that cloud provided.

187
00:14:28.920 --> 00:14:32.360 
now think about the architecture
cheat sheet again, just go

188
00:14:32.360 --> 00:14:34.620 
through the different
aspects and the domains.

189
00:14:35.200 --> 00:14:37.670 
let's start with the first
one, connectivity.

190
00:14:38.140 --> 00:14:42.300 
let's assume the mobile device
needs to interact with that

191
00:14:42.960 --> 00:14:48.080 
mobile front end. but where does the mobile
front end get all the information from?

192
00:14:48.640 --> 00:14:53.190 
well from dear middle tear in the
existing on-premise environment.

193
00:14:54.010 --> 00:14:58.340 
so one important element to
introduce is network connectivity

194
00:14:58.340 --> 00:15:02.920 
or enterprise connectivity. so there
needs to be connectivity between this

195
00:15:03.540 --> 00:15:08.440 
mobile front end and any existing
application the existing core

196
00:15:08.750 --> 00:15:12.440 
of the shipment and delivery
and inventory system.

197
00:15:12.990 --> 00:15:18.250 
now such a connection needs to be
secure. so we've introduced already

198
00:15:18.850 --> 00:15:24.690 
a firewall here. we introduced capabilities
that do enterprise connectivity.

199
00:15:25.120 --> 00:15:29.400 
either over the internet as a
tunnel over the internet through

200
00:15:29.400 --> 00:15:35.300 
vpn, or as a direct connection direct
link or mpls or similar connection.

201
00:15:35.650 --> 00:15:40.240 
now there's an architecture decision
to be made around what amount of

202
00:15:40.420 --> 00:15:44.470 
throughput you need to get
guaranteed, or what flexibility you

203
00:15:44.470 --> 00:15:47.990 
want. so sedition architecture
decision to be made around

204
00:15:48.480 --> 00:15:54.110 
non functional requirements and throughput
on reliability and redundancy,

205
00:15:54.360 --> 00:15:55.820 
but also on security.

206
00:15:56.730 --> 00:15:58.680 
now to take this
a step further.

207
00:16:00.740 --> 00:16:06.020 
there is also a need to provide
resiliency for that mobile

208
00:16:06.020 --> 00:16:11.120 
fronton. because if one of the zones in a
public cloud provider becomes unavailable,

209
00:16:11.300 --> 00:16:13.480 
or goes down or is a
problem with that.

210
00:16:14.290 --> 00:16:16.930 
you want to continue to
service your mobile

211
00:16:17.600 --> 00:16:22.130 
consumers or users. so, therefore,
there is the need to introduce

212
00:16:22.130 --> 00:16:26.370 
a second zone and the second
zone needs to be then included

213
00:16:26.370 --> 00:16:29.840 
in that your network connectivity
through load-balance

214
00:16:29.840 --> 00:16:31.760 
that we show on this
diagram as well.

215
00:16:32.390 --> 00:16:36.670 
now here's another architecture
decision to be made how do you

216
00:16:36.990 --> 00:16:43.770 
design for resiliency or for capability to
deal with outages in your environment.

217
00:16:44.970 --> 00:16:51.210 
now of course the need for
mobile devices also drives

218
00:16:51.460 --> 00:16:55.180 
the requirement to be able to
deal with a lot of requests.

219
00:16:55.910 --> 00:17:01.830 
those many requests require your
mobile front end to be scalable.

220
00:17:02.030 --> 00:17:05.690 
and so we are introducing here
an environment where you can

221
00:17:05.690 --> 00:17:11.000 
manage your instances of your containers
through the container management system.

222
00:17:11.280 --> 00:17:15.640 
we are also introducing a set of
capabilities to deploy code

223
00:17:15.810 --> 00:17:19.410 
and constantly update that code
and those features and those

224
00:17:19.410 --> 00:17:23.380 
capabilities in this environment.
so therefore you see a devops

225
00:17:23.380 --> 00:17:27.460 
pipeline and also some deployment
capabilities in your environment.

226
00:17:29.170 --> 00:17:33.660 
now, what else is missing? is it
in your mind go through this

227
00:17:33.660 --> 00:17:37.320 
architecture heatmap that
we went through earlier.

228
00:17:37.930 --> 00:17:41.570 
well one consideration is that this
environment also needs to be

229
00:17:41.790 --> 00:17:45.300 
monitored, whether it's up to, whether
there's any issue that comes

230
00:17:45.300 --> 00:17:50.070 
up where there's any capacity shortage
that needs to be addressed. as well as

231
00:17:50.290 --> 00:17:55.440 
for a problem determination reason
and also for regulatory reasons,

232
00:17:55.440 --> 00:18:00.710 
since there may be the need
to lock certain transaction

233
00:18:00.740 --> 00:18:05.120 
elements or certain messages that
are occurring throughout an

234
00:18:05.660 --> 00:18:11.140 
interaction with the mobile front end.
so logging as well as monitoring

235
00:18:11.400 --> 00:18:15.250 
important services that you need
in a hybrid environment as well.

236
00:18:17.180 --> 00:18:17.750 
now let's

237
00:18:19.290 --> 00:18:24.950 
think about this a little bit more.
we've modernized the environment with

238
00:18:25.240 --> 00:18:30.340 
made it accessible over the internet
to mobile uses we've scaled it out.

239
00:18:30.340 --> 00:18:31.930 
we have secured it.

240
00:18:32.610 --> 00:18:35.990 
and now suddenly we find out
that there's additional load

241
00:18:36.680 --> 00:18:40.930 
to the middle tear that is actually
the core of your delivery

242
00:18:40.990 --> 00:18:44.420 
and of your shipment or of
your inventory application.

243
00:18:44.700 --> 00:18:48.770 
how do we scale it can we use
a hybrid cloud, as well?

244
00:18:50.230 --> 00:18:53.300 
let's look at what it means to
take an existing application

245
00:18:53.300 --> 00:18:57.770 
and lift and shift it into a
public cloud that is part

246
00:18:57.780 --> 00:19:03.050 
of a hybrid cloud. now for that,
we want to separate it into

247
00:19:03.050 --> 00:19:07.080 
a separate subnet. does this
middle here once be separated to

248
00:19:07.080 --> 00:19:10.220 
ensure proper network
segmentation and security?

249
00:19:11.270 --> 00:19:14.280 
and so we are moving an
application instance.

250
00:19:15.080 --> 00:19:17.840 
now one other
consideration is

251
00:19:18.590 --> 00:19:23.570 
that we want to scale those applications.
so we need to introduce a way to

252
00:19:23.840 --> 00:19:29.130 
have a monolithic application
scale-out in multiple instances.

253
00:19:29.130 --> 00:19:32.880 
and using virtualization in a
hybrid cloud is one way to do so.

254
00:19:34.280 --> 00:19:40.000 
now a big element on our
architecture heatmap that we

255
00:19:40.000 --> 00:19:44.930 
haven't discussed so far is
need to persist information.

256
00:19:45.520 --> 00:19:48.210 
so far we've been dealing with
a front end which you could

257
00:19:48.210 --> 00:19:52.340 
argue can always go to the back
end to reach the data and pull

258
00:19:52.340 --> 00:19:58.510 
out data and gets state, get
information, get persisted content.

259
00:19:59.710 --> 00:20:03.240 
although that's an over simplification
because even to set up a

260
00:20:03.550 --> 00:20:07.030 
mobile front end, you need
to have some configuration

261
00:20:07.040 --> 00:20:10.970 
data for the application persisted
and some state data persisted

262
00:20:11.090 --> 00:20:14.360 
for your mobile front, and then in the
place where you delivered a service.

263
00:20:14.930 --> 00:20:21.440 
but the real core of this application, the
shipment status, the delivery status,

264
00:20:21.640 --> 00:20:26.990 
the inventory state. all that, it is
connected with this middle here.

265
00:20:27.620 --> 00:20:32.050 
so therefore we now need to introduce
a storage or data services

266
00:20:32.110 --> 00:20:34.910 
in this hybrid cloud distributed
environment as well.

267
00:20:36.080 --> 00:20:42.060 
as we introduce data to be stored in
different places of this hybrid cloud.

268
00:20:42.490 --> 00:20:46.040 
we need to think about elements
like data migration,

269
00:20:46.630 --> 00:20:52.880 
and data replication, keeping data
consistent, as well as security

270
00:20:52.880 --> 00:20:57.320 
of data in rest. not all these
would be architectural decisions.

271
00:20:57.700 --> 00:21:01.800 
but you need to make as soon as
you put some persistent storage

272
00:21:02.600 --> 00:21:05.070 
in elements of your
hybrid cloud.

273
00:21:06.780 --> 00:21:13.510 
now one element we haven't discussed yet is
that from an overall business perspective.

274
00:21:14.040 --> 00:21:17.010 
in a hybrid cloud, you have
so many moving parts

275
00:21:17.620 --> 00:21:23.940 
that all drive cost that you want to keep
track off where does your cost occur.

276
00:21:24.440 --> 00:21:28.620 
and where to charge your cost,
too. so cost management,

277
00:21:29.070 --> 00:21:35.130 
cost transparency, cost inside, as
well as the ability to charged

278
00:21:35.130 --> 00:21:39.220 
back to text certain cost buckets
and charged him to different

279
00:21:39.220 --> 00:21:43.180 
departments or different project
is an important part of your

280
00:21:43.180 --> 00:21:44.800 
hybrid cloud
journey as well.

281
00:21:45.910 --> 00:21:50.000 
so looking at this example
we've gone through several of

282
00:21:50.010 --> 00:21:54.220 
the main architecture decisions you
need to make as you build out

283
00:21:55.000 --> 00:22:00.180 
a hybrid cloud environment.
and as you benefit

284
00:22:00.360 --> 00:22:02.490 
from the value of
hybrid cloud which is

285
00:22:02.900 --> 00:22:08.270 
the ability to modernize, the ability to
scale, the ability to drive flexibility,

286
00:22:08.940 --> 00:22:13.700 
as well as the ability to and
then reach a new set off

287
00:22:13.710 --> 00:22:16.900 
of consumers or customers also
users with that environment.

288
00:22:18.070 --> 00:22:24.090 
now one thing that i am sure we all
realized as we went through this example

289
00:22:25.690 --> 00:22:28.240 
is that this is quite
a complex setup.

290
00:22:29.050 --> 00:22:35.460 
if you think about now deploying this to
two or more public cloud providers,

291
00:22:35.800 --> 00:22:40.140 
if you think about leveraging
more than just one application.

292
00:22:40.740 --> 00:22:45.900 
maybe some companies have dozens or hundreds
of applications in their portfolio.

293
00:22:46.220 --> 00:22:50.950 
if you now find them out your hybrid
cloud to a distributed environment,

294
00:22:51.350 --> 00:22:55.430 
you can easily see that these
numerous architecture decisions

295
00:22:55.430 --> 00:22:59.300 
that you make and his numerous
capabilities that you can leverage

296
00:22:59.680 --> 00:23:01.360 
drive a lot of
complexity.

297
00:23:02.270 --> 00:23:05.850 
so additional contributors
to that complexity is

298
00:23:06.810 --> 00:23:12.160 
that oftentimes applications are built
to a native cloud provider model.

299
00:23:12.510 --> 00:23:17.370 
so applications are hardcoded or
locked in to the capabilities

300
00:23:17.370 --> 00:23:19.110 
of one certain
cloud provider.

301
00:23:19.770 --> 00:23:26.220 
also that the element
of cost is driven

302
00:23:26.220 --> 00:23:30.550 
through the different providers
is something that is isolated

303
00:23:30.560 --> 00:23:35.510 
to a certain provider and not seen in
its combination. so the combination of

304
00:23:35.680 --> 00:23:38.650 
what cost the curse may be in the
public cloud, what additional

305
00:23:38.650 --> 00:23:43.160 
cost occurs in capacity needs
on-premise, to put those together

306
00:23:43.460 --> 00:23:45.640 
is a challenge that
needs to be addressed.

307
00:23:46.680 --> 00:23:51.120 
distributing data and even
distributing stateless operation,

308
00:23:51.930 --> 00:23:57.290 
office additional surface for security
or for attacks on security.

309
00:23:57.850 --> 00:24:01.820 
those need to be addressed as well
and managed in a consistent way.

310
00:24:03.090 --> 00:24:09.700 
now limited adoption of
capabilities that today are

311
00:24:10.100 --> 00:24:14.490 
our common state of the art for
mission-critical applications, like

312
00:24:14.660 --> 00:24:18.290 
synchronous replication of
data between failure zones.

313
00:24:19.000 --> 00:24:22.350 
there is something that needs
to be addressed especially as

314
00:24:22.360 --> 00:24:27.630 
state or data or critical business
data is moved to a hybrid

315
00:24:27.630 --> 00:24:32.470 
cloud environment as well.
how can this data and the

316
00:24:32.600 --> 00:24:36.730 
resiliency and mission critical
aspect of those application

317
00:24:36.880 --> 00:24:38.840 
be achieved in a
hybrid cloud model.

318
00:24:40.160 --> 00:24:48.480 
now building up such an environment from
on a proprietary set of platforms or

319
00:24:48.680 --> 00:24:51.630 
just consuming different
services and composing. then

320
00:24:52.480 --> 00:24:56.980 
you can easily see that it becomes
a critical and difficult element.

321
00:24:57.210 --> 00:25:03.120 
especially if we now start to add edge
computing with additional compute elements

322
00:25:03.230 --> 00:25:07.980 
and move some of the computation and
some of the operation closer to where

323
00:25:08.240 --> 00:25:13.800 
data is consumed or where
data is created in the form

324
00:25:13.800 --> 00:25:18.900 
of sensors or other elements.
now this distribution of your

325
00:25:19.270 --> 00:25:22.510 
element of your service
or of your application

326
00:25:23.130 --> 00:25:27.560 
obviously,the it builds up complexity.
how can this be solved? this

327
00:25:27.560 --> 00:25:30.410 
challenge can be solved by the
introduction of a platform few.

328
00:25:30.640 --> 00:25:37.150 
a platform that provides commonality across
multiple deployment targets, across

329
00:25:37.280 --> 00:25:41.850 
public clouds, private clouds
on-premise elements as well as

330
00:25:42.300 --> 00:25:47.980 
edges compute edges that deploy some
form of computation and some form of

331
00:25:48.320 --> 00:25:53.890 
data handling. now such a platform
makes it easier to build

332
00:25:53.970 --> 00:25:58.610 
an application once and then deployed
to multiple clould private providers.

333
00:25:59.110 --> 00:26:04.240 
it allows to have deployment of the
same application in many different

334
00:26:04.420 --> 00:26:10.690 
target places. deployment of the
platform it is simple because

335
00:26:10.860 --> 00:26:14.230 
it is using the same capabilities
in your desktops pipeline.

336
00:26:14.540 --> 00:26:21.960 
and you lower the friction of deployment
by enabling progressive migration. so

337
00:26:22.320 --> 00:26:27.670 
it's possible to first implement
a part of it on-premise

338
00:26:28.670 --> 00:26:33.800 
abiding by data locality rules.
and an overtime moving that over

339
00:26:34.010 --> 00:26:37.950 
may be to places that become more
secure as you harden those

340
00:26:37.950 --> 00:26:46.440 
places in a hybrid cloud. so standardizing on run
times, standardizing platform and standardizing

341
00:26:46.620 --> 00:26:52.250 
development technologies are all
features of such a platform approach

342
00:26:52.370 --> 00:26:53.420 
to hybrid cloud.

343
00:26:54.750 --> 00:26:59.490 
when ibm believed that the hype
that the hybrid multi cloud

344
00:26:59.490 --> 00:27:04.560 
platform that we offer delivers
on all those requirements. it

345
00:27:04.560 --> 00:27:11.050 
is built on the capabilities of our red hat
open shift, hybrid multi-cloud platform

346
00:27:11.360 --> 00:27:16.430 
which allows building an application
once deployed everywhere.

347
00:27:16.760 --> 00:27:21.700 
to be able to a consistently create
applications and manage them

348
00:27:22.060 --> 00:27:26.590 
in a uniform fashion across multiple
providers, and multiple deployment

349
00:27:26.980 --> 00:27:30.360 
entrance, as well as multiple
deployment capabilities.

350
00:27:30.990 --> 00:27:35.010 
it also comes with capabilities
to address many of the other

351
00:27:35.010 --> 00:27:40.600 
architecture decisions that we went through.
for example, considerations about different

352
00:27:40.870 --> 00:27:45.250 
application runtimes, about different
forms of data persistency,

353
00:27:45.630 --> 00:27:50.350 
about the integration of
different services. as well

354
00:27:50.350 --> 00:27:54.180 
as automating the deployment,
but also automating

355
00:27:54.190 --> 00:27:57.240 
the operation and management
aspect of the environment.

356
00:27:58.170 --> 00:28:04.610 
a consistent security framework is at the
heart of this hybrid multi cloud platform

357
00:28:04.760 --> 00:28:09.790 
and allows you to leverage the same
security capabilities across all your

358
00:28:09.950 --> 00:28:15.740 
deployment options. now all of these
platform elements come with a

359
00:28:16.030 --> 00:28:22.970 
array of management services around
advice move for migration both

360
00:28:23.560 --> 00:28:28.270 
application migration, as well
as data migration, build

361
00:28:28.270 --> 00:28:32.140 
of environments, build of capabilities
but also build up applications

362
00:28:32.410 --> 00:28:37.140 
and then the management of applications
and management of business processes,

363
00:28:37.300 --> 00:28:43.680 
and as you see across by a wide variety of
deployment infrastructure be that unpremeditated

364
00:28:43.840 --> 00:28:49.070 
private clouds public cloud providers
or edged computer services.

365
00:28:50.410 --> 00:28:55.040 
now, in summary, we've gone through
the definition of different terms

366
00:28:55.390 --> 00:28:59.070 
that are all connected
to the hybrid cloud.

367
00:28:59.660 --> 00:29:05.980 
we've understood what differentiates a hybrid
cloud from just using multiple clouds.

368
00:29:06.860 --> 00:29:10.960 
we have discussed the market drivers
and also the business drivers

369
00:29:11.200 --> 00:29:16.110 
that lead enterprises and also
it businesses more and more

370
00:29:16.180 --> 00:29:19.820 
to adopt a hyper cloud model and
deploy their applications there.

371
00:29:20.620 --> 00:29:24.680 
we've gone through a complete set
of architectural considerations

372
00:29:24.680 --> 00:29:28.610 
and picked some of those
considerations out in an example of

373
00:29:28.610 --> 00:29:32.090 
understanding what it means to
modernize an existing application.

374
00:29:32.370 --> 00:29:37.890 
and also extended through
scalability features that

375
00:29:37.900 --> 00:29:39.570 
we implemented with
hybrid cloud.

376
00:29:40.480 --> 00:29:47.650 
with them, we introduced the need for a
platform to handle the hybrid cloud reality.

377
00:29:48.260 --> 00:29:53.410 
I hope you enjoyed this
session on the hybrid cloud.

378
00:29:53.900 --> 00:29:55.650 
and I want to thank
you for your time.
