WEBVTT

1
00:00:05.820 --> 00:00:07.050 
Now let's come to the HTML 5.

2
00:00:09.150 --> 00:00:12.820 
What is included? What belongs to HTML 5? Over many years there

3
00:00:12.820 --> 00:00:17.430 
were different groups working on the development of HTML 5.

4
00:00:17.760 --> 00:00:22.570 
There are many different technologies available. It's not necessary that you

5
00:00:22.930 --> 00:00:24.270 
see any of this

6
00:00:25.960 --> 00:00:30.580 
technique that I used. What is important is that you see here with

7
00:00:30.580 --> 00:00:35.780 
a blue and with a green and with a yellow circle set different

8
00:00:35.980 --> 00:00:40.060 
groups, different working groups different institution considered

9
00:00:40.560 --> 00:00:45.190 
have a different understanding of what belongs to HTML 5.

10
00:00:45.410 --> 00:00:47.490 
For example, here is a blue one.

11
00:00:48.120 --> 00:00:52.530 
This is a World Wide Web consortium, the specification by the

12
00:00:52.530 --> 00:00:57.160 
World Wide Web consortium. This is what is in the close sense

13
00:00:57.880 --> 00:01:00.940 
meant when we speak about HTML 5.

14
00:01:01.640 --> 00:01:07.500 
It is a developer. It is a developer additions as XHTML5.

15
00:01:07.590 --> 00:01:12.670 
They are audio video. They are HTML5 player and others,

16
00:01:13.130 --> 00:01:17.490 
and when we look what was original game from the what working

17
00:01:17.490 --> 00:01:20.500 
group which has started the development of

18
00:01:21.030 --> 00:01:25.320 
the HTML standard, they had a larger understanding.

19
00:01:25.720 --> 00:01:31.190 
The green line, they also were thinking about HTML5

20
00:01:31.690 --> 00:01:38.040 
micro data on service and events, web messages, web workers and others. And other

21
00:01:38.560 --> 00:01:43.900 
working groups, they had a different understanding.

22
00:01:44.350 --> 00:01:50.470 
So it was in this development process, it runs over several years.

23
00:01:51.110 --> 00:01:54.480 
Different techniques and it was difficult to really

24
00:01:54.950 --> 00:01:57.720 
define, find out what is the standard and

25
00:01:58.230 --> 00:02:00.180 
it was also difficult for the browser

26
00:02:01.260 --> 00:02:05.910 
designers for the manufacturers of the browser because the

27
00:02:05.910 --> 00:02:11.670 
browsers has to implement all this feature, otherwise HTML5

28
00:02:12.490 --> 00:02:16.780 
documents would not be presented in the right way.

29
00:02:17.190 --> 00:02:24.010 
Fortunately now we have a situation that HTML5 really can come

30
00:02:24.210 --> 00:02:25.600 
into practical application.

31
00:02:27.910 --> 00:02:30.680 
The HTML5 goals and paradigms.

32
00:02:32.250 --> 00:02:35.570 
You remember after the HTML working group in the World Wide

33
00:02:35.570 --> 00:02:40.500 
Web consortium was split into the WHAT Working Group that one

34
00:02:40.500 --> 00:02:46.090 
to develop a practice oriented standard and the XHTML group that

35
00:02:46.690 --> 00:02:51.220 
was more theoretical concentrated on designing

36
00:02:52.170 --> 00:02:54.410 
silent language standard.

37
00:02:55.190 --> 00:02:56.880 
WHAT Working Group, they

38
00:02:57.650 --> 00:02:59.160 
said it should be simple.

39
00:02:59.820 --> 00:03:02.580 
Simple is much more important and that it is

40
00:03:03.130 --> 00:03:08.890 
clean in a theoretical sense. So they want to provide

41
00:03:09.720 --> 00:03:15.170 
the possibility that as well the users as well as the authors, the designers

42
00:03:15.440 --> 00:03:20.320 
the browser manufacturers, that they all can contribute to such a standard.

43
00:03:20.860 --> 00:03:24.170 
The one Development Paradigm of the

44
00:03:25.520 --> 00:03:31.730 
WHAT Working Group was that users and user wishes are more important than authors

45
00:03:31.870 --> 00:03:33.830 
and authors' wishes. And authors'

46
00:03:35.150 --> 00:03:39.180 
wishes are more important than implementers of specific

47
00:03:40.590 --> 00:03:47.350 
implementers and they were more important than specify us, even more important

48
00:03:47.570 --> 00:03:52.990 
than theoretical purity. Users over authors over implementers over specifiers over

49
00:03:53.150 --> 00:03:59.510 
theoretical purity. The goal of designing HTML5 was

50
00:04:00.290 --> 00:04:06.690 
to be developed incrementally, to have backwards compatibility,

51
00:04:06.860 --> 00:04:10.570 
because in the Web there are many documents and described web

52
00:04:10.570 --> 00:04:13.310 
documents described in older HTML standards.

53
00:04:14.340 --> 00:04:20.090 
It should be easy in use and should better implement a separation

54
00:04:20.090 --> 00:04:26.310 
between the structure and the layout to make it more easy to handle,

55
00:04:26.690 --> 00:04:31.780 
actualize and provide different versions for documents. Then

56
00:04:31.780 --> 00:04:34.250 
in the past with the older versions of HTML5 and

57
00:04:35.730 --> 00:04:40.130 
XHTML5, they

58
00:04:40.840 --> 00:04:42.810 
commonly should come in the

59
00:04:43.610 --> 00:04:49.030 
Document Object Model- DOM5. This provides the

60
00:04:49.450 --> 00:04:54.420 
interaction mean between the document description and the

61
00:04:56.020 --> 00:04:57.140 
client-side script.

62
00:04:59.130 --> 00:05:08.300 
One important design decision was that HTML5 is no longer based on SGML.

63
00:05:09.280 --> 00:05:14.760 
And for that reason, it was no based

64
00:05:15.220 --> 00:05:17.410 
on document type definitions,

65
00:05:18.470 --> 00:05:22.310 
because it was difficult to design the document type definitions

66
00:05:22.310 --> 00:05:28.400 
and to work with. So instead of using such complicated document type definitions

67
00:05:29.030 --> 00:05:32.890 
in HTML5, one works with simple

68
00:05:33.520 --> 00:05:39.190 
doctype definitions which are given in the HTML header with

69
00:05:39.920 --> 00:05:42.720 
this tag. But

70
00:05:44.050 --> 00:05:47.840 
no check with existing validation tools which are based on

71
00:05:47.850 --> 00:05:49.670 
document type definitions where

72
00:05:50.310 --> 00:05:54.410 
possible. If the concept of document type definitions give them up,

73
00:05:54.650 --> 00:05:56.130 
then all the tools,

74
00:05:57.110 --> 00:06:02.700 
mainly tools for validating web pages, they could not more be used.

75
00:06:03.060 --> 00:06:09.560 
So it was important to develop special validators for HTML5 documents.

76
00:06:10.880 --> 00:06:18.410 
So here is an html skeleton. So a very simple and reduced HTML5 document.

77
00:06:18.810 --> 00:06:23.700 
It starts with a doctype, with a doctype definition.

78
00:06:24.680 --> 00:06:27.990 
It's said that HTML is used

79
00:06:28.750 --> 00:06:33.420 
in language form Germany's and there is a header and the information

80
00:06:33.420 --> 00:06:38.210 
of the header given, and here is a body description and then the

81
00:06:38.370 --> 00:06:41.380 
HTML document is finished.

82
00:06:43.170 --> 00:06:50.030 
You see what they are using HTML also called Speaking Structural Elements.

83
00:06:52.150 --> 00:06:53.860 
In the former version,

84
00:06:54.510 --> 00:06:56.990 
of HTML 4.0

85
00:06:57.740 --> 00:07:03.170 
the most utilized structuring block element was the div tag.

86
00:07:05.160 --> 00:07:08.550 
Section maybe section of a book, maybe section of a document,

87
00:07:08.550 --> 00:07:13.830 
maybe section of many different things. So in HTML5, a

88
00:07:14.430 --> 00:07:20.260 
large number of elements are defined that can be used instead of this

89
00:07:21.510 --> 00:07:26.100 
uniform div tag. So here are example, for example section

90
00:07:26.530 --> 00:07:33.520 
tag, the article tag, the header tag, the footer tag, aside, nav, figure.

91
00:07:33.740 --> 00:07:38.590 
So, with this speaking structural element, for the designer of such

92
00:07:38.590 --> 00:07:41.710 
a document it becomes more easy to exactly say

93
00:07:42.170 --> 00:07:47.660 
what he assumes this part of the document, what role this plays.

94
00:07:48.160 --> 00:07:51.730 
Here is an example- for example you start with a header,

95
00:07:52.160 --> 00:07:58.360 
then there are a navigation, part of the document, and it is an

96
00:07:59.080 --> 00:08:03.340 
article document. So to see here, it had a section, header, footer.

97
00:08:04.090 --> 00:08:09.750 
This first article is close and next article starts and when we compare it

98
00:08:10.170 --> 00:08:16.250 
to what is described in the web page, this is a web page, how it

99
00:08:16.690 --> 00:08:21.460 
looks like, it's our HPI Gipfelblog, then the header describes

100
00:08:21.670 --> 00:08:28.050 
this part of the web page. Then we have this part which describes the navigation

101
00:08:28.280 --> 00:08:33.150 
tools of the document. Then here this is article one. This is

102
00:08:33.150 --> 00:08:36.820 
what's described in this part of the document. There is a

103
00:08:37.260 --> 00:08:41.230 
header, there is a section, there are perhaps different sections,

104
00:08:41.230 --> 00:08:45.080 
there is a footer. And then there is a- here is a section,

105
00:08:45.370 --> 00:08:51.710 
here is a footer, then we have a new article. A new article with a new section.

106
00:08:52.200 --> 00:08:58.550 
And then, there is a right part of the document. This is described by the

107
00:08:58.740 --> 00:09:05.370 
side element. A side element describes this part of the webpage, and then

108
00:09:05.990 --> 00:09:10.580 
there is also a footer. So you see by means of the structural elements, one can

109
00:09:11.120 --> 00:09:14.790 
combine and understanding which part of the web document is

110
00:09:14.790 --> 00:09:15.870 
described in this way.

111
00:09:17.380 --> 00:09:22.750 
Very important for HTML5 are the multimedia tags.

112
00:09:23.770 --> 00:09:29.960 
So it's possible now to include audio and video inside a web page.

113
00:09:30.550 --> 00:09:36.630 
In the former of HTML versions, one needs special plug-ins, for example

114
00:09:37.010 --> 00:09:40.770 
windows Media Player or Quicktime, VideoLAN

115
00:09:41.740 --> 00:09:45.520 
which has to be connected to the browser so that the browser is able

116
00:09:45.930 --> 00:09:50.050 
to interpret an audio file or a video file.

117
00:09:51.140 --> 00:09:55.310 
By means of HTML5, this multimedia

118
00:09:56.530 --> 00:10:01.240 
files can be immediately included into the

119
00:10:01.700 --> 00:10:06.290 
web page for example by the audio or by the video

120
00:10:06.420 --> 00:10:09.790 
structural element tag and then

121
00:10:11.030 --> 00:10:16.730 
the media players are directly implemented

122
00:10:16.730 --> 00:10:17.470 
in the browser.

123
00:10:19.590 --> 00:10:25.630 
So audio tags and video tags are of course part of this Document Object Model,

124
00:10:26.170 --> 00:10:31.100 
for example there are controls available here, for you know

125
00:10:31.100 --> 00:10:34.650 
this from video plays, pause, volume

126
00:10:35.300 --> 00:10:39.580 
that can be designed by means of cascading stylesheets. It's

127
00:10:39.580 --> 00:10:43.580 
simple to design this element, it's simple to change the design.

128
00:10:44.050 --> 00:10:47.700 
And then the multimedia controls, for example the jump labels,

129
00:10:47.700 --> 00:10:52.960 
the playlist and so on can be implemented using a javascript.

130
00:10:55.530 --> 00:11:01.550 
So the intended codecs that should be come with the browser are

131
00:11:02.110 --> 00:11:04.420 
in the case of audio : mp3

132
00:11:05.320 --> 00:11:13.500 
wma, AAC, Ogg Vorbis and when we speak about videos, then it's H.264, Ogg

133
00:11:14.110 --> 00:11:19.080 
Theora, WebM. So the wish of the user would be that every browser

134
00:11:19.530 --> 00:11:22.010 
would be able to understand this

135
00:11:22.940 --> 00:11:29.630 
to understand and be able to present data that are encoded in that format.

136
00:11:31.010 --> 00:11:32.350 
Alternative services: so,

137
00:11:33.210 --> 00:11:38.380 
different codecs or different bitrates can be provided with the source tag

138
00:11:38.510 --> 00:11:43.880 
inside the document. But there was one problem. The problem was

139
00:11:43.930 --> 00:11:49.390 
that the standard does not mandate which codec must be strictly implemented.

140
00:11:50.150 --> 00:11:53.720 
So the browser manufactures, they do this in a different way.

141
00:11:54.400 --> 00:11:59.750 
For example the chrome designers say support all three video

142
00:12:00.260 --> 00:12:06.180 
codecs. Safari browser and Internet Explorer, they only

143
00:12:06.180 --> 00:12:13.290 
support H.264. Firefox only supports Ogg Theora and

144
00:12:13.730 --> 00:12:17.160 
WebM on the Linux and the Windows XP, and

145
00:12:18.230 --> 00:12:20.820 
expansion is needed for the,

146
00:12:21.610 --> 00:12:26.430 
expansion is needed to be able to also interpret H.264.

147
00:12:26.880 --> 00:12:31.250 
So in this standards, these are the standard codecs but a

148
00:12:31.710 --> 00:12:35.990 
different browser, as a different browser manufacturers come

149
00:12:35.990 --> 00:12:41.770 
up with different implementation of these videos. So for the user

150
00:12:42.230 --> 00:12:46.430 
sometimes the problem that the browser is not able to display

151
00:12:46.440 --> 00:12:47.940 
such a multimedia element.

152
00:12:49.950 --> 00:12:53.090 
That's a problem for the content provider. The content provider wants

153
00:12:53.580 --> 00:12:58.790 
to secure that every user is able to see this multimedia

154
00:12:59.210 --> 00:13:04.640 
document. So the content providers must offer different formats,

155
00:13:04.890 --> 00:13:08.220 
so that the browser can use that format

156
00:13:08.930 --> 00:13:10.880 
it understands.

157
00:13:12.440 --> 00:13:18.520 
Here is an example for an audio tag with different sources.

158
00:13:18.940 --> 00:13:24.010 
So you see, our audio source is the data given and then the

159
00:13:24.010 --> 00:13:30.030 
type is described for the first format. Then another source is provided

160
00:13:30.220 --> 00:13:34.550 
for the mp3 format. And then

161
00:13:36.720 --> 00:13:38.340 
if the browser is not able

162
00:13:39.020 --> 00:13:41.670 
or not able to understand the

163
00:13:42.390 --> 00:13:48.560 
wma or the mp3 format, then the browser shows the text

164
00:13:48.840 --> 00:13:53.190 
which says, if you can read this, your browser does not support

165
00:13:53.430 --> 00:13:57.270 
the html audio element which is provided in the document.

166
00:13:57.810 --> 00:14:01.960 
You see it's not a nice way it is difficult for the content

167
00:14:01.960 --> 00:14:06.690 
provider because they have to provide different formats of their sources,

168
00:14:07.020 --> 00:14:12.410 
and there is no guarantee that the browser is able to understand

169
00:14:13.260 --> 00:14:14.590 
one of the sources.

170
00:14:16.890 --> 00:14:24.850 
Yeah another important feature in HTML5 are 'forms'. Forms, you remember

171
00:14:25.380 --> 00:14:34.370 
was this important tool to transport user data to the server application or

172
00:14:34.550 --> 00:14:40.560 
to request user data. So forms in HTML5 are based on the Web Forms

173
00:14:40.860 --> 00:14:47.010 
2.0. There is a backward compatibility with Web

174
00:14:47.110 --> 00:14:51.170 
Forms 1.0, which are used in HTML 4.

175
00:14:51.920 --> 00:14:57.550 
So the form elements can be nested. The input elements outside

176
00:14:57.550 --> 00:15:03.780 
of the form can be associated with it by means of form attributes.

177
00:15:03.960 --> 00:15:08.970 
Here is an example. For example input type text form my form

178
00:15:09.280 --> 00:15:14.510 
and new type and attributes for input files allow a dynamic

179
00:15:14.510 --> 00:15:20.340 
extension of forms and client side input validation using javascript.

180
00:15:20.580 --> 00:15:24.340 
Reason is that it is difficult if the user data are not in

181
00:15:24.340 --> 00:15:27.120 
the correct form, and then they are transported to the server,

182
00:15:27.120 --> 00:15:31.640 
and the server finds out that they are not correct. It's much better to immediately

183
00:15:31.850 --> 00:15:37.240 
validate the data on client side and this is possible by means of javascript

184
00:15:38.590 --> 00:15:40.430 
when we work with HTML 5.

185
00:15:41.560 --> 00:15:43.750 
So here for example new input types, there are

186
00:15:44.560 --> 00:15:53.310 
for example tel, url, email address datatime, time. There are new attributes

187
00:15:53.850 --> 00:16:00.940 
here in the HTML 5 compared to former forms version, for example minimum, maximum,

188
00:16:01.170 --> 00:16:02.630 
step required.

189
00:16:04.870 --> 00:16:10.090 
To show you an example of a form with a validation, so here is the form-

190
00:16:10.570 --> 00:16:17.690 
the my form action done register php - method that is used and which is

191
00:16:17.690 --> 00:16:22.530 
used for transport data is post and then there is a name, there

192
00:16:22.530 --> 00:16:26.880 
is a name requests, as a telephone requests, as email requests as

193
00:16:27.780 --> 00:16:32.630 
as alter inquest and this

194
00:16:33.230 --> 00:16:38.730 
can be given, or are requested from the user. The user can type it in

195
00:16:39.140 --> 00:16:44.390 
and here you see for example, that the email type is required

196
00:16:44.390 --> 00:16:48.850 
when an email is requested from a user. So one can see an email

197
00:16:48.850 --> 00:16:52.770 
is characterized by this aat symbol and has a special structure

198
00:16:52.860 --> 00:16:56.280 
and if there is an input which does not follow the structure

199
00:16:56.490 --> 00:16:57.710 
then it cannot be in

200
00:16:58.580 --> 00:17:02.880 
not of type email and then its refused same with the age,

201
00:17:02.880 --> 00:17:07.350 
for example there is a check whether age is older than eighteen.

202
00:17:09.020 --> 00:17:11.400 
And then there is a check box

203
00:17:12.610 --> 00:17:19.570 
where the action is performed. So this newsletter checkbox this is outside

204
00:17:19.790 --> 00:17:22.130 
the form element.

205
00:17:25.330 --> 00:17:29.810 
There is another and using with HTML 5 and this is

206
00:17:30.230 --> 00:17:36.410 
Canvas. Canvas tag provides workspace for bitmap graphics.

207
00:17:37.340 --> 00:17:41.960 
Originally this was developed by Apple for WebKit browser engine,

208
00:17:42.380 --> 00:17:48.410 
and now the WHAT Working Group was thinking that's very important

209
00:17:48.410 --> 00:17:53.810 
and good idea and incorporated this into the what WHATWG standard into

210
00:17:53.960 --> 00:17:59.740 
HTML 5. And what's possible is to draw on such a canvas

211
00:17:59.990 --> 00:18:04.160 
by means of javascript with an animation of,

212
00:18:06.260 --> 00:18:11.350 
it's possible to draw things and to animate such drawings by means of javascript.

213
00:18:12.520 --> 00:18:19.490 
Until now only two dimensional workspace is provided but from the beginning as

214
00:18:19.990 --> 00:18:24.580 
it is people were thinking to expand this to 3D conceivable.

215
00:18:25.520 --> 00:18:32.960 
Supported elements are lines, are rectangles, are arcs

216
00:18:33.590 --> 00:18:40.530 
Bezier curves or color gradients. And this canvas support also the so-called

217
00:18:40.690 --> 00:18:45.370 
alpha channel. And alpha channel that is the possibility to describe

218
00:18:45.770 --> 00:18:51.230 
the transparency of an input. To give an example, example is

219
00:18:51.830 --> 00:18:58.570 
to draw a blue square. Here is the description inside the HTML document.

220
00:18:58.790 --> 00:19:06.610 
So as a canvas is introduced with the attribute, with the name, example

221
00:19:06.950 --> 00:19:14.160 
then the size of this canvas is characterized. And if the browser does not support

222
00:19:14.460 --> 00:19:18.840 
the HTML 5 canvas then this is the plate here, because then

223
00:19:18.840 --> 00:19:21.470 
the browser does not understand what it means.

224
00:19:22.180 --> 00:19:26.420 
And then there is a script with a text- java's text

225
00:19:26.850 --> 00:19:32.690 
and this provides access to the canvas elements by variable,

226
00:19:33.240 --> 00:19:34.980 
by the variable where by example

227
00:19:35.710 --> 00:19:39.770 
document is characterized, example is characterized and then

228
00:19:39.780 --> 00:19:41.740 
the color is fixed.

229
00:19:43.900 --> 00:19:46.290 
The dimension is fixed, the type of

230
00:19:47.210 --> 00:19:51.700 
image is fixed, and this is a result if you see to the web page

231
00:19:51.700 --> 00:19:58.790 
there is a blue square, and here inside this is a document which

232
00:19:58.790 --> 00:20:04.760 
was described in this HTML text and here you see the

233
00:20:05.210 --> 00:20:14.170 
size and the meaning how such images how such drawings are embedded in such

234
00:20:14.340 --> 00:20:17.370 
web pages. So this provides the possibility

235
00:20:19.050 --> 00:20:23.190 
to make drawings inside of HTML 5 documents.

236
00:20:24.620 --> 00:20:28.780 
But there are a lot of more features, remember I mentioned already

237
00:20:28.780 --> 00:20:32.770 
that there are about 120 different tags

238
00:20:32.890 --> 00:20:38.430 
coming with HTML5 here are some of the new tags, for example time

239
00:20:38.630 --> 00:20:44.130 
meter or progress. Then some old elements are

240
00:20:44.580 --> 00:20:49.220 
eliminated for example center, font, u frame, frameset.

241
00:20:49.980 --> 00:20:54.410 
Then there is an native support of Scalable Vector Graphics

242
00:20:54.890 --> 00:21:00.980 
SVGs and MathML. You remember, MathML was the

243
00:21:02.120 --> 00:21:09.790 
language based on XML, which is usable for describing mathematical formulas.

244
00:21:10.370 --> 00:21:19.180 
Then RDFa is integrated microformats are integrated with HTML micro data.

245
00:21:19.600 --> 00:21:28.820 
RDF is possibility to describe also the meaning of some some

246
00:21:28.820 --> 00:21:30.430 
syntactic and some semantical

247
00:21:31.090 --> 00:21:37.420 
relations between different elements, and so it provides a possibility,

248
00:21:37.780 --> 00:21:39.780 
it provides a possibility to

249
00:21:41.040 --> 00:21:45.820 
enlarge the possibilities for dividing

250
00:21:46.910 --> 00:21:49.520 
web pages, and for designing web pages.

251
00:21:51.010 --> 00:21:54.290 
Now I already mentioned the designer of a standard

252
00:21:54.790 --> 00:21:55.990 
can do what they want.

253
00:21:56.710 --> 00:22:00.780 
Important is whether the browser vendors

254
00:22:01.550 --> 00:22:05.130 
implemented different features, implemented different tags

255
00:22:05.840 --> 00:22:11.730 
and I also mentioned that there was a long way of developing this HTML 5.

256
00:22:11.950 --> 00:22:16.870 
So over many years, the support of the new HTML, the

257
00:22:17.430 --> 00:22:21.890 
occurring HTML 5 elements were only

258
00:22:23.330 --> 00:22:30.260 
partially given. Now 2014, HTML 5 was considered the standard.

259
00:22:30.580 --> 00:22:36.130 
If we now look what is the browser support of all these new language elements,

260
00:22:36.720 --> 00:22:41.630 
then we can state that the latest versions of the most widespread browsers

261
00:22:41.850 --> 00:22:47.710 
which are Firefox, Opera, Chrome, Safari, Internet Explorer. They already

262
00:22:47.820 --> 00:22:53.060 
widely support HTML 5. They widely this structuring tags,

263
00:22:53.450 --> 00:22:59.300 
they widely support canvas and they widely provide the audio video.

264
00:22:59.500 --> 00:23:04.250 
But with the restriction that some of them only

265
00:23:04.920 --> 00:23:11.240 
provide a subset of the codecs, which are defined in the HTML 5

266
00:23:11.240 --> 00:23:14.830 
standard as part of HTML 5.

267
00:23:15.790 --> 00:23:19.030 
If we look to the HTML Form features,

268
00:23:19.690 --> 00:23:24.370 
previously Web Forms 2.0, then until now only

269
00:23:24.940 --> 00:23:32.480 
extensively support is given by Opera and by Chrome and only a partial support

270
00:23:32.890 --> 00:23:34.750 
is given by the Internet Explorer 10+,

271
00:23:35.810 --> 00:23:41.890 
by Firefox, by Safari. So with the form features support

272
00:23:41.900 --> 00:23:47.810 
is not far going. If you want to test this, then a here are two

273
00:23:47.810 --> 00:23:51.550 
web pages, two URLS, which exactly show

274
00:23:52.070 --> 00:23:57.480 
if you go to the web pages exactly show which browser supports which features

275
00:23:57.820 --> 00:24:02.430 
which browser does not support what feature so here you can

276
00:24:02.430 --> 00:24:08.110 
see the actual situation, and what we can expect that with future versions

277
00:24:08.700 --> 00:24:16.230 
of the browser that more support of HTML 5 is given but

278
00:24:16.960 --> 00:24:19.620 
we can live with the situation that we have now.
