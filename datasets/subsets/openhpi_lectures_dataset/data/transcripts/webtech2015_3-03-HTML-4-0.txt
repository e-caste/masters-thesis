WEBVTT

1
00:00:05.100 --> 00:00:08.910 
Now let's have a closer look to HTML version 4.0.

2
00:00:11.100 --> 00:00:16.370 
With HTML version 4.0, the Cascading Stylesheets were introduced

3
00:00:16.610 --> 00:00:21.330 
and the cascading stylesheets made many earlier HTML construct superfluous.

4
00:00:22.050 --> 00:00:29.450 
But on the other side, wants to ensure that the new HTML version is backward compatible.

5
00:00:30.080 --> 00:00:33.730 
Backward compatible to earlier HTML versions, so

6
00:00:35.630 --> 00:00:38.190 
one solved this problems by describing

7
00:00:39.900 --> 00:00:44.210 
HTML document type with different document type definitions.

8
00:00:44.210 --> 00:00:47.830 
Document Type Definitions you remember, this was the grammar

9
00:00:48.360 --> 00:00:55.450 
for the document. So on one side is a Transitional Document Type Definition

10
00:00:55.640 --> 00:01:00.830 
and the idea of this is a Transitional Document Type Definition intended

11
00:01:01.300 --> 00:01:06.940 
only for the interpretation of older HTML documents and they

12
00:01:06.940 --> 00:01:11.590 
are not proposed for using for the generation of new documents.

13
00:01:12.010 --> 00:01:18.560 
So here the availability of some formatting elements in older HTML

14
00:01:18.970 --> 00:01:21.560 
versions are accepted.

15
00:01:22.370 --> 00:01:25.670 
Beside of the transitional document type definitions, there was a so-called

16
00:01:26.070 --> 00:01:29.520 
Strict Type Document Type Definition

17
00:01:30.330 --> 00:01:34.670 
designed, and this Strict Document Type Definition, this contains

18
00:01:34.960 --> 00:01:39.560 
none of the earlier direct formatting options. So this is a new,

19
00:01:40.410 --> 00:01:46.100 
pure version of HTML 4.0 with a strict separation in structural definition

20
00:01:46.340 --> 00:01:49.270 
and describing layout,

21
00:01:50.010 --> 00:01:54.790 
layout situation by means of another language, by means of the cascading stylesheet.

22
00:01:55.260 --> 00:01:57.890 
There was a strict document type definition contains

23
00:01:58.330 --> 00:02:01.700 
none of the earlier direct formatting options

24
00:02:02.170 --> 00:02:07.920 
available in older HTML version and are used both to generate

25
00:02:08.310 --> 00:02:10.780 
and to interpret new documents.

26
00:02:11.660 --> 00:02:17.020 
And then for completeness reasons, that is Frameset Document Type Definition,

27
00:02:17.350 --> 00:02:22.110 
and this contains only the HTML elements which are necessary

28
00:02:22.110 --> 00:02:28.370 
for the definition of frames, and thereby prevents recursive use

29
00:02:28.670 --> 00:02:30.330 
of the frame construction.

30
00:02:30.940 --> 00:02:37.990 
So is a different versions of  HTML 4.0 documents. They are characterized by these

31
00:02:38.260 --> 00:02:42.670 
transitional document type definitions, which are important

32
00:02:43.060 --> 00:02:47.860 
to mention to interpreters, so that the interpreter in the browser is able

33
00:02:48.140 --> 00:02:52.250 
to correctly interpret the web document.

34
00:02:53.990 --> 00:02:59.880 
We already had seen that all the HTML documents consist of two parts-

35
00:03:00.890 --> 00:03:06.820 
a header and the body, and the information about the document,

36
00:03:07.040 --> 00:03:11.060 
the meta information about the document, these are contained

37
00:03:11.060 --> 00:03:15.180 
and described in the header. The title, the name of the author,

38
00:03:15.570 --> 00:03:17.750 
keywords, document description and others.

39
00:03:19.340 --> 00:03:24.140 
The meta information is important for the automatic evaluation of the document.

40
00:03:24.360 --> 00:03:29.570 
For example, for the construction of a search index, it's important

41
00:03:29.570 --> 00:03:31.020 
for search engines and others.

42
00:03:33.280 --> 00:03:37.860 
The meta information are displayed in the header.

43
00:03:38.470 --> 00:03:44.370 
Often HTML document, HTML 4.0 document and the header is

44
00:03:44.370 --> 00:03:49.030 
marked by the tag HEAD and /HEAD.

45
00:03:51.480 --> 00:03:55.290 
The following tags may be used inside the header often.

46
00:03:56.060 --> 00:04:03.720 
HTML document title tag, the script tag, style tag, link tag, meta tag

47
00:04:04.190 --> 00:04:05.880 
nonscript object tags

48
00:04:07.030 --> 00:04:08.370 
may be used in the header.

49
00:04:10.010 --> 00:04:15.780 
The actual content of the HTML document is located in the body of the document,

50
00:04:16.440 --> 00:04:20.640 
and the body is enclosed by the tag pair-

51
00:04:21.070 --> 00:04:23.320 
body and slash body.

52
00:04:26.740 --> 00:04:32.740 
HTML distinguishes two categories of structural elements. They are so-called

53
00:04:32.990 --> 00:04:38.040 
Block-Level Elements. Block-Level Elements define block-based structures

54
00:04:38.450 --> 00:04:43.690 
in the document body and can contain block based as well as in-line elements.

55
00:04:44.180 --> 00:04:47.990 
And the second type of structural elements

56
00:04:48.610 --> 00:04:53.850 
are the so-called inline elements. Inline elements are running

57
00:04:54.550 --> 00:05:01.320 
or are in running text, can be wrapped and may contain other inline elements.

58
00:05:02.450 --> 00:05:06.270 
These are the two structural types of elements. If we

59
00:05:06.740 --> 00:05:10.300 
look to some important text base structure elements

60
00:05:10.790 --> 00:05:15.460 
in HTML 4.0 then we have the paragraph tag, the

61
00:05:17.210 --> 00:05:24.440 
division section of a document, we have different headline,

62
00:05:24.860 --> 00:05:29.160 
we have different tags for characterizing in headlines. So with numbers

63
00:05:29.330 --> 00:05:33.090 
H1 to H6, the hierarchy of

64
00:05:33.920 --> 00:05:37.770 
the headline is characterized. We have

65
00:05:38.650 --> 00:05:44.390 
the structural element SPAN. We can describe sections in running text,

66
00:05:45.190 --> 00:05:54.970 
we have the BLOCKQUOTE CITE URI for quoting. We have horizontal lines,

67
00:05:55.140 --> 00:06:03.460 
we have "del" and "insert" changes. We can describe lists by means of structural elements

68
00:06:03.570 --> 00:06:08.310 
for example unordered lists with the start tag UL,

69
00:06:09.210 --> 00:06:14.210 
and then the start tag for the single entries in that unordered list LI.

70
00:06:16.430 --> 00:06:21.230 
Then we have ordered lists. Ordered list where the different

71
00:06:21.440 --> 00:06:26.440 
items have a number, so is this ordered lists is characterized

72
00:06:26.440 --> 00:06:33.080 
by the start tag OL and is the same characteristic for the different lists element.

73
00:06:33.240 --> 00:06:35.730 
So here we produce lists with

74
00:06:36.450 --> 00:06:44.040 
such a kind of entries, and here with the ordered, we have one, two, three in ordered list.

75
00:06:46.810 --> 00:06:52.380 
Then there are so-called definition lists. Definition this is that, in the

76
00:06:53.030 --> 00:06:57.190 
list, it said that, it is this notion. So

77
00:06:58.880 --> 00:07:05.870 
the starting is DL, then the start, the tag for the list entries is DT,

78
00:07:06.070 --> 00:07:09.250 
and then the start tag for the list entry

79
00:07:09.670 --> 00:07:14.650 
header is DD, and in the header this is a reason to call it definition list,

80
00:07:14.910 --> 00:07:19.870 
that we can explain what is one word, what is the meaning,

81
00:07:20.280 --> 00:07:25.310 
of that. Then we have tables and have structural elements to characterize tables.

82
00:07:25.790 --> 00:07:29.110 
Tables consists of rectangular cells.

83
00:07:30.420 --> 00:07:35.160 
Rectangular cells are arranged in rows and in columns and

84
00:07:36.250 --> 00:07:39.900 
are these characterized by TR and TD tags.

85
00:07:41.420 --> 00:07:47.780 
Then there are a variety of format related attributes for tables in HTML.

86
00:07:48.230 --> 00:07:54.070 
The reason that even in HTML 4.0, we have such format

87
00:07:54.070 --> 00:07:58.720 
related attributes was the fact that the cascading stylesheet version

88
00:07:58.870 --> 00:08:03.030 
1.0, which was published with HTML 4.0

89
00:08:03.470 --> 00:08:07.810 
in that time did not handle table styles at all.

90
00:08:09.250 --> 00:08:12.910 
Tables together are framed by the tags. Table

91
00:08:13.880 --> 00:08:18.420 
and tag table and then a table consists of header,

92
00:08:19.020 --> 00:08:20.940 
consists of footer and consists of

93
00:08:22.010 --> 00:08:25.680 
the table body inside the table.

94
00:08:27.710 --> 00:08:32.390 
A very constitutional element for web documents are hyperlinks.

95
00:08:32.970 --> 00:08:36.270 
So this is the centerpiece of the World Wide Web

96
00:08:36.750 --> 00:08:41.550 
the possibility to interlink different documents by means such hyperlinks.

97
00:08:42.650 --> 00:08:48.270 
The hyperlink can separate and independent information, can

98
00:08:48.700 --> 00:08:52.480 
link separate and independent information resources,

99
00:08:53.140 --> 00:08:58.730 
the language HTML 4.0 language offers different types

100
00:08:58.740 --> 00:09:03.270 
of hyperlinks to the user. There are the so called invisible links.

101
00:09:03.770 --> 00:09:08.040 
For example these are links between a document and the style sheets.

102
00:09:08.360 --> 00:09:11.630 
This is not important for the users. It's important for the interpreter

103
00:09:11.830 --> 00:09:15.970 
to know which structural element has to display in which way, but

104
00:09:16.560 --> 00:09:20.740 
this link between the HTML document and the cascading stylesheet

105
00:09:20.990 --> 00:09:24.840 
that needs to be provided by means of such invisible

106
00:09:25.810 --> 00:09:31.850 
links which are used for processing reasons in the background of the browser.

107
00:09:32.910 --> 00:09:35.960 
For the user, important is the so-called visible links.

108
00:09:36.840 --> 00:09:42.390 
This visible links may be actuated by mouse click in browsers

109
00:09:42.390 --> 00:09:46.650 
with a graphical user interface and then the browser starts

110
00:09:46.650 --> 00:09:51.770 
to request the content of the link and the content of

111
00:09:51.770 --> 00:09:55.430 
the link is characterized for example, by an URI.

112
00:09:56.620 --> 00:10:02.590 
The browser knows which document he has to request, which document is important

113
00:10:02.850 --> 00:10:08.610 
to look by the user. Here the URI I mentioned already, this is

114
00:10:08.610 --> 00:10:12.370 
characterized by means of the so called anchor

115
00:10:13.270 --> 00:10:17.330 
markup. Let's have a closer look to this anchor element.

116
00:10:17.920 --> 00:10:22.280 
This can be used in different ways. This can be used as a marker.

117
00:10:22.730 --> 00:10:25.810 
A marker inside a document, then it's used

118
00:10:26.290 --> 00:10:31.880 
as A and then the name is given, then there is a definition.

119
00:10:33.630 --> 00:10:38.950 
Which part of the document is characterized by this name, so this

120
00:10:40.180 --> 00:10:46.100 
name provides a document wide unique identifier of anchor point,

121
00:10:46.230 --> 00:10:51.070 
and serves as a logical jump target for the browser. So if the

122
00:10:51.340 --> 00:10:57.080 
link is given to this name, then the browser knows exactly that he has to

123
00:10:57.420 --> 00:11:01.480 
go to this part of the document, which is characterized by that name.

124
00:11:02.490 --> 00:11:05.470 
Then the anchor element

125
00:11:05.970 --> 00:11:10.040 
can be used as a jump address. A jump address

126
00:11:10.460 --> 00:11:13.120 
within the document, then we see

127
00:11:14.380 --> 00:11:21.430 
HREF to the anchor, and then there is a hyperlink text which is

128
00:11:21.840 --> 00:11:27.380 
displayed typically for the user by a special color or by an underline,

129
00:11:27.820 --> 00:11:34.870 
and then this reference to the target that's fixed with the anchor

130
00:11:35.680 --> 00:11:39.360 
text. And then perhaps the most important

131
00:11:40.130 --> 00:11:46.010 
usage of the anchor element is to provide a jump address to an external target,

132
00:11:46.240 --> 00:11:50.830 
to another document, and then the other document is referred

133
00:11:50.970 --> 00:11:57.110 
by means of the URI of this document. And then the hyperlink text

134
00:11:57.300 --> 00:12:01.020 
is shown and the end anchor element

135
00:12:01.730 --> 00:12:05.760 
markup is given. And if the user now

136
00:12:07.240 --> 00:12:09.560 
push the mouse, makes a mouse click on this

137
00:12:10.170 --> 00:12:12.810 
part of the document, then the interpreter

138
00:12:13.590 --> 00:12:15.940 
knows the user wants to go

139
00:12:17.010 --> 00:12:22.720 
by a click to in document with that URI. So these are the anchor

140
00:12:22.760 --> 00:12:25.600 
usages of the different usages of the anchor element.

141
00:12:26.090 --> 00:12:31.090 
The anchor tags can be controlled by various attributes.

142
00:12:33.270 --> 00:12:36.570 
The future of the hyperlinks is more complex.

143
00:12:37.350 --> 00:12:41.480 
So different standards were developed to

144
00:12:42.790 --> 00:12:50.170 
extend the usage of the possible usage of links in XML documents.

145
00:12:50.670 --> 00:12:57.010 
So there is a X language, XPath language, XPointer language.

146
00:12:57.980 --> 00:13:03.940 
XLink- this will in future eliminate the need of the anchor element.

147
00:13:04.470 --> 00:13:07.280 
So every element can become a hyperlink.

148
00:13:07.950 --> 00:13:12.620 
Here is an example: span x link type simple x links ref to this

149
00:13:12.620 --> 00:13:15.530 
this document, and then the

150
00:13:16.650 --> 00:13:21.690 
anchor text. So by means of XLink, it is possible also

151
00:13:21.690 --> 00:13:28.040 
to describe complex links. Complex links are for example links with

152
00:13:28.250 --> 00:13:29.580 
multiple links.

153
00:13:31.190 --> 00:13:36.360 
Xpass and XPointer are query languages for XML documents,

154
00:13:36.360 --> 00:13:39.190 
and allow to characterize insider document

155
00:13:40.050 --> 00:13:46.940 
assert an jumping goal. So XPointer allows navigation, which is based on

156
00:13:47.160 --> 00:13:51.330 
IDs, on element IDs. Here is an example

157
00:13:52.510 --> 00:13:57.610 
which shows that the anchor as information

158
00:13:58.080 --> 00:14:03.610 
to where to point with the link can be characterized very detailed

159
00:14:03.740 --> 00:14:07.560 
by means of this XPath, on XPointer and

160
00:14:08.650 --> 00:14:14.280 
language tools. So its link expires, exploring those are recommendations of the World

161
00:14:14.640 --> 00:14:20.870 
Wide Web consortium. But if you look how much this new

162
00:14:22.330 --> 00:14:27.190 
languages is our new means for extending the link mechanisms,

163
00:14:27.380 --> 00:14:33.310 
are really implemented in the browsers, we are using every day

164
00:14:33.760 --> 00:14:39.020 
then only firefox supports XLink, so it needs new developments

165
00:14:39.020 --> 00:14:44.610 
of new browser versions, also to implement these concepts which are

166
00:14:45.840 --> 00:14:49.790 
available as standards of the World Wide

167
00:14:50.230 --> 00:14:52.700 
Web consortium. Important in

168
00:14:53.640 --> 00:14:56.010 
web documents are so called forms.

169
00:14:56.720 --> 00:15:03.270 
And forms provide a data structure, so that the browser can

170
00:15:04.790 --> 00:15:11.820 
send data from the user to the server, and that the server application can request

171
00:15:12.410 --> 00:15:14.340 
data from the

172
00:15:15.060 --> 00:15:21.620 
user by using forms. Various elements can be transmitted to the server

173
00:15:21.760 --> 00:15:26.990 
in a data container. So forms can be used for different tasks.

174
00:15:26.990 --> 00:15:33.540 
They can be used to obtain similar structured customer information, name, address

175
00:15:34.920 --> 00:15:37.350 
credit card. They can be

176
00:15:38.040 --> 00:15:39.100 


177
00:15:40.440 --> 00:15:45.490 
specified for search requests in a large data set as a

178
00:15:46.010 --> 00:15:52.590 
delivery of own data to existing data sets as possible and individual

179
00:15:52.730 --> 00:15:58.680 
interactions for example in online shops, as they are realized in web documents

180
00:15:58.790 --> 00:16:01.080 
by means of this form mechanism.

181
00:16:01.920 --> 00:16:08.170 
Here is an example you already use this forms for example, when you registered

182
00:16:08.320 --> 00:16:12.660 
at openHPI, here you see this is an example of a form there

183
00:16:12.660 --> 00:16:16.360 
is a question for your name for your name, for your family name, for email

184
00:16:16.360 --> 00:16:21.530 
address, for your password, and this information the user has to type in,

185
00:16:21.810 --> 00:16:25.090 
then is transmitted in

186
00:16:25.890 --> 00:16:30.630 
the data container to the server which can then use

187
00:16:31.050 --> 00:16:35.810 
applications, for example to recognise a certain user to know

188
00:16:35.810 --> 00:16:38.250 
how many homework was done by this user and others.

189
00:16:39.370 --> 00:16:43.460 
So the data to be transmitted can be detected by the browser.

190
00:16:44.520 --> 00:16:47.690 
He can be detected by such an input mask,

191
00:16:48.150 --> 00:16:53.650 
for entering, for providing as a user the possibility to end a text,

192
00:16:54.030 --> 00:17:00.630 
or to selecting some form list elements, and then these data

193
00:17:01.190 --> 00:17:03.660 
by means of a mouse click to the server.

194
00:17:05.230 --> 00:17:11.190 
For the specification of the forms, there is a form tag used and

195
00:17:11.580 --> 00:17:18.900 
the forms typically consists of regular HTML elements and specific control elements

196
00:17:19.020 --> 00:17:23.450 
for example the input tag for user inputs.

197
00:17:25.110 --> 00:17:29.720 
This was a rough sketch of the element structure elements

198
00:17:30.180 --> 00:17:32.150 
of HTML 4.0.
