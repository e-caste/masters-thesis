WEBVTT

1
00:00:00.970 --> 00:00:04.330 
In our openHPI course about
digital identities, now we want

2
00:00:04.330 --> 00:00:09.020 
to consider a second method for
secure authentication. We consider

3
00:00:09.020 --> 00:00:12.470 
a secure authentication
with open ID connect.

4
00:00:14.500 --> 00:00:18.660 
We already have discussed the
authentication method Kerberos

5
00:00:19.100 --> 00:00:22.600 
which is very popular
and which is used

6
00:00:23.020 --> 00:00:29.090 
for a central ID provider model
in companies, in organizations.

7
00:00:29.760 --> 00:00:35.530 
Now we want to consider an authentication
method that's used for online services.

8
00:00:36.140 --> 00:00:40.960 
While Kerberos is usually only used
within a company

9
00:00:40.960 --> 00:00:42.310 
or within an
organization,

10
00:00:42.930 --> 00:00:47.840 
it is not well suited for
external online services.

11
00:00:48.680 --> 00:00:54.720 
Particularly for the online
service, another authentication

12
00:00:54.720 --> 00:01:02.380 
protocol is widely used. This is openID
connect (OIDC) or often only shortly

13
00:01:02.650 --> 00:01:09.790 
openID. OpenID connect allows online
services to outsource authentication

14
00:01:10.020 --> 00:01:14.520 
to a third party and a third
party that is an ID provider.

15
00:01:16.410 --> 00:01:21.620 
For example the ID provider of Google
or the ID provider of Facebook.

16
00:01:22.080 --> 00:01:25.420 
So this service may belong
to another company.

17
00:01:25.830 --> 00:01:32.520 
The user can use already existing
identities and via openID

18
00:01:33.090 --> 00:01:39.810 
protocol, for example the login, the
digital identity a user has with Google

19
00:01:40.130 --> 00:01:44.110 
can be used also with
another online service.

20
00:01:45.660 --> 00:01:48.700 
What is the idea behind
openID connect?

21
00:01:49.140 --> 00:01:56.990 
This idea is that an online service receives
identity information about the user

22
00:01:57.180 --> 00:02:01.930 
from an ID provider, from
an external ID provider.

23
00:02:02.540 --> 00:02:09.460 
So the service is not taking care about
its own digital identities. He uses,

24
00:02:10.810 --> 00:02:16.020 
co-operates with an identity with a
professional identity provider and uses

25
00:02:16.700 --> 00:02:20.740 
the identity information which is
provided from that ID provider.

26
00:02:21.070 --> 00:02:25.220 
And the question is how this
interaction is organized.

27
00:02:26.430 --> 00:02:30.930 
To understand this we have to
see that there are three roles

28
00:02:31.360 --> 00:02:33.480 
involved. The
role of a user,

29
00:02:34.180 --> 00:02:39.230 
the role of the online service
and the role of the ID provider.

30
00:02:40.870 --> 00:02:48.200 
So the user must authorize on
the ID provider for that service.

31
00:02:48.750 --> 00:02:54.860 
The user has to prove its identity

32
00:02:55.380 --> 00:03:00.610 
when he wants to access the
online service. To this end, the

33
00:03:00.610 --> 00:03:06.720 
user has to contact the ID provider
and has to ask the ID provider

34
00:03:07.080 --> 00:03:14.860 
to give the valid key for the user's
identity for that online service.

35
00:03:15.560 --> 00:03:20.060 
Then the ID provider hands over
this key to the user and the

36
00:03:20.060 --> 00:03:22.650 
user can use
this key to

37
00:03:23.290 --> 00:03:28.330 
log in to the online service
and to use the resources

38
00:03:28.760 --> 00:03:33.250 
which the service allows
to him and to his role.

39
00:03:34.400 --> 00:03:37.790 
With this key, the
service can then read

40
00:03:38.190 --> 00:03:44.510 
the required identity attributes
directly from the ID provider.

41
00:03:46.500 --> 00:03:52.430 
Before the user can request
from the ID provider its

42
00:03:53.180 --> 00:04:00.780 
authentication key, they see what attributes are
needed. Typically the identity provider

43
00:04:01.190 --> 00:04:06.820 
stores a lot of attributes for an
ID, but for a concrete service

44
00:04:07.030 --> 00:04:12.700 
only a couple of attributes are
needed. So the user before

45
00:04:13.070 --> 00:04:19.760 
he or she requests the key, it looks
which kind of attributes are needed.

46
00:04:20.280 --> 00:04:24.770 
Then the user can agree
that he wants to

47
00:04:25.510 --> 00:04:30.980 
see this attribute hand over from
the ID provider to the service

48
00:04:31.050 --> 00:04:34.370 
or he can also
reject when

49
00:04:35.590 --> 00:04:41.080 
he's not agreeing. Then of course
the service typically will not

50
00:04:41.870 --> 00:04:43.980 
only partially be usable.

51
00:04:44.880 --> 00:04:51.990 
Let's have a look that Tinder
is using the Facebook ID for

52
00:04:52.410 --> 00:04:55.490 
giving users access to

53
00:04:56.210 --> 00:04:59.940 
their services. So
here are the

54
00:05:01.530 --> 00:05:08.530 
attributes that are required when a user
wants to log in with a Facebook ID

55
00:05:08.680 --> 00:05:13.470 
with Tinder. Then Tinder asks for the
email address, the birthday, the photos,

56
00:05:13.790 --> 00:05:18.370 
the page likes, the friends
list and the user can agree

57
00:05:19.180 --> 00:05:23.100 
or can disagree. When he agrees
he can use the service, when

58
00:05:23.100 --> 00:05:29.150 
he disagrees or partially disagrees, he
only can partially use the service.

59
00:05:29.590 --> 00:05:33.620 
Attributes here are name, profile
pictures, friends, birthday, photos.

60
00:05:34.540 --> 00:05:37.310 
Some of the attributes
can be de-activated.

61
00:05:37.820 --> 00:05:42.990 
Tinder then does not get access to
these attributes but does get access

62
00:05:43.100 --> 00:05:48.810 
to the ones still activated. So
here with such a mechanism in

63
00:05:49.030 --> 00:05:52.550 
openID, the user
can exactly

64
00:05:53.410 --> 00:06:00.760 
agree which attributes, which information
are handed over to the service.

65
00:06:02.340 --> 00:06:05.700 
Such attributes the
user can deactivate

66
00:06:06.310 --> 00:06:11.190 
but not clear whether then
the service can be used in

67
00:06:11.790 --> 00:06:12.950 
full extent or not.

68
00:06:13.650 --> 00:06:19.890 
What are the advantages and disadvantages of
this OpenID Connect Authentication Protocol?

69
00:06:20.180 --> 00:06:24.730 
It is easy to understand, it
is easy to implement, it

70
00:06:25.470 --> 00:06:30.740 
leads to dealing with fewer digital
identities because identities

71
00:06:30.810 --> 00:06:37.110 
can be used for single services
and it is a single sign on

72
00:06:37.260 --> 00:06:43.980 
procedure. The user can see and can
control which attributes are required

73
00:06:44.810 --> 00:06:48.080 
from the service and
can agree or disagree.

74
00:06:49.340 --> 00:06:55.330 
The disadvantage is that the online
service must add each ID provider

75
00:06:55.880 --> 00:06:57.830 
to be used separately.

76
00:06:58.700 --> 00:07:02.040 
So if the online
service offers

77
00:07:03.250 --> 00:07:06.220 
cooperation with
different ID providers,

78
00:07:06.630 --> 00:07:11.860 
each of these ID providers has
to be connected separately.

79
00:07:13.120 --> 00:07:19.990 
So the user on the other hand can
only select one of the ID providers

80
00:07:20.820 --> 00:07:25.880 
which are cooperating with the
service. He cannot select

81
00:07:26.500 --> 00:07:33.690 
the one he likes to connect if this
ID provider has no cooperation

82
00:07:34.100 --> 00:07:41.610 
with the online service. And often users can
only see which attributes are required

83
00:07:41.920 --> 00:07:47.860 
but cannot deactivate them. Its only
information and not the possibility

84
00:07:48.110 --> 00:07:54.790 
to make real decisions whether this
attribute should be shown to the service

85
00:07:54.920 --> 00:08:01.590 
or not. To summarize this
openID Connect protocol

86
00:08:02.350 --> 00:08:06.990 
for authentication, openID Connect
is a protocol for authentication

87
00:08:08.530 --> 00:08:11.880 
with an external
ID provider.

88
00:08:12.630 --> 00:08:17.740 
With an external ID provider the
online service asks for an access key

89
00:08:18.150 --> 00:08:24.340 
to the identity data that it requires.
The user authorizes this key

90
00:08:24.690 --> 00:08:30.090 
and then the ID provider
generates a key, transmits this key

91
00:08:30.340 --> 00:08:36.720 
to the online service and on the basis of
that key the online service gets access

92
00:08:37.100 --> 00:08:42.750 
to the attributes he needs to
recognize and remember the user.
