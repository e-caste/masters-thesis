WEBVTT

1
00:00:01.820 --> 00:00:05.960 
Hi Ralf. Hi Tom. So now we will
have a look at workspaces,

2
00:00:05.970 --> 00:00:09.990 
projects, packages, and all that
within our IDE, within Eclipse.

3
00:00:09.990 --> 00:00:14.800 
So..., let's
fire it up.

4
00:00:15.470 --> 00:00:20.740 
Ok. Starting Eclipse now... We
need to wait a little bit.

5
00:00:21.460 --> 00:00:25.000 
Not enough time to make a
coffee, ah, we're there.

6
00:00:27.060 --> 00:00:30.980 
So, as I mentioned, what
we need is a workspace

7
00:00:30.990 --> 00:00:35.390 
and workspace basically is a
folder/directory somewhere,

8
00:00:35.390 --> 00:00:38.470 
somewhere on your
hard drive.

9
00:00:38.970 --> 00:00:42.990 
Basically, you just have to
select one, it can be anyone.

10
00:00:43.200 --> 00:00:46.630 
It's your choice. Eclipse
already suggests you one.

11
00:00:46.670 --> 00:00:49.660 
If you have no idea what to do
there, just click launch.

12
00:00:49.680 --> 00:00:50.560 
Everything will work.

13
00:00:55.580 --> 00:01:00.330 
As you can see here, we have
kind of a start interface,

14
00:01:00.340 --> 00:01:04.830 
and basically you
just put it away.

15
00:01:05.450 --> 00:01:10.540 
Yeah, you close it. And this is
what your Eclipse will look

16
00:01:10.540 --> 00:01:14.000 
like, when you open it the
first time. So, we have the

17
00:01:14.010 --> 00:01:16.550 
package explorer,
we have the

18
00:01:16.730 --> 00:01:20.860 
code editor, we have a
tasklist, code outline....

19
00:01:20.870 --> 00:01:24.680 
Tom, there's nothing to be
seen there. Yeah not yet,

20
00:01:25.230 --> 00:01:30.280 
but it will com. So, first
thing we do is we create a

21
00:01:30.320 --> 00:01:34.080 
Java project. And a project,
basically, is the

22
00:01:34.660 --> 00:01:38.240 
top level, main
organizing structure

23
00:01:38.240 --> 00:01:41.020 
that we use. So,
that's always the

24
00:01:41.330 --> 00:01:44.860 
thing to start with. We need
a nice name: capstone1.

25
00:01:51.850 --> 00:01:55.100 
Here, we can select the execution
environment and we stay with Java8.

26
00:01:55.110 --> 00:02:00.450 
And that's
basically it.

27
00:02:00.640 --> 00:02:06.300 
So, we press "finish" and now
Eclipse created all the folders, all

28
00:02:06.300 --> 00:02:09.320 
the files that we need for
a basic Java project.

29
00:02:09.730 --> 00:02:13.810 
And this is basically the
JRE system library...

30
00:02:13.810 --> 00:02:20.220 
It was linked to our project... And
a "src" folder and this

31
00:02:20.220 --> 00:02:23.750 
is basically empty now because
we didn't do anything yet and

32
00:02:23.910 --> 00:02:26.120 
here we can get started
and start coding

33
00:02:26.480 --> 00:02:29.540 
And the first
thing we will do

34
00:02:29.850 --> 00:02:34.510 
is create a class. In Java,
everything is in classes.

35
00:02:34.510 --> 00:02:38.370 
We recall that we always need
some class that has main method

36
00:02:38.740 --> 00:02:43.230 
so probably we should start with that,
right? Okay, so, we have the class,

37
00:02:43.520 --> 00:02:46.960 
create a new class,
and then we say

38
00:02:47.320 --> 00:02:53.550 
create a public static void
main method, because we

39
00:02:53.550 --> 00:02:55.870 
are lazy and we want Eclipse
to do that for us.

40
00:02:56.410 --> 00:03:04.080 
And we want to have it in a
certain package. And it already

41
00:03:04.310 --> 00:03:07.540 
suggests one package for
us like capstone1, there

42
00:03:07.950 --> 00:03:10.400 
and because we right-clicked on
the "src" folder,

43
00:03:10.670 --> 00:03:13.600 
it already also knows that it has to
belong in the "src" folder.

44
00:03:13.610 --> 00:03:17.120 
And if we create a Java
class source file,

45
00:03:17.300 --> 00:03:21.320 
it belongs in the source
folder. But for packages we

46
00:03:21.320 --> 00:03:23.340 
also have naming
conventions here.

47
00:03:23.520 --> 00:03:28.280 
What we often use is the
reverse URL of our

48
00:03:28.710 --> 00:03:31.280 
company's web presence.

49
00:03:31.520 --> 00:03:36.070 
We do

50
00:03:36.070 --> 00:03:39.040 
this because we want to
have a universally

51
00:03:39.220 --> 00:03:44.420 
unique identifier. So
let's do something like

52
00:03:44.430 --> 00:03:47.090 
"de"
for Germany

53
00:03:49.310 --> 00:03:54.920 
and "openhpi", and then
the project name, and then you

54
00:03:54.920 --> 00:03:59.090 
can go on with
something

55
00:03:59.400 --> 00:04:04.140 
special within your project. Let's put
that one in the starter package.

56
00:04:04.340 --> 00:04:06.350 
As its the main method
and that will start.

57
00:04:08.420 --> 00:04:13.140 
So and that's it. No, we still
need a name for our class.

58
00:04:13.140 --> 00:04:17.090 
You're right. So, as it contains
the main method, and we kind of.

59
00:04:17.430 --> 00:04:23.730 
like that, we just call it Main,
ok but with a capital M.

60
00:04:23.830 --> 00:04:29.730 
You remember that hopefully. We can
also say if we have a Superclass,

61
00:04:29.730 --> 00:04:32.750 
whether we want constructors
for the Superclass.

62
00:04:32.970 --> 00:04:36.200 
If you want inherit abstract methods,
we can just leave it checked.

63
00:04:36.210 --> 00:04:39.730 
Although this is not somehow
in an inheritance hierarchy

64
00:04:40.000 --> 00:04:44.830 
it won't hurt here and basically we
can press finish and this is it.

65
00:04:48.470 --> 00:04:52.450 
It takes a minute and here
it is. Our main Java class

66
00:04:53.700 --> 00:04:58.610 
in our code editor and as
we see checking this

67
00:04:58.620 --> 00:05:04.900 
box saved us a lot of work, it
kind of produced automatically

68
00:05:04.960 --> 00:05:10.420 
some code. And now we
could start with coding,

69
00:05:10.440 --> 00:05:13.680 
we could add more classes
or whatever we wanna do.

70
00:05:13.880 --> 00:05:19.900 
And what do we do if we have
a good freshly created...

71
00:05:20.000 --> 00:05:23.680 
we do a
System.out.println

72
00:05:24.310 --> 00:05:27.990 
and what are we actually
seeing right here?

73
00:05:27.990 --> 00:05:31.730 
It was code
completion, and

74
00:05:31.960 --> 00:05:37.000 
code highlighting and we see
some documentation and so on

75
00:05:37.000 --> 00:05:40.570 
so, you're so fast.

76
00:05:40.810 --> 00:05:45.250 
But maybe we just print out
"Hello Eclipse".

77
00:05:45.520 --> 00:05:49.550 


78
00:05:52.410 --> 00:05:53.930 


79
00:06:01.200 --> 00:06:04.110 
Now we still need to
run the program.

80
00:06:04.360 --> 00:06:07.490 
First we need to save it. So you can
see here there's this is little

81
00:06:07.490 --> 00:06:12.120 
star that means it has
unsaved changes.

82
00:06:12.410 --> 00:06:17.310 
We do that and then we can
run the program by pressing

83
00:06:17.330 --> 00:06:22.430 
this "Play" Button. So pretty
similar to CodeOcean, basically.

84
00:06:25.280 --> 00:06:29.200 
And we see here we have the console,
also pretty similar to CodeOcean.

85
00:06:29.200 --> 00:06:32.270 
And we get the output

86
00:06:32.460 --> 00:06:33.360 
"Hello
Eclipse".

87
00:06:35.730 --> 00:06:42.090 
So I guess for now that's it and
so we can once more show you

88
00:06:42.090 --> 00:06:45.790 
the code completion if
that was too fast

89
00:06:46.330 --> 00:06:53.630 
So if Tom starts typing System and
then the dot.. It always comes with

90
00:06:53.630 --> 00:06:58.090 
the dot and then you get like all
these properties methods and

91
00:06:58.090 --> 00:07:02.380 
whatever... that might
have been inherited...

92
00:07:02.380 --> 00:07:07.750 
So you get tons of these and
they will also be ordered

93
00:07:07.760 --> 00:07:12.170 
by some automagically
loaded library that might

94
00:07:12.230 --> 00:07:15.430 
recommend you something...
and you can also if you

95
00:07:15.430 --> 00:07:18.500 
already know what the method
you need is called...

96
00:07:18.500 --> 00:07:21.720 
start typing and then
it will come here.

97
00:07:22.130 --> 00:07:25.760 
The good thing is also that you
can directly see the Java doc on

98
00:07:25.760 --> 00:07:30.230 
the right hand side, so, it
helps a lot with all the

99
00:07:30.230 --> 00:07:31.370 
things you might need.
