WEBVTT

1
00:00:04.480 --> 00:00:07.374 
Now we want to speak about Web Programming.

2
00:00:09.340 --> 00:00:13.899 
Web Programming, this is a very broad term and this

3
00:00:13.900 --> 00:00:17.380 
term is used to subsume different things.

4
00:00:18.400 --> 00:00:23.019 
So, for example, the so-called client-sideand

5
00:00:23.020 --> 00:00:28.569 
server-sideprogramming, these are what is considered as Web programming,

6
00:00:28.570 --> 00:00:33.399 
but also Middleware architectures or Web services

7
00:00:33.400 --> 00:00:38.169 
are considered another term for Web Programming in

8
00:00:38.170 --> 00:00:43.239 
this. In the next week, we concentrate on client-side

9
00:00:43.240 --> 00:00:44.240 
and server-sideprogramming.

10
00:00:48.220 --> 00:00:52.779 
First, we start in the first week, this week we start with the client-side

11
00:00:52.780 --> 00:00:57.169 
programming. We will discuss dynamic HTML documents.

12
00:00:57.170 --> 00:01:01.599 
We will discuss the document object model,

13
00:01:01.600 --> 00:01:05.919 
already mentioned in the earlier Eclipse.

14
00:01:05.920 --> 00:01:10.599 
We speak about JavaScript, we consider JavaScript

15
00:01:10.600 --> 00:01:15.609 
libraries and JavaScript frameworks, and insight

16
00:01:15.610 --> 00:01:20.889 
in some new script languages, CoffeeScript

17
00:01:20.890 --> 00:01:26.169 
and Dart, not only script languages but environments to design

18
00:01:26.170 --> 00:01:27.373 
applications for client-side programming.

19
00:01:28.810 --> 00:01:33.429 
Then in week five, we will, next week we consider server-side

20
00:01:33.430 --> 00:01:38.019 
programming. We discuss websites, web frameworks,

21
00:01:38.020 --> 00:01:42.489 
and MVC. We will discuss Session management,

22
00:01:42.490 --> 00:01:45.099 
Persistent, Database layer, and

23
00:01:47.770 --> 00:01:50.746 
introduce Asynchronous client/server communication (AJAX),

24
00:01:52.510 --> 00:01:56.199 
which is so important for social media applications.

25
00:01:56.200 --> 00:02:00.639 
And we end up with web-basedapplication

26
00:02:00.640 --> 00:02:05.289 
programming interfaces and web services with the REST

27
00:02:05.290 --> 00:02:06.290 
architecture.

28
00:02:08.620 --> 00:02:11.609 
What is client programming?

29
00:02:14.140 --> 00:02:18.909 
Client programming is the idea that a web page

30
00:02:18.910 --> 00:02:24.129 
can be adapted to the wishes and to the needs of the user,

31
00:02:24.130 --> 00:02:28.959 
and this adaptation is done on the client-side, so

32
00:02:28.960 --> 00:02:34.329 
the webserverpasses a document, a web document

33
00:02:34.330 --> 00:02:37.820 
and in this web document there is some program code

34
00:02:39.340 --> 00:02:43.959 
embedded, executable or interpretable program code, and

35
00:02:43.960 --> 00:02:49.059 
when the client receives this document, then

36
00:02:49.060 --> 00:02:53.589 
on the client-side, this program code is executed.

37
00:02:55.420 --> 00:02:59.919 
So, the browser's web clients need an interpreter.

38
00:03:00.940 --> 00:03:05.529 
Typically, this is a plug-infor the browser, which, together

39
00:03:05.530 --> 00:03:09.999 
with the client computer, is able to interpret and execute

40
00:03:10.000 --> 00:03:12.159 
the transferred program code.

41
00:03:13.420 --> 00:03:18.279 
So, there are different possibilities, for example, by means of Java and Java applets,

42
00:03:18.280 --> 00:03:22.150 
JavaScript programs or shortly called script are an important

43
00:03:23.230 --> 00:03:26.439 
way for such client-side programming.

44
00:03:26.440 --> 00:03:31.200 
A little bit older is the Microsoft Silverlight and Adobe Flash approach.

45
00:03:32.410 --> 00:03:35.745 
On the other side, if we speak about server-side programming,

46
00:03:37.000 --> 00:03:42.039 
then it's the same idea that a net document is adapted exactly to the wishes

47
00:03:42.040 --> 00:03:46.479 
of the client. But now this document is produced

48
00:03:46.480 --> 00:03:51.219 
on side of the server. So, the web application

49
00:03:51.220 --> 00:03:55.719 
is activated from the web browser that sends a request to the

50
00:03:55.720 --> 00:04:00.459 
webserver, and then in a server machine this application is

51
00:04:00.460 --> 00:04:05.289 
executed and the desired dynamic

52
00:04:05.290 --> 00:04:06.909 
web page is produced.

53
00:04:07.930 --> 00:04:12.429 
So, the results are generated dynamically on the

54
00:04:12.430 --> 00:04:17.109 
server-side, and then this dynamically created web document is

55
00:04:17.110 --> 00:04:20.799 
transferred to the client, to the browser.

56
00:04:21.850 --> 00:04:26.469 
So, what is needed is an interaction of the webserver with different applications

57
00:04:26.470 --> 00:04:30.969 
which are able to produce such a dynamic web

58
00:04:30.970 --> 00:04:34.899 
page and there is a standardized interface.

59
00:04:34.900 --> 00:04:38.829 
This is the CGI, Common Gateway Interface,

60
00:04:41.530 --> 00:04:46.269 
which standardizes interface on the server-side between the web server

61
00:04:46.270 --> 00:04:51.669 
and the different web applications used to produce such dynamic

62
00:04:51.670 --> 00:04:52.670 
HTML pages.

63
00:04:53.710 --> 00:04:58.299 
The web pages, the web applications on the server-side can be written

64
00:04:58.300 --> 00:05:00.519 
in any programming language.

65
00:05:00.520 --> 00:05:02.982 
So, for example, Java. So there are Java servlets, there are server pages, beans.

66
00:05:02.983 --> 00:05:03.983 
These are the

67
00:05:07.540 --> 00:05:12.249 
typical applications on the server-side written

68
00:05:12.250 --> 00:05:13.869 
in Java, but

69
00:06:40.390 --> 00:06:40.420 
these applications can also be written in a scripting language ASP, PHP, Perl, Python, and Ruby. These are the series of scripting languages and what we see today, in most cases,

70
00:06:40.421 --> 00:06:40.448 
that web frameworks are used to design such applications, such web applications on the server-side. So famous web frameworks are Ruby on Rails, Spring, Django. So, there are

71
00:06:40.449 --> 00:06:40.476 
different types of documents, web documents, we just mentioned that there are static web documents and there are web documents that are dynamically produced on the client-side or

72
00:06:40.477 --> 00:06:40.508 
on the server-side to design web pages exactly according to the wishes of an user. So, there exist static pages, so static pages are stored on their web server, in the file system

73
00:06:40.509 --> 00:06:40.540 
of the web server and then the browser can request this document and the document is transferred in this form to the client and it's displayed. So, it's not changing its content,

74
00:06:40.541 --> 00:06:42.609 
it's not adapted exactly to the wishes of the client. The dynamically generated web pages, can adapt exactly to

75
00:06:42.610 --> 00:06:44.499 
the needs of the client.

76
00:06:44.500 --> 00:06:48.939 
They are generated by a web application, they are

77
00:06:48.940 --> 00:06:53.739 
generated according to the parameters to the wishes

78
00:06:53.740 --> 00:06:58.209 
of the user, which are passed from their browser to the webserver,

79
00:06:58.210 --> 00:07:03.159 
and then they can, for example, request

80
00:07:03.160 --> 00:07:08.139 
a search machine or rather exactly send this information,

81
00:07:08.140 --> 00:07:10.770 
display this information to the user, that the user wants.

82
00:07:11.950 --> 00:07:16.419 
So, for example, practically I start, already mentioned is if a

83
00:07:16.420 --> 00:07:21.189 
user wants to carry a database as this is

84
00:07:21.190 --> 00:07:25.719 
needed, for example, if the user wants to buy something, if the user wants to

85
00:07:25.720 --> 00:07:30.309 
check the product catalog of a company, for example, of Amazon and

86
00:07:30.310 --> 00:07:35.019 
likes to select some special product, or

87
00:07:35.020 --> 00:07:39.699 
if the user wants to use a search engine, a search engine to send that information

88
00:07:41.440 --> 00:07:46.209 
and then to get back information about this, which is available in the web.

89
00:07:46.210 --> 00:07:51.759 
For example, search machines like Google or newspapers

90
00:07:51.760 --> 00:07:56.199 
in New York Times. You can request over the web

91
00:07:56.200 --> 00:08:00.999 
and you can adapt exactly which kind of information

92
00:08:01.000 --> 00:08:03.939 
you want to have.

93
00:08:03.940 --> 00:08:08.469 
So, these dynamically generated web pages, this

94
00:08:08.470 --> 00:08:13.119 
is what users like most because it's exactly that

95
00:08:13.120 --> 00:08:16.779 
information they want to have.

96
00:08:20.230 --> 00:08:24.424 
Let's look at this simple illustration.

97
00:08:25.900 --> 00:08:30.399 
Let's start with having a look at the static web pages, we

98
00:08:30.400 --> 00:08:34.959 
have on the web, the two players, the browser, a client and the

99
00:08:34.960 --> 00:08:39.360 
server, webserver, and then the client requested information.

100
00:08:40.539 --> 00:08:45.219 
So, the server has this information, has a web page in its local

101
00:08:45.220 --> 00:08:46.220 
file system.

102
00:08:47.260 --> 00:08:51.789 
When the browser requests this information, it could request you

103
00:08:51.790 --> 00:08:56.499 
remember by giving the address of the webserver, the IP address,

104
00:08:56.500 --> 00:08:58.510 
and then giving the pass,

105
00:09:01.300 --> 00:09:06.069 
where these files, the static HTML document is stored on

106
00:09:06.070 --> 00:09:11.949 
server-side and then the page is taken and is transferred

107
00:09:11.950 --> 00:09:16.509 
to the customer. So, here local file,

108
00:09:16.510 --> 00:09:20.949 
the HTML page it's static, it's already produced and

109
00:09:20.950 --> 00:09:25.869 
will not be modified, is stored in the local file system and then

110
00:09:25.870 --> 00:09:29.139 
this is transferred to the customer.

111
00:09:31.840 --> 00:09:35.268 
Now, let's consider dynamic web pages.

112
00:09:36.430 --> 00:09:41.229 
Dynamic web pages can be generated on the server-side as well on the

113
00:09:41.230 --> 00:09:45.789 
client-side. Let's start to have a look at the dynamic web pages generated

114
00:09:45.790 --> 00:09:50.379 
on server-side. There is a browser again and a webserver, the

115
00:09:50.380 --> 00:09:54.879 
two players on the web. The browser requested information and

116
00:09:54.880 --> 00:09:59.769 
now the server hands over the parameters.

117
00:09:59.770 --> 00:10:04.209 
The server knows what kind of application is necessary

118
00:10:04.210 --> 00:10:08.205 
to produce the web page requested by the browser and the server sees

119
00:10:09.520 --> 00:10:14.679 
what other parameters the user has sent to this application

120
00:10:14.680 --> 00:10:18.999 
to produce exactly the dynamic web page for its request.

121
00:10:19.000 --> 00:10:23.619 
So, the server heads over the data to

122
00:10:23.620 --> 00:10:28.809 
the corresponding application, then the application produces dynamically

123
00:10:28.810 --> 00:10:34.119 
the HTML document, and then this is transferred

124
00:10:34.120 --> 00:10:37.389 
to the client. So, the application produces

125
00:10:38.870 --> 00:10:43.539 
the dynamic document, and then it's transferred

126
00:10:43.540 --> 00:10:45.190 
to the browser and displayed there.

127
00:10:47.300 --> 00:10:51.939 
This is the server-side programming, and now we

128
00:10:51.940 --> 00:10:55.569 
look to the dynamic web pages that are generated on the client-side.

129
00:10:55.570 --> 00:11:00.039 
Again, we have our browser and we have our server, and now

130
00:11:00.040 --> 00:11:05.619 
the browser requests from the web server a document

131
00:11:05.620 --> 00:11:10.869 
and dynamic HTML document and the characteristic is that inside that document,

132
00:11:10.870 --> 00:11:12.759 
there is program code.

133
00:11:12.760 --> 00:11:17.379 
So, the HTML document is transferred to the

134
00:11:17.380 --> 00:11:21.999 
browser, to the client and then on the client-side, the

135
00:11:22.000 --> 00:11:27.609 
code that's embedded in the dynamic HTML document

136
00:11:27.610 --> 00:11:31.052 
is executed, and then on the browser,

137
00:11:33.640 --> 00:11:37.749 
the dynamically generated web page is displayed to the client.
