WEBVTT

1
00:00:00.990 --> 00:00:05.360 
This is knowledge graphs, lecture number
two - basic semantic technologies.

2
00:00:05.510 --> 00:00:10.410 
In this part of the lecture i'm going
to introduce you to rdf turtle

3
00:00:10.590 --> 00:00:16.240 
serialization. So we are still on
the rdf level of the web of

4
00:00:16.250 --> 00:00:20.870 
data and the semantic web and what
we are going to do is we have

5
00:00:20.870 --> 00:00:25.940 
lots of examples for rdf that
are all based on the subject

6
00:00:25.950 --> 00:00:29.830 
of the greenhouse effect, which is of
course one of the major problems

7
00:00:30.050 --> 00:00:32.220 
within climate
change. So

8
00:00:33.610 --> 00:00:39.660 
let's see. For rdf we have already
heard that there are several

9
00:00:39.890 --> 00:00:43.980 
serialization formats, the most
simple one is n-triples where

10
00:00:43.980 --> 00:00:47.550 
you simply have your subject,
your property and your object.

11
00:00:47.800 --> 00:00:51.340 
Even if it's a URI and
it's embraced in angle brackets

12
00:00:51.390 --> 00:00:54.380 
or if it's literal then you
have these double quotes.

13
00:00:55.090 --> 00:00:59.680 
There is also one xml version of
serialization or adjacent version

14
00:00:59.680 --> 00:01:04.370 
of a serialization. However for
the course of this lecture we

15
00:01:04.370 --> 00:01:08.690 
are going to use turtle which is rather
prominent since it's really really

16
00:01:08.820 --> 00:01:14.100 
easy to read. So it's much easier to read
if you have large structures of turtle

17
00:01:14.380 --> 00:01:21.110 
than in comparison to large structures
of rdf/xml or rdf n-triples.

18
00:01:21.240 --> 00:01:23.480 
So let's start
with turtle.

19
00:01:24.870 --> 00:01:28.030 
Turtle however is based on
the n-triples notation.

20
00:01:29.050 --> 00:01:34.460 
The n-triples notation just
for a repetition it's based on

21
00:01:34.460 --> 00:01:38.070 
you have URIs or IRIs which
are the internationalized

22
00:01:38.070 --> 00:01:43.500 
version of URIs in angle brackets or
literals again in quotation marks and

23
00:01:43.940 --> 00:01:48.200 
very important each single triple
ends with a period that you know

24
00:01:48.370 --> 00:01:54.490 
where the next triple then starts. So a
triple you have subject, predicate, object

25
00:01:54.610 --> 00:01:56.200 
and then you
have a period.

26
00:01:56.910 --> 00:02:03.800 
So if you compare your original
n-triples notation with this

27
00:02:04.320 --> 00:02:09.070 
sample turtle code what you see is
total of course it's much shorter,

28
00:02:09.710 --> 00:02:14.640 
which of course enhances the
readability. But what does it mean? So

29
00:02:14.830 --> 00:02:20.510 
turtle allows for shortcuts and
abbreviations in sake of readability.

30
00:02:22.030 --> 00:02:28.000 
Ok let's compare directly the n
triples notation with the turtle

31
00:02:28.000 --> 00:02:31.310 
notation and let's have a look
what the simple constituent

32
00:02:31.310 --> 00:02:34.150 
and parts of the turtle
notation really mean.

33
00:02:34.710 --> 00:02:39.900 
So first thing what you can do - you
can associate so called prefixes

34
00:02:40.190 --> 00:02:43.240 
with the URIs and this makes
URIs in the document

35
00:02:43.240 --> 00:02:49.650 
much easier to read. So a prefix
directive associates the prefix label

36
00:02:50.080 --> 00:02:50.950 
with a URI.

37
00:02:51.710 --> 00:02:55.510 
You define this here in the very
first line of your rdf definition

38
00:02:55.510 --> 00:03:00.550 
and you say here, for example, that
the prefix DBO is associated

39
00:03:00.550 --> 00:03:06.860 
with the following URI, so this is
then http tpda org slash ontology slash.

40
00:03:06.960 --> 00:03:10.850 
So this is a prefix directive and
later on in the if you look

41
00:03:10.850 --> 00:03:14.620 
at the last two lines of this
yellow part of the RDF turtle

42
00:03:14.620 --> 00:03:17.770 
definition you see that the greenhouse
effect has been discovered

43
00:03:17.770 --> 00:03:22.530 
in eighteen twenty four and there
discovered in it is then simply

44
00:03:22.650 --> 00:03:26.960 
written with the prefix DBO
that we have defined before and

45
00:03:26.960 --> 00:03:30.270 
then you have the property
discovered in. So this makes it of

46
00:03:30.270 --> 00:03:35.510 
course much easier to read than just
reading an entire URI that is

47
00:03:35.700 --> 00:03:39.950 
embraced by these angle brackets.
So this is the prefix directive.

48
00:03:41.590 --> 00:03:45.760 
Another shortcut that is possible
in rdf turtle would be the

49
00:03:45.760 --> 00:03:48.670 
base directive. What can you
do with a base directive?

50
00:03:49.120 --> 00:03:54.280 
Using the base directive any
relative URI that is used

51
00:03:54.280 --> 00:03:58.280 
within your turtle file like here
for example the greenhouse effect

52
00:03:58.550 --> 00:04:02.640 
that is simply here embraced by
angle brackets that will be

53
00:04:02.640 --> 00:04:07.320 
substituted and complement not substituted
it will be complemented with

54
00:04:07.800 --> 00:04:10.910 
the base URI that you
have defined. So in the beginning

55
00:04:10.910 --> 00:04:15.340 
of your rdf you simply have a
base directive you say base

56
00:04:15.510 --> 00:04:19.280 
and then say ok the following URI
will be your base URI and in

57
00:04:19.420 --> 00:04:25.330 
our case here it's http dbpedia
org slash resource slash and

58
00:04:25.330 --> 00:04:29.300 
this simply then will be
complimented for example

59
00:04:29.300 --> 00:04:34.570 
here at the greenhouse effect or also
at Joseph Fourier here in the object.

60
00:04:35.450 --> 00:04:41.180 
So these are the main two first
abbreviations that we have introduced.

61
00:04:41.870 --> 00:04:43.660 
But there is
even more. So

62
00:04:44.840 --> 00:04:48.700 
just take into account you have
our standard example here which

63
00:04:48.700 --> 00:04:53.180 
means we have two triples which
have the same subject. So in

64
00:04:53.180 --> 00:04:58.540 
both cases greenhouse effect is the
subject. So then why repeat that subject?

65
00:04:58.840 --> 00:05:00.460 
In turtle you
don't have to.

66
00:05:01.390 --> 00:05:06.350 
What you do there is you write your
first triple, subject, property, object

67
00:05:06.700 --> 00:05:11.010 
and then instead of writing a
period you might use a semicolon

68
00:05:11.010 --> 00:05:15.170 
instead and this indicates that
subsequent triples that come

69
00:05:15.170 --> 00:05:19.310 
have the very same subject which means
we don't have to repeat the subject

70
00:05:19.660 --> 00:05:24.340 
after a semicolon, we simply continue
them with the next property

71
00:05:24.470 --> 00:05:30.030 
and the next object. So this saves us
space and again makes it easier

72
00:05:30.210 --> 00:05:30.790 
to read.

73
00:05:32.990 --> 00:05:38.620 
There can be even more space
saved, for example, when you have

74
00:05:38.640 --> 00:05:41.840 
the case so if you have the case
that you have a subject,

75
00:05:42.420 --> 00:05:45.870 
the very same property connected
to many different objects.

76
00:05:45.870 --> 00:05:48.890 
So here we have an example where we
have the greenhouse effect and

77
00:05:49.060 --> 00:05:52.240 
the greenhouse effect is subject
of several classes, so it belongs

78
00:05:52.240 --> 00:05:55.420 
to several classes or categories.
For example it belongs to

79
00:05:55.420 --> 00:05:59.490 
the category atmosphere, it belongs
to the category climate change

80
00:05:59.660 --> 00:06:03.780 
and it belongs to the category
atmospheric radiation.

81
00:06:04.850 --> 00:06:08.040 
What to do if I want to express
that and don't want to repeat

82
00:06:08.470 --> 00:06:11.870 
three times the subject and
three times the property again?

83
00:06:12.210 --> 00:06:17.520 
Quite simple. So I write my very first triple
greenhouse effect has dct subject

84
00:06:17.680 --> 00:06:21.740 
atmosphere and then instead of
writing the complete next triple

85
00:06:21.740 --> 00:06:25.140 
I simply use a comma and after
the comma this means this is

86
00:06:25.140 --> 00:06:28.510 
a so called object list what
follows, so all of these objects

87
00:06:28.510 --> 00:06:33.490 
that follow now will be connected to
the same subject and properties.

88
00:06:33.490 --> 00:06:38.450 
So I can simply make a list of objects and
here its atmosphere, climate change and

89
00:06:38.630 --> 00:06:44.200 
atmospheric radiation. So you have
further abbreviated this stuff and

90
00:06:44.320 --> 00:06:46.600 
don't have to
write so much.

91
00:06:48.470 --> 00:06:52.510 
Let's have a look at literals
next. Here we have the example

92
00:06:52.510 --> 00:06:55.920 
of carbon dioxide and we give
several properties of carbon

93
00:06:55.920 --> 00:06:59.750 
dioxide, like for example, we give
its sublimation temperature,

94
00:06:59.750 --> 00:07:04.230 
we give its molar mass, we give its
discoverer and we give it a label

95
00:07:04.330 --> 00:07:06.980 
which is of course
again carbon dioxide.

96
00:07:07.780 --> 00:07:11.540 
In turtle as you see here what we
do again of course we abbreviate

97
00:07:11.540 --> 00:07:15.610 
the stuff here with the help of
semicolon because here we have

98
00:07:15.650 --> 00:07:19.580 
the same subject with different
property object pairs followed then.

99
00:07:20.180 --> 00:07:23.370 
So the first thing we express here
is the sublimation temperature

100
00:07:23.370 --> 00:07:29.680 
and we say this is minus seventy eight
point five and since this is not

101
00:07:29.800 --> 00:07:34.610 
to be read as a simple text string,
this is a number and this

102
00:07:34.610 --> 00:07:39.770 
is a floating point number that we see
here of double precision, so then we

103
00:07:39.980 --> 00:07:45.850 
can complement the xml based xml
schema definition data types

104
00:07:45.880 --> 00:07:50.500 
that we have here and we can use
the double data type here

105
00:07:50.500 --> 00:07:52.930 
and this usually
is indicated by

106
00:07:54.310 --> 00:07:58.440 
letting the string that you use
as a literal be followed by

107
00:07:58.440 --> 00:08:03.220 
these double hats and then again
you have a URI that

108
00:08:03.220 --> 00:08:08.940 
specifies what data type it is and
this URI again is shortened

109
00:08:08.940 --> 00:08:12.780 
by using a prefix that has been
defined previously, you see

110
00:08:12.780 --> 00:08:18.510 
here in the list we have the prefix xsd
and this is associated with xml schema

111
00:08:18.870 --> 00:08:23.190 
data type definitions. So then
temperature is given as a double,

112
00:08:23.490 --> 00:08:26.840 
molar mass is given as a double
and then you have another thing

113
00:08:26.840 --> 00:08:30.680 
discovered which means this is
the discovery date and this

114
00:08:30.680 --> 00:08:35.170 
then of course is also associated with
the data type date and this would be

115
00:08:35.320 --> 00:08:40.420 
in the year of sixteen forty or
you give here a label and the

116
00:08:40.420 --> 00:08:44.510 
label of course is a string which
comes from a specific natural

117
00:08:44.510 --> 00:08:48.500 
language and of course you also
have to encode that this language

118
00:08:48.500 --> 00:08:53.910 
string is probably given here in English.
So you use the ampersand sign and

119
00:08:54.010 --> 00:08:59.400 
EN as the ISO two digit abbreviation
for the language code of

120
00:08:59.570 --> 00:09:06.230 
English. So this would be typed
literals in rdf tutrle, you can look up

121
00:09:06.330 --> 00:09:11.110 
all of the definitions that also
exist for other kind of data types

122
00:09:11.230 --> 00:09:16.050 
within the rdf manual which is given
in the material for this lecture.

123
00:09:17.950 --> 00:09:20.590 
However you might
know that

124
00:09:21.470 --> 00:09:26.800 
carbon dioxide that we were talking about
previously here has been discovered

125
00:09:27.300 --> 00:09:31.150 
once in sixteen forty and then
it has been rediscovered by

126
00:09:31.150 --> 00:09:34.690 
another scientist here Joseph
Black in seventeen fifty.

127
00:09:35.600 --> 00:09:39.580 
Interesting fact but how should
we now exactly model that with

128
00:09:39.580 --> 00:09:44.700 
the help of rdf? If we do it in
the way like we used to do it

129
00:09:44.700 --> 00:09:48.210 
right now you see here that graph
and in that graph the problem

130
00:09:48.210 --> 00:09:50.290 
that you see here,
you have no idea

131
00:09:50.980 --> 00:09:56.290 
which discovery date is associated
with which discoverer. So

132
00:09:56.630 --> 00:10:00.000 
all of them there are equal. You have
no idea how to associate them.

133
00:10:00.950 --> 00:10:05.770 
So this kind of this problem of unique
association it is not solvable

134
00:10:05.980 --> 00:10:08.600 
with plain rdf
in that way.

135
00:10:09.490 --> 00:10:14.500 
So what you have to do here is of
course this is a playground for

136
00:10:14.810 --> 00:10:18.240 
blank nodes. You already have heard
of blank nodes and here this

137
00:10:18.240 --> 00:10:22.100 
is a specific purpose how to make
use of these kind of blank nodes.

138
00:10:22.650 --> 00:10:26.700 
So you could model the fact we want
to model here in the following

139
00:10:26.700 --> 00:10:31.620 
way that you say carbon dioxide is
associated with two discoveries

140
00:10:32.330 --> 00:10:38.120 
and each discovery aggregates
a specific discoverer with a

141
00:10:38.120 --> 00:10:44.500 
specific date. So here we can say that this
Dutch person Jan Baptist van Helmont

142
00:10:44.750 --> 00:10:50.950 
has discovered carbon dioxide already
in sixteen forty while Joseph Black

143
00:10:51.160 --> 00:10:57.160 
another chemist and physicist here from
England has discovered carbon dioxide

144
00:10:57.460 --> 00:11:03.940 
in seventeen fifty. So with blank
nodes also referred to as b nodes

145
00:11:04.710 --> 00:11:09.500 
they are introduced to represent these
kind of multivalued and associated

146
00:11:09.700 --> 00:11:13.740 
relationships. However they can also
be introduced for resources that

147
00:11:13.920 --> 00:11:18.240 
don't need a specific name so
has a auxiliary node, and this

148
00:11:18.240 --> 00:11:23.540 
is exactly also the kind of use we use it
here with a special purpose of association.

149
00:11:23.740 --> 00:11:26.490 
So therefore they
came in quite handy.

150
00:11:28.770 --> 00:11:31.920 
So how do we now express
this in turtle?

151
00:11:32.540 --> 00:11:35.210 
Let's first look at
the simple part.

152
00:11:36.080 --> 00:11:38.910 
In case our blank
node is the subject

153
00:11:39.770 --> 00:11:44.520 
then we simply use one kind of
bracket that is still left, these

154
00:11:44.520 --> 00:11:47.510 
are the so called square brackets
we use here and here we have

155
00:11:47.510 --> 00:11:50.440 
a square bracket this denotes
this is a blank node. Blank nodes

156
00:11:50.440 --> 00:11:53.560 
don't have URIs, so therefore
I must indicate that this

157
00:11:53.560 --> 00:11:57.750 
is a blank node and for that
reason I use square brackets and

158
00:11:57.750 --> 00:12:01.380 
I say the square bracket thing
here has a discoverer and it

159
00:12:01.380 --> 00:12:04.180 
has been discovered
in a specific date.

160
00:12:05.220 --> 00:12:06.440 
It's as simple as that.

161
00:12:07.170 --> 00:12:11.640 
However the fact we want to represent
is a bit more complicated.

162
00:12:11.640 --> 00:12:16.000 
So here an anonymous
blank node is represented

163
00:12:16.000 --> 00:12:19.390 
as a subject simply by
these square brackets.

164
00:12:20.700 --> 00:12:25.870 
In our case carbon dioxide is
associated with a discovery which

165
00:12:25.870 --> 00:12:29.530 
means here the blank node must
be the object while the object

166
00:12:29.530 --> 00:12:33.740 
still is associated to the
discoverer and the discovery date

167
00:12:34.650 --> 00:12:40.470 
via being the subject there. So we want
to come up with this kind of nested

168
00:12:40.720 --> 00:12:44.370 
blank node structure. So this is
already a complicated example

169
00:12:44.370 --> 00:12:46.550 
and you see the turtle
encoding right here.

170
00:12:47.120 --> 00:12:52.320 
Again the front part is rather easy. Carbon
dioxide is associated with discoveries

171
00:12:52.570 --> 00:12:55.810 
and then comes the list of discoveries.
So this is an object list.

172
00:12:55.990 --> 00:12:59.000 
So this means you have
two lists that are here

173
00:12:59.890 --> 00:13:03.550 
or two elements in the list
that are here indicated in

174
00:13:03.550 --> 00:13:07.720 
the orange part as
nested anonymous blank nodes.

175
00:13:08.330 --> 00:13:13.930 
So the first one again embraced
into this square brackets because

176
00:13:13.930 --> 00:13:18.750 
now of course the blank
node is again here

177
00:13:19.530 --> 00:13:24.520 
the subject and what is associated
with that subject is then within

178
00:13:24.760 --> 00:13:27.810 
this is different to the slight
before, this is within the square

179
00:13:27.810 --> 00:13:29.280 
brackets. So
here you see

180
00:13:29.980 --> 00:13:34.840 
property an object and again
since, you know, it's referring

181
00:13:34.840 --> 00:13:38.560 
to the same subject, you have a semicolon
and you have another property

182
00:13:39.010 --> 00:13:41.580 
and another object. This
is the first one.

183
00:13:42.120 --> 00:13:46.240 
The second one you know square
brackets closed, there comes a comma

184
00:13:46.430 --> 00:13:49.860 
and then the next pair of square
brackets and inside you see

185
00:13:49.860 --> 00:13:52.660 
the next two facts associated
with the blank node

186
00:13:53.110 --> 00:13:59.280 
then being as well an object as well as
a subject of the subsequent triples.

187
00:13:59.720 --> 00:14:04.390 
And as being a subject it means
than inside the square brackets

188
00:14:04.390 --> 00:14:07.290 
you have the discoverer and
you have the discovery date.

189
00:14:08.450 --> 00:14:12.380 
So this is a complicated nested
structure with anonymous nodes.

190
00:14:14.110 --> 00:14:17.530 
And to make things even more
complicated all to make it a bit

191
00:14:17.530 --> 00:14:20.100 
easier on the other hand what
you can do in turtle is you can

192
00:14:20.100 --> 00:14:23.110 
of course assign these
anonymous nodes

193
00:14:23.870 --> 00:14:29.360 
also IDs. However per definition
we have said this already

194
00:14:29.360 --> 00:14:33.610 
this kind of blank nodes will
not be accessible from outside.

195
00:14:33.880 --> 00:14:37.560 
They are only then be
referencable from inside.

196
00:14:38.340 --> 00:14:40.890 
And if you can reference
them from inside.

197
00:14:42.300 --> 00:14:45.580 
The structure becomes much easier
as you see here. So now we

198
00:14:45.580 --> 00:14:50.750 
assign two different IDs to these nodes
now in green. So these are so called

199
00:14:50.990 --> 00:14:53.140 
the referencable
blank node

200
00:14:53.850 --> 00:14:57.710 
and keep in mind they only can
be referenced from inside a

201
00:14:57.710 --> 00:15:00.930 
document or from inside
a graph, not outside.

202
00:15:01.910 --> 00:15:05.140 
And they are now the definition
is quite easy. So first of all

203
00:15:05.150 --> 00:15:11.800 
I have here two triples where
I associate carbon

204
00:15:11.800 --> 00:15:16.130 
dioxide with two discoveries. So
and I call these discoveries

205
00:15:16.130 --> 00:15:20.620 
id one id two and since they are
blank notes they need a special

206
00:15:20.620 --> 00:15:25.350 
name space, a special prefix. This
prefix is universal in rdf

207
00:15:25.350 --> 00:15:28.970 
and its simply an underscore and
with an underscore you indicate

208
00:15:28.970 --> 00:15:32.930 
that this is a so called the
dereferencable blank node.

209
00:15:34.330 --> 00:15:37.220 
And then you make a period and
you're done after your object list.

210
00:15:37.810 --> 00:15:42.370 
Isn't it quite easy? And then the next
triples will follow so you say then

211
00:15:42.840 --> 00:15:46.180 
for the first node that you have
given the id, id one you

212
00:15:46.180 --> 00:15:49.600 
say the discoverer is Jan Baptist
van Helmont and the discovery

213
00:15:49.600 --> 00:15:53.810 
date or discovered in property
is sixteen hundred and forty.

214
00:15:54.380 --> 00:15:58.770 
That's it. So this is quite easy
and handy and sometimes it's

215
00:15:58.770 --> 00:16:03.270 
of course beneficial to give these
nodes a name and sometimes

216
00:16:03.270 --> 00:16:06.140 
of course you want to treat
this as anonymous nodes.

217
00:16:06.930 --> 00:16:11.680 
However there are also some voices which
say don't use blank nodes, always give

218
00:16:11.790 --> 00:16:18.170 
notes a proper URI but sometimes
then you also overcrowded all your data

219
00:16:18.270 --> 00:16:22.630 
with nodes that have an idea
that is never used somewhere.

220
00:16:23.440 --> 00:16:28.330 
However there are pros and cons
whatever you do, you know now

221
00:16:28.380 --> 00:16:32.640 
that you can use these kind
of anonymous blank nodes or

222
00:16:32.640 --> 00:16:37.420 
dereferencable blank nodes,
for example the representation

223
00:16:37.420 --> 00:16:41.920 
of multi-valued functions as you have
here. And for these kind of associations.

224
00:16:42.110 --> 00:16:44.580 
So this is one of the
benefits of turtle.

225
00:16:46.860 --> 00:16:52.850 
However rdf is not finished so
far, there are more complex

226
00:16:52.850 --> 00:16:56.900 
data structures in rdf available
and about these we will talk

227
00:16:56.910 --> 00:16:58.570 
in the next section
of the lecture.
