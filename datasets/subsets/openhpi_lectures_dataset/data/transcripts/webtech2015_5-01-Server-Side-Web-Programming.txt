WEBVTT

1
00:00:05.540 --> 00:00:08.350 
Last week we had introduced client-side web programming.

2
00:00:09.070 --> 00:00:11.670 
This week our topic is to introduce the

3
00:00:12.550 --> 00:00:14.050 
server-side web programming.

4
00:00:16.210 --> 00:00:20.030 
The idea, you know this already, is that the client activates

5
00:00:20.230 --> 00:00:25.730 
via the web browser, an application, a web application which is placed

6
00:00:25.950 --> 00:00:28.410 
and is performed at server-side.

7
00:00:29.570 --> 00:00:32.650 
The web browser, the HTTP server

8
00:00:34.790 --> 00:00:40.690 
is not able to run applications. But the HTTP server can initiate the execution

9
00:00:41.520 --> 00:00:44.210 
of the application placed on the server machine.

10
00:00:45.090 --> 00:00:48.290 
Then the results of the application are

11
00:00:49.010 --> 00:00:53.570 
passed to the client via see HTTP server.

12
00:00:54.580 --> 00:00:57.410 
It's passed to the web browser of the client,

13
00:00:57.810 --> 00:01:04.420 
and the client receives this as a dynamically generated html document.

14
00:01:06.010 --> 00:01:09.220 
Of course for the interaction between the http server-

15
00:01:09.760 --> 00:01:13.690 
the web server and the applications, we need an interface.

16
00:01:14.120 --> 00:01:19.160 
And there is a standardized interface and it's CGI Interface.

17
00:01:23.270 --> 00:01:27.960 
Web applications at the server side can be written in any programming language,

18
00:01:28.210 --> 00:01:34.620 
for example, java, then we have Serviets, Server Pages, Beans. It

19
00:01:34.620 --> 00:01:40.170 
can be written in scripting languages- ASP, PHP, Perl, Python

20
00:01:41.270 --> 00:01:48.520 
Ruby. And today often web frameworks are used for example Ruby on Rails,

21
00:01:48.730 --> 00:01:52.190 
Spring or Django, which provide a tool set

22
00:01:52.620 --> 00:01:55.080 
to design such web application.

23
00:01:56.980 --> 00:01:58.520 
Let's have a closer look to the

24
00:01:59.300 --> 00:02:00.420 
CGI Interface-

25
00:02:02.030 --> 00:02:04.160 
The Common Gateway Interface.

26
00:02:05.370 --> 00:02:10.470 
The http server provides a standard interface for server-side programs that

27
00:02:10.590 --> 00:02:15.040 
enables the dynamic generation of the html documents-

28
00:02:15.840 --> 00:02:18.090 
the common gateway interface.

29
00:02:18.800 --> 00:02:22.320 
We have our browser. Behind the browser there is a user.

30
00:02:22.870 --> 00:02:25.260 
Then we have the web server.

31
00:02:26.350 --> 00:02:29.480 
In fact, it's an http server, because the client

32
00:02:29.970 --> 00:02:35.130 
communicates with the server, with the http protocol and then

33
00:02:35.380 --> 00:02:38.960 
server machine there's the web application and the interface

34
00:02:38.960 --> 00:02:42.990 
between the web server and the web application is provided

35
00:02:42.990 --> 00:02:47.510 
by the common gateway interface by CGI Interface.

36
00:02:47.990 --> 00:02:51.650 
So here the browser sends the request to the web server.

37
00:02:52.230 --> 00:02:56.990 
The server forwards this to the application. We will see it in

38
00:02:56.990 --> 00:02:58.660 
more detail. It forwards the

39
00:02:59.690 --> 00:03:05.390 
parameters that it's needed for the application to start to work.

40
00:03:05.710 --> 00:03:11.110 
Then the application creates the- dynamically creates the html document

41
00:03:11.490 --> 00:03:17.190 
and the html document, the dynamic generated html document is

42
00:03:17.820 --> 00:03:21.060 
handed over to the web server and the

43
00:03:23.130 --> 00:03:28.770 
output, it's for the browser and then the user sees the dynamically

44
00:03:29.120 --> 00:03:34.030 
generated content, here for example, someone with a search machine which shows

45
00:03:34.360 --> 00:03:37.160 
different types of cats. So this is the CGI

46
00:03:39.180 --> 00:03:44.430 
interface, the standardized interface for the communication

47
00:03:44.690 --> 00:03:47.410 
between the web server and the web application.

48
00:03:49.240 --> 00:03:56.360 
The http server controls the web application by passing parameters.

49
00:03:58.410 --> 00:04:04.070 
To give an example is a completion to submission of an html form.

50
00:04:04.640 --> 00:04:05.950 
Here for example, the

51
00:04:06.670 --> 00:04:12.320 
browser shows to the client a form. A form to order a pizza.

52
00:04:12.780 --> 00:04:16.420 
The pizza service has to give its name, it has to give its address,

53
00:04:16.770 --> 00:04:21.160 
and he has to describe what kind of pizza

54
00:04:22.450 --> 00:04:26.610 
he likes. This form here is in the

55
00:04:27.440 --> 00:04:33.000 
programming way that we see. Here are the information

56
00:04:33.000 --> 00:04:35.820 
that the juice and pizza toppings, that's mozarella.

57
00:04:38.740 --> 00:04:40.630 
And this is one of the parameters

58
00:04:41.270 --> 00:04:44.060 
of this form. And now when the

59
00:04:45.430 --> 00:04:48.860 
client requests this pizza,

60
00:04:49.470 --> 00:04:55.100 
the parameters are transformed via the webserver to the application.

61
00:04:55.690 --> 00:05:01.050 
And this transformation of the parameters, there are different ways.

62
00:05:01.760 --> 00:05:04.890 
For example by means of the GET method.

63
00:05:05.610 --> 00:05:10.500 
The GET- here is the form data is appended to the URL.

64
00:05:11.610 --> 00:05:15.830 
It is specified in the action attribute. There is a

65
00:05:16.250 --> 00:05:21.850 
question mark, which shows what it describes the URL. And when the

66
00:05:22.170 --> 00:05:28.690 
as parameters are coming, and behind this question mark as key-value pairs

67
00:05:29.640 --> 00:05:33.810 
are transported. So in our case, in our example here with the pizza

68
00:05:34.030 --> 00:05:39.880 
service behind the question mark, then there is a transmitted

69
00:05:40.870 --> 00:05:46.120 
parameter which tells what kind of topping the client has selected,

70
00:05:47.020 --> 00:05:51.310 
what was the name and then address and other parameters are handed over

71
00:05:51.670 --> 00:05:53.130 
to the pizza service.

72
00:05:54.620 --> 00:05:58.690 
The http server receives this data by means of the form

73
00:05:59.140 --> 00:06:02.100 
from the client and then it transfers

74
00:06:02.840 --> 00:06:09.970 
the data to the CGI program which is invoked over the corresponding URL

75
00:06:10.840 --> 00:06:14.500 
in the environment variable query string.

76
00:06:15.790 --> 00:06:19.020 
Another method to transform this parameter

77
00:06:20.550 --> 00:06:29.150 
application to the web application is used when the Post Method is applied.

78
00:06:29.630 --> 00:06:37.530 
Here the http request to the URL in the action attribute is initiated

79
00:06:38.060 --> 00:06:39.530 
and the data as a parameter,

80
00:06:40.300 --> 00:06:46.410 
form data are transformed in the body of the http request.

81
00:06:47.790 --> 00:06:52.990 
So the body of the http request is passed to the CGI program

82
00:06:53.160 --> 00:06:55.280 
which is invoked by calling the given URL

83
00:06:55.970 --> 00:07:01.050 
via the standard input. So in case of using the GET method, there is

84
00:07:01.280 --> 00:07:07.690 
a transport of the parameter within the URL. Here in case of

85
00:07:08.070 --> 00:07:13.540 
using the post method, the data parameters are handed over in the body

86
00:07:14.110 --> 00:07:14.860 
of the request.

87
00:07:16.750 --> 00:07:21.670 
There are environment variables of the http server,

88
00:07:22.680 --> 00:07:25.510 
which are used to call

89
00:07:26.150 --> 00:07:32.740 
a CGI program, for example, content length, server name, request method.

90
00:07:33.050 --> 00:07:38.020 
These are such environment variables. Other ones are Path info,

91
00:07:38.020 --> 00:07:43.820 
script name, query string, and by this means, the server

92
00:07:44.260 --> 00:07:47.230 
can tell the application

93
00:07:48.010 --> 00:07:54.950 
what it expects to do. So CGI can access and evaluate the environment variables

94
00:07:55.120 --> 00:07:59.140 
and in this way control the web application.

95
00:08:00.310 --> 00:08:07.020 
For example to display the port number in the different scripting languages.

96
00:08:07.160 --> 00:08:10.770 
So if the application is written in different script languages,

97
00:08:11.200 --> 00:08:16.270 
then there are different ways to display the port number for

98
00:08:16.270 --> 00:08:17.770 
example in case of Perl,

99
00:08:18.390 --> 00:08:24.580 
it's realized by means of print server port and then here the

100
00:08:25.180 --> 00:08:29.300 
environment variables are printed. In case of Ruby,

101
00:08:29.760 --> 00:08:33.330 
the corresponding comment means a

102
00:08:35.180 --> 00:08:41.630 
style server port and then request. And

103
00:08:41.630 --> 00:08:46.690 
here is the environmental variable in case of PHP. Here we see

104
00:08:46.990 --> 00:08:53.720 
by means of the echo command here, the corresponding environment variables that

105
00:08:54.140 --> 00:08:56.440 
ask to displayyed,

106
00:08:57.240 --> 00:08:58.700 
transferred and handed.

107
00:09:01.030 --> 00:09:05.130 
CGI can access the data sent by the client via GET or

108
00:09:05.670 --> 00:09:08.810 
via Port. I described this on the

109
00:09:09.480 --> 00:09:13.270 
slide before. Here for example in the case

110
00:09:13.740 --> 00:09:19.730 
in our example case in case of PHP, there is a print and here it

111
00:09:20.610 --> 00:09:23.810 
tells the POST method that's used and then CGI

112
00:09:24.530 --> 00:09:28.580 
knows exactly where it gets the data from.

113
00:09:32.780 --> 00:09:38.940 
Lets consider how the parameters are handover with the GET,

114
00:09:38.950 --> 00:09:44.810 
in case of use of the GET method. We have our browser, we have our web server

115
00:09:45.080 --> 00:09:47.120 
and here is the example application.

116
00:09:48.580 --> 00:09:50.090 
The client

117
00:09:51.650 --> 00:09:58.920 
inputs the parameter by means of an html form. Here for example field one

118
00:09:59.130 --> 00:10:04.790 
action, it's the application that needs to be done. The method

119
00:10:04.790 --> 00:10:09.930 
that's used to transport the parameter is the GET method.

120
00:10:11.320 --> 00:10:13.940 
You remember, in case of GET, the

121
00:10:14.740 --> 00:10:18.550 
information here, the field test

122
00:10:19.520 --> 00:10:24.160 
information is given into the URL behind the question mark. This is

123
00:10:24.470 --> 00:10:29.880 
sent as a request to the web server. The server sees

124
00:10:30.290 --> 00:10:35.860 
ok, it has to act a way to see example application and

125
00:10:36.300 --> 00:10:42.790 
he knows what is the data to transfered. So in the environment variable,

126
00:10:43.100 --> 00:10:49.360 
query string, the field equal test data are transferred to the application.

127
00:10:49.720 --> 00:10:53.420 
Then application can read this parameter, can

128
00:10:54.260 --> 00:10:56.360 
read this parameter from the environmental

129
00:10:57.220 --> 00:11:03.050 
variable and then it can start to produce the

130
00:11:03.270 --> 00:11:08.390 
output, which is sent via the web server back to the browser.

131
00:11:10.370 --> 00:11:13.250 
Now let's have a look to the

132
00:11:14.540 --> 00:11:19.890 
same question how to handover the parameters, but in this case

133
00:11:20.030 --> 00:11:24.130 
with the post method. Also here the browser has collected the

134
00:11:24.130 --> 00:11:28.960 
data as a parameters from the client by means of a form.

135
00:11:29.380 --> 00:11:36.420 
And now the post method is used. Here all the information, it's a test field.

136
00:11:36.800 --> 00:11:43.190 
The action is our example application and the method for transporting the data

137
00:11:44.000 --> 00:11:50.470 
is the post method. So here in the post method,

138
00:11:50.930 --> 00:11:57.170 
the parameter are sent inside body of the

139
00:11:58.820 --> 00:12:03.650 
request. So web server sees that it's a post

140
00:12:04.770 --> 00:12:11.330 
method, post is used. He sees the variable and he knows that it has to

141
00:12:11.540 --> 00:12:14.300 
start, it has to activate the example application,

142
00:12:14.970 --> 00:12:22.320 
and it has to start the example application with the data input field equal

143
00:12:23.430 --> 00:12:26.430 
to test. And then the

144
00:12:28.370 --> 00:12:33.630 
application gets this parameter and starts the computation,

145
00:12:34.050 --> 00:12:38.770 
which is requested by the client produce the HTPP

146
00:12:42.090 --> 00:12:47.430 
as the html document dynamically hands it over to the

147
00:12:47.430 --> 00:12:52.510 
web server and then the web server sends it back to the browser.

148
00:12:54.100 --> 00:12:57.030 
If we look to the historic development of such

149
00:12:58.530 --> 00:13:03.670 
CGI interface, then we have to mention that CGI

150
00:13:04.410 --> 00:13:09.340 
was initially only a runtime environment of

151
00:13:10.160 --> 00:13:15.280 
the web server for external programs, for example C and C++ programs.

152
00:13:16.320 --> 00:13:20.290 
Then later the scripts became

153
00:13:21.300 --> 00:13:24.470 
fashion. So later use of Peri scripts

154
00:13:25.180 --> 00:13:26.620 
and the activation via

155
00:13:27.310 --> 00:13:28.340 
command line in the interpreter

156
00:13:30.360 --> 00:13:33.610 
was used and then for fast execution,

157
00:13:34.220 --> 00:13:39.890 
the development of script interpreters as models in the web server

158
00:13:40.370 --> 00:13:45.390 
were driven. For example in the Apache server, there is

159
00:13:46.590 --> 00:13:53.360 
an interpreter for perl, for patton for php, which are modules, which

160
00:13:54.890 --> 00:13:59.480 
make it possible that Apache server is able to

161
00:13:59.940 --> 00:14:03.400 
handle all the applications written in perl,

162
00:14:04.660 --> 00:14:09.430 
python or php. If we look to the another important server, to

163
00:14:09.430 --> 00:14:10.990 
the Internet Information Server, then

164
00:14:11.940 --> 00:14:19.150 
there is ASP 3.0, and later ASP.NET are the interpreters for the script languages.

165
00:14:20.510 --> 00:14:25.840 
In Parallel as there was a launch of java application servers.

166
00:14:27.230 --> 00:14:32.040 
But today besides the interpreter modules, also new

167
00:14:32.450 --> 00:14:35.440 
CGI standards appeared. For example

168
00:14:36.670 --> 00:14:43.920 
FastCGI, SCGI which are simplified in how thery start application, how

169
00:14:43.920 --> 00:14:48.970 
is a handle application or for dealing with scripts written in python.

170
00:14:49.160 --> 00:14:56.310 
In python the WSGI interface was developed.

171
00:14:58.500 --> 00:15:01.620 
Let's have a closer look to the server-side scripting languages

172
00:15:01.810 --> 00:15:05.440 
which are used to design such web application.

173
00:15:06.440 --> 00:15:08.500 
Given that the corresponding

174
00:15:09.270 --> 00:15:14.030 
language module is installed on the server otherwise the server cannot deal

175
00:15:14.600 --> 00:15:21.340 
with the application. Then the code can be integrated directly

176
00:15:22.240 --> 00:15:28.560 
into html by using special text. For example,

177
00:15:29.020 --> 00:15:32.350 
here for PHP is a special text are these.

178
00:15:34.240 --> 00:15:36.350 
For Ruby, a special text are that.

179
00:15:37.240 --> 00:15:38.630 
And then the server

180
00:15:39.850 --> 00:15:42.900 
having such language module

181
00:15:43.830 --> 00:15:51.690 
installed can understand now that some php script and can start to start a

182
00:15:52.070 --> 00:15:54.050 
script for doing its work.

183
00:15:55.030 --> 00:15:58.350 
If there is no module installed at the server,

184
00:15:58.760 --> 00:16:02.140 
then the source code is not executed.

185
00:16:02.770 --> 00:16:09.770 
But it is shown to the user as it is. So in this way the user can see

186
00:16:10.730 --> 00:16:13.880 
what is the idea behind and is warned that

187
00:16:14.370 --> 00:16:19.940 
he does not get the dynamically generated web page back, but he sees

188
00:16:20.100 --> 00:16:24.680 
the script. What is the advantage? The advantage is that

189
00:16:25.410 --> 00:16:29.630 
there is it's possible to have a fast development

190
00:16:30.430 --> 00:16:37.660 
through direct manipulation of the html, of the CSS, of the javascript elements

191
00:16:38.240 --> 00:16:41.970 
and the disadvantage is that the display

192
00:16:42.480 --> 00:16:46.210 
and the application logic are mixed. And you remember,

193
00:16:47.060 --> 00:16:53.960 
for clarity typically we proposed

194
00:16:55.550 --> 00:16:59.380 
to separate this different aspects of an application.
