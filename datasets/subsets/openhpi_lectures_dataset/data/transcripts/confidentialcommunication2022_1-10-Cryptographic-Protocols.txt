WEBVTT

1
00:00:00.690 --> 00:00:05.010 
In our course "Confidential
Communication in the Internet"

2
00:00:05.010 --> 00:00:09.030 
now we have a closer look to
cryptographic protocols.

3
00:00:09.630 --> 00:00:15.720 
So if a cryptographic protocol is defined
as an established sequence of actions

4
00:00:16.310 --> 00:00:20.250 
for two or more participants
in the communication process

5
00:00:20.710 --> 00:00:27.840 
to ensure one or more security goals.
For example, what need to be done

6
00:00:28.150 --> 00:00:32.980 
to secure the confidentiality
of a message or what needs to

7
00:00:32.980 --> 00:00:35.090 
be done to ensuring
the integrity.

8
00:00:35.710 --> 00:00:39.870 
And we already discussed
a different such

9
00:00:40.910 --> 00:00:43.360 
a cryptographic
protocol without

10
00:00:44.010 --> 00:00:48.170 
explicitly calling it a protocol.
So for example we discussed

11
00:00:49.040 --> 00:00:52.170 
already in other
clips encryption.

12
00:00:53.700 --> 00:00:57.410 
So the encryption protocols, cryptographic
protocol for encryption

13
00:00:57.850 --> 00:01:03.190 
is to ensure the confidentiality
of information to prevent

14
00:01:03.190 --> 00:01:06.850 
spying on secrets,
for example when the

15
00:01:07.500 --> 00:01:13.210 
message is sent over the internet. So
we have see a different services

16
00:01:13.530 --> 00:01:18.080 
and we have to encrypt all the
communication so that we can send

17
00:01:18.260 --> 00:01:22.880 
messages in such a way between
the different partners, between

18
00:01:22.880 --> 00:01:27.370 
the service and the user,
between users in a way that

19
00:01:28.270 --> 00:01:31.260 
while moving through the
internet they cannot be

20
00:01:31.850 --> 00:01:33.820 
recognized, they
cannot be

21
00:01:34.480 --> 00:01:39.720 
understood. So when we discuss
cryptographic protocols for encryption

22
00:01:40.260 --> 00:01:47.130 
then as a prior as a preliminary
remark, I have to remind you

23
00:01:47.340 --> 00:01:52.880 
that we have two types of procedures
encryption procedures for encryption.

24
00:01:53.190 --> 00:01:55.430 
The symmetric and
the asymmetric one.

25
00:01:56.240 --> 00:02:01.820 
So as a general problem with the
symmetric procedures is that

26
00:02:02.120 --> 00:02:07.710 
it is difficult or very difficult to
guarantee a secure key exchange.

27
00:02:08.620 --> 00:02:13.930 
Both partners and if they are
communicating over the internet,

28
00:02:13.940 --> 00:02:19.540 
they eventually never met, both
partners have to use the same key

29
00:02:19.780 --> 00:02:22.910 
for encryption and
for decryption.

30
00:02:24.010 --> 00:02:29.170 
So the general problem with the asymmetric
procedures on the other side is

31
00:02:29.780 --> 00:02:35.730 
that the key
problem is not existing.

32
00:02:36.370 --> 00:02:40.160 
So the passing of a public
key, everyone can see this key.

33
00:02:40.300 --> 00:02:45.620 
But the problem here is that the
computation of automatic methods

34
00:02:46.090 --> 00:02:52.220 
is it needs enormous computing
time and computing resources.

35
00:02:52.950 --> 00:03:00.480 
So it could be only applied for small
data volumes and for that reason

36
00:03:01.670 --> 00:03:06.770 
there was an
idea that was proved

37
00:03:08.100 --> 00:03:15.270 
very applicable in the internet. That is the
idea of hybrid encryption processes

38
00:03:16.010 --> 00:03:20.580 
and the idea here is that the
assymetric procedure is used

39
00:03:20.700 --> 00:03:25.490 
for the key exchange problem. So
a session key is exchanged

40
00:03:25.500 --> 00:03:29.920 
by the two communication partners
and it is asymmetrically

41
00:03:29.920 --> 00:03:34.940 
encrypted and forwarded to the participant,
to the other communication partner

42
00:03:35.300 --> 00:03:38.870 
and then if both have
the same session key

43
00:03:40.810 --> 00:03:47.780 
the content, the message itself is
a a encrypted with a symmetric procedure.

44
00:03:48.180 --> 00:03:55.010 
So hybrid asymmetric procedure is
applied to the relatively short keys

45
00:03:55.840 --> 00:04:01.950 
and symmetric procedure is then later
on applied to the long messages.

46
00:04:04.630 --> 00:04:09.790 
Another cryptographic protocol is a cryptographic
protocol for digital signatures.

47
00:04:10.580 --> 00:04:16.520 
So digital signatures are cryptographic
protocols that ensure the

48
00:04:17.190 --> 00:04:19.410 
security of the
identity of the author.

49
00:04:20.070 --> 00:04:25.410 
And they ensure the integrity of the
content. So with digital signatures

50
00:04:25.810 --> 00:04:29.150 
we can prove that the message really
comes from a certain person

51
00:04:29.440 --> 00:04:34.700 
and we can prove that the message
was not falsified, was not

52
00:04:34.700 --> 00:04:39.350 
manipulated, was not changed when
transported over the internet.

53
00:04:41.020 --> 00:04:45.010 
So no manipulation is
possible neither of the sender

54
00:04:46.560 --> 00:04:53.210 
nor of the content. How does it work,
this protocol, this digital signature?

55
00:04:54.060 --> 00:04:55.300 
So there is a message M

56
00:04:55.990 --> 00:05:00.290 
and from this message M, the
hash value is created.

57
00:05:00.900 --> 00:05:04.850 
So this is a short
fingerprint of this message

58
00:05:05.320 --> 00:05:10.850 
and then this short fingerprint,
the hash value is encrypted

59
00:05:11.150 --> 00:05:15.040 
with a private key
and an asymmetric

60
00:05:15.810 --> 00:05:22.570 
procedure by the signee. The signee
who signs the message use his

61
00:05:22.710 --> 00:05:29.790 
or her private key to encrypt this hash
value and this is called the signature.

62
00:05:30.540 --> 00:05:36.150 
After having digitally designed
the message, Bob sends the message

63
00:05:36.610 --> 00:05:40.310 
together with the digital
signature to Alice.

64
00:05:40.810 --> 00:05:45.760 
Now Alice can verify what's
happened. She received the message

65
00:05:45.770 --> 00:05:49.010 
originally it was M, eventually
it was manipulated

66
00:05:49.610 --> 00:05:54.940 
while travelling through the
internet. And Alice obtains the

67
00:05:54.940 --> 00:06:01.170 
signature and the signature this was the
hash value of the original message M

68
00:06:01.740 --> 00:06:05.060 
which was encrypted with
the private key of Bob.

69
00:06:05.650 --> 00:06:11.590 
So Alice now takes the message she
received, computes the hash value

70
00:06:11.990 --> 00:06:15.170 
from this and gets
the hash value

71
00:06:16.360 --> 00:06:22.550 
for this received message and then
she decrypts the hash value,

72
00:06:22.550 --> 00:06:26.820 
the digital signature by
using Bob's public key

73
00:06:27.390 --> 00:06:34.120 
and then she receives the hash
value of the original message M.

74
00:06:34.510 --> 00:06:38.740 
And now it's easy to check
whether the received message

75
00:06:39.320 --> 00:06:46.110 
agrees exactly with the message,
the original message. If

76
00:06:46.390 --> 00:06:49.860 
the computed hash value
on side of Alice

77
00:06:51.230 --> 00:06:55.090 
agrees with the hash value that
was computed on the side of Bob,

78
00:06:55.570 --> 00:07:02.190 
then both messages are the same. That
is clear the message comes from Bob,

79
00:07:02.420 --> 00:07:07.880 
while the public key for Bob was working
and it is really the message M

80
00:07:08.100 --> 00:07:13.790 
because it was not manipulated on the
traveling on the way through the internet

81
00:07:13.990 --> 00:07:17.320 
because the hash values
agree. Here you see

82
00:07:17.870 --> 00:07:20.900 
why it's so important for the
cryptographic hash functions

83
00:07:21.380 --> 00:07:28.030 
that they do not allow to find for a
given hash value another message

84
00:07:28.170 --> 00:07:31.680 
with the same hash value.
So these are two

85
00:07:32.470 --> 00:07:36.970 
cryptographic protocols which
are very important and often

86
00:07:37.250 --> 00:07:43.090 
applied in the internet protocol which
guarantees the confidentiality

87
00:07:43.090 --> 00:07:46.810 
of the message, the encryption
protocol and the

88
00:07:47.660 --> 00:07:52.560 
protocol of the digital signatures
which prove the originality

89
00:07:53.210 --> 00:07:57.500 
of the message and the
integrity of the sender.
